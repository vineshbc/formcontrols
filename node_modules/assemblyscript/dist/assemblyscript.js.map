{"version":3,"sources":["webpack://assemblyscript/webpack/universalModuleDefinition","webpack://assemblyscript/webpack/bootstrap","webpack://assemblyscript/./src/common.ts","webpack://assemblyscript/./src/util/index.ts","webpack://assemblyscript/./src/diagnostics.ts","webpack://assemblyscript/./src/ast.ts","webpack://assemblyscript/./src/program.ts","webpack://assemblyscript/./src/module.ts","webpack://assemblyscript/./src/types.ts","webpack://assemblyscript/./src/tokenizer.ts","webpack://assemblyscript/(webpack)/buildin/global.js","webpack://assemblyscript/./src/resolver.ts","webpack://assemblyscript/./src/flow.ts","webpack://assemblyscript/./src/compiler.ts","webpack://assemblyscript/./src/diagnosticMessages.generated.ts","webpack://assemblyscript/./src/builtins.ts","webpack://assemblyscript/./src/decompiler.ts","webpack://assemblyscript/./src/definitions.ts","webpack://assemblyscript/./src/parser.ts","webpack://assemblyscript/./src/glue/js/index.ts","webpack://assemblyscript/./src/glue/js/binaryen.js","webpack://assemblyscript/external \"binaryen\"","webpack://assemblyscript/./std/portable/index.js","webpack://assemblyscript/./src/glue/js/float.js","webpack://assemblyscript/./src/glue/js/i64.js","webpack://assemblyscript/./node_modules/long/src/long.js","webpack://assemblyscript/./std/assembly/shared/feature.ts","webpack://assemblyscript/./std/assembly/shared/target.ts","webpack://assemblyscript/./std/assembly/shared/typeinfo.ts","webpack://assemblyscript/./src/index.ts","webpack://assemblyscript/./src/util/bitset.ts","webpack://assemblyscript/./src/util/charcode.ts","webpack://assemblyscript/./src/util/collections.ts","webpack://assemblyscript/./src/util/path.ts","webpack://assemblyscript/./src/util/text.ts","webpack://assemblyscript/./src/util/binary.ts"],"names":["root","factory","exports","module","require","define","amd","self","this","__WEBPACK_EXTERNAL_MODULE__20__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","CommonFlags","PATH_DELIMITER","PARENT_SUBST","GETTER_PREFIX","SETTER_PREFIX","INSTANCE_DELIMITER","STATIC_DELIMITER","INNER_DELIMITER","LIBRARY_SUBST","LIBRARY_PREFIX","INDEX_SUFFIX","CommonSymbols","EMPTY","i8","i16","i32","i64","isize","u8","u16","u32","u64","usize","bool","f32","f64","v128","anyref","i8x16","u8x16","i16x8","u16x8","i32x4","u32x4","i64x2","u64x2","f32x4","f64x2","void_","number","boolean","string","native","indexof","valueof","returnof","null_","true_","false_","this_","super_","constructor","ASC_TARGET","ASC_NO_TREESHAKING","ASC_NO_ASSERT","ASC_MEMORY_BASE","ASC_OPTIMIZE_LEVEL","ASC_SHRINK_LEVEL","ASC_FEATURE_SIGN_EXTENSION","ASC_FEATURE_MUTABLE_GLOBALS","ASC_FEATURE_NONTRAPPING_F2I","ASC_FEATURE_BULK_MEMORY","ASC_FEATURE_SIMD","ASC_FEATURE_THREADS","ASC_FEATURE_EXCEPTION_HANDLING","ASC_FEATURE_TAIL_CALLS","ASC_FEATURE_REFERENCE_TYPES","I8","I16","I32","I64","Isize","U8","U16","U32","U64","Usize","Bool","F32","F64","V128","Anyref","String","Array","FixedArray","Set","Map","ArrayBufferView","ArrayBuffer","Math","Mathf","Int8Array","Int16Array","Int32Array","Int64Array","Uint8Array","Uint8ClampedArray","Uint16Array","Uint32Array","Uint64Array","Float32Array","Float64Array","abort","pow","mod","alloc","realloc","free","retain","release","collect","typeinfo","instanceof_","visit","allocArray","Feature","featureToString","Target","Typeinfo","TypeinfoFlags","x","DiagnosticCategory","diagnosticCategoryToString","category","INFO","WARNING","ERROR","assert","diagnosticCategoryToColor","COLOR_BLUE","COLOR_YELLOW","COLOR_RED","DiagnosticCode","diagnosticCodeToString","COLOR_RESET","DiagnosticMessage","code","message","range","relatedRange","arg0","arg1","arg2","replace","toString","source","normalizedPath","line","column","formatDiagnosticContext","useColors","text","len","length","start","end","isLineBreak","charCodeAt","sb","substring","push","join","showContext","diagnostics","withRange","emitDiagnostic","Token","Range","NodeKind","DecoratorKind","LiteralKind","SourceKind","kind","LITERAL","NULL","TRUE","FALSE","IDENTIFIER","ASSERTION","CALL","ELEMENTACCESS","PARENTHESIZED","PROPERTYACCESS","SUPER","Node","typeName","TypeName","identifier","next","createTypeName","createIdentifierExpression","typeArguments","isNullable","type","NamedTypeNode","parameters","returnType","explicitThisType","FunctionTypeNode","createNamedType","createSimpleTypeName","extendsType","defaultType","elem","TypeParameterNode","initializer","ParameterNode","parameterKind","args","stmt","DecoratorNode","arguments","decoratorKind","fromNode","node","CommentNode","commentKind","isQuoted","expr","IdentifierExpression","symbol","elements","ArrayLiteralExpression","elementExpressions","assertionKind","expression","toType","AssertionExpression","operator","left","right","BinaryExpression","typeArgs","CallExpression","declaration","ClassExpression","expressions","CommaExpression","ConstructorExpression","element","ElementAccessExpression","elementExpression","FalseExpression","FloatLiteralExpression","FunctionExpression","isType","InstanceOfExpression","IntegerLiteralExpression","NewExpression","NullExpression","names","values","ObjectLiteralExpression","ParenthesizedExpression","PropertyAccessExpression","pattern","flags","RegexpLiteralExpression","patternFlags","condition","ifThen","ifElse","TernaryExpression","StringLiteralExpression","SuperExpression","ThisExpression","TrueExpression","operand","UnaryPostfixExpression","UnaryPrefixExpression","statements","BlockStatement","label","BreakStatement","typeParameters","implementsTypes","members","decorators","ClassDeclaration","ContinueStatement","statement","DoStatement","EmptyStatement","EnumDeclaration","EnumValueDeclaration","path","isDeclare","ExportStatement","normalizePath","startsWith","resolvePath","internalPath","mangleInternalPath","ExportDefaultStatement","externalName","ExportImportStatement","ExportMember","localName","exportedName","ExpressionStatement","ifTrue","ifFalse","IfStatement","decls","ImportStatement","declarations","namespaceName","foreignName","ImportDeclaration","InterfaceDeclaration","FieldDeclaration","incrementor","ForStatement","signature","body","arrowKind","FunctionDeclaration","keyType","valueType","IndexSignatureDeclaration","MethodDeclaration","NamespaceDeclaration","ReturnStatement","cases","SwitchStatement","SwitchCase","ThrowStatement","catchVariable","catchStatements","finallyStatements","TryStatement","alias","TypeDeclaration","VariableStatement","VariableDeclaration","VoidStatement","WhileStatement","TypeNode","typeParameterNodes","NAMEDTYPE","typeArgumentNodes","k","hasGenericComponent","FUNCTIONTYPE","parameterNodes","TYPENAME","TYPEPARAMETER","ParameterKind","PARAMETER","implicitFieldDeclaration","NONE","flag","nameNode","nameStr","BUILTIN","EXTERNAL","GLOBAL","INLINE","LAZY","OPERATOR","SEALED","UNMANAGED","UNSAFE","propStr","OPERATOR_BINARY","OPERATOR_PREFIX","OPERATOR_POSTFIX","CUSTOM","DECORATOR","CommentKind","COMMENT","Expression","literalKind","FLOAT","INTEGER","LiteralExpression","ARRAY","AssertionKind","BINARY","numTypeArguments","numArguments","CLASS","COMMA","CONSTRUCTOR","FUNCTION","INSTANCEOF","NEW","OBJECT","REGEXP","TERNARY","STRING","THIS","UnaryExpression","UNARYPOSTFIX","UNARYPREFIX","Statement","super","SOURCE","parent","tokenizer","debugInfoIndex","exportPaths","sourceKind","pos","lastIndexOf","simplePath","LIBRARY","LIBRARY_ENTRY","DeclarationStatement","INDEXSIGNATUREDECLARATION","VariableLikeDeclarationStatement","BLOCK","BREAK","CLASSDECLARATION","CONTINUE","DO","ENUMDECLARATION","ENUMVALUEDECLARATION","EXPORTIMPORT","EXPORTMEMBER","EXPORT","EXPORTDEFAULT","EXPRESSION","FIELDDECLARATION","parameterIndex","FOR","ArrowKind","FUNCTIONDECLARATION","createFunctionDeclaration","IF","IMPORTDECLARATION","IMPORT","INTERFACEDECLARATION","METHODDECLARATION","NAMESPACEDECLARATION","RETURN","SWITCHCASE","SWITCH","THROW","TRY","TYPEDECLARATION","VARIABLEDECLARATION","VARIABLE","VOID","WHILE","endsWith","decorator","QueuedImport","localFile","localIdentifier","foreignIdentifier","foreignPath","foreignPathAlt","QueuedExport","QueuedExportStar","pathLiteral","OperatorKind","ElementKind","DecoratorFlags","fromDecorator","arg","INDEXED_GET","INDEXED_SET","UNCHECKED_INDEXED_GET","UNCHECKED_INDEXED_SET","ADD","SUB","MUL","POW","DIV","REM","BITWISE_AND","BITWISE_OR","BITWISE_XOR","EQ","NE","GT","GE","BITWISE_SHR","BITWISE_SHR_U","LT","LE","BITWISE_SHL","PLUS","PREFIX_INC","MINUS","PREFIX_DEC","NOT","BITWISE_NOT","POSTFIX_INC","POSTFIX_DEC","INVALID","fromBinaryToken","token","PLUS_EQUALS","MINUS_EQUALS","ASTERISK","ASTERISK_EQUALS","SLASH","SLASH_EQUALS","PERCENT","PERCENT_EQUALS","ASTERISK_ASTERISK","ASTERISK_ASTERISK_EQUALS","AMPERSAND","AMPERSAND_EQUALS","BAR","BAR_EQUALS","CARET","CARET_EQUALS","LESSTHAN_LESSTHAN","LESSTHAN_LESSTHAN_EQUALS","GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_EQUALS","GREATERTHAN_GREATERTHAN_GREATERTHAN","GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS","EQUALS_EQUALS","EXCLAMATION_EQUALS","GREATERTHAN","GREATERTHAN_EQUALS","LESSTHAN","LESSTHAN_EQUALS","fromUnaryPrefixToken","EXCLAMATION","TILDE","PLUS_PLUS","MINUS_MINUS","fromUnaryPostfixToken","Program","DiagnosticEmitter","sources","diagnosticsOffset","filesByName","elementsByName","elementsByDeclaration","instancesByName","wrapperClasses","managedClasses","uniqueSignatures","nextClassId","nextSignatureId","nativeDummySignature","nativeSource","Source","nativeFile","File","set","internalName","resolver","Resolver","buffer","offset","classInstance","payloadSize","writeI32","id","createVariableDeclaration","createTypeDeclaration","createOmittedType","createFunctionType","createNamespaceDeclaration","decoratorFlags","Function","FunctionPrototype","makeNativeFunctionDeclaration","has","options","registerNativeType","Type","isizeType","usizeType","void","add","TypeDefinition","makeNativeTypeDeclaration","GENERIC","hasFeature","registerConstantInteger","i64_new","isWasm64","WASM64","WASM32","noAssert","memoryBase","optimizeLevelHint","shrinkLevelHint","queuedImports","queuedExports","queuedExportsStar","queuedExtends","queuedImplements","file","j","initializeExports","initializeExportDefault","initializeImports","initializeVariables","initializeClass","initializeEnum","initializeFunction","initializeInterface","initializeNamespace","initializeTypeDefinition","exportsStar","exportStar","foreignFile","lookupForeignFile","ensureExportStar","error","File_0_not_found","queuedImport","lookupForeign","Module_0_has_no_exported_member_1","asImportedNamespace","exportName","queuedExport","ensureExport","lookupInSelf","globalElement","lookupGlobal","DeclaredElement","arrayBufferInstance","requireClass","stringInstance","arrayBufferViewInstance","registerWrapperClass","i8ArrayPrototype","CLASS_PROTOTYPE","i16ArrayPrototype","i32ArrayPrototype","i64ArrayPrototype","u8ArrayPrototype","u8ClampedArrayPrototype","u16ArrayPrototype","u32ArrayPrototype","u64ArrayPrototype","f32ArrayPrototype","f64ArrayPrototype","thisPrototype","extendsNode","baseElement","resolveTypeName","basePrototype","hasDecorator","Class_0_is_sealed_and_cannot_be_extended","identifierNode","Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa","A_class_may_only_extend_another_class","globalAliases","firstChar","parseInt","Error","arrayPrototype","fixedArrayPrototype","setPrototype","mapPrototype","abortInstance","lookupFunction","allocInstance","requireFunction","reallocInstance","freeInstance","retainInstance","releaseInstance","collectInstance","typeinfoInstance","instanceofInstance","visitInstance","allocArrayInstance","USER_ENTRY","markModuleExport","resolved","resolveClass","FUNCTION_PROTOTYPE","resolveFunction","MODULE_EXPORT","instanceMembers","member","PROPERTY_PROTOTYPE","getterPrototype","setterPrototype","PROPERTY","FIELD","setType","className","classReference","classElement","wrappedType","is","global","Global","makeNativeVariableDeclaration","CONST","setConstantIntegerValue","setConstantFloatValue","existing","merged","tryMerge","isDeclaredElement","errorRelated","Duplicate_identifier_0","lookupExport","fileQueuedExports","acceptedFlags","fromKind","isLibrary","Decorator_0_is_not_valid_here","Duplicate_decorator","ClassPrototype","checkDecorators","numImplementsTypes","Unmanaged_classes_cannot_implement_interfaces","warning","Not_implemented","memberDeclarations","memberDeclaration","initializeField","isAny","GET","SET","initializeProperty","initializeMethod","STATIC","INTERFACE_PROTOTYPE","READONLY","ABSTRACT","FieldPrototype","addInstance","isStatic","checkOperatorOverloads","classPrototype","numArgs","firstArg","_0_is_not_a_valid_operator","overloads","overloadPrototypes","Duplicate_function_implementation","operatorKind","String_literal_expected","Expected_0_arguments_but_got_1","parentMembers","PropertyPrototype","Duplicate_property_0","ensureProperty","isGetter","Enum","initializeEnumValue","EnumValue","initializeExport","queued","Export_declaration_conflicts_with_exported_declaration_of_0","initializeImport","validDecorators","AMBIENT","INSTANCE","InterfacePrototype","original","Namespace","copyMembers","DECLARE","Element","program","shadowType","FILE","current","originalDeclaration","isBound","declaredElements","AcyclicState","typedElements","TypedElement","RESOLVED","startFunction","makeNativeFunction","Signature","isImport","ensureGlobal","includes","makeNativeNamespaceDeclaration","memberName","TYPEDEFINITION","mangleInternalName","lookup","NAMESPACE","ENUM","ConstantValueKind","VariableLikeElement","constantValueKind","constantIntegerValue","INLINED","constantFloatValue","ENUMVALUE","isImmutable","Local","index","LOCAL","instances","boundPrototypes","bound","instanceKey","instance","nameInclTypeParameters","contextualTypeArguments","localsByName","localsByIndex","additionalLocals","debugLocations","ref","functionTableIndex","trampoline","nextInlineId","nextAnonymousId","nextAutoreleaseId","tempI32s","tempI64s","tempF32s","tempF64s","tempV128s","tempAnyrefs","nextBreakId","breakStack","breakLabel","asFunction","localIndex","local","thisType","parameterTypes","parameterType","parameterName","getParameterName","flow","Flow","registerConcreteElement","locals","sourceMap","debugLocation","setDebugLocation","debugInfoRef","__s","FUNCTION_TARGET","toSignatureString","FIELD_PROTOTYPE","memoryOffset","firstDeclaration","getterInstance","setterInstance","INDEXSIGNATURE","isUnchecked","lookupOverload","_isInterface","constructorPrototype","extends","basePtototype","Class","base","INTERFACE","currentMemoryOffset","constructorInstance","indexSignature","_id","_acyclic","rttiFlags","asClass","inheritedTypeArguments","baseName","baseType","isBuiltinArray","lengthField","target","unchecked","uncheckedOverload","overload","fieldName","field","baseOffset","writeI8","writeI16","writeF32","writeF64","extendedPrototype","abvInstance","getTypeArgumentsTo","acyclic","hasCycle","cyclesTo","other","except","older","newer","Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local","src","dest","srcMembers","destMembers","isInstance","asGlobal","NativeType","ExpressionId","_BinaryenTypeNone","_BinaryenTypeInt32","_BinaryenTypeInt64","_BinaryenTypeFloat32","_BinaryenTypeFloat64","_BinaryenTypeVec128","_BinaryenTypeAnyref","_BinaryenTypeExnref","_BinaryenTypeUnreachable","_BinaryenTypeAuto","FeatureFlags","_BinaryenFeatureMVP","_BinaryenFeatureAtomics","_BinaryenFeatureMutableGlobals","_BinaryenFeatureNontrappingFPToInt","_BinaryenFeatureSIMD128","_BinaryenFeatureBulkMemory","_BinaryenFeatureSignExt","_BinaryenFeatureExceptionHandling","_BinaryenFeatureTailCall","_BinaryenFeatureReferenceTypes","_BinaryenFeatureAll","_BinaryenInvalidId","_BinaryenBlockId","_BinaryenIfId","_BinaryenLoopId","_BinaryenBreakId","_BinaryenSwitchId","_BinaryenCallId","_BinaryenCallIndirectId","_BinaryenLocalGetId","_BinaryenLocalSetId","_BinaryenGlobalGetId","_BinaryenGlobalSetId","_BinaryenLoadId","_BinaryenStoreId","_BinaryenConstId","_BinaryenUnaryId","_BinaryenBinaryId","_BinaryenSelectId","_BinaryenDropId","_BinaryenReturnId","_BinaryenHostId","_BinaryenNopId","_BinaryenUnreachableId","_BinaryenAtomicCmpxchgId","_BinaryenAtomicRMWId","_BinaryenAtomicWaitId","_BinaryenAtomicNotifyId","_BinaryenAtomicFenceId","_BinaryenSIMDExtractId","_BinaryenSIMDReplaceId","_BinaryenSIMDShuffleId","_BinaryenSIMDTernaryId","_BinaryenSIMDShiftId","_BinaryenSIMDLoadId","_BinaryenMemoryInitId","_BinaryenDataDropId","_BinaryenMemoryCopyId","_BinaryenMemoryFillId","_BinaryenTryId","_BinaryenThrowId","_BinaryenRethrowId","_BinaryenBrOnExnId","_BinaryenPushId","_BinaryenPopId","UnaryOp","_BinaryenClzInt32","_BinaryenCtzInt32","_BinaryenPopcntInt32","_BinaryenNegFloat32","_BinaryenAbsFloat32","_BinaryenCeilFloat32","_BinaryenFloorFloat32","_BinaryenTruncFloat32","_BinaryenNearestFloat32","_BinaryenSqrtFloat32","_BinaryenEqZInt32","_BinaryenClzInt64","_BinaryenCtzInt64","_BinaryenPopcntInt64","_BinaryenNegFloat64","_BinaryenAbsFloat64","_BinaryenCeilFloat64","_BinaryenFloorFloat64","_BinaryenTruncFloat64","_BinaryenNearestFloat64","_BinaryenSqrtFloat64","_BinaryenEqZInt64","_BinaryenExtendSInt32","_BinaryenExtendUInt32","_BinaryenWrapInt64","_BinaryenTruncSFloat32ToInt32","_BinaryenTruncSFloat32ToInt64","_BinaryenTruncUFloat32ToInt32","_BinaryenTruncUFloat32ToInt64","_BinaryenTruncSFloat64ToInt32","_BinaryenTruncSFloat64ToInt64","_BinaryenTruncUFloat64ToInt32","_BinaryenTruncUFloat64ToInt64","_BinaryenReinterpretFloat32","_BinaryenReinterpretFloat64","_BinaryenConvertSInt32ToFloat32","_BinaryenConvertSInt32ToFloat64","_BinaryenConvertUInt32ToFloat32","_BinaryenConvertUInt32ToFloat64","_BinaryenConvertSInt64ToFloat32","_BinaryenConvertSInt64ToFloat64","_BinaryenConvertUInt64ToFloat32","_BinaryenConvertUInt64ToFloat64","_BinaryenPromoteFloat32","_BinaryenDemoteFloat64","_BinaryenReinterpretInt32","_BinaryenReinterpretInt64","_BinaryenExtendS8Int32","_BinaryenExtendS16Int32","_BinaryenExtendS8Int64","_BinaryenExtendS16Int64","_BinaryenExtendS32Int64","_BinaryenTruncSatSFloat32ToInt32","_BinaryenTruncSatUFloat32ToInt32","_BinaryenTruncSatSFloat64ToInt32","_BinaryenTruncSatUFloat64ToInt32","_BinaryenTruncSatSFloat32ToInt64","_BinaryenTruncSatUFloat32ToInt64","_BinaryenTruncSatSFloat64ToInt64","_BinaryenTruncSatUFloat64ToInt64","_BinaryenSplatVecI8x16","_BinaryenSplatVecI16x8","_BinaryenSplatVecI32x4","_BinaryenSplatVecI64x2","_BinaryenSplatVecF32x4","_BinaryenSplatVecF64x2","_BinaryenNotVec128","_BinaryenNegVecI8x16","_BinaryenAnyTrueVecI8x16","_BinaryenAllTrueVecI8x16","_BinaryenNegVecI16x8","_BinaryenAnyTrueVecI16x8","_BinaryenAllTrueVecI16x8","_BinaryenNegVecI32x4","_BinaryenAnyTrueVecI32x4","_BinaryenAllTrueVecI32x4","_BinaryenNegVecI64x2","_BinaryenAnyTrueVecI64x2","_BinaryenAllTrueVecI64x2","_BinaryenAbsVecF32x4","_BinaryenNegVecF32x4","_BinaryenSqrtVecF32x4","_BinaryenAbsVecF64x2","_BinaryenNegVecF64x2","_BinaryenSqrtVecF64x2","_BinaryenTruncSatSVecF32x4ToVecI32x4","_BinaryenTruncSatUVecF32x4ToVecI32x4","_BinaryenTruncSatSVecF64x2ToVecI64x2","_BinaryenTruncSatUVecF64x2ToVecI64x2","_BinaryenConvertSVecI32x4ToVecF32x4","_BinaryenConvertUVecI32x4ToVecF32x4","_BinaryenConvertSVecI64x2ToVecF64x2","_BinaryenConvertUVecI64x2ToVecF64x2","_BinaryenWidenLowSVecI8x16ToVecI16x8","_BinaryenWidenLowUVecI8x16ToVecI16x8","_BinaryenWidenHighSVecI8x16ToVecI16x8","_BinaryenWidenHighUVecI8x16ToVecI16x8","_BinaryenWidenLowSVecI16x8ToVecI32x4","_BinaryenWidenLowUVecI16x8ToVecI32x4","_BinaryenWidenHighSVecI16x8ToVecI32x4","_BinaryenWidenHighUVecI16x8ToVecI32x4","BinaryOp","_BinaryenAddInt32","_BinaryenSubInt32","_BinaryenMulInt32","_BinaryenDivSInt32","_BinaryenDivUInt32","_BinaryenRemSInt32","_BinaryenRemUInt32","_BinaryenAndInt32","_BinaryenOrInt32","_BinaryenXorInt32","_BinaryenShlInt32","_BinaryenShrUInt32","_BinaryenShrSInt32","_BinaryenRotLInt32","_BinaryenRotRInt32","_BinaryenEqInt32","_BinaryenNeInt32","_BinaryenLtSInt32","_BinaryenLtUInt32","_BinaryenLeSInt32","_BinaryenLeUInt32","_BinaryenGtSInt32","_BinaryenGtUInt32","_BinaryenGeSInt32","_BinaryenGeUInt32","_BinaryenAddInt64","_BinaryenSubInt64","_BinaryenMulInt64","_BinaryenDivSInt64","_BinaryenDivUInt64","_BinaryenRemSInt64","_BinaryenRemUInt64","_BinaryenAndInt64","_BinaryenOrInt64","_BinaryenXorInt64","_BinaryenShlInt64","_BinaryenShrUInt64","_BinaryenShrSInt64","_BinaryenRotLInt64","_BinaryenRotRInt64","_BinaryenEqInt64","_BinaryenNeInt64","_BinaryenLtSInt64","_BinaryenLtUInt64","_BinaryenLeSInt64","_BinaryenLeUInt64","_BinaryenGtSInt64","_BinaryenGtUInt64","_BinaryenGeSInt64","_BinaryenGeUInt64","_BinaryenAddFloat32","_BinaryenSubFloat32","_BinaryenMulFloat32","_BinaryenDivFloat32","_BinaryenCopySignFloat32","_BinaryenMinFloat32","_BinaryenMaxFloat32","_BinaryenEqFloat32","_BinaryenNeFloat32","_BinaryenLtFloat32","_BinaryenLeFloat32","_BinaryenGtFloat32","_BinaryenGeFloat32","_BinaryenAddFloat64","_BinaryenSubFloat64","_BinaryenMulFloat64","_BinaryenDivFloat64","_BinaryenCopySignFloat64","_BinaryenMinFloat64","_BinaryenMaxFloat64","_BinaryenEqFloat64","_BinaryenNeFloat64","_BinaryenLtFloat64","_BinaryenLeFloat64","_BinaryenGtFloat64","_BinaryenGeFloat64","_BinaryenEqVecI8x16","_BinaryenNeVecI8x16","_BinaryenLtSVecI8x16","_BinaryenLtUVecI8x16","_BinaryenLeSVecI8x16","_BinaryenLeUVecI8x16","_BinaryenGtSVecI8x16","_BinaryenGtUVecI8x16","_BinaryenGeSVecI8x16","_BinaryenGeUVecI8x16","_BinaryenEqVecI16x8","_BinaryenNeVecI16x8","_BinaryenLtSVecI16x8","_BinaryenLtUVecI16x8","_BinaryenLeSVecI16x8","_BinaryenLeUVecI16x8","_BinaryenGtSVecI16x8","_BinaryenGtUVecI16x8","_BinaryenGeSVecI16x8","_BinaryenGeUVecI16x8","_BinaryenEqVecI32x4","_BinaryenNeVecI32x4","_BinaryenLtSVecI32x4","_BinaryenLtUVecI32x4","_BinaryenLeSVecI32x4","_BinaryenLeUVecI32x4","_BinaryenGtSVecI32x4","_BinaryenGtUVecI32x4","_BinaryenGeSVecI32x4","_BinaryenGeUVecI32x4","_BinaryenEqVecF32x4","_BinaryenNeVecF32x4","_BinaryenLtVecF32x4","_BinaryenLeVecF32x4","_BinaryenGtVecF32x4","_BinaryenGeVecF32x4","_BinaryenEqVecF64x2","_BinaryenNeVecF64x2","_BinaryenLtVecF64x2","_BinaryenLeVecF64x2","_BinaryenGtVecF64x2","_BinaryenGeVecF64x2","_BinaryenAndVec128","_BinaryenOrVec128","_BinaryenXorVec128","_BinaryenAndNotVec128","_BinaryenAddVecI8x16","_BinaryenAddSatSVecI8x16","_BinaryenAddSatUVecI8x16","_BinaryenSubVecI8x16","_BinaryenSubSatSVecI8x16","_BinaryenSubSatUVecI8x16","_BinaryenMulVecI8x16","_BinaryenMinSVecI8x16","_BinaryenMinUVecI8x16","_BinaryenMaxSVecI8x16","_BinaryenMaxUVecI8x16","_BinaryenAddVecI16x8","_BinaryenAddSatSVecI16x8","_BinaryenAddSatUVecI16x8","_BinaryenSubVecI16x8","_BinaryenSubSatSVecI16x8","_BinaryenSubSatUVecI16x8","_BinaryenMulVecI16x8","_BinaryenMinSVecI16x8","_BinaryenMinUVecI16x8","_BinaryenMaxSVecI16x8","_BinaryenMaxUVecI16x8","_BinaryenAddVecI32x4","_BinaryenSubVecI32x4","_BinaryenMulVecI32x4","_BinaryenMinSVecI32x4","_BinaryenMinUVecI32x4","_BinaryenMaxSVecI32x4","_BinaryenMaxUVecI32x4","_BinaryenDotSVecI16x8ToVecI32x4","_BinaryenAddVecI64x2","_BinaryenSubVecI64x2","_BinaryenAddVecF32x4","_BinaryenSubVecF32x4","_BinaryenMulVecF32x4","_BinaryenDivVecF32x4","_BinaryenMinVecF32x4","_BinaryenMaxVecF32x4","_BinaryenAddVecF64x2","_BinaryenSubVecF64x2","_BinaryenMulVecF64x2","_BinaryenDivVecF64x2","_BinaryenMinVecF64x2","_BinaryenMaxVecF64x2","_BinaryenNarrowSVecI16x8ToVecI8x16","_BinaryenNarrowUVecI16x8ToVecI8x16","_BinaryenNarrowSVecI32x4ToVecI16x8","_BinaryenNarrowUVecI32x4ToVecI16x8","_BinaryenSwizzleVec8x16","HostOp","_BinaryenMemorySize","_BinaryenMemoryGrow","AtomicRMWOp","_BinaryenAtomicRMWAdd","_BinaryenAtomicRMWSub","_BinaryenAtomicRMWAnd","_BinaryenAtomicRMWOr","_BinaryenAtomicRMWXor","_BinaryenAtomicRMWXchg","SIMDExtractOp","_BinaryenExtractLaneSVecI8x16","_BinaryenExtractLaneUVecI8x16","_BinaryenExtractLaneSVecI16x8","_BinaryenExtractLaneUVecI16x8","_BinaryenExtractLaneVecI32x4","_BinaryenExtractLaneVecI64x2","_BinaryenExtractLaneVecF32x4","_BinaryenExtractLaneVecF64x2","SIMDReplaceOp","_BinaryenReplaceLaneVecI8x16","_BinaryenReplaceLaneVecI16x8","_BinaryenReplaceLaneVecI32x4","_BinaryenReplaceLaneVecI64x2","_BinaryenReplaceLaneVecF32x4","_BinaryenReplaceLaneVecF64x2","SIMDShiftOp","_BinaryenShlVecI8x16","_BinaryenShrSVecI8x16","_BinaryenShrUVecI8x16","_BinaryenShlVecI16x8","_BinaryenShrSVecI16x8","_BinaryenShrUVecI16x8","_BinaryenShlVecI32x4","_BinaryenShrSVecI32x4","_BinaryenShrUVecI32x4","_BinaryenShlVecI64x2","_BinaryenShrSVecI64x2","_BinaryenShrUVecI64x2","SIMDTernaryOp","_BinaryenBitselectVec128","_BinaryenQFMAVecF32x4","_BinaryenQFMSVecF32x4","_BinaryenQFMAVecF64x2","_BinaryenQFMSVecF64x2","SIMDLoadOp","_BinaryenLoadSplatVec8x16","_BinaryenLoadSplatVec16x8","_BinaryenLoadSplatVec32x4","_BinaryenLoadSplatVec64x2","_BinaryenLoadExtSVec8x8ToVecI16x8","_BinaryenLoadExtUVec8x8ToVecI16x8","_BinaryenLoadExtSVec16x4ToVecI32x4","_BinaryenLoadExtUVec16x4ToVecI32x4","_BinaryenLoadExtSVec32x2ToVecI64x2","_BinaryenLoadExtUVec32x2ToVecI64x2","MemorySegment","segment","Module","hasTemporaryFunction","cachedPrecomputeNames","cachedStrings","_BinaryenModuleCreate","lit","memory","allocate","_BinaryenSizeofLiteral","cArr","allocU8Array","_BinaryenModuleRead","changetype","result","paramTypes","cStr","allocStringCached","allocI32Array","_BinaryenAddFunctionType","_BinaryenGetFunctionTypeBySignature","_BinaryenRemoveFunctionType","out","_BinaryenLiteralInt32","_BinaryenConst","valueLow","valueHigh","_BinaryenLiteralInt64","_BinaryenLiteralFloat32","_BinaryenLiteralFloat64","bytes","store","_BinaryenLiteralVec128","op","_BinaryenUnary","_BinaryenBinary","operands","allocPtrArray","_BinaryenHost","_BinaryenLocalGet","_BinaryenLocalTee","_BinaryenGlobalGet","signed","ptr","align","_BinaryenLoad","None","_BinaryenStore","_BinaryenAtomicLoad","_BinaryenAtomicStore","_BinaryenAtomicRMW","expected","replacement","_BinaryenAtomicCmpxchg","timeout","expectedType","_BinaryenAtomicWait","notifyCount","_BinaryenAtomicNotify","_BinaryenAtomicFence","_BinaryenLocalSet","_BinaryenGlobalSet","children","_BinaryenBlock","_BinaryenBreak","_BinaryenDrop","_BinaryenLoop","_BinaryenIf","_BinaryenNop","_BinaryenReturn","_BinaryenSelect","defaultName","numNames","strs","_BinaryenSwitch","isReturn","_BinaryenReturnCall","_BinaryenCall","_BinaryenReturnCallIndirect","_BinaryenCallIndirect","call_indirect","_BinaryenUnreachable","size","_BinaryenMemoryCopy","_BinaryenMemoryFill","catchBody","_BinaryenTry","eventName","_BinaryenThrow","exnref","_BinaryenRethrow","cStr1","cStr2","_BinaryenBrOnExn","_BinaryenPush","_BinaryenPop","vec","idx","_BinaryenSIMDExtract","_BinaryenSIMDReplace","vec1","vec2","mask","_BinaryenSIMDShuffle","a","b","_BinaryenSIMDTernary","shift","_BinaryenSIMDShift","_BinaryenSIMDLoad","mutable","_BinaryenAddGlobal","_BinaryenRemoveGlobal","attribute","_BinaryenAddEvent","varTypes","_BinaryenAddFunction","_BinaryenGetFunction","_BinaryenRemoveFunction","tempName","typeRef","_BinaryenAddFunctionExport","_BinaryenAddTableExport","_BinaryenAddMemoryExport","_BinaryenAddGlobalExport","_BinaryenAddEventExport","_BinaryenRemoveExport","externalModuleName","externalBaseName","functionType","cStr3","_BinaryenAddFunctionImport","_BinaryenAddTableImport","shared","_BinaryenAddMemoryImport","globalType","_BinaryenAddGlobalImport","eventType","_BinaryenAddEventImport","initial","maximum","segments","segs","psvs","offs","sizs","i64_low","i64_high","cArr1","cArr2","cArr3","cArr4","_BinaryenSetMemory","funcs","_BinaryenSetFunctionTable","func","_BinaryenSetStart","contents","_BinaryenAddCustomSection","_BinaryenGetOptimizeLevel","level","_BinaryenSetOptimizeLevel","_BinaryenGetShrinkLevel","_BinaryenSetShrinkLevel","on","_BinaryenSetDebugInfo","_BinaryenModuleGetFeatures","featureFlags","_BinaryenModuleSetFeatures","_BinaryenFunctionOptimize","_BinaryenModuleOptimize","passes","allocString","_BinaryenFunctionRunPasses","_BinaryenModuleRunPasses","previousOptimizeLevel","previousShrinkLevel","previousDebugInfo","_BinaryenGetDebugInfo","_BinaryenExpressionGetType","addTemporaryFunction","_BinaryenFunctionGetBody","_BinaryenExpressionGetId","Return","_BinaryenReturnGetValue","removeTemporaryFunction","_BinaryenModuleValidate","_BinaryenModuleInterpret","sourceMapUrl","binaryPtr","sourceMapPtr","_BinaryenModuleAllocateAndWrite","readInt","binaryBytes","ret","BinaryModule","output","load","readBuffer","readString","str","_BinaryenModuleDispose","Relooper","noSideEffects","maxDepth","MAX_VALUE","nested1","nested2","Const","_BinaryenConstGetValueI32","_BinaryenConstGetValueI64Low","_BinaryenConstGetValueI64High","_BinaryenConstGetValueF32","_BinaryenConstGetValueF64","LocalGet","_BinaryenLocalGetGetIndex","GlobalGet","globalName","_BinaryenGlobalGetGetName","Load","cloneExpression","_BinaryenLoadGetPtr","_BinaryenLoadIsAtomic","_BinaryenLoadGetBytes","_BinaryenLoadGetOffset","_BinaryenLoadIsSigned","_BinaryenLoadGetAlign","Unary","_BinaryenUnaryGetValue","_BinaryenUnaryGetOp","Binary","_BinaryenBinaryGetLeft","_BinaryenBinaryGetRight","_BinaryenBinaryGetOp","_BinaryenModuleAddDebugInfoFileName","_BinaryenModuleGetDebugInfoFileName","fileIndex","lineNumber","columnNumber","_BinaryenFunctionSetDebugLocation","getExpressionId","UNLIMITED_MEMORY","_BinaryenLocalSetGetIndex","_BinaryenLocalSetGetValue","_BinaryenLocalSetIsTee","_BinaryenStoreGetBytes","_BinaryenStoreGetOffset","_BinaryenStoreGetPtr","_BinaryenStoreGetValue","_BinaryenBlockGetName","_BinaryenBlockGetNumChildren","_BinaryenBlockGetChild","_BinaryenIfGetCondition","_BinaryenIfGetIfTrue","_BinaryenIfGetIfFalse","_BinaryenLoopGetName","_BinaryenLoopGetBody","_BinaryenBreakGetName","_BinaryenBreakGetCondition","_BinaryenSelectGetIfTrue","_BinaryenSelectGetIfFalse","_BinaryenSelectGetCondition","_BinaryenDropGetValue","_BinaryenCallGetTarget","_BinaryenCallGetNumOperands","_BinaryenCallGetOperand","_BinaryenHostGetOp","_BinaryenHostGetNumOperands","_BinaryenHostGetOperand","_BinaryenHostGetNameOperand","_BinaryenFunctionGetName","_BinaryenFunctionGetNumParams","_BinaryenFunctionGetParam","_BinaryenFunctionGetResult","relooper","_RelooperCreate","_RelooperAddBlock","from","to","_RelooperAddBranch","_RelooperAddBlockWithSwitch","indexes","_RelooperAddBranchForSwitch","entry","labelHelper","_RelooperRenderAndDispose","u8s","numValues","i32s","val","ptrs","u","stringLengthUTF8","cp","u1","u2","u3","u4","arr","fromCodePoints","hasSideEffects","Nop","Block","If","Drop","Select","needsExplicitUnreachable","Unreachable","Break","numChildren","data","Loop","Switch","_BinaryenSwitchGetCondition","Call","CallIndirect","_BinaryenCallIndirectGetNumOperands","_BinaryenCallIndirectGetOperand","LocalSet","GlobalSet","_BinaryenGlobalSetGetValue","Store","AtomicRMW","_BinaryenAtomicRMWGetPtr","_BinaryenAtomicRMWGetValue","AtomicCmpxchg","_BinaryenAtomicCmpxchgGetPtr","_BinaryenAtomicCmpxchgGetExpected","_BinaryenAtomicCmpxchgGetReplacement","AtomicWait","_BinaryenAtomicWaitGetPtr","_BinaryenAtomicWaitGetExpected","_BinaryenAtomicWaitGetTimeout","AtomicNotify","_BinaryenAtomicNotifyGetPtr","AtomicFence","SIMDExtract","_BinaryenSIMDExtractGetVec","SIMDReplace","_BinaryenSIMDReplaceGetVec","_BinaryenSIMDReplaceGetValue","SIMDShuffle","_BinaryenSIMDShuffleGetLeft","_BinaryenSIMDShuffleGetRight","SIMDTernary","_BinaryenSIMDTernaryGetA","_BinaryenSIMDTernaryGetB","_BinaryenSIMDTernaryGetC","SIMDShift","_BinaryenSIMDShiftGetVec","_BinaryenSIMDShiftGetShift","SIMDLoad","_BinaryenSIMDLoadGetPtr","MemoryInit","_BinaryenMemoryInitGetDest","_BinaryenMemoryInitGetOffset","_BinaryenMemoryInitGetSize","DataDrop","MemoryCopy","_BinaryenMemoryCopyGetDest","_BinaryenMemoryCopyGetSource","_BinaryenMemoryCopyGetSize","MemoryFill","_BinaryenMemoryFillGetDest","_BinaryenMemoryFillGetValue","_BinaryenMemoryFillGetSize","Try","_BinaryenTryGetBody","_BinaryenTryGetCatchBody","Throw","_BinaryenThrowGetNumOperands","_BinaryenThrowGetOperand","Rethrow","_BinaryenRethrowGetExnref","BrOnExn","_BinaryenBrOnExnGetExnref","Push","_BinaryenPushGetValue","Pop","Host","TypeKind","TypeFlags","v128_zero","cachedNullableType","byteSize","ceil","signatureReference","nonNullableType","isize64","isize32","usize64","usize32","auto","clz","targetType","classType","signednessIsRelevant","currentClass","targetClass","currentFunction","targetFunction","isAssignableTo","signednessIsImportant","types","numTypes","toNativeType","cachedFunctionTarget","parameterNames","requiredParameters","hasRest","signatureTypes","compare","equals","FunctionTarget","getDefaultParameterName","thisThisType","targetThisType","thisParameterTypes","targetParameterTypes","numParameters","thisParameterType","targetParameterType","thisReturnType","targetReturnType","makeSignatureString","optionalStart","restIndex","cachedDefaultParameterNames","IdentifierHandling","tokenFromKeyword","AS","ASYNC","AWAIT","CASE","CATCH","DEBUGGER","DEFAULT","DELETE","ELSE","EXTENDS","FINALLY","FROM","IMPLEMENTS","IN","IS","KEYOF","LET","MODULE","OF","PACKAGE","PRIVATE","PROTECTED","PUBLIC","TYPE","TYPEOF","VAR","WITH","YIELD","tokenIsAlsoIdentifier","DOT_DOT_DOT","EQUALS_EQUALS_EQUALS","EXCLAMATION_EQUALS_EQUALS","AMPERSAND_AMPERSAND","BAR_BAR","EQUALS","Tokenizer","tokenPos","nextToken","nextTokenPos","nextTokenOnNewLine","onComment","identifierHandling","unsafeNext","maxTokenLength","STRINGLITERAL","chr","OPENPAREN","CLOSEPAREN","isDecimalDigit","FLOATLITERAL","DOT","commentStartPos","LINE","TRIPLE","closed","_0_expected","testInteger","INTEGERLITERAL","COLON","SEMICOLON","EQUALS_GREATERTHAN","QUESTION","OPENBRACKET","CLOSEBRACKET","OPENBRACE","CLOSEBRACE","AT","isIdentifierStart","isKeywordCharacter","posBefore","isIdentifierPart","keywordToken","ALWAYS","PREFER","isWhiteSpace","Invalid_character","ENDOFFILE","checkOnNewLine","maxCompoundLength","tokenBefore","tokenPosBefore","skip","state","reusableState","State","quote","Unterminated_string_literal","readEscapeSequence","Unexpected_end_of_text","readExtendedUnicodeEscape","readUnicodeEscape","fromCharCode","escaped","Unterminated_regular_expression_literal","Invalid_regular_expression_flags","readHexInteger","readBinaryInteger","readOctalInteger","isOctalDigit","Octal_literals_are_not_allowed_in_strict_mode","readDecimalInteger","i64_4","sepEnd","i64_add","i64_shl","Numeric_separators_are_not_allowed_here","Multiple_consecutive_numeric_separators_are_not_permitted","Hexadecimal_digit_expected","i64_10","i64_mul","Digit_expected","i64_3","Octal_digit_expected","i64_1","Binary_digit_expected","readDecimalFloat","parseFloat","remain","value32","invalid","An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive","Unterminated_Unicode_escape_sequence","g","e","window","ReportMode","currentThisExpression","currentElementExpression","ctxElement","ctxTypes","reportMode","REPORT","resolveNamedType","resolveFunctionType","isSimpleType","simpleName","Type_0_is_not_generic","asNullable","Basic_type_0_cannot_be_nullable","resolveClassInclTypeArguments","makeMap","resolveBuiltinNativeType","resolveBuiltinIndexofType","resolveBuiltinValueofType","resolveBuiltinReturnTypeType","resolveTypeArguments","resolveType","typeNode","Cannot_find_name_0","parameterNode","REST","parameterTypeNode","isTypeOmitted","Type_expected","returnTypeNode","Expected_0_type_arguments_but_got_1","typeArgument","Index_signature_is_missing_in_type_0","Type_0_has_no_call_signatures","prev","Property_0_does_not_exist_on_type_1","alternativeReportNode","minParameterCount","maxParameterCount","argumentCount","ctxFlow","resolveFunctionInclTypeArguments","actualFunction","numTypeParameters","typeParameterNames","functionTypeNode","argumentNodes","argumentExpression","resolveExpression","SWALLOW","propagateInferredGenericTypes","resolvedTypeArguments","inferredType","Type_argument_expected","atEnd","currentType","ensureResolvedLazyGlobal","isTypedElement","asFunctionTarget","ctxType","lookupAssertionExpression","lookupBinaryExpression","lookupCallExpression","lookupCommaExpression","lookupElementAccessExpression","lookupFunctionExpression","lookupIdentifierExpression","lookupThisExpression","lookupSuperExpression","lookupInstanceOfExpression","lookupLiteralExpression","lookupNewExpression","lookupPropertyAccessExpression","lookupTernaryExpression","lookupUnaryPostfixExpression","lookupUnaryPrefixExpression","resolveAssertionExpression","resolveBinaryExpression","resolveCallExpression","resolveCommaExpression","resolveElementAccessExpression","resolveFunctionExpression","resolveIdentifierExpression","resolveThisExpression","resolveSuperExpression","resolveInstanceOfExpression","resolveLiteralExpression","resolveNewExpression","resolvePropertyAccessExpression","resolveTernaryExpression","resolveUnaryPostfixExpression","resolveUnaryPrefixExpression","getElementOfType","getTypeOfElement","Expression_cannot_be_represented_by_a_type","initializerNode","targetNode","lookupExpression","propertyName","indexedGet","resolvedType","targetExpression","intValue","i64_is_i8","i64_is_u8","i64_is_i16","i64_is_u16","i64_is_i32","i64_is_u32","i64_is_bool","NONNULL","Type_0_is_illegal_in_this_context","The_0_operator_cannot_be_applied_to_type_1","operatorTokenToString","determineIntegerLiteralType","i64_sub","i64_zero","intType","leftType","rightType","commonType","commonDenominator","Operator_0_cannot_be_applied_to_types_1_and_2","thisLocal","lookupLocal","_this_cannot_be_referenced_in_current_location","superLocal","_super_can_only_be_referenced_in_a_derived_class","fltType","BuiltinSymbols","maybeInferCall","Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures","thenType","elseType","This_expression_is_not_constructable","actualParent","typesToString","resolvedInstance","getResolvedInstance","classTypeArguments","classTypeParameters","numClassTypeArguments","classTypeParameterName","numFunctionTypeArguments","signatureNode","signatureParameters","numSignatureParameters","parameterDeclaration","setResolvedInstance","reportNode","baseClass","nameInclTypeParamters","baseMembers","baseMemberName","baseMember","instanceMemberPrototypes","fieldTypeNode","fieldType","baseField","fieldInstance","Field","isPowerOf2","boundPrototype","toBound","propertyInstance","Property","ctorPrototype","ctorInstance","overloadPrototype","operatorInstance","Type_0_is_not_assignable_to_type_1","IndexSignature","LocalFlags","FlowFlags","ANY_CATEGORICAL","ANY_CONDITIONAL","FieldFlags","scopedLocals","fieldFlags","parentFunction","continueLabel","localFlags","inlineFunction","inlineReturnLabel","branch","slice","temps","unsetLocalFlag","addLocal","pop","getTempLocal","SCOPED","setLocalFlag","RETAINED","scopedLocal","existingLocal","isNative","scopedAlias","freeTempLocal","scope","defaultIfInlined","stack","CONDITIONALLY_RETAINED","READFROM","CONDITIONALLY_READFROM","WRITTENTO","CONDITIONALLY_WRITTENTO","RETURNED","CONDITIONALLY_RETURNED","inheritConditional","leftLocalFlags","numLeftLocalFlags","rightLocalFlags","numRightLocalFlags","combinedFlags","max","numThisLocalFlags","numOtherLocalFlags","min","isLocalFlag","WRAPPED","isAnyLocalFlag","ANY_RETAINED","isLocalTee","getLocalSetIndex","getLocalGetIndex","inheritNonnullIfTrue","getLocalSetValue","getIfFalse","getExpressionType","getConstValueI32","getConstValueI64Low","getConstValueI64High","getIfCondition","getIfTrue","getUnaryOp","EqzI32","EqzI64","inheritNonnullIfFalse","getUnaryValue","getBinaryOp","EqI32","getBinaryLeft","getBinaryRight","EqI64","NeI32","NeI64","getCallTarget","getCallOperand","canConversionOverflow","canOverflow","getGlobalGetName","EqF32","EqF64","NeF32","NeF64","LtI32","LtU32","LtI64","LtU64","LtF32","LtF64","LeI32","LeU32","LeI64","LeU64","LeF32","LeF64","GtI32","GtU32","GtI64","GtU64","GtF32","GtF64","GeI32","GeU32","GeI64","GeU64","GeF32","GeF64","MulI32","AndI32","computeSmallIntegerMask","ShlI32","ShrI32","ShrU32","DivU32","RemI32","RemU32","ClzI32","CtzI32","PopcntI32","getConstValueF32","getConstValueF64","MIN_VALUE","fromType","isLoadSigned","getLoadBytes","getBlockName","getBlockChildCount","last","getBlockChild","getSelectThen","getSelectElse","instanceName","levels","findUsedLocalsVisit","used","traverse","Options","importMemory","sharedMemory","importTable","explicitStart","features","noUnsafe","feature","mangleImportName_moduleName","mangleImportName_elementName","Constraints","RuntimeFeatures","Compiler","currentInlineFunctions","currentParent","memorySegments","stringSegments","functionTable","argcVar","argcSet","runtimeFeatures","skippedAutoreleases","f32ModInstance","f64ModInstance","f32PowInstance","f64PowInstance","SignExt","MutableGloabls","NontrappingFPToInt","BulkMemory","SIMD128","Atomics","ExceptionHandling","TailCall","ReferenceTypes","setFeatures","compile","initialize","startFunctionInstance","startFunctionBody","currentFlow","currentBody","addGlobal","heap_base","rtti_base","files","compileFile","compileExports","startIsEmpty","started","unshift","if","global_get","return","global_set","funcRef","addFunction","ensureFunctionType","typesToNativeTypes","block","finalize","addFunctionExport","setStart","compileVisitGlobals","compileVisitMembers","removeGlobal","compileRTTI","i64_align","isSharedMemory","setMemory","i64_shr_u","addMemoryImport","setFunctionTable","addTableImport","ensureModuleExports","ensureModuleExport","prefix","fullName","setter","addGlobalExport","Cannot_export_a_mutable_global","ensureTrampoline","ensureArgcSet","COMPILED","ensureModuleFieldGetter","ensureModuleFieldSetter","isUnmanaged","subPrefix","loadExpr","local_get","isManaged","makeRetain","nativeType","nativeSizeType","valueExpr","makeRetainRelease","compileMembers","compileGlobal","compileEnum","compileFunctionUsingTypeArguments","compileClassUsingTypeArguments","compileElement","normalizedPathWithoutExtension","pathWithIndex","previousBody","previousFlow","compileTopLevelStatement","finishAutoreleases","numLocals","initExpr","initAutoreleaseSkipped","compileExpression","isDeclaredConstant","isDeclaredInline","MODULE_IMPORT","mangleImportName","addGlobalImport","Feature_0_is_not_enabled","initializeInStart","precomputeExpression","Mutable_value_cannot_be_inlined","toNativeZero","findDecorator","decoratorNodes","previousParent","previousValue","previousValueIsMut","isInline","initInStart","valueNode","In_const_enum_declarations_member_initializer_must_be_constant_expression","Enum_member_must_have_initializer","binary","AddI32","makeGlobalAssignment","compileFunction","resultType","getFunctionTypeBySignature","addFunctionType","stmts","bodyNode","compileStatements","MAIN","indexBefore","performAutoreleases","nonNull","isNonnull","temp","local_set","unary","makeAllocation","makeFieldInitialization","Constructors_for_derived_classes_must_contain_a_super_call","A_function_whose_declared_type_is_not_void_must_return_a_value","previousType","An_implementation_cannot_be_declared_in_ambient_contexts","drop","compileFunctionBody","flatten","Function_implementation_is_missing_or_not_immediately_following_the_declaration","addFunctionImport","getFunction","compileClass","staticMembers","alignment","stringValue","stringSegment","rtHeaderSize","runtimeHeaderSize","writeRuntimeHeader","addMemorySegment","elementType","byteLength","bufferInstance","buf","writeI64","bufferSegment","arrayInstance","arrayInstanceSize","bufferLength","arrayLength","bufferAddress32","writeField","TRAMPOLINE","memberStatements","getElementByDeclaration","compileFileByPath","compileStatement","isLastInBody","compileBlockStatement","compileBreakStatement","compileContinueStatement","compileDoStatement","compileEmptyStatement","compileExpressionStatement","compileForStatement","compileIfStatement","compileReturnStatement","compileSwitchStatement","compileThrowStatement","compileTryStatement","compileVariableStatement","nop","compileVoidStatement","compileWhileStatement","unreachable","addDebugLocation","isBody","numStatements","outerFlow","innerFlow","fork","freeScopedLocals","inherit","A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement","br","A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement","pushBreakLabel","condFlow","condExpr","makeIsTrueish","hasScopedLocals","unifyLocalFlags","alwaysFalse","terminates","continues","breaks","fallsThrough","loop","popBreakLabel","unset","alwaysTrue","incrExpr","incrFlow","bodyFlow","loopLabel","bodyStatement","needsLabel","ifTrueStmts","ifTrueFlow","ifFalseFlow","ifFalseStmts","inheritMutual","valueExpression","constraints","numCases","context","tempLocal","tempLocalIndex","breakIndex","defaultIndex","currentBlock","commonCategorical","commonConditional","isLast","nextLabel","count","newArgs","compileAbort","numDeclarations","initializers","isConst","_const_declarations_must_be_initialized","getScopedLocal","addScopedLocal","CONSTANT","contextualType","computeSmallIntegerShift","compileAssertionExpression","compileBinaryExpression","compileCallExpression","compileCommaExpression","compileElementAccessExpression","compileFunctionExpression","compileIdentifierExpression","compileInstanceOfExpression","compileLiteralExpression","compileNewExpression","compilePropertyAccessExpression","compileTernaryExpression","compileUnaryPostfixExpression","compileUnaryPrefixExpression","wrap","convertExpression","ensureSmallIntegerWrap","explicit","Object_is_possibly_null","Conversion_from_type_0_to_1_requires_an_explicit_cast","PromoteF32","DemoteF64","TruncF32ToI64","TruncF32ToI32","TruncF32ToU64","TruncF32ToU32","TruncF64ToI64","TruncF64ToI32","TruncF64ToU64","TruncF64ToU32","ConvertI64ToF32","ConvertU64ToF32","ConvertI32ToF32","ConvertU32ToF32","ConvertI64ToF64","ConvertU64ToF64","ConvertI32ToF64","ConvertU32ToF64","WrapI64","ExtendI32","ExtendU32","inheritedConstraints","PREFIX","exceptVoid","info","Expression_is_never_null","local_tee","leftExpr","rightExpr","compound","compileBinaryOverload","AllTrueI8x16","EqI8x16","AnyTrueI8x16","NeI8x16","compileAssignment","AddI64","AddF32","AddF64","SubI32","SubI64","SubF32","SubF64","MulI64","MulF32","MulF64","namespace","makeCallDirect","DivI32","DivI64","DivU64","DivF32","DivF64","RemI64","RemU64","ShlI64","ShrI64","ShrU64","AndI64","OrI32","OrI64","XorI32","XorI64","rightFlow","performAutoreleasesWithValue","leftAutoreleaseSkipped","rightAutoreleaseSkipped","retainLeftInElse","moveAutorelease","rightStmts","makeRelease","retainLeftInThen","isStrictlyAssignableTo","makeAssignment","thisExpression","checkUnsafe","Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property","indexedSet","Index_signature_in_type_0_only_permits_reading","indexExpression","tee","makeLocalAssignment","makeFieldAssignment","makeAutorelease","nativeReturnType","thisExpr","elementExpr","tempTarget","tempElement","makeSkippedRelease","nativeFieldType","nativeThisType","tempThis","tempValue","Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors","baseClassInstance","theCall","compileCallDirect","ensureConstructor","_super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class","indexArg","compileCallExpressionBuiltin","compileCallIndirect","hasThis","The_this_types_of_each_signature_are_incompatible","minimum","Expected_at_least_0_arguments_but_got_1","Operation_is_unsafe","argumentExpressions","thisArg","checkCallSignature","makeCallInline","Function_0_cannot_be_inlined_into_itself","numArgumentsInclThis","immediatelyDropped","createInline","usedLocals","paramExpr","paramType","argumentLocal","findUsedLocals","baseInstance","addScopedAlias","initType","originalSignature","originalName","originalParameterTypes","originalParameterDeclarations","minArguments","minOperands","maxArguments","maxOperands","numOptional","forwardedOperands","operandIndex","trampolineSignature","ofN","switch","argc","Optional_parameter_must_have_an_initializer","setargc","ensureArgcVar","oldExpr","newExpr","temp1","temp2","getAutoreleaseLocal","undoAutorelease","fromInnerFlow","toOuterFlow","clearFlags","lengthBefore","skipAutorelease","theOperands","numOperands","isCallImport","allOptionalsAreConstant","nodeIsConstantValue","compileInlineConstant","makeCallIndirect","numExpressions","exprs","contextualSignature","clone","numPresentParameters","thisTypeNode","ensureFunctionTableEntry","_super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class","scopedThis","superType","maybeCompileEnclosingSource","A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums","actualType","implicitlyNegate","compileArrayLiteral","The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly","floatValue","i64_to_f32","i64_to_f64","compileStringLiteral","compileObjectLiteral","ensureStaticString","arrayType","tempDataStart","nativeElementType","ensureStaticArrayBuffer","bufferAddress","arraySegment","ensureStaticArrayHeader","arrayAddress","alignLog2","nativeArrayType","dataStart","ctor","Constructor_of_class_0_must_not_require_any_arguments","Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration","Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration","hasErrors","compileInstantiate","baseCtor","allocExpr","theEnum","Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set","ifThenFlow","ifThenExpr","ifThenType","IfThenAutoreleaseSkipped","ifElseFlow","ifElseExpr","ifElseType","ifElseAutoreleaseSkipped","getValue","compileUnaryOverload","toNativeOne","setValue","NegF32","NegF64","toNativeNegOne","compileTypeof","typeString","ExtendI8ToI32","ExtendI16ToI32","addDebugInfoFile","thisLocalIndex","fieldPrototype","idTemp","idExpr","conditions","single","Auto","compileCall","compiler","isAsm","isInteger","evaluateConstantType","isFloat","isBoolean","isSigned","isReference","isString","isArray","isArrayLike","isFunction","isDefined","checkTypeAbsent","checkArgsRequired","isConstant","isVoid","lengthof","sizeof","checkTypeRequired","Operation_0_cannot_be_applied_to_type_1","typeArgumentsRange","alignof","ctz","offsetof","checkArgsOptional","Type_0_has_no_property_1","nameof","checkTypeOptional","ClzI64","CtzI64","popcnt","PopcntI64","rotl","RotlI32","RotlI64","rotr","RotrI32","RotrI64","abs","AbsF32","AbsF64","isNumericLiteral","MaxF32","MaxF64","select","MinF32","MinF64","CeilF32","CeilF64","floor","FloorF32","FloorF64","copysign","CopysignF32","CopysignF64","nearest","NearestF32","NearestF64","reinterpret","ReinterpretF32","ReinterpretF64","ReinterpretI32","ReinterpretI64","sqrt","SqrtF32","SqrtF64","trunc","TruncF32","TruncF64","immAlign","outType","immOffset","evaluateImmediateOffset","naturalAlign","_0_must_be_a_value_between_1_and_2_inclusive","_0_must_be_a_power_of_two","inType","atomic_load","checkFeatureEnabled","atomic_store","atomic_add","atomic_sub","atomic_and","atomic_or","atomic_xor","atomic_xchg","opName","Add","Sub","And","Or","Xor","Xchg","atomic_rmw","atomic_cmpxchg","atomic_wait","atomic_notify","atomic_fence","memory_size","host","MemorySize","memory_grow","MemoryGrow","memory_copy","memory_fill","isChangeableTo","Type_0_cannot_be_changed_to_type_1","alreadyUnchecked","call_direct","arg0Type","Type_0_is_not_a_function_index_or_function_reference","operandExprs","nativeParamTypes","operandType","Expression_must_be_a_compile_time_constant","instantiate","User_defined_0","off","v128_splat","SplatI8x16","SplatI16x8","SplatI32x4","SplatI64x2","SplatF32x4","SplatF64x2","v128_extract_lane","maxIdx","simd_extract","ExtractLaneI8x16","ExtractLaneU8x16","ExtractLaneI16x8","ExtractLaneU16x8","ExtractLaneI32x4","ExtractLaneI64x2","ExtractLaneF32x4","ExtractLaneF64x2","v128_replace_lane","simd_replace","ReplaceLaneI8x16","ReplaceLaneI16x8","ReplaceLaneI32x4","ReplaceLaneI64x2","ReplaceLaneF32x4","ReplaceLaneF64x2","v128_shuffle","laneWidth","laneCount","argN","off8","idx8","simd_shuffle","v128_swizzle","SwizzleV8x16","v128_load_splat","simd_load","LoadSplatV8x16","LoadSplatV16x8","LoadSplatV32x4","LoadSplatV64x2","v128_load_ext","LoadI8ToI16x8","LoadU8ToU16x8","LoadI16ToI32x4","LoadU16ToU32x4","LoadI32ToI64x2","LoadU32ToU64x2","v128_add","AddI8x16","AddI16x8","AddI32x4","AddI64x2","AddF32x4","AddF64x2","v128_sub","SubI8x16","SubI16x8","SubI32x4","SubI64x2","SubF32x4","SubF64x2","v128_mul","MulI8x16","MulI16x8","MulI32x4","MulF32x4","MulF64x2","v128_div","DivF32x4","DivF64x2","v128_add_saturate","AddSatI8x16","AddSatU8x16","AddSatI16x8","AddSatU16x8","v128_sub_saturate","SubSatI8x16","SubSatU8x16","SubSatI16x8","SubSatU16x8","v128_min","MinI8x16","MinU8x16","MinI16x8","MinU16x8","MinI32x4","MinU32x4","MinF32x4","MinF64x2","v128_max","MaxI8x16","MaxU8x16","MaxI16x8","MaxU16x8","MaxI32x4","MaxU32x4","MaxF32x4","MaxF64x2","v128_dot","DotI16x8","v128_eq","EqI16x8","EqI32x4","EqF32x4","EqF64x2","v128_ne","NeI16x8","NeI32x4","NeF32x4","NeF64x2","v128_lt","LtI8x16","LtU8x16","LtI16x8","LtU16x8","LtI32x4","LtU32x4","LtF32x4","LtF64x2","v128_le","LeI8x16","LeU8x16","LeI16x8","LeU16x8","LeI32x4","LeU32x4","LeF32x4","LeF64x2","v128_gt","GtI8x16","GtU8x16","GtI16x8","GtU16x8","GtI32x4","GtU32x4","GtF32x4","GtF64x2","v128_ge","GeI8x16","GeU8x16","GeI16x8","GeU16x8","GeI32x4","GeU32x4","GeF32x4","GeF64x2","v128_narrow","NarrowI16x8ToI8x16","NarrowU16x8ToU8x16","NarrowI32x4ToI16x8","NarrowU32x4ToU16x8","v128_neg","NegI8x16","NegI16x8","NegI32x4","NegI64x2","NegF32x4","NegF64x2","v128_abs","AbsF32x4","AbsF64x2","v128_sqrt","SqrtF32x4","SqrtF64x2","v128_convert","ConvertI32x4ToF32x4","ConvertU32x4ToF32x4","ConvertI64x2ToF64x2","ConvertU64x2ToF64x2","v128_trunc_sat","TruncSatF32x4ToI32x4","TruncSatF32x4ToU32x4","TruncSatF64x2ToI64x2","TruncSatF64x2ToU64x2","v128_widen_low","WidenLowI8x16ToI16x8","WidenLowU8x16ToU16x8","WidenLowI16x8ToI32x4","WidenLowU16x8ToU32x4","v128_widen_high","WidenHighI8x16ToI16x8","WidenHighU8x16ToU16x8","WidenHighI16x8ToI32x4","WidenHighU16x8ToU32x4","v128_shl","simd_shift","ShlI8x16","ShlI16x8","ShlI32x4","ShlI64x2","v128_shr","ShrI8x16","ShrU8x16","ShrI16x8","ShrU16x8","ShrI32x4","ShrU32x4","ShrI64x2","ShrU64x2","v128_and","AndV128","v128_or","OrV128","v128_xor","XorV128","v128_andnot","AndNotV128","v128_not","NotV128","v128_bitselect","simd_ternary","Bitselect","v128_any_true","AnyTrueI16x8","AnyTrueI32x4","AnyTrueI64x2","v128_all_true","AllTrueI16x8","AllTrueI32x4","AllTrueI64x2","v128_qfma","QFMAF32x4","QFMAF64x2","v128_qfms","QFMSF32x4","QFMSF64x2","idof","visit_globals","visit_members","isNaN","isFinite","i32_clz","deferASM","i64_clz","i32_ctz","i64_ctz","i32_popcnt","i64_popcnt","i32_rotl","i64_rotl","i32_rotr","i64_rotr","f32_abs","f64_abs","f32_max","f64_max","f32_min","f64_min","f32_ceil","f64_ceil","f32_floor","f64_floor","f32_copysign","f64_copysign","f32_nearest","f64_nearest","i32_reinterpret_f32","i64_reinterpret_f64","f32_reinterpret_i32","f64_reinterpret_i64","f32_sqrt","f64_sqrt","f32_trunc","f64_trunc","i32_load8_s","i32_load8_u","i32_load16_s","i32_load16_u","i32_load","i64_load8_s","i64_load8_u","i64_load16_s","i64_load16_u","i64_load32_s","i64_load32_u","i64_load","f32_load","f64_load","i32_store8","i32_store16","i32_store","i64_store8","i64_store16","i64_store32","i64_store","f32_store","f64_store","i32_atomic_load8_u","i32_atomic_load16_u","i32_atomic_load","i64_atomic_load8_u","i64_atomic_load16_u","i64_atomic_load32_u","i64_atomic_load","i32_atomic_store8","i32_atomic_store16","i32_atomic_store","i64_atomic_store8","i64_atomic_store16","i64_atomic_store32","i64_atomic_store","i32_atomic_rmw8_add_u","i32_atomic_rmw16_add_u","i32_atomic_rmw_add","i64_atomic_rmw8_add_u","i64_atomic_rmw16_add_u","i64_atomic_rmw32_add_u","i64_atomic_rmw_add","i32_atomic_rmw8_sub_u","i32_atomic_rmw16_sub_u","i32_atomic_rmw_sub","i64_atomic_rmw8_sub_u","i64_atomic_rmw16_sub_u","i64_atomic_rmw32_sub_u","i64_atomic_rmw_sub","i32_atomic_rmw8_and_u","i32_atomic_rmw16_and_u","i32_atomic_rmw_and","i64_atomic_rmw8_and_u","i64_atomic_rmw16_and_u","i64_atomic_rmw32_and_u","i64_atomic_rmw_and","i32_atomic_rmw8_or_u","i32_atomic_rmw16_or_u","i32_atomic_rmw_or","i64_atomic_rmw8_or_u","i64_atomic_rmw16_or_u","i64_atomic_rmw32_or_u","i64_atomic_rmw_or","i32_atomic_rmw8_xor_u","i32_atomic_rmw16_xor_u","i32_atomic_rmw_xor","i64_atomic_rmw8_xor_u","i64_atomic_rmw16_xor_u","i64_atomic_rmw32_xor_u","i64_atomic_rmw_xor","i32_atomic_rmw8_xchg_u","i32_atomic_rmw16_xchg_u","i32_atomic_rmw_xchg","i64_atomic_rmw8_xchg_u","i64_atomic_rmw16_xchg_u","i64_atomic_rmw32_xchg_u","i64_atomic_rmw_xchg","i32_atomic_rmw8_cmpxchg_u","i32_atomic_rmw16_cmpxchg_u","i32_atomic_rmw_cmpxchg","i64_atomic_rmw8_cmpxchg_u","i64_atomic_rmw16_cmpxchg_u","i64_atomic_rmw32_cmpxchg_u","i64_atomic_rmw_cmpxchg","i32_wait","i64_wait","v128_load","v128_store","i8x16_splat","i8x16_extract_lane_s","i8x16_extract_lane_u","i8x16_replace_lane","i8x16_add","i8x16_sub","i8x16_mul","i8x16_min_s","i8x16_min_u","i8x16_max_s","i8x16_max_u","i8x16_neg","i8x16_add_saturate_s","i8x16_add_saturate_u","i8x16_sub_saturate_s","i8x16_sub_saturate_u","i8x16_shl","i8x16_shr_s","i8x16_shr_u","i8x16_any_true","i8x16_all_true","i8x16_eq","i8x16_ne","i8x16_lt_s","i8x16_lt_u","i8x16_le_s","i8x16_le_u","i8x16_gt_s","i8x16_gt_u","i8x16_ge_s","i8x16_ge_u","i8x16_narrow_i16x8_s","i8x16_narrow_i16x8_u","i16x8_splat","i16x8_extract_lane_s","i16x8_extract_lane_u","i16x8_replace_lane","i16x8_add","i16x8_sub","i16x8_mul","i16x8_min_s","i16x8_min_u","i16x8_max_s","i16x8_max_u","i16x8_neg","i16x8_add_saturate_s","i16x8_add_saturate_u","i16x8_sub_saturate_s","i16x8_sub_saturate_u","i16x8_shl","i16x8_shr_s","i16x8_shr_u","i16x8_any_true","i16x8_all_true","i16x8_eq","i16x8_ne","i16x8_lt_s","i16x8_lt_u","i16x8_le_s","i16x8_le_u","i16x8_gt_s","i16x8_gt_u","i16x8_ge_s","i16x8_ge_u","i16x8_narrow_i32x4_s","i16x8_narrow_i32x4_u","i16x8_widen_low_i8x16_s","i16x8_widen_low_i8x16_u","i16x8_widen_high_i8x16_s","i16x8_widen_high_i8x16_u","i16x8_load8x8_s","i16x8_load8x8_u","i32x4_splat","i32x4_extract_lane","i32x4_replace_lane","i32x4_add","i32x4_sub","i32x4_mul","i32x4_min_s","i32x4_min_u","i32x4_max_s","i32x4_max_u","i32x4_dot_i16x8_s","i32x4_neg","i32x4_shl","i32x4_shr_s","i32x4_shr_u","i32x4_any_true","i32x4_all_true","i32x4_eq","i32x4_ne","i32x4_lt_s","i32x4_lt_u","i32x4_le_s","i32x4_le_u","i32x4_gt_s","i32x4_gt_u","i32x4_ge_s","i32x4_ge_u","i32x4_trunc_sat_f32x4_s","i32x4_trunc_sat_f32x4_u","i32x4_widen_low_i16x8_s","i32x4_widen_low_i16x8_u","i32x4_widen_high_i16x8_s","i32x4_widen_high_i16x8_u","i32x4_load16x4_s","i32x4_load16x4_u","i64x2_splat","i64x2_extract_lane","i64x2_replace_lane","i64x2_add","i64x2_sub","i64x2_neg","i64x2_shl","i64x2_shr_s","i64x2_shr_u","i64x2_any_true","i64x2_all_true","i64x2_trunc_sat_f64x2_s","i64x2_trunc_sat_f64x2_u","i64x2_load32x2_s","i64x2_load32x2_u","f32x4_splat","f32x4_extract_lane","f32x4_replace_lane","f32x4_add","f32x4_sub","f32x4_mul","f32x4_div","f32x4_neg","f32x4_min","f32x4_max","f32x4_abs","f32x4_sqrt","f32x4_eq","f32x4_ne","f32x4_lt","f32x4_le","f32x4_gt","f32x4_ge","f32x4_convert_i32x4_s","f32x4_convert_i32x4_u","f32x4_qfma","f32x4_qfms","f64x2_splat","f64x2_extract_lane","f64x2_replace_lane","f64x2_add","f64x2_sub","f64x2_mul","f64x2_div","f64x2_neg","f64x2_min","f64x2_max","f64x2_abs","f64x2_sqrt","f64x2_eq","f64x2_ne","f64x2_lt","f64x2_le","f64x2_gt","f64x2_ge","f64x2_convert_i64x2_s","f64x2_convert_i64x2_u","f64x2_qfma","f64x2_qfms","v8x16_shuffle","v8x16_swizzle","v8x16_load_splat","v16x8_load_splat","v32x4_load_splat","v64x2_load_splat","tryDeferASM","messageArg","filenameArg","typeToRuntimeFlags","argumentsRange","setCurrentTypeOnError","expectedMinimum","expectedMaximum","memory_allocate","memory_free","memory_reset","runtime_instanceof","runtime_flags","runtime_allocate","runtime_reallocate","runtime_register","runtime_discard","runtime_makeArray","capabilities","nativeSizeSize","ftype","blocks","outer","addBlockWithSwitch","lastId","visitImpl","isDeclaredInLibrary","visitFunc","visitSig","fieldOffset","addBlock","addBranchForSwitch","addBranch","renderAndDispose","abvPrototype","isAcyclic","getArrayValueType","Decompiler","functionId","decompiler","decompile","finish","getFunctionName","getFunctionBody","getFunctionParamCount","nativeTypeToType","getFunctionParamType","getFunctionResultType","decompileExpression","nested","getLoopName","getLoopBody","getBreakCondition","getBreakName","getLoadOffset","getLoadPtr","getStoreOffset","getStorePtr","getStoreValue","i64_to_string","getSelectCondition","getDropValue","getReturnValue","getHostOp","getHostOperand","ExportsWalker","includePrivate","seen","visitFile","visitElement","visitAlias","visitGlobal","visitEnum","visitFunctionInstances","visitClassInstances","visitField","visitPropertyInstances","prop","visitFunction","hasCompiledMember","visitNamespace","visitClass","IDLBuilder","indentLevel","build","indent","typeToString","walk","TSDBuilder","unknown","numMembers","isInterface","Parser","backlog","seenlog","donelog","dependees","tryParseSignatureIsSignature","parseParametersThis","isEntry","indexOf","USER","currentSource","tn","parseTopLevelStatement","startPos","parseDecorator","skipStatement","exportStart","exportEnd","defaultStart","defaultEnd","declareStart","declareEnd","contextIsAmbient","A_declare_modifier_cannot_be_used_in_an_already_ambient_context","first","peek","parseEnum","parseVariable","parseFunction","mark","reset","parseStatement","discard","parseClassOrInterface","parseNamespace","parseExportImport","parseImport","parseTypeDeclaration","skipIdentifier","An_export_assignment_cannot_have_modifiers","parseExportDefaultAlias","parseExport","_0_modifier_cannot_be_used_here","Decorators_are_not_valid_here","createExportDefaultStatement","dependent","clear","acceptParenthesized","suppressErrors","isNullableSignature","tryParseFunctionType","Unexpected_token","innerType","parseType","Identifier_expected","readIdentifier","nullable","parameter","bracketStart","bracketRange","isSignature","firstParamNameNoType","firstParamKind","A_rest_parameter_cannot_be_optional","OPTIONAL","param","createPropertyAccessExpression","createDecorator","parseArguments","parseVariableDeclaration","createVariableStatement","parentFlags","parentDecorators","isIllegalVariableIdentifier","DEFINITE_ASSIGNMENT","Initializers_are_not_allowed_in_ambient_contexts","parseExpression","A_definite_assignment_assertion_is_not_permitted_in_this_context","parseEnumValue","createEnumDeclaration","createEnumValueDeclaration","createReturnStatement","seenOptional","typeParameter","parseTypeParameter","Required_type_parameters_may_not_follow_optional_type_parameters","Type_parameter_list_cannot_be_empty","createTypeParameter","isConstructor","seenRest","reportedRest","parseParameter","A_rest_parameter_must_be_last_in_a_parameter_list","A_required_parameter_cannot_follow_an_optional_parameter","isRest","isOptional","startRange","accessFlags","A_parameter_property_cannot_be_declared_using_a_rest_parameter","A_rest_parameter_cannot_have_an_initializer","Parameter_cannot_have_question_mark_and_initializer","createParameter","signatureStart","parseTypeParameters","parseParameters","isSetter","A_set_accessor_must_have_exactly_one_parameter","A_set_accessor_parameter_cannot_have_an_initializer","A_get_accessor_cannot_have_parameters","parseBlockStatement","createEmptyIdentifierExpression","parseFunctionExpressionCommon","bodyExpression","createExpressionStatement","createFunctionExpression","Interface_declaration_cannot_have_implements_clause","createInterfaceDeclaration","createClassDeclaration","parseClassMember","createClassExpression","VIRTUAL","accessStart","accessEnd","staticStart","staticEnd","abstractStart","abstractEnd","GENERIC_CONTEXT","readonlyStart","readonlyEnd","setEnd","createConstructorExpression","retIndex","parseIndexSignatureDeclaration","typeParametersStart","Type_parameters_cannot_appear_on_a_constructor_declaration","An_accessor_cannot_have_type_parameters","createFieldDeclaration","Type_annotation_cannot_appear_on_a_constructor_declaration","A_set_accessor_cannot_have_a_return_type_annotation","Method_0_cannot_have_an_implementation_because_it_is_marked_abstract","retMethod","createMethodDeclaration","Constructor_implementation_is_missing","Optional_properties_are_not_supported","retField","createIndexSignatureDeclaration","parseExportMember","createStringLiteralExpression","createExportStatement","asIdentifier","createExportMember","skipFrom","parseImportDeclaration","createImportDeclaration","createImportStatementWithWildcard","createImportStatement","createExportImportStatement","topLevel","parseBreak","parseContinue","parseDoStatement","parseForStatement","parseIfStatement","A_return_statement_can_only_be_used_within_a_function_body","parseReturn","createEmptyStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseVoidStatement","parseWhileStatement","parseExpressionStatement","createBlockStatement","createBreakStatement","createContinueStatement","createDoStatement","createForStatement","elseStatement","createIfStatement","case_","parseSwitchCase","createSwitchStatement","createSwitchCase","_case_or_default_expected","createThrowStatement","createTryStatement","createVoidStatement","createWhileStatement","precedence","determinePrecedenceStart","createNewExpression","The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access","createUnaryPrefixExpression","createNullExpression","createTrueExpression","createFalseExpression","again","parseFunctionExpression","createParenthesizedExpression","createArrayLiteralExpression","createObjectLiteralExpression","createAssertionExpression","identifierText","createThisExpression","_super_must_be_followed_by_an_argument_list_or_member_access","createSuperExpression","createIntegerLiteralExpression","readInteger","createFloatLiteralExpression","readFloat","regexpPattern","readRegexpPattern","createRegexpLiteralExpression","readRegexpFlags","parseClassExpression","Expression_expected","parseExpressionStart","nextPrecedence","maybeParseCallExpression","determinePrecedence","createInstanceOfExpression","createElementAccessExpression","createUnaryPostfixExpression","createTernaryExpression","commaExprs","createCommaExpression","isRightAssociative","joinPropertyCall","createBinaryExpression","callee","inner","nodeIsCallable","nodeIsGenericCallable","tryParseTypeArgumentsBeforeArguments","createCallExpression","skipBlock","depth","Precedence","toText","binaryen","wrapModule","emitStackIR","toAsmjs","emitAsmjs","Binaryen","__memory_allocate","_malloc","__memory_free","_free","__memory_copy","_memmove","__store","HEAPU8","__load","globalScope","ASC_FEATURE_MUTABLE_GLOBAL","UnreachableError","captureStackTrace","AssertionError","defaultComparator","nanA","nanB","defineProperties","writable","fround","clz32","round","y","sign","isTrueish","apply","fromCodePoint","replaceAll","search","replacment","res","split","arraySort","sort","comparator","Number","sincos_sin","sincos_cos","signbit","Boolean","sincos","sin","cos","HEAP","HEAP_OFFSET","oldHeap","fill","copy","copyWithin","f32_as_i32","i32_as_f32","f64_as_i64","i64_as_f64","Long","ZERO","i64_one","ONE","lo","hi","fromBits","low","high","sub","mul","i64_div","div","i64_div_u","toUnsigned","toSigned","i64_rem","i64_rem_u","i64_and","and","i64_or","or","i64_xor","xor","shl","i64_shr","shr","shru","i64_not","not","i64_eq","eq","i64_ne","ne","fromInt","minSafeF32","fromNumber","MIN_SAFE_INTEGER","maxSafeF32","MAX_SAFE_INTEGER","i64_is_f32","gte","lte","minSafeF64","maxSafeF64","i64_is_f64","toNumber","unsigned","wasm","WebAssembly","Instance","isLong","obj","__isLong__","INT_CACHE","UINT_CACHE","cachedObj","cache","UZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","neg","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","radix","RangeError","radixToPower","power","fromValue","TWO_PWR_16_DBL","TWO_PWR_24","UONE","NEG_ONE","LongPrototype","toInt","isZero","isNegative","radixLong","rem1","rem","remDiv","digits","getHighBits","getHighBitsUnsigned","getLowBits","getLowBitsUnsigned","getNumBitsAbs","bit","eqz","isPositive","isOdd","isEven","notEquals","neq","lessThan","comp","lt","lessThanOrEqual","le","greaterThan","gt","greaterThanOrEqual","ge","thisNeg","otherNeg","negate","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtract","subtrahend","multiply","multiplier","get_high","b00","divide","divisor","approx","div_u","div_s","log2","log","LN2","delta","approxRes","approxRem","modulo","rem_u","rem_s","shiftLeft","numBits","shiftRight","shiftRightUnsigned","shr_u","toBytes","toBytesLE","toBytesBE","fromBytes","fromBytesLE","fromBytesBE","unmanaged","formatDiagnostic","formatDiagnosticMessage","parser","parseFile","nextFile","getDependee","FEATURE_SIGN_EXTENSION","FEATURE_MUTABLE_GLOBALS","FEATURE_NONTRAPPING_F2I","FEATURE_BULK_MEMORY","FEATURE_SIMD","FEATURE_THREADS","FEATURE_EXCEPTION_HANDLING","FEATURE_TAIL_CALLS","FEATURE_REFERENCE_TYPES","optimizeLevel","shrinkLevel","getSource","cls","map","isSet","CharCode","lookupInUnicodeMap","unicodeIdentifierStart","unicodeIdentifierPart","mid","midVal","cloned","v","overrides","separator","ipos","dirname","origin","indentX1","indentX2","indentX4","readI32","readI64","valueI64"],"mappings":"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AOljD,EAAMqU,QAGf,SAAgB8uC,EAAsB5uC,GACpC,OAAQA,GACN,KAAKvU,EAAM+iB,SACX,KAAK/iB,EAAMuhD,GACX,KAAKvhD,EAAMyN,YACX,KAAKzN,EAAMilB,QACX,KAAKjlB,EAAM8hD,OACX,KAAK9hD,EAAMkiD,KACX,KAAKliD,EAAMmQ,IACX,KAAKnQ,EAAMwiB,IACX,KAAKxiB,EAAM2N,WACX,KAAK3N,EAAMqiD,GACX,KAAKriD,EAAMsiD,MACX,KAAKtiD,EAAMwiD,OACX,KAAKxiD,EAAMymB,UACX,KAAKzmB,EAAMQ,KACX,KAAKR,EAAM8iB,SACX,KAAK9iB,EAAMyiB,IACX,KAAKziB,EAAM8iD,KACX,KAAK9iD,EAAMqR,KAAM,OAAO,EACxB,QAAS,OAAO,IA1UpB,SAAYrR,GAKV,2BACA,eACA,qBACA,qBACA,qBACA,mBACA,qBACA,qBACA,qBACA,2BACA,kCACA,4BACA,0BACA,0BACA,wBACA,gBACA,oBACA,oBACA,wBACA,0BACA,sBACA,0BACA,kBACA,oBACA,4BACA,kBACA,gBACA,gCACA,wBACA,gBACA,gCACA,8BACA,gBACA,sBACA,kBACA,wBACA,8BACA,kBACA,oBACA,gBACA,0BACA,0BACA,8BACA,wBACA,4BACA,wBACA,kBACA,wBACA,sBACA,wBACA,oBACA,sBACA,oBACA,kBACA,oBACA,wBACA,kBACA,oBACA,sBACA,oBACA,sBAIA,8BACA,gCACA,8BACA,gCACA,kCACA,oCACA,kBACA,kCACA,8BACA,sBACA,4BACA,kCACA,0CACA,gDACA,sCACA,gDACA,oDACA,8DACA,gDACA,oBACA,sBACA,8CACA,4BACA,sBACA,0BACA,8BACA,kCACA,8CACA,0DACA,kFACA,8BACA,kBACA,sBACA,kCACA,sBACA,kDACA,0BACA,4BACA,sBACA,yBACA,mCACA,qCACA,2CACA,6DACA,qCACA,yCACA,6DACA,yEACA,iGACA,6CACA,iCACA,qCACA,iBAIA,iCACA,uCACA,yCACA,qCAIA,2BACA,+BArIF,CAAYA,EAAA,EAAAA,QAAA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BoyE,EAAwBzjE,GAC9D,IAAIxC,EAASimE,EAAMjmE,OACnB,GAAc,GAAVA,EAAa,OAAOnM,EAAOm2E,MAC/B,GAAc,GAAVhqE,EAAa,CACf,IAAI09E,EAASzX,EAAM,GACnB,GAAI,EAAA3N,kBAAkBolB,IAAWl7E,EAAM,OAAOk7E,EAC9C,GAAI,EAAApnC,gBAAgBonC,IAAW,EAAAlvD,aAAa4rB,MAAO,CACjD,IAAIkzB,EAAQ,EAAA1Q,mBAAmB8gB,GAC3BtyC,EAAW,IAAI1vC,MAAqB4xE,GACxC,IAAK,IAAI/4E,EAAI,EAAGA,EAAI+4E,IAAS/4E,EAAG62C,EAAS72C,GAAK,EAAAuoE,cAAc4gB,EAAQnpF,GACpE,OAAOV,EAAOotE,MAAM,EAAAtE,aAAa+gB,GAAStyC,EAAU5oC,IAGxD,OAAO3O,EAAOotE,MAAM,KAAMgF,EACxBzjE,GAAQ,EAAA+rB,WAAWovD,KACf,EAAArlB,kBAAkB2N,EAAMjmE,EAAS,IACjCwC,GA9sRR,aA8rRA,a,8ECv8RA,SAAY7D,GACV,2CACA,mDACA,yCACA,6DACA,uHACA,iMACA,iFACA,2FACA,2EACA,yEACA,2EACA,yIACA,uGACA,6EACA,6DACA,6FACA,uEACA,mDACA,+EACA,mGACA,uHACA,6FACA,2JACA,uFACA,iGACA,qHACA,qGACA,+DACA,iEACA,iGACA,oEACA,oDACA,oCACA,8FACA,kEACA,8CACA,gHACA,oHACA,8HACA,0GACA,8GACA,4EACA,oFACA,oGACA,0GACA,oHACA,wFACA,gFACA,kIACA,kIACA,4FACA,oHACA,oFACA,wKACA,sLACA,kIACA,oDACA,wCACA,oJACA,gDACA,kGACA,wGACA,0CACA,kEACA,0DACA,gDACA,gEACA,sIACA,4IACA,0DACA,4DACA,wEACA,sDACA,4FACA,4FACA,oHACA,wDACA,sDACA,8HACA,oKACA,sFACA,wEACA,sKACA,sJACA,8IACA,wFACA,0IACA,0DACA,kDACA,gFACA,gGACA,wDACA,kFACA,sFACA,0GACA,8GACA,wMACA,oFACA,0NACA,sFACA,0IACA,gMACA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AM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAC1C,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,KAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAEtCC,EAA+B,CACnC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IACtE,IAAK,IAAK,IAAK,IAAK,IACpB,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KACxE,KAAM,KAAM,KAAM,KAAM,KACxB,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MACtE,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,MAA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","file":"assemblyscript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"binaryen\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"binaryen\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"assemblyscript\"] = factory(require(\"binaryen\"));\n\telse\n\t\troot[\"assemblyscript\"] = factory(root[\"binaryen\"]);\n})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE__20__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 17);\n","/**\n * Common constants.\n * @module common\n *//***/\n\n/** Indicates traits of a {@link Node} or {@link Element}. */\nexport enum CommonFlags {\n  /** No flags set. */\n  NONE = 0,\n\n  // Basic modifiers\n\n  /** Has an `import` modifier. */\n  IMPORT = 1 << 0,\n  /** Has an `export` modifier. */\n  EXPORT = 1 << 1,\n  /** Has a `declare` modifier. */\n  DECLARE = 1 << 2,\n  /** Has a `const` modifier. */\n  CONST = 1 << 3,\n  /** Has a `let` modifier. */\n  LET = 1 << 4,\n  /** Has a `static` modifier. */\n  STATIC = 1 << 5,\n  /** Has a `readonly` modifier. */\n  READONLY = 1 << 6,\n  /** Has an `abstract` modifier. */\n  ABSTRACT = 1 << 7,\n  /** Has a `public` modifier. */\n  PUBLIC = 1 << 8,\n  /** Has a `private` modifier. */\n  PRIVATE = 1 << 9,\n  /** Has a `protected` modifier. */\n  PROTECTED = 1 << 10,\n  /** Has a `get` modifier. */\n  GET = 1 << 11,\n  /** Has a `set` modifier. */\n  SET = 1 << 12,\n  /** Has a definite assignment assertion `!` as in `x!: i32;`. */\n  DEFINITE_ASSIGNMENT = 1 << 13,\n\n  // Extended modifiers usually derived from basic modifiers\n\n  /** Is ambient, that is either declared or nested in a declared element. */\n  AMBIENT = 1 << 14,\n  /** Is generic. */\n  GENERIC = 1 << 15,\n  /** Is part of a generic context. */\n  GENERIC_CONTEXT = 1 << 16,\n  /** Is an instance member. */\n  INSTANCE = 1 << 17,\n  /** Is a constructor. */\n  CONSTRUCTOR = 1 << 18,\n  /** Is a module export. */\n  MODULE_EXPORT = 1 << 19,\n  /** Is a module import. */\n  MODULE_IMPORT = 1 << 20,\n\n  // Compilation states\n\n  /** Is resolved. */\n  RESOLVED = 1 << 21,\n  /** Is compiled. */\n  COMPILED = 1 << 22,\n  /** Has a constant value and is therefore inlined. */\n  INLINED = 1 << 23,\n  /** Is scoped. */\n  SCOPED = 1 << 24,\n  /** Is a trampoline. */\n  TRAMPOLINE = 1 << 25,\n  /** Is a virtual method. */\n  VIRTUAL = 1 << 26,\n  /** Is the main function. */\n  MAIN = 1 << 27,\n\n  // Other\n\n  /** Is quoted. */\n  QUOTED = 1 << 28\n}\n\n/** Path delimiter inserted between file system levels. */\nexport const PATH_DELIMITER = \"/\";\n/** Substitution used to indicate the parent directory. */\nexport const PARENT_SUBST = \"..\";\n/** Function name prefix used for getters. */\nexport const GETTER_PREFIX = \"get:\";\n/** Function name prefix used for setters. */\nexport const SETTER_PREFIX = \"set:\";\n/** Delimiter used between class names and instance members. */\nexport const INSTANCE_DELIMITER = \"#\";\n/** Delimiter used between class and namespace names and static members. */\nexport const STATIC_DELIMITER = \".\";\n/** Delimiter used between a function and its inner elements. */\nexport const INNER_DELIMITER = \"~\";\n/** Substitution used to indicate a library directory. */\nexport const LIBRARY_SUBST = \"~lib\";\n/** Library directory prefix. */\nexport const LIBRARY_PREFIX = LIBRARY_SUBST + PATH_DELIMITER;\n/** Path index suffix. */\nexport const INDEX_SUFFIX = PATH_DELIMITER + \"index\";\n\n/** Common compiler symbols. */\nexport namespace CommonSymbols {\n  // special\n  export const EMPTY = \"\";\n  // types\n  export const i8 = \"i8\";\n  export const i16 = \"i16\";\n  export const i32 = \"i32\";\n  export const i64 = \"i64\";\n  export const isize = \"isize\";\n  export const u8 = \"u8\";\n  export const u16 = \"u16\";\n  export const u32 = \"u32\";\n  export const u64 = \"u64\";\n  export const usize = \"usize\";\n  export const bool = \"bool\";\n  export const f32 = \"f32\";\n  export const f64 = \"f64\";\n  export const v128 = \"v128\";\n  export const anyref = \"anyref\";\n  export const i8x16 = \"i8x16\";\n  export const u8x16 = \"u8x16\";\n  export const i16x8 = \"i16x8\";\n  export const u16x8 = \"u16x8\";\n  export const i32x4 = \"i32x4\";\n  export const u32x4 = \"u32x4\";\n  export const i64x2 = \"i64x2\";\n  export const u64x2 = \"u64x2\";\n  export const f32x4 = \"f32x4\";\n  export const f64x2 = \"f64x2\";\n  export const void_ = \"void\";\n  export const number = \"number\";\n  export const boolean = \"boolean\";\n  export const string = \"string\";\n  export const native = \"native\";\n  export const indexof = \"indexof\";\n  export const valueof = \"valueof\";\n  export const returnof = \"returnof\";\n  // aliases\n  export const null_ = \"null\";\n  export const true_ = \"true\";\n  export const false_ = \"false\";\n  // objects\n  export const this_ = \"this\";\n  export const super_ = \"super\";\n  export const constructor = \"constructor\";\n  // constants\n  export const ASC_TARGET = \"ASC_TARGET\";\n  export const ASC_NO_TREESHAKING = \"ASC_NO_TREESHAKING\";\n  export const ASC_NO_ASSERT = \"ASC_NO_ASSERT\";\n  export const ASC_MEMORY_BASE = \"ASC_MEMORY_BASE\";\n  export const ASC_OPTIMIZE_LEVEL = \"ASC_OPTIMIZE_LEVEL\";\n  export const ASC_SHRINK_LEVEL = \"ASC_SHRINK_LEVEL\";\n  export const ASC_FEATURE_SIGN_EXTENSION = \"ASC_FEATURE_SIGN_EXTENSION\";\n  export const ASC_FEATURE_MUTABLE_GLOBALS = \"ASC_FEATURE_MUTABLE_GLOBALS\";\n  export const ASC_FEATURE_NONTRAPPING_F2I = \"ASC_FEATURE_NONTRAPPING_F2I\";\n  export const ASC_FEATURE_BULK_MEMORY = \"ASC_FEATURE_BULK_MEMORY\";\n  export const ASC_FEATURE_SIMD = \"ASC_FEATURE_SIMD\";\n  export const ASC_FEATURE_THREADS = \"ASC_FEATURE_THREADS\";\n  export const ASC_FEATURE_EXCEPTION_HANDLING = \"ASC_FEATURE_EXCEPTION_HANDLING\";\n  export const ASC_FEATURE_TAIL_CALLS = \"ASC_FEATURE_TAIL_CALLS\";\n  export const ASC_FEATURE_REFERENCE_TYPES = \"ASC_FEATURE_REFERENCE_TYPES\";\n  // classes\n  export const I8 = \"I8\";\n  export const I16 = \"I16\";\n  export const I32 = \"I32\";\n  export const I64 = \"I64\";\n  export const Isize = \"Isize\";\n  export const U8 = \"U8\";\n  export const U16 = \"U16\";\n  export const U32 = \"U32\";\n  export const U64 = \"U64\";\n  export const Usize = \"Usize\";\n  export const Bool = \"Bool\";\n  export const F32 = \"F32\";\n  export const F64 = \"F64\";\n  export const V128 = \"V128\";\n  export const Anyref = \"Anyref\";\n  export const String = \"String\";\n  export const Array = \"Array\";\n  export const FixedArray = \"FixedArray\";\n  export const Set = \"Set\";\n  export const Map = \"Map\";\n  export const ArrayBufferView = \"ArrayBufferView\";\n  export const ArrayBuffer = \"ArrayBuffer\";\n  export const Math = \"Math\";\n  export const Mathf = \"Mathf\";\n  export const Int8Array = \"Int8Array\";\n  export const Int16Array = \"Int16Array\";\n  export const Int32Array = \"Int32Array\";\n  export const Int64Array = \"Int64Array\";\n  export const Uint8Array = \"Uint8Array\";\n  export const Uint8ClampedArray = \"Uint8ClampedArray\";\n  export const Uint16Array = \"Uint16Array\";\n  export const Uint32Array = \"Uint32Array\";\n  export const Uint64Array = \"Uint64Array\";\n  export const Float32Array = \"Float32Array\";\n  export const Float64Array = \"Float64Array\";\n  // runtime\n  export const abort = \"abort\";\n  export const pow = \"pow\";\n  export const mod = \"mod\";\n  export const alloc = \"__alloc\";\n  export const realloc = \"__realloc\";\n  export const free = \"__free\";\n  export const retain = \"__retain\";\n  export const release = \"__release\";\n  export const collect = \"__collect\";\n  export const typeinfo = \"__typeinfo\";\n  export const instanceof_ = \"__instanceof\";\n  export const visit = \"__visit\";\n  export const allocArray = \"__allocArray\";\n}\n\n// shared\nexport { Feature, featureToString } from \"../std/assembly/shared/feature\";\nexport { Target } from \"../std/assembly/shared/target\";\nexport { Typeinfo, TypeinfoFlags } from \"../std/assembly/shared/typeinfo\";\n","/**\n * Various compiler utilities.\n * @module util\n * @preferred\n *//***/\n\nexport * from \"./bitset\";\nexport * from \"./charcode\";\nexport * from \"./collections\";\nexport * from \"./path\";\nexport * from \"./text\";\nexport * from \"./binary\";\n\n/** Tests if `x` is a power of two. */\nexport function isPowerOf2(x: i32): bool {\n  return x != 0 && (x & (x - 1)) == 0;\n}\n","/**\n * Shared diagnostic handling inherited by the parser and the compiler.\n * @module diagnostics\n * @preferred\n *//***/\n\nimport {\n  Range\n} from \"./ast\";\n\nimport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\nimport {\n  isLineBreak\n} from \"./util\";\n\nexport {\n  DiagnosticCode,\n  diagnosticCodeToString\n} from \"./diagnosticMessages.generated\";\n\n/** Indicates the category of a {@link DiagnosticMessage}. */\nexport enum DiagnosticCategory {\n  /** Informatory message. */\n  INFO,\n  /** Warning message. */\n  WARNING,\n  /** Error message. */\n  ERROR\n}\n\n/** Returns the string representation of the specified diagnostic category. */\nexport function diagnosticCategoryToString(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return \"INFO\";\n    case DiagnosticCategory.WARNING: return \"WARNING\";\n    case DiagnosticCategory.ERROR: return \"ERROR\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** ANSI escape sequence for blue foreground. */\nexport const COLOR_BLUE: string = \"\\u001b[96m\";\n/** ANSI escape sequence for yellow foreground. */\nexport const COLOR_YELLOW: string = \"\\u001b[93m\";\n/** ANSI escape sequence for red foreground. */\nexport const COLOR_RED: string = \"\\u001b[91m\";\n/** ANSI escape sequence to reset the foreground color. */\nexport const COLOR_RESET: string = \"\\u001b[0m\";\n\n/** Returns the ANSI escape sequence for the specified category. */\nexport function diagnosticCategoryToColor(category: DiagnosticCategory): string {\n  switch (category) {\n    case DiagnosticCategory.INFO: return COLOR_BLUE;\n    case DiagnosticCategory.WARNING: return COLOR_YELLOW;\n    case DiagnosticCategory.ERROR: return COLOR_RED;\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\n/** Represents a diagnostic message. */\nexport class DiagnosticMessage {\n\n  /** Message code. */\n  code: i32;\n  /** Message category. */\n  category: DiagnosticCategory;\n  /** Message text. */\n  message: string;\n  /** Respective source range, if any. */\n  range: Range | null = null;\n  /** Related range, if any. */\n  relatedRange: Range | null = null;\n\n  /** Constructs a new diagnostic message. */\n  private constructor(code: i32, category: DiagnosticCategory, message: string) {\n    this.code = code;\n    this.category = category;\n    this.message = message;\n  }\n\n  /** Creates a new diagnostic message of the specified category. */\n  static create(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): DiagnosticMessage {\n    var message = diagnosticCodeToString(code);\n    if (arg0 != null) message = message.replace(\"{0}\", arg0);\n    if (arg1 != null) message = message.replace(\"{1}\", arg1);\n    if (arg2 != null) message = message.replace(\"{2}\", arg2);\n    return new DiagnosticMessage(code, category, message);\n  }\n\n  /** Creates a new informatory diagnostic message. */\n  static createInfo(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.INFO, arg0, arg1);\n  }\n\n  /** Creates a new warning diagnostic message. */\n  static createWarning(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.WARNING, arg0, arg1);\n  }\n\n  /** Creates a new error diagnostic message. */\n  static createError(\n    code: DiagnosticCode,\n    arg0: string | null = null,\n    arg1: string | null = null\n  ): DiagnosticMessage {\n    return DiagnosticMessage.create(code, DiagnosticCategory.ERROR, arg0, arg1);\n  }\n\n  /** Adds a source range to this message. */\n  withRange(range: Range): this {\n    this.range = range;\n    return this;\n  }\n\n  /** Adds a related source range to this message. */\n  withRelatedRange(range: Range): this {\n    this.relatedRange = range;\n    return this;\n  }\n\n  /** Converts this message to a string. */\n  toString(): string {\n    if (this.range) {\n      return (\n        diagnosticCategoryToString(this.category) +\n        \" \" +\n        this.code.toString(10) +\n        \": \\\"\" +\n        this.message +\n        \"\\\" in \" +\n        this.range.source.normalizedPath +\n        \":\" +\n        this.range.line.toString(10) +\n        \":\" +\n        this.range.column.toString(10)\n      );\n    }\n    return (\n      diagnosticCategoryToString(this.category) +\n      \" \" +\n      this.code.toString(10) +\n      \": \" +\n      this.message\n    );\n  }\n}\n\n/** Formats a diagnostic message, optionally with terminal colors and source context. */\nexport function formatDiagnosticMessage(\n  message: DiagnosticMessage,\n  useColors: bool = false,\n  showContext: bool = false\n): string {\n\n  // general information\n  var sb: string[] = [];\n  if (useColors) sb.push(diagnosticCategoryToColor(message.category));\n  sb.push(diagnosticCategoryToString(message.category));\n  if (useColors) sb.push(COLOR_RESET);\n  sb.push(message.code < 1000 ? \" AS\" : \" TS\");\n  sb.push(message.code.toString(10));\n  sb.push(\": \");\n  sb.push(message.message);\n\n  // include range information if available\n  if (message.range) {\n\n    // include context information if requested\n    let range = message.range;\n    if (showContext) {\n      sb.push(\"\\n\");\n      sb.push(formatDiagnosticContext(range, useColors));\n    }\n    sb.push(\"\\n\");\n    sb.push(\" in \");\n    sb.push(range.source.normalizedPath);\n    sb.push(\"(\");\n    sb.push(range.line.toString(10));\n    sb.push(\",\");\n    sb.push(range.column.toString(10));\n    sb.push(\")\");\n\n    let relatedRange = message.relatedRange;\n    if (relatedRange) {\n      if (showContext) {\n        sb.push(\"\\n\");\n        sb.push(formatDiagnosticContext(relatedRange, useColors));\n      }\n      sb.push(\"\\n\");\n      sb.push(\" in \");\n      sb.push(relatedRange.source.normalizedPath);\n      sb.push(\"(\");\n      sb.push(relatedRange.line.toString(10));\n      sb.push(\",\");\n      sb.push(relatedRange.column.toString(10));\n      sb.push(\")\");\n    }\n  }\n  return sb.join(\"\");\n}\n\n/** Formats the diagnostic context for the specified range, optionally with terminal colors. */\nexport function formatDiagnosticContext(range: Range, useColors: bool = false): string {\n  var text = range.source.text;\n  var len = text.length;\n  var start = range.start;\n  var end = range.end;\n  while (start > 0 && !isLineBreak(text.charCodeAt(start - 1))) start--;\n  while (end < len && !isLineBreak(text.charCodeAt(end))) end++;\n  var sb: string[] = [\n    \"\\n \",\n    text.substring(start, end),\n    \"\\n \"\n  ];\n  while (start < range.start) {\n    sb.push(\" \");\n    start++;\n  }\n  if (useColors) sb.push(COLOR_RED);\n  if (range.start == range.end) {\n    sb.push(\"^\");\n  } else {\n    while (start++ < range.end) {\n      if (isLineBreak(text.charCodeAt(start))) {\n        sb.push(start == range.start + 1 ? \"^\" : \"~\");\n        break;\n      }\n      sb.push(\"~\");\n    }\n  }\n  if (useColors) sb.push(COLOR_RESET);\n  return sb.join(\"\");\n}\n\n/** Base class of all diagnostic emitters. */\nexport abstract class DiagnosticEmitter {\n\n  /** Diagnostic messages emitted so far. */\n  diagnostics: DiagnosticMessage[];\n\n  /** Initializes this diagnostic emitter. */\n  protected constructor(diagnostics: DiagnosticMessage[] | null = null) {\n    this.diagnostics = diagnostics ? <DiagnosticMessage[]>diagnostics : new Array();\n  }\n\n  /** Emits a diagnostic message of the specified category. */\n  emitDiagnostic(\n    code: DiagnosticCode,\n    category: DiagnosticCategory,\n    range: Range,\n    relatedRange: Range | null,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    var message = DiagnosticMessage.create(code, category, arg0, arg1, arg2).withRange(range);\n    if (relatedRange) message.relatedRange = relatedRange;\n    this.diagnostics.push(message);\n    // console.log(formatDiagnosticMessage(message, true, true) + \"\\n\"); // temporary\n    // console.log(<string>new Error(\"stack\").stack);\n  }\n\n  /** Emits an informatory diagnostic message. */\n  info(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an informatory diagnostic message with a related range. */\n  infoRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.INFO, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message. */\n  warning(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits a warning diagnostic message with a related range. */\n  warningRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.WARNING, range, relatedRange, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message. */\n  error(\n    code: DiagnosticCode,\n    range: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, null, arg0, arg1, arg2);\n  }\n\n  /** Emits an error diagnostic message with a related range. */\n  errorRelated(\n    code: DiagnosticCode,\n    range: Range,\n    relatedRange: Range,\n    arg0: string | null = null,\n    arg1: string | null = null,\n    arg2: string | null = null\n  ): void {\n    this.emitDiagnostic(code, DiagnosticCategory.ERROR, range, relatedRange, arg0, arg1, arg2);\n  }\n}\n","/**\n * Abstract syntax tree representing a source file once parsed.\n * @module ast\n *//***/\n\nimport {\n  CommonFlags,\n  CommonSymbols,\n  PATH_DELIMITER,\n  LIBRARY_PREFIX,\n  LIBRARY_SUBST\n} from \"./common\";\n\nimport {\n  Token,\n  Tokenizer,\n  Range\n} from \"./tokenizer\";\n\nimport {\n  normalizePath,\n  resolvePath,\n  CharCode\n} from \"./util\";\n\nexport { Token, Range };\n\n/** Indicates the kind of a node. */\nexport enum NodeKind {\n\n  SOURCE,\n\n  // types\n  NAMEDTYPE,\n  FUNCTIONTYPE,\n  TYPENAME,\n  TYPEPARAMETER,\n  PARAMETER,\n\n  // expressions\n  IDENTIFIER,\n  ASSERTION,\n  BINARY,\n  CALL,\n  CLASS,\n  COMMA,\n  ELEMENTACCESS,\n  FALSE,\n  FUNCTION,\n  INSTANCEOF,\n  LITERAL,\n  NEW,\n  NULL,\n  PARENTHESIZED,\n  PROPERTYACCESS,\n  TERNARY,\n  SUPER,\n  THIS,\n  TRUE,\n  CONSTRUCTOR,\n  UNARYPOSTFIX,\n  UNARYPREFIX,\n\n  // statements\n  BLOCK,\n  BREAK,\n  CONTINUE,\n  DO,\n  EMPTY,\n  EXPORT,\n  EXPORTDEFAULT,\n  EXPORTIMPORT,\n  EXPRESSION,\n  FOR,\n  IF,\n  IMPORT,\n  RETURN,\n  SWITCH,\n  THROW,\n  TRY,\n  VARIABLE,\n  VOID,\n  WHILE,\n\n  // declaration statements\n  CLASSDECLARATION,\n  ENUMDECLARATION,\n  ENUMVALUEDECLARATION,\n  FIELDDECLARATION,\n  FUNCTIONDECLARATION,\n  IMPORTDECLARATION,\n  INDEXSIGNATUREDECLARATION,\n  INTERFACEDECLARATION,\n  METHODDECLARATION,\n  NAMESPACEDECLARATION,\n  TYPEDECLARATION,\n  VARIABLEDECLARATION,\n\n  // special\n  DECORATOR,\n  EXPORTMEMBER,\n  SWITCHCASE,\n  COMMENT\n}\n\n/** Checks if a node represents a constant value. */\nexport function nodeIsConstantValue(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.LITERAL:\n    case NodeKind.NULL:\n    case NodeKind.TRUE:\n    case NodeKind.FALSE: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable. */\nexport function nodeIsCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.ASSERTION: // if kind=NONNULL\n    case NodeKind.CALL:\n    case NodeKind.ELEMENTACCESS:\n    case NodeKind.PARENTHESIZED:\n    case NodeKind.PROPERTYACCESS:\n    case NodeKind.SUPER: return true;\n  }\n  return false;\n}\n\n/** Checks if a node might be callable with generic arguments. */\nexport function nodeIsGenericCallable(kind: NodeKind): bool {\n  switch (kind) {\n    case NodeKind.IDENTIFIER:\n    case NodeKind.PROPERTYACCESS: return true;\n  }\n  return false;\n}\n\n/** Base class of all nodes. */\nexport abstract class Node {\n\n  /** Node kind indicator. */\n  kind: NodeKind;\n  /** Source range. */\n  range: Range;\n\n  // types\n\n  static createTypeName(\n    name: IdentifierExpression,\n    range: Range\n  ): TypeName {\n    var typeName = new TypeName();\n    typeName.range = range;\n    typeName.identifier = name;\n    typeName.next = null;\n    return typeName;\n  }\n\n  static createSimpleTypeName(\n    name: string,\n    range: Range\n  ): TypeName {\n    return Node.createTypeName(Node.createIdentifierExpression(name, range), range);\n  }\n\n  static createNamedType(\n    name: TypeName,\n    typeArguments: TypeNode[] | null,\n    isNullable: bool,\n    range: Range\n  ): NamedTypeNode {\n    var type = new NamedTypeNode();\n    type.range = range;\n    type.name = name;\n    type.typeArguments = typeArguments;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createFunctionType(\n    parameters: ParameterNode[],\n    returnType: TypeNode,\n    explicitThisType: NamedTypeNode | null,\n    isNullable: bool,\n    range: Range\n  ): FunctionTypeNode {\n    var type = new FunctionTypeNode();\n    type.range = range;\n    type.parameters = parameters;\n    type.returnType = returnType;\n    type.explicitThisType = explicitThisType;\n    type.isNullable = isNullable;\n    return type;\n  }\n\n  static createOmittedType(\n    range: Range\n  ): NamedTypeNode {\n    return Node.createNamedType(\n      Node.createSimpleTypeName(\"\", range),\n      null,\n      false,\n      range\n    );\n  }\n\n  static createTypeParameter(\n    name: IdentifierExpression,\n    extendsType: NamedTypeNode | null,\n    defaultType: NamedTypeNode | null,\n    range: Range\n  ): TypeParameterNode {\n    var elem = new TypeParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.extendsType = extendsType;\n    elem.defaultType = defaultType;\n    return elem;\n  }\n\n  static createParameter(\n    name: IdentifierExpression,\n    type: TypeNode,\n    initializer: Expression | null,\n    kind: ParameterKind,\n    range: Range\n  ): ParameterNode {\n    var elem = new ParameterNode();\n    elem.range = range;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.parameterKind = kind;\n    return elem;\n  }\n\n  // special\n\n  static createDecorator(\n    name: Expression,\n    args: Expression[] | null,\n    range: Range\n  ): DecoratorNode {\n    var stmt = new DecoratorNode();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.arguments = args;\n    stmt.decoratorKind = DecoratorKind.fromNode(name);\n    return stmt;\n  }\n\n  static createComment(\n    text: string,\n    kind: CommentKind,\n    range: Range\n  ): CommentNode {\n    var node = new CommentNode();\n    node.range = range;\n    node.commentKind = kind;\n    node.text = text;\n    return node;\n  }\n\n  // expressions\n\n  static createIdentifierExpression(\n    name: string,\n    range: Range,\n    isQuoted: bool = false\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = name; // TODO: extract from range\n    expr.symbol = name; // TODO: Symbol.for(name)\n    expr.isQuoted = isQuoted;\n    return expr;\n  }\n\n  static createEmptyIdentifierExpression(\n    range: Range\n  ): IdentifierExpression {\n    var expr = new IdentifierExpression();\n    expr.range = range;\n    expr.text = \"\";\n    return expr;\n  }\n\n  static createArrayLiteralExpression(\n    elements: (Expression | null)[],\n    range: Range\n  ): ArrayLiteralExpression {\n    var expr = new ArrayLiteralExpression();\n    expr.range = range;\n    expr.elementExpressions = elements;\n    return expr;\n  }\n\n  static createAssertionExpression(\n    assertionKind: AssertionKind,\n    expression: Expression,\n    toType: TypeNode | null,\n    range: Range\n  ): AssertionExpression {\n    var expr = new AssertionExpression();\n    expr.range = range;\n    expr.assertionKind = assertionKind;\n    expr.expression = expression;\n    expr.toType = toType;\n    return expr;\n  }\n\n  static createBinaryExpression(\n    operator: Token,\n    left: Expression,\n    right: Expression,\n    range: Range\n  ): BinaryExpression {\n    var expr = new BinaryExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.left = left;\n    expr.right = right;\n    return expr;\n  }\n\n  static createCallExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): CallExpression {\n    var expr = new CallExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createClassExpression(\n    declaration: ClassDeclaration\n  ): ClassExpression {\n    var expr = new ClassExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createCommaExpression(\n    expressions: Expression[],\n    range: Range\n  ): CommaExpression {\n    var expr = new CommaExpression();\n    expr.range = range;\n    expr.expressions = expressions;\n    return expr;\n  }\n\n  static createConstructorExpression(\n    range: Range\n  ): ConstructorExpression {\n    var expr = new ConstructorExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createElementAccessExpression(\n    expression: Expression,\n    element: Expression,\n    range: Range\n  ): ElementAccessExpression {\n    var expr = new ElementAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.elementExpression = element;\n    return expr;\n  }\n\n  static createFalseExpression(\n    range: Range\n  ): FalseExpression {\n    var expr = new FalseExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createFloatLiteralExpression(\n    value: f64,\n    range: Range\n  ): FloatLiteralExpression {\n    var expr = new FloatLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createFunctionExpression(\n    declaration: FunctionDeclaration\n  ): FunctionExpression {\n    var expr = new FunctionExpression();\n    expr.range = declaration.range;\n    expr.declaration = declaration;\n    return expr;\n  }\n\n  static createInstanceOfExpression(\n    expression: Expression,\n    isType: TypeNode,\n    range: Range\n  ): InstanceOfExpression {\n    var expr = new InstanceOfExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.isType = isType;\n    return expr;\n  }\n\n  static createIntegerLiteralExpression(\n    value: I64,\n    range: Range\n  ): IntegerLiteralExpression {\n    var expr = new IntegerLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createNewExpression(\n    expression: Expression,\n    typeArgs: TypeNode[] | null,\n    args: Expression[],\n    range: Range\n  ): NewExpression {\n    var expr = new NewExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.typeArguments = typeArgs;\n    expr.arguments = args;\n    return expr;\n  }\n\n  static createNullExpression(\n    range: Range\n  ): NullExpression {\n    var expr = new NullExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createObjectLiteralExpression(\n    names: IdentifierExpression[],\n    values: Expression[],\n    range: Range\n  ): ObjectLiteralExpression {\n    var expr = new ObjectLiteralExpression();\n    expr.range = range;\n    expr.names = names;\n    expr.values = values;\n    return expr;\n  }\n\n  static createParenthesizedExpression(\n    expression: Expression,\n    range: Range\n  ): ParenthesizedExpression {\n    var expr = new ParenthesizedExpression();\n    expr.range = range;\n    expr.expression = expression;\n    return expr;\n  }\n\n  static createPropertyAccessExpression(\n    expression: Expression,\n    property: IdentifierExpression,\n    range: Range\n  ): PropertyAccessExpression {\n    var expr = new PropertyAccessExpression();\n    expr.range = range;\n    expr.expression = expression;\n    expr.property = property;\n    return expr;\n  }\n\n  static createRegexpLiteralExpression(\n    pattern: string,\n    flags: string,\n    range: Range\n  ): RegexpLiteralExpression {\n    var expr = new RegexpLiteralExpression();\n    expr.range = range;\n    expr.pattern = pattern;\n    expr.patternFlags = flags;\n    return expr;\n  }\n\n  static createTernaryExpression(\n    condition: Expression,\n    ifThen: Expression,\n    ifElse: Expression,\n    range: Range\n  ): TernaryExpression {\n    var expr = new TernaryExpression();\n    expr.range = range;\n    expr.condition = condition;\n    expr.ifThen = ifThen;\n    expr.ifElse = ifElse;\n    return expr;\n  }\n\n  static createStringLiteralExpression(\n    value: string,\n    range: Range\n  ): StringLiteralExpression {\n    var expr = new StringLiteralExpression();\n    expr.range = range;\n    expr.value = value;\n    return expr;\n  }\n\n  static createSuperExpression(\n    range: Range\n  ): SuperExpression {\n    var expr = new SuperExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createThisExpression(\n    range: Range\n  ): ThisExpression {\n    var expr = new ThisExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createTrueExpression(\n    range: Range\n  ): TrueExpression {\n    var expr = new TrueExpression();\n    expr.range = range;\n    return expr;\n  }\n\n  static createUnaryPostfixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPostfixExpression {\n    var expr = new UnaryPostfixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  static createUnaryPrefixExpression(\n    operator: Token,\n    operand: Expression,\n    range: Range\n  ): UnaryPrefixExpression {\n    var expr = new UnaryPrefixExpression();\n    expr.range = range;\n    expr.operator = operator;\n    expr.operand = operand;\n    return expr;\n  }\n\n  // statements\n\n  static createBlockStatement(\n    statements: Statement[],\n    range: Range\n  ): BlockStatement {\n    var stmt = new BlockStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    return stmt;\n  }\n\n  static createBreakStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): BreakStatement {\n    var stmt = new BreakStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createClassDeclaration(\n    identifier: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    implementsTypes: NamedTypeNode[] | null, // can't be functions\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): ClassDeclaration {\n    var stmt = new ClassDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = identifier;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.implementsTypes = implementsTypes;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createContinueStatement(\n    label: IdentifierExpression | null,\n    range: Range\n  ): ContinueStatement {\n    var stmt = new ContinueStatement();\n    stmt.range = range;\n    stmt.label = label;\n    return stmt;\n  }\n\n  static createDoStatement(\n    statement: Statement,\n    condition: Expression,\n    range: Range\n  ): DoStatement {\n    var stmt = new DoStatement();\n    stmt.range = range;\n    stmt.statement = statement;\n    stmt.condition = condition;\n    return stmt;\n  }\n\n  static createEmptyStatement(\n    range: Range\n  ): EmptyStatement {\n    var stmt = new EmptyStatement();\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createEnumDeclaration(\n    name: IdentifierExpression,\n    members: EnumValueDeclaration[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumDeclaration {\n    var stmt = new EnumDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.values = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createEnumValueDeclaration(\n    name: IdentifierExpression,\n    value: Expression | null,\n    flags: CommonFlags,\n    range: Range\n  ): EnumValueDeclaration {\n    var stmt = new EnumValueDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createExportStatement(\n    members: ExportMember[] | null,\n    path: StringLiteralExpression | null,\n    isDeclare: bool,\n    range: Range\n  ): ExportStatement {\n    var stmt = new ExportStatement();\n    stmt.range = range;\n    stmt.members = members;\n    stmt.path = path;\n    if (path) {\n      let normalizedPath = normalizePath(path.value);\n      if (path.value.startsWith(\".\")) { // relative\n        normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n      } else { // absolute\n        if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n      }\n      stmt.internalPath = mangleInternalPath(normalizedPath);\n    } else {\n      stmt.internalPath = null;\n    }\n    stmt.isDeclare = isDeclare;\n    return stmt;\n  }\n\n  static createExportDefaultStatement(\n    declaration: DeclarationStatement,\n    range: Range\n  ): ExportDefaultStatement {\n    var stmt = new ExportDefaultStatement();\n    stmt.declaration = declaration;\n    stmt.range = range;\n    return stmt;\n  }\n\n  static createExportImportStatement(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression,\n    range: Range\n  ): ExportImportStatement {\n    var stmt = new ExportImportStatement();\n    stmt.range = range;\n    stmt.name = name;\n    stmt.externalName = externalName;\n    return stmt;\n  }\n\n  static createExportMember(\n    name: IdentifierExpression,\n    externalName: IdentifierExpression | null,\n    range: Range\n  ): ExportMember {\n    var elem = new ExportMember();\n    elem.range = range;\n    elem.localName = name;\n    if (!externalName) externalName = name;\n    elem.exportedName = externalName;\n    return elem;\n  }\n\n  static createExpressionStatement(\n    expression: Expression\n  ): ExpressionStatement {\n    var stmt = new ExpressionStatement();\n    stmt.range = expression.range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createIfStatement(\n    condition: Expression,\n    ifTrue: Statement,\n    ifFalse: Statement | null,\n    range: Range\n  ): IfStatement {\n    var stmt = new IfStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.ifTrue = ifTrue;\n    stmt.ifFalse = ifFalse;\n    return stmt;\n  }\n\n  static createImportStatement(\n    decls: ImportDeclaration[] | null,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = decls;\n    stmt.namespaceName = null;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) { // relative in project\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else { // absolute in library\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportStatementWithWildcard(\n    identifier: IdentifierExpression,\n    path: StringLiteralExpression,\n    range: Range\n  ): ImportStatement {\n    var stmt = new ImportStatement();\n    stmt.range = range;\n    stmt.declarations = null;\n    stmt.namespaceName = identifier;\n    stmt.path = path;\n    var normalizedPath = normalizePath(path.value);\n    if (path.value.startsWith(\".\")) {\n      normalizedPath = resolvePath(normalizedPath, range.source.internalPath);\n    } else {\n      if (!normalizedPath.startsWith(LIBRARY_PREFIX)) normalizedPath = LIBRARY_PREFIX + normalizedPath;\n    }\n    stmt.internalPath = mangleInternalPath(normalizedPath);\n    return stmt;\n  }\n\n  static createImportDeclaration(\n    foreignName: IdentifierExpression,\n    name: IdentifierExpression | null,\n    range: Range\n  ): ImportDeclaration {\n    var elem = new ImportDeclaration();\n    elem.range = range;\n    elem.foreignName = foreignName;\n    if (!name) name = foreignName;\n    elem.name = name;\n    return elem;\n  }\n\n  static createInterfaceDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    extendsType: NamedTypeNode | null, // can't be a function\n    members: DeclarationStatement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): InterfaceDeclaration {\n    var stmt = new InterfaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.extendsType = extendsType;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createFieldDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): FieldDeclaration {\n    var stmt = new FieldDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.type = type;\n    stmt.initializer = initializer;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createForStatement(\n    initializer: Statement | null,\n    condition: Expression | null,\n    incrementor: Expression | null,\n    statement: Statement,\n    range: Range\n  ): ForStatement {\n    var stmt = new ForStatement();\n    stmt.range = range;\n    stmt.initializer = initializer;\n    stmt.condition = condition;\n    stmt.incrementor = incrementor;\n    stmt.statement = statement;\n    return stmt;\n  }\n\n  static createFunctionDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    arrowKind: ArrowKind,\n    range: Range\n  ): FunctionDeclaration {\n    var stmt = new FunctionDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    stmt.arrowKind = arrowKind;\n    return stmt;\n  }\n\n  static createIndexSignatureDeclaration(\n    keyType: NamedTypeNode,\n    valueType: TypeNode,\n    range: Range\n  ): IndexSignatureDeclaration {\n    var elem = new IndexSignatureDeclaration();\n    elem.range = range;\n    elem.keyType = keyType;\n    elem.valueType = valueType;\n    return elem;\n  }\n\n  static createMethodDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    signature: FunctionTypeNode,\n    body: Statement | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): MethodDeclaration {\n    var stmt = new MethodDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.signature = signature;\n    stmt.body = body;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createNamespaceDeclaration(\n    name: IdentifierExpression,\n    members: Statement[],\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): NamespaceDeclaration {\n    var stmt = new NamespaceDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.members = members;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createReturnStatement(\n    value: Expression | null,\n    range: Range\n  ): ReturnStatement {\n    var stmt = new ReturnStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createSwitchStatement(\n    condition: Expression,\n    cases: SwitchCase[],\n    range: Range\n  ): SwitchStatement {\n    var stmt = new SwitchStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.cases = cases;\n    return stmt;\n  }\n\n  static createSwitchCase(\n    label: Expression | null,\n    statements: Statement[],\n    range: Range\n  ): SwitchCase {\n    var elem = new SwitchCase();\n    elem.range = range;\n    elem.label = label;\n    elem.statements = statements;\n    return elem;\n  }\n\n  static createThrowStatement(\n    value: Expression,\n    range: Range\n  ): ThrowStatement {\n    var stmt = new ThrowStatement();\n    stmt.range = range;\n    stmt.value = value;\n    return stmt;\n  }\n\n  static createTryStatement(\n    statements: Statement[],\n    catchVariable: IdentifierExpression | null,\n    catchStatements: Statement[] | null,\n    finallyStatements: Statement[] | null,\n    range: Range\n  ): TryStatement {\n    var stmt = new TryStatement();\n    stmt.range = range;\n    stmt.statements = statements;\n    stmt.catchVariable = catchVariable;\n    stmt.catchStatements = catchStatements;\n    stmt.finallyStatements = finallyStatements;\n    return stmt;\n  }\n\n  static createTypeDeclaration(\n    name: IdentifierExpression,\n    typeParameters: TypeParameterNode[] | null,\n    alias: TypeNode,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): TypeDeclaration {\n    var stmt = new TypeDeclaration();\n    stmt.range = range;\n    stmt.flags = flags;\n    stmt.name = name;\n    stmt.typeParameters = typeParameters;\n    stmt.type = alias;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableStatement(\n    declarations: VariableDeclaration[],\n    decorators: DecoratorNode[] | null,\n    range: Range\n  ): VariableStatement {\n    var stmt = new VariableStatement();\n    stmt.range = range;\n    stmt.declarations = declarations;\n    stmt.decorators = decorators;\n    return stmt;\n  }\n\n  static createVariableDeclaration(\n    name: IdentifierExpression,\n    type: TypeNode | null,\n    initializer: Expression | null,\n    decorators: DecoratorNode[] | null,\n    flags: CommonFlags,\n    range: Range\n  ): VariableDeclaration {\n    var elem = new VariableDeclaration();\n    elem.range = range;\n    elem.flags = flags;\n    elem.name = name;\n    elem.type = type;\n    elem.initializer = initializer;\n    elem.decorators = decorators; // inherited\n    return elem;\n  }\n\n  static createVoidStatement(\n    expression: Expression,\n    range: Range\n  ): VoidStatement {\n    var stmt = new VoidStatement();\n    stmt.range = range;\n    stmt.expression = expression;\n    return stmt;\n  }\n\n  static createWhileStatement(\n    condition: Expression,\n    statement: Statement,\n    range: Range\n  ): WhileStatement {\n    var stmt = new WhileStatement();\n    stmt.range = range;\n    stmt.condition = condition;\n    stmt.statement = statement;\n    return stmt;\n  }\n}\n\n// types\n\nexport abstract class TypeNode extends Node {\n  // kind varies\n\n  /** Whether nullable or not. */\n  isNullable: bool;\n\n  /** Tests if this type has a generic component matching one of the given type parameters. */\n  hasGenericComponent(typeParameterNodes: TypeParameterNode[]): bool {\n    var self = <TypeNode>this; // TS otherwise complains\n    if (this.kind == NodeKind.NAMEDTYPE) {\n      if (!(<NamedTypeNode>self).name.next) {\n        let typeArgumentNodes = (<NamedTypeNode>self).typeArguments;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          for (let i = 0, k = typeArgumentNodes.length; i < k; ++i) {\n            if (typeArgumentNodes[i].hasGenericComponent(typeParameterNodes)) return true;\n          }\n        } else {\n          let name = (<NamedTypeNode>self).name.identifier.text;\n          for (let i = 0, k = typeParameterNodes.length; i < k; ++i) {\n            if (typeParameterNodes[i].name.text == name) return true;\n          }\n        }\n      }\n    } else if (this.kind == NodeKind.FUNCTIONTYPE) {\n      let parameterNodes = (<FunctionTypeNode>self).parameters;\n      for (let i = 0, k = parameterNodes.length; i < k; ++i) {\n        if (parameterNodes[i].type.hasGenericComponent(typeParameterNodes)) return true;\n      }\n      if ((<FunctionTypeNode>self).returnType.hasGenericComponent(typeParameterNodes)) return true;\n      let explicitThisType = (<FunctionTypeNode>self).explicitThisType;\n      if (explicitThisType !== null && explicitThisType.hasGenericComponent(typeParameterNodes)) return true;\n    } else {\n      assert(false);\n    }\n    return false;\n  }\n}\n\n/** Represents a type name. */\nexport class TypeName extends Node {\n  kind = NodeKind.TYPENAME;\n\n  /** Identifier of this part. */\n  identifier: IdentifierExpression;\n  /** Next part of the type name or `null` if this is the last part. */\n  next: TypeName | null;\n}\n\n/** Represents a named type. */\nexport class NamedTypeNode extends TypeNode {\n  kind = NodeKind.NAMEDTYPE;\n\n  /** Type name. */\n  name: TypeName;\n  /** Type argument references. */\n  typeArguments: TypeNode[] | null;\n}\n\n/** Represents a function type. */\nexport class FunctionTypeNode extends TypeNode {\n  kind = NodeKind.FUNCTIONTYPE;\n\n  /** Accepted parameters. */\n  parameters: ParameterNode[];\n  /** Return type. */\n  returnType: TypeNode;\n  /** Explicitly provided this type, if any. */\n  explicitThisType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents a type parameter. */\nexport class TypeParameterNode extends Node {\n  kind = NodeKind.TYPEPARAMETER;\n\n  /** Identifier reference. */\n  name: IdentifierExpression;\n  /** Extended type reference, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Default type if omitted, if any. */\n  defaultType: NamedTypeNode | null; // can't be a function\n}\n\n/** Represents the kind of a parameter. */\nexport enum ParameterKind {\n  /** No specific flags. */\n  DEFAULT,\n  /** Is an optional parameter. */\n  OPTIONAL,\n  /** Is a rest parameter. */\n  REST\n}\n\n/** Represents a function parameter. */\nexport class ParameterNode extends Node {\n  kind = NodeKind.PARAMETER;\n\n  /** Parameter kind. */\n  parameterKind: ParameterKind;\n  /** Parameter name. */\n  name: IdentifierExpression;\n  /** Parameter type. */\n  type: TypeNode;\n  /** Initializer expression, if present. */\n  initializer: Expression | null;\n  /** Implicit field declaration, if applicable. */\n  implicitFieldDeclaration: FieldDeclaration | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n// special\n\n/** Built-in decorator kinds. */\nexport enum DecoratorKind {\n  CUSTOM,\n  GLOBAL,\n  OPERATOR,\n  OPERATOR_BINARY,\n  OPERATOR_PREFIX,\n  OPERATOR_POSTFIX,\n  UNMANAGED,\n  SEALED,\n  INLINE,\n  EXTERNAL,\n  BUILTIN,\n  LAZY,\n  UNSAFE\n}\n\nexport namespace DecoratorKind {\n\n  /** Returns the kind of the specified decorator name node. Defaults to {@link DecoratorKind.CUSTOM}. */\n  export function fromNode(nameNode: Expression): DecoratorKind {\n    // @global, @inline, @operator, @sealed, @unmanaged\n    if (nameNode.kind == NodeKind.IDENTIFIER) {\n      let nameStr = (<IdentifierExpression>nameNode).text;\n      assert(nameStr.length);\n      switch (nameStr.charCodeAt(0)) {\n        case CharCode.b: {\n          if (nameStr == \"builtin\") return DecoratorKind.BUILTIN;\n          break;\n        }\n        case CharCode.e: {\n          if (nameStr == \"external\") return DecoratorKind.EXTERNAL;\n          break;\n        }\n        case CharCode.g: {\n          if (nameStr == \"global\") return DecoratorKind.GLOBAL;\n          break;\n        }\n        case CharCode.i: {\n          if (nameStr == \"inline\") return DecoratorKind.INLINE;\n          break;\n        }\n        case CharCode.l: {\n          if (nameStr == \"lazy\") return DecoratorKind.LAZY;\n          break;\n        }\n        case CharCode.o: {\n          if (nameStr == \"operator\") return DecoratorKind.OPERATOR;\n          break;\n        }\n        case CharCode.s: {\n          if (nameStr == \"sealed\") return DecoratorKind.SEALED;\n          break;\n        }\n        case CharCode.u: {\n          if (nameStr == \"unmanaged\") return DecoratorKind.UNMANAGED;\n          if (nameStr == \"unsafe\") return DecoratorKind.UNSAFE;\n          break;\n        }\n      }\n    } else if (\n      nameNode.kind == NodeKind.PROPERTYACCESS &&\n      (<PropertyAccessExpression>nameNode).expression.kind == NodeKind.IDENTIFIER\n    ) {\n      let nameStr = (<IdentifierExpression>(<PropertyAccessExpression>nameNode).expression).text;\n      assert(nameStr.length);\n      let propStr = (<PropertyAccessExpression>nameNode).property.text;\n      assert(propStr.length);\n      // @operator.binary, @operator.prefix, @operator.postfix\n      if (nameStr == \"operator\") {\n        switch (propStr.charCodeAt(0)) {\n          case CharCode.b: {\n            if (propStr == \"binary\") return DecoratorKind.OPERATOR_BINARY;\n            break;\n          }\n          case CharCode.p: {\n            switch (propStr) {\n              case \"prefix\": return DecoratorKind.OPERATOR_PREFIX;\n              case \"postfix\": return DecoratorKind.OPERATOR_POSTFIX;\n            }\n            break;\n          }\n        }\n      }\n    }\n    return DecoratorKind.CUSTOM;\n  }\n}\n\n/** Represents a decorator. */\nexport class DecoratorNode extends Node {\n  kind = NodeKind.DECORATOR;\n\n  /** Built-in kind, if applicable. */\n  decoratorKind: DecoratorKind;\n  /** Name expression. */\n  name: Expression;\n  /** Argument expressions. */\n  arguments: Expression[] | null;\n}\n\n/** Comment kinds. */\nexport enum CommentKind {\n  /** Line comment. */\n  LINE,\n  /** Triple-slash comment. */\n  TRIPLE,\n  /** Block comment. */\n  BLOCK\n}\n\n/** Represents a comment. */\nexport class CommentNode extends Node {\n  kind = NodeKind.COMMENT;\n\n  /** Comment kind. */\n  commentKind: CommentKind;\n  /** Comment text. */\n  text: string;\n}\n\n// expressions\n\n/** Base class of all expression nodes. */\nexport abstract class Expression extends Node { }\n\n/** Represents an identifier expression. */\nexport class IdentifierExpression extends Expression {\n  kind = NodeKind.IDENTIFIER;\n\n  /** Textual name. */\n  text: string;\n  /** Symbol. */\n  symbol: string; // TODO: symbol\n  /** Whether quoted or not. */\n  isQuoted: bool;\n}\n\n/** Indicates the kind of a literal. */\nexport enum LiteralKind {\n  FLOAT,\n  INTEGER,\n  STRING,\n  REGEXP,\n  ARRAY,\n  OBJECT\n}\n\n/** Checks if the given node represents a numeric (float or integer) literal. */\nexport function isNumericLiteral(node: Expression): bool {\n  if (node.kind == NodeKind.LITERAL) {\n    switch ((<LiteralExpression>node).literalKind) {\n      case LiteralKind.FLOAT:\n      case LiteralKind.INTEGER: return true;\n    }\n  }\n  return false;\n}\n\n/** Base class of all literal expressions. */\nexport abstract class LiteralExpression extends Expression {\n  kind = NodeKind.LITERAL;\n\n  /** Specific literal kind. */\n  literalKind: LiteralKind;\n}\n\n/** Represents an `[]` literal expression. */\nexport class ArrayLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.ARRAY;\n\n  /** Nested element expressions. */\n  elementExpressions: (Expression | null)[];\n}\n\n/** Indicates the kind of an assertion. */\nexport enum AssertionKind {\n  PREFIX,\n  AS,\n  NONNULL\n}\n\n/** Represents an assertion expression. */\nexport class AssertionExpression extends Expression {\n  kind = NodeKind.ASSERTION;\n\n  /** Specific kind of this assertion. */\n  assertionKind: AssertionKind;\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Target type. */\n  toType: TypeNode | null;\n}\n\n/** Represents a binary expression. */\nexport class BinaryExpression extends Expression {\n  kind = NodeKind.BINARY;\n\n  /** Operator token. */\n  operator: Token;\n  /** Left-hand side expression */\n  left: Expression;\n  /** Right-hand side expression. */\n  right: Expression;\n}\n\n/** Represents a call expression. */\nexport class CallExpression extends Expression {\n  kind = NodeKind.CALL;\n\n  /** Called expression. Usually an identifier or property access expression. */\n  expression: Expression;\n  /** Provided type arguments. */\n  typeArguments: TypeNode[] | null;\n  /** Provided arguments. */\n  arguments: Expression[];\n\n  /** Gets the type arguments range for reporting. */\n  get typeArgumentsRange(): Range {\n    var typeArguments = this.typeArguments;\n    var numTypeArguments: i32;\n    if (typeArguments && (numTypeArguments = typeArguments.length)) {\n      return Range.join(typeArguments[0].range, typeArguments[numTypeArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n\n  /** Gets the arguments range for reporting. */\n  get argumentsRange(): Range {\n    var args = this.arguments;\n    var numArguments = args.length;\n    if (numArguments) {\n      return Range.join(args[0].range, args[numArguments - 1].range);\n    }\n    return this.expression.range;\n  }\n}\n\n/** Represents a class expression using the 'class' keyword. */\nexport class ClassExpression extends Expression {\n  kind = NodeKind.CLASS;\n\n  /** Inline class declaration. */\n  declaration: ClassDeclaration;\n}\n\n/** Represents a comma expression composed of multiple expressions. */\nexport class CommaExpression extends Expression {\n  kind = NodeKind.COMMA;\n\n  /** Sequential expressions. */\n  expressions: Expression[];\n}\n\n/** Represents a `constructor` expression. */\nexport class ConstructorExpression extends IdentifierExpression {\n  kind = NodeKind.CONSTRUCTOR;\n  text = \"constructor\";\n  symbol = CommonSymbols.constructor;\n}\n\n/** Represents an element access expression, e.g., array access. */\nexport class ElementAccessExpression extends Expression {\n  kind = NodeKind.ELEMENTACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Element of the expression being accessed. */\n  elementExpression: Expression;\n}\n\n/** Represents a float literal expression. */\nexport class FloatLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.FLOAT;\n\n  /** Float value. */\n  value: f64;\n}\n\n/** Represents a function expression using the 'function' keyword. */\nexport class FunctionExpression extends Expression {\n  kind = NodeKind.FUNCTION;\n\n  /** Inline function declaration. */\n  declaration: FunctionDeclaration;\n}\n\n/** Represents an `instanceof` expression. */\nexport class InstanceOfExpression extends Expression {\n  kind = NodeKind.INSTANCEOF;\n\n  /** Expression being asserted. */\n  expression: Expression;\n  /** Type to test for. */\n  isType: TypeNode;\n}\n\n/** Represents an integer literal expression. */\nexport class IntegerLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.INTEGER;\n\n  /** Integer value. */\n  value: I64;\n}\n\n/** Represents a `new` expression. Like a call but with its own kind. */\nexport class NewExpression extends CallExpression {\n  kind = NodeKind.NEW;\n}\n\n/** Represents a `null` expression. */\nexport class NullExpression extends IdentifierExpression {\n  kind = NodeKind.NULL;\n  text = \"null\";\n  symbol = CommonSymbols.null_;\n}\n\n/** Represents an object literal expression. */\nexport class ObjectLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.OBJECT;\n\n  /** Field names. */\n  names: IdentifierExpression[];\n  /** Field values. */\n  values: Expression[];\n}\n\n/** Represents a parenthesized expression. */\nexport class ParenthesizedExpression extends Expression {\n  kind = NodeKind.PARENTHESIZED;\n\n  /** Expression in parenthesis. */\n  expression: Expression;\n}\n\n/** Represents a property access expression. */\nexport class PropertyAccessExpression extends Expression {\n  kind = NodeKind.PROPERTYACCESS;\n\n  /** Expression being accessed. */\n  expression: Expression;\n  /** Property of the expression being accessed. */\n  property: IdentifierExpression;\n}\n\n/** Represents a regular expression literal expression. */\nexport class RegexpLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.REGEXP;\n\n  /** Regular expression pattern. */\n  pattern: string;\n  /** Regular expression flags. */\n  patternFlags: string;\n}\n\n/** Represents a ternary expression, i.e., short if notation. */\nexport class TernaryExpression extends Expression {\n  kind = NodeKind.TERNARY;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Expression executed when condition is `true`. */\n  ifThen: Expression;\n  /** Expression executed when condition is `false`. */\n  ifElse: Expression;\n}\n\n/** Represents a string literal expression. */\nexport class StringLiteralExpression extends LiteralExpression {\n  literalKind = LiteralKind.STRING;\n\n  /** String value without quotes. */\n  value: string;\n}\n\n/** Represents a `super` expression. */\nexport class SuperExpression extends IdentifierExpression {\n  kind = NodeKind.SUPER;\n  text = \"super\";\n  symbol = CommonSymbols.super_;\n}\n\n/** Represents a `this` expression. */\nexport class ThisExpression extends IdentifierExpression {\n  kind = NodeKind.THIS;\n  text = \"this\";\n  symbol = CommonSymbols.this_;\n}\n\n/** Represents a `true` expression. */\nexport class TrueExpression extends IdentifierExpression {\n  kind = NodeKind.TRUE;\n  text = \"true\";\n  symbol = CommonSymbols.true_;\n}\n\n/** Represents a `false` expression. */\nexport class FalseExpression extends IdentifierExpression {\n  kind = NodeKind.FALSE;\n  text = \"false\";\n  symbol = CommonSymbols.false_;\n}\n\n/** Base class of all unary expressions. */\nexport abstract class UnaryExpression extends Expression {\n\n  /** Operator token. */\n  operator: Token;\n  /** Operand expression. */\n  operand: Expression;\n}\n\n/** Represents a unary postfix expression, e.g. a postfix increment. */\nexport class UnaryPostfixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPOSTFIX;\n}\n\n/** Represents a unary prefix expression, e.g. a negation. */\nexport class UnaryPrefixExpression extends UnaryExpression {\n  kind = NodeKind.UNARYPREFIX;\n}\n\n// statements\n\n/** Base class of all statement nodes. */\nexport abstract class Statement extends Node { }\n\n/** Indicates the specific kind of a source. */\nexport enum SourceKind {\n  /** User-provided file. */\n  USER = 0,\n  /** User-provided entry file. */\n  USER_ENTRY = 1,\n  /** Library-provided file. */\n  LIBRARY = 2,\n  /** Library-provided entry file. */\n  LIBRARY_ENTRY = 3\n}\n\n/** A top-level source node. */\nexport class Source extends Node {\n  kind = NodeKind.SOURCE;\n  parent = null;\n\n  /** Source kind. */\n  sourceKind: SourceKind;\n  /** Normalized path with file extension. */\n  normalizedPath: string;\n  /** Path used internally. */\n  internalPath: string;\n  /** Simple path (last part without extension). */\n  simplePath: string;\n  /** Contained statements. */\n  statements: Statement[];\n  /** Full source text. */\n  text: string;\n  /** Tokenizer reference. */\n  tokenizer: Tokenizer | null = null;\n  /** Source map index. */\n  debugInfoIndex: i32 = -1;\n  /** Re-exported sources. */\n  exportPaths: Set<string> | null = null;\n\n  /** Constructs a new source node. */\n  constructor(normalizedPath: string, text: string, kind: SourceKind) {\n    super();\n    this.sourceKind = kind;\n    this.normalizedPath = normalizedPath;\n    var internalPath = mangleInternalPath(this.normalizedPath);\n    this.internalPath = internalPath;\n    var pos = internalPath.lastIndexOf(PATH_DELIMITER);\n    this.simplePath = pos >= 0 ? internalPath.substring(pos + 1) : internalPath;\n    this.statements = new Array();\n    this.range = new Range(this, 0, text.length);\n    this.text = text;\n  }\n\n  /** Checks if this source represents native code. */\n  get isNative(): bool {\n    return this.internalPath == LIBRARY_SUBST;\n  }\n\n  /** Checks if this source is part of the (standard) library. */\n  get isLibrary(): bool {\n    var kind = this.sourceKind;\n    return kind == SourceKind.LIBRARY || kind == SourceKind.LIBRARY_ENTRY;\n  }\n}\n\n/** Base class of all declaration statements. */\nexport abstract class DeclarationStatement extends Statement {\n  /** Simple name being declared. */\n  name: IdentifierExpression;\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null = null;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n\n  /** Tests if this node has the specified flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this node has one of the specified flags. */\n  isAny(flag: CommonFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n}\n\n/** Represents an index signature declaration. */\nexport class IndexSignatureDeclaration extends DeclarationStatement {\n  kind = NodeKind.INDEXSIGNATUREDECLARATION;\n\n  /** Key type. */\n  keyType: NamedTypeNode;\n  /** Value type. */\n  valueType: TypeNode;\n}\n\n/** Base class of all variable-like declaration statements. */\nexport abstract class VariableLikeDeclarationStatement extends DeclarationStatement {\n\n  /** Variable type. */\n  type: TypeNode | null;\n  /** Variable initializer. */\n  initializer: Expression | null;\n}\n\n/** Represents a block statement. */\nexport class BlockStatement extends Statement {\n  kind = NodeKind.BLOCK;\n\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `break` statement. */\nexport class BreakStatement extends Statement {\n  kind = NodeKind.BREAK;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `class` declaration. */\nexport class ClassDeclaration extends DeclarationStatement {\n  kind = NodeKind.CLASSDECLARATION;\n\n  /** Accepted type parameters. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Base class type being extended, if any. */\n  extendsType: NamedTypeNode | null; // can't be a function\n  /** Interface types being implemented, if any. */\n  implementsTypes: NamedTypeNode[] | null; // can't be functions\n  /** Class member declarations. */\n  members: DeclarationStatement[];\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n}\n\n/** Represents a `continue` statement. */\nexport class ContinueStatement extends Statement {\n  kind = NodeKind.CONTINUE;\n\n  /** Target label, if applicable. */\n  label: IdentifierExpression | null;\n}\n\n/** Represents a `do` statement. */\nexport class DoStatement extends Statement {\n  kind = NodeKind.DO;\n\n  /** Statement being looped over. */\n  statement: Statement;\n  /** Condition when to repeat. */\n  condition: Expression;\n}\n\n/** Represents an empty statement, i.e., a semicolon terminating nothing. */\nexport class EmptyStatement extends Statement {\n  kind = NodeKind.EMPTY;\n}\n\n/** Represents an `enum` declaration. */\nexport class EnumDeclaration extends DeclarationStatement {\n  kind = NodeKind.ENUMDECLARATION;\n\n  /** Enum value declarations. */\n  values: EnumValueDeclaration[];\n}\n\n/** Represents a value of an `enum` declaration. */\nexport class EnumValueDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.ENUMVALUEDECLARATION;\n  // name is inherited\n\n  /** Value expression. */\n  value: Expression | null;\n}\n\n/** Represents an `export import` statement of an interface. */\nexport class ExportImportStatement extends Node {\n  kind = NodeKind.EXPORTIMPORT;\n\n  /** Identifier being imported. */\n  name: IdentifierExpression;\n  /** Identifier being exported. */\n  externalName: IdentifierExpression;\n}\n\n/** Represents a member of an `export` statement. */\nexport class ExportMember extends Node {\n  kind = NodeKind.EXPORTMEMBER;\n\n  /** Local identifier. */\n  localName: IdentifierExpression;\n  /** Exported identifier. */\n  exportedName: IdentifierExpression;\n}\n\n/** Represents an `export` statement. */\nexport class ExportStatement extends Statement {\n  kind = NodeKind.EXPORT;\n\n  /** Array of members if a set of named exports, or `null` if a file export. */\n  members: ExportMember[] | null;\n  /** Path being exported from, if applicable. */\n  path: StringLiteralExpression | null;\n  /** Internal path being referenced, if `path` is set. */\n  internalPath: string | null;\n  /** Whether this is a declared export. */\n  isDeclare: bool;\n}\n\n/** Represents an `export default` statement. */\nexport class ExportDefaultStatement extends Statement {\n  kind = NodeKind.EXPORTDEFAULT;\n\n  /** Declaration being exported as default. */\n  declaration: DeclarationStatement;\n}\n\n/** Represents an expression that is used as a statement. */\nexport class ExpressionStatement extends Statement {\n  kind = NodeKind.EXPRESSION;\n\n  /** Expression being used as a statement.*/\n  expression: Expression;\n}\n\n/** Represents a field declaration within a `class`. */\nexport class FieldDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.FIELDDECLARATION;\n\n  /** Parameter index if declared as a constructor parameter, otherwise `-1`. */\n  parameterIndex: i32 = -1;\n}\n\n/** Represents a `for` statement. */\nexport class ForStatement extends Statement {\n  kind = NodeKind.FOR;\n\n  /**\n   * Initializer statement, if present.\n   * Either a {@link VariableStatement} or {@link ExpressionStatement}.\n   */\n  initializer: Statement | null;\n  /** Condition expression, if present. */\n  condition: Expression | null;\n  /** Incrementor expression, if present. */\n  incrementor: Expression | null;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Indicates the kind of an array function. */\nexport const enum ArrowKind {\n  /** Not an arrow function. */\n  NONE,\n  /** Parenthesized parameter list. */\n  ARROW_PARENTHESIZED,\n  /** Single parameter without parenthesis. */\n  ARROW_SINGLE\n}\n\n/** Represents a `function` declaration. */\nexport class FunctionDeclaration extends DeclarationStatement {\n  kind = NodeKind.FUNCTIONDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Function signature. */\n  signature: FunctionTypeNode;\n  /** Body statement. Usually a block. */\n  body: Statement | null;\n  /** Arrow function kind, if applicable. */\n  arrowKind: ArrowKind;\n\n  get isGeneric(): bool {\n    var typeParameters = this.typeParameters;\n    return typeParameters != null && typeParameters.length > 0;\n  }\n\n  /** Clones this function declaration. */\n  clone(): FunctionDeclaration {\n    return Node.createFunctionDeclaration(\n      this.name,\n      this.typeParameters,\n      this.signature,\n      this.body,\n      this.decorators,\n      this.flags,\n      this.arrowKind,\n      this.range\n    );\n  }\n}\n\n/** Represents an `if` statement. */\nexport class IfStatement extends Statement {\n  kind = NodeKind.IF;\n\n  /** Condition. */\n  condition: Expression;\n  /** Statement executed when condition is `true`. */\n  ifTrue: Statement;\n  /** Statement executed when condition is `false`. */\n  ifFalse: Statement | null;\n}\n\n/** Represents an `import` declaration part of an {@link ImportStatement}. */\nexport class ImportDeclaration extends DeclarationStatement {\n  kind = NodeKind.IMPORTDECLARATION;\n\n  /** Identifier being imported. */\n  foreignName: IdentifierExpression;\n}\n\n/** Represents an `import` statement. */\nexport class ImportStatement extends Statement {\n  kind = NodeKind.IMPORT;\n\n  /** Array of member declarations or `null` if an asterisk import. */\n  declarations: ImportDeclaration[] | null;\n  /** Name of the local namespace, if an asterisk import. */\n  namespaceName: IdentifierExpression | null;\n  /** Path being imported from. */\n  path: StringLiteralExpression;\n  /** Internal path being referenced. */\n  internalPath: string;\n}\n\n/** Represents an `interfarce` declaration. */\nexport class InterfaceDeclaration extends ClassDeclaration {\n  kind = NodeKind.INTERFACEDECLARATION;\n}\n\n/** Represents a method declaration within a `class`. */\nexport class MethodDeclaration extends FunctionDeclaration {\n  kind = NodeKind.METHODDECLARATION;\n}\n\n/** Represents a `namespace` declaration. */\nexport class NamespaceDeclaration extends DeclarationStatement {\n  kind = NodeKind.NAMESPACEDECLARATION;\n\n  /** Array of namespace members. */\n  members: Statement[];\n}\n\n/** Represents a `return` statement. */\nexport class ReturnStatement extends Statement {\n  kind = NodeKind.RETURN;\n\n  /** Value expression being returned, if present. */\n  value: Expression | null;\n}\n\n/** Represents a single `case` within a `switch` statement. */\nexport class SwitchCase extends Node {\n  kind = NodeKind.SWITCHCASE;\n\n  /** Label expression. `null` indicates the default case. */\n  label: Expression | null;\n  /** Contained statements. */\n  statements: Statement[];\n}\n\n/** Represents a `switch` statement. */\nexport class SwitchStatement extends Statement {\n  kind = NodeKind.SWITCH;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Contained cases. */\n  cases: SwitchCase[];\n}\n\n/** Represents a `throw` statement. */\nexport class ThrowStatement extends Statement {\n  kind = NodeKind.THROW;\n\n  /** Value expression being thrown. */\n  value: Expression;\n}\n\n/** Represents a `try` statement. */\nexport class TryStatement extends Statement {\n  kind = NodeKind.TRY;\n\n  /** Contained statements. */\n  statements: Statement[];\n  /** Exception variable name, if a `catch` clause is present. */\n  catchVariable: IdentifierExpression | null;\n  /** Statements being executed on catch, if a `catch` clause is present. */\n  catchStatements: Statement[] | null;\n  /** Statements being executed afterwards, if a `finally` clause is present. */\n  finallyStatements: Statement[] | null;\n}\n\n/** Represents a `type` declaration. */\nexport class TypeDeclaration extends DeclarationStatement {\n  kind = NodeKind.TYPEDECLARATION;\n\n  /** Type parameters, if any. */\n  typeParameters: TypeParameterNode[] | null;\n  /** Type being aliased. */\n  type: TypeNode;\n}\n\n/** Represents a variable declaration part of a {@link VariableStatement}. */\nexport class VariableDeclaration extends VariableLikeDeclarationStatement {\n  kind = NodeKind.VARIABLEDECLARATION;\n}\n\n/** Represents a variable statement wrapping {@link VariableDeclaration}s. */\nexport class VariableStatement extends Statement {\n  kind = NodeKind.VARIABLE;\n\n  /** Array of decorators. */\n  decorators: DecoratorNode[] | null;\n  /** Array of member declarations. */\n  declarations: VariableDeclaration[];\n}\n\n/** Represents a void statement dropping an expression's value. */\nexport class VoidStatement extends Statement {\n  kind = NodeKind.VOID;\n\n  /** Expression being dropped. */\n  expression: Expression;\n}\n\n/** Represents a `while` statement. */\nexport class WhileStatement extends Statement {\n  kind = NodeKind.WHILE;\n\n  /** Condition expression. */\n  condition: Expression;\n  /** Statement being looped over. */\n  statement: Statement;\n}\n\n/** Finds the first decorator matching the specified kind. */\nexport function findDecorator(kind: DecoratorKind, decorators: DecoratorNode[] | null): DecoratorNode | null {\n  if (decorators) {\n    for (let i = 0, k = decorators.length; i < k; ++i) {\n      let decorator = decorators[i];\n      if (decorator.decoratorKind == kind) return decorator;\n    }\n  }\n  return null;\n}\n\n/** Mangles an external to an internal path. */\nexport function mangleInternalPath(path: string): string {\n  if (path.endsWith(\".ts\")) path = path.substring(0, path.length - 3);\n  return path;\n}\n\n/** Tests if the specified type node represents an omitted type. */\nexport function isTypeOmitted(type: TypeNode): bool {\n  if (type.kind == NodeKind.NAMEDTYPE) {\n    let name = (<NamedTypeNode>type).name;\n    return !(name.next || name.identifier.text.length);\n  }\n  return false;\n}\n","/**\n * AssemblyScript's intermediate representation describing a program's elements.\n * @module program\n *//***/\n\nimport {\n  CommonFlags,\n  PATH_DELIMITER,\n  STATIC_DELIMITER,\n  INSTANCE_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  INNER_DELIMITER,\n  LIBRARY_SUBST,\n  INDEX_SUFFIX,\n  CommonSymbols,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Options\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  Range,\n  DecoratorNode,\n  DecoratorKind,\n  TypeParameterNode,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  IdentifierExpression,\n  LiteralExpression,\n  LiteralKind,\n  StringLiteralExpression,\n\n  Statement,\n  ClassDeclaration,\n  DeclarationStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportMember,\n  ExportStatement,\n  FieldDeclaration,\n  FunctionDeclaration,\n  ImportDeclaration,\n  ImportStatement,\n  InterfaceDeclaration,\n  MethodDeclaration,\n  NamespaceDeclaration,\n  TypeDeclaration,\n  VariableDeclaration,\n  VariableLikeDeclarationStatement,\n  VariableStatement,\n\n  ExportDefaultStatement,\n  Token,\n  ParameterNode\n} from \"./ast\";\n\nimport {\n  Module,\n  FunctionRef\n} from \"./module\";\n\nimport {\n  CharCode,\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64\n} from \"./util\";\n\nimport {\n  Resolver\n} from \"./resolver\";\n\nimport {\n  Flow\n} from \"./flow\";\n\n/** Represents a yet unresolved `import`. */\nclass QueuedImport {\n  constructor(\n    /** File being imported into. */\n    public localFile: File,\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. Is an `import *` if not set. */\n    public foreignIdentifier: IdentifierExpression | null,\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string\n  ) {}\n}\n\n/** Represents a yet unresolved `export`. */\nclass QueuedExport {\n  constructor(\n    /** Identifier within the local file. */\n    public localIdentifier: IdentifierExpression,\n    /** Identifier within the other file. */\n    public foreignIdentifier: IdentifierExpression,\n    /** Path to the other file if a re-export. */\n    public foreignPath: string | null,\n    /** Alternative path to the other file if a re-export. */\n    public foreignPathAlt: string | null\n  ) {}\n}\n\n/** Represents a yet unresolved `export *`. */\nclass QueuedExportStar {\n  // stored in a map with localFile as the key\n  constructor(\n    /** Path to the other file. */\n    public foreignPath: string,\n    /** Alternative path to the other file. */\n    public foreignPathAlt: string,\n    /** Reference to the path literal for reporting. */\n    public pathLiteral: StringLiteralExpression\n  ) {}\n}\n\n/** Represents the kind of an operator overload. */\nexport enum OperatorKind {\n  INVALID,\n\n  // indexed access\n  INDEXED_GET,            // a[]\n  INDEXED_SET,            // a[]=b\n  UNCHECKED_INDEXED_GET,  // unchecked(a[])\n  UNCHECKED_INDEXED_SET,  // unchecked(a[]=b)\n\n  // binary\n  ADD,                    // a + b\n  SUB,                    // a - b\n  MUL,                    // a * b\n  DIV,                    // a / b\n  REM,                    // a % b\n  POW,                    // a ** b\n  BITWISE_AND,            // a & b\n  BITWISE_OR,             // a | b\n  BITWISE_XOR,            // a ^ b\n  BITWISE_SHL,            // a << b\n  BITWISE_SHR,            // a >> b\n  BITWISE_SHR_U,          // a >>> b\n  EQ,                     // a == b\n  NE,                     // a != b\n  GT,                     // a > b\n  GE,                     // a >= b\n  LT,                     // a < b\n  LE,                     // a <= b\n\n  // unary prefix\n  PLUS,                   // +a\n  MINUS,                  // -a\n  NOT,                    // !a\n  BITWISE_NOT,            // ~a\n  PREFIX_INC,             // ++a\n  PREFIX_DEC,             // --a\n\n  // unary postfix\n  POSTFIX_INC,            // a++\n  POSTFIX_DEC             // a--\n\n  // not overridable:\n  // IDENTITY             // a === b\n  // LOGICAL_AND          // a && b\n  // LOGICAL_OR           // a || b\n}\n\nexport namespace OperatorKind {\n\n  /** Returns the operator kind represented by the specified decorator and string argument. */\n  export function fromDecorator(decoratorKind: DecoratorKind, arg: string): OperatorKind {\n    assert(arg.length);\n    switch (decoratorKind) {\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.OPENBRACKET: {\n            if (arg == \"[]\") return OperatorKind.INDEXED_GET;\n            if (arg == \"[]=\") return OperatorKind.INDEXED_SET;\n            break;\n          }\n          case CharCode.OPENBRACE: {\n            if (arg == \"{}\") return OperatorKind.UNCHECKED_INDEXED_GET;\n            if (arg == \"{}=\") return OperatorKind.UNCHECKED_INDEXED_SET;\n            break;\n          }\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.ADD;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.SUB;\n            break;\n          }\n          case CharCode.ASTERISK: {\n            if (arg == \"*\") return OperatorKind.MUL;\n            if (arg == \"**\") return OperatorKind.POW;\n            break;\n          }\n          case CharCode.SLASH: {\n            if (arg == \"/\") return OperatorKind.DIV;\n            break;\n          }\n          case CharCode.PERCENT: {\n            if (arg == \"%\") return OperatorKind.REM;\n            break;\n          }\n          case CharCode.AMPERSAND: {\n            if (arg == \"&\") return OperatorKind.BITWISE_AND;\n            break;\n          }\n          case CharCode.BAR: {\n            if (arg == \"|\") return OperatorKind.BITWISE_OR;\n            break;\n          }\n          case CharCode.CARET: {\n            if (arg == \"^\") return OperatorKind.BITWISE_XOR;\n            break;\n          }\n          case CharCode.EQUALS: {\n            if (arg == \"==\") return OperatorKind.EQ;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!=\") return OperatorKind.NE;\n            break;\n          }\n          case CharCode.GREATERTHAN: {\n            if (arg == \">\") return OperatorKind.GT;\n            if (arg == \">=\") return OperatorKind.GE;\n            if (arg == \">>\") return OperatorKind.BITWISE_SHR;\n            if (arg == \">>>\") return OperatorKind.BITWISE_SHR_U;\n            break;\n          }\n          case CharCode.LESSTHAN: {\n            if (arg == \"<\") return OperatorKind.LT;\n            if (arg == \"<=\") return OperatorKind.LE;\n            if (arg == \"<<\") return OperatorKind.BITWISE_SHL;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_PREFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"+\") return OperatorKind.PLUS;\n            if (arg == \"++\") return OperatorKind.PREFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"-\") return OperatorKind.MINUS;\n            if (arg == \"--\") return OperatorKind.PREFIX_DEC;\n            break;\n          }\n          case CharCode.EXCLAMATION: {\n            if (arg == \"!\") return OperatorKind.NOT;\n            break;\n          }\n          case CharCode.TILDE: {\n            if (arg == \"~\") return OperatorKind.BITWISE_NOT;\n            break;\n          }\n        }\n        break;\n      }\n      case DecoratorKind.OPERATOR_POSTFIX: {\n        switch (arg.charCodeAt(0)) {\n          case CharCode.PLUS: {\n            if (arg == \"++\") return OperatorKind.POSTFIX_INC;\n            break;\n          }\n          case CharCode.MINUS: {\n            if (arg == \"--\") return OperatorKind.POSTFIX_DEC;\n            break;\n          }\n        }\n        break;\n      }\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a binary operator token to the respective operator kind. */\n  export function fromBinaryToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS:\n      case Token.PLUS_EQUALS: return OperatorKind.ADD;\n      case Token.MINUS:\n      case Token.MINUS_EQUALS: return OperatorKind.SUB;\n      case Token.ASTERISK:\n      case Token.ASTERISK_EQUALS: return OperatorKind.MUL;\n      case Token.SLASH:\n      case Token.SLASH_EQUALS: return OperatorKind.DIV;\n      case Token.PERCENT:\n      case Token.PERCENT_EQUALS: return OperatorKind.REM;\n      case Token.ASTERISK_ASTERISK:\n      case Token.ASTERISK_ASTERISK_EQUALS: return OperatorKind.POW;\n      case Token.AMPERSAND:\n      case Token.AMPERSAND_EQUALS: return OperatorKind.BITWISE_AND;\n      case Token.BAR:\n      case Token.BAR_EQUALS: return OperatorKind.BITWISE_OR;\n      case Token.CARET:\n      case Token.CARET_EQUALS: return OperatorKind.BITWISE_XOR;\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.LESSTHAN_LESSTHAN_EQUALS: return OperatorKind.BITWISE_SHL;\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return OperatorKind.BITWISE_SHR_U;\n      case Token.EQUALS_EQUALS: return OperatorKind.EQ;\n      case Token.EXCLAMATION_EQUALS: return OperatorKind.NE;\n      case Token.GREATERTHAN: return OperatorKind.GT;\n      case Token.GREATERTHAN_EQUALS: return OperatorKind.GE;\n      case Token.LESSTHAN: return OperatorKind.LT;\n      case Token.LESSTHAN_EQUALS: return OperatorKind.LE;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary prefix operator token to the respective operator kind. */\n  export function fromUnaryPrefixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS: return OperatorKind.PLUS;\n      case Token.MINUS: return OperatorKind.MINUS;\n      case Token.EXCLAMATION: return OperatorKind.NOT;\n      case Token.TILDE: return OperatorKind.BITWISE_NOT;\n      case Token.PLUS_PLUS: return OperatorKind.PREFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.PREFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n\n  /** Converts a unary postfix operator token to the respective operator kind. */\n  export function fromUnaryPostfixToken(token: Token): OperatorKind {\n    switch (token) {\n      case Token.PLUS_PLUS: return OperatorKind.POSTFIX_INC;\n      case Token.MINUS_MINUS: return OperatorKind.POSTFIX_DEC;\n    }\n    return OperatorKind.INVALID;\n  }\n}\n\n/** Represents an AssemblyScript program. */\nexport class Program extends DiagnosticEmitter {\n\n  /** Resolver instance. */\n  resolver: Resolver;\n  /** Array of sources. */\n  sources: Source[] = [];\n  /** Diagnostic offset used where successively obtaining the next diagnostic. */\n  diagnosticsOffset: i32 = 0;\n  /** Compiler options. */\n  options: Options;\n  /** Special native code source. */\n  nativeSource: Source;\n  /** Special native code file. */\n  nativeFile: File;\n\n  // lookup maps\n\n  /** Files by unique internal name. */\n  filesByName: Map<string,File> = new Map();\n  /** Elements by unique internal name in element space. */\n  elementsByName: Map<string,Element> = new Map();\n  /** Elements by declaration. */\n  elementsByDeclaration: Map<DeclarationStatement,DeclaredElement> = new Map();\n  /** Element instances by unique internal name. */\n  instancesByName: Map<string,Element> = new Map();\n  /** Classes wrapping basic types like `i32`. */\n  wrapperClasses: Map<Type,Class> = new Map();\n  /** Managed classes contained in the program, by id. */\n  managedClasses: Map<i32,Class> = new Map();\n  /** A set of unique function signatures contained in the program, by id. */\n  uniqueSignatures: Signature[] = new Array<Signature>(0);\n\n  // standard references\n\n  /** ArrayBufferView reference. */\n  arrayBufferViewInstance: Class;\n  /** ArrayBuffer instance reference. */\n  arrayBufferInstance: Class;\n  /** Array prototype reference. */\n  arrayPrototype: ClassPrototype;\n  /** Set prototype reference. */\n  setPrototype: ClassPrototype;\n  /** Map prototype reference. */\n  mapPrototype: ClassPrototype;\n  /** Fixed array prototype reference. */\n  fixedArrayPrototype: ClassPrototype;\n  /** Int8Array prototype. */\n  i8ArrayPrototype: ClassPrototype;\n  /** Int16Array prototype. */\n  i16ArrayPrototype: ClassPrototype;\n  /** Int32Array prototype. */\n  i32ArrayPrototype: ClassPrototype;\n  /** Int64Array prototype. */\n  i64ArrayPrototype: ClassPrototype;\n  /** Uint8Array prototype. */\n  u8ArrayPrototype: ClassPrototype;\n  /** Uint8ClampedArray prototype. */\n  u8ClampedArrayPrototype: ClassPrototype;\n  /** Uint16Array prototype. */\n  u16ArrayPrototype: ClassPrototype;\n  /** Uint32Array prototype. */\n  u32ArrayPrototype: ClassPrototype;\n  /** Uint64Array prototype. */\n  u64ArrayPrototype: ClassPrototype;\n  /** Float32Array prototype. */\n  f32ArrayPrototype: ClassPrototype;\n  /** Float64Array prototype. */\n  f64ArrayPrototype: ClassPrototype;\n  /** String instance reference. */\n  stringInstance: Class;\n  /** Abort function reference, if not explicitly disabled. */\n  abortInstance: Function | null;\n\n  // runtime references\n\n  /** RT `__alloc(size: usize, id: u32): usize` */\n  allocInstance: Function;\n  /** RT `__realloc(ref: usize, newSize: usize): usize` */\n  reallocInstance: Function;\n  /** RT `__free(ref: usize): void` */\n  freeInstance: Function;\n  /** RT `__retain(ref: usize): usize` */\n  retainInstance: Function;\n  /** RT `__release(ref: usize): void` */\n  releaseInstance: Function;\n  /** RT `__collect(): void` */\n  collectInstance: Function;\n  /** RT `__visit(ref: usize, cookie: u32): void` */\n  visitInstance: Function;\n  /** RT `__typeinfo(id: u32): RTTIFlags` */\n  typeinfoInstance: Function;\n  /** RT `__instanceof(ref: usize, superId: u32): bool` */\n  instanceofInstance: Function;\n  /** RT `__allocArray(length: i32, alignLog2: usize, id: u32, data: usize = 0): usize` */\n  allocArrayInstance: Function;\n\n  /** Next class id. */\n  nextClassId: u32 = 0;\n  /** Next signature id. */\n  nextSignatureId: i32 = 0;\n  /** Constructs a new program, optionally inheriting parser diagnostics. */\n  constructor(\n    /** Shared array of diagnostic messages (emitted so far). */\n    diagnostics: DiagnosticMessage[] | null = null\n  ) {\n    super(diagnostics);\n    var nativeSource = new Source(LIBRARY_SUBST, \"[native code]\", SourceKind.LIBRARY_ENTRY);\n    this.nativeSource = nativeSource;\n    var nativeFile = new File(this, nativeSource);\n    this.nativeFile = nativeFile;\n    this.filesByName.set(nativeFile.internalName, nativeFile);\n    this.resolver = new Resolver(this);\n  }\n\n  /** Obtains the source matching the specified internal path. */\n  getSource(internalPath: string): string | null {\n    var sources = this.sources;\n    for (let i = 0; i < sources.length; ++i) {\n      let source = sources[i];\n      if (source.internalPath == internalPath) return source.text;\n    }\n    return null;\n  }\n\n  /** Writes a common runtime header to the specified buffer. */\n  writeRuntimeHeader(buffer: Uint8Array, offset: i32, classInstance: Class, payloadSize: u32): void {\n    // BLOCK {\n    //   mmInfo: usize // WASM64 TODO\n    //   gcInfo: u32\n    //   rtId: u32\n    //   rtSize: u32\n    // }\n    assert(payloadSize < (1 << 28)); // 1 bit BUFFERED + 3 bits color\n    writeI32(payloadSize, buffer, offset);\n    writeI32(1, buffer, offset + 4); // RC=1\n    writeI32(classInstance.id, buffer, offset + 8);\n    writeI32(payloadSize, buffer, offset + 12);\n  }\n\n  /** Gets the size of a runtime header. */\n  get runtimeHeaderSize(): i32 {\n    return 16;\n  }\n\n  /** Creates a native variable declaration. */\n  makeNativeVariableDeclaration(\n    /** The simple name of the variable */\n    name: string,\n    /** Flags indicating specific traits, e.g. `CONST`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): VariableDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createVariableDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null, null, null, flags, range\n    );\n  }\n\n  /** Creates a native type declaration. */\n  makeNativeTypeDeclaration(\n    /** The simple name of the type. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): TypeDeclaration {\n    var range = this.nativeSource.range;\n    var identifier = Node.createIdentifierExpression(name, range);\n    return Node.createTypeDeclaration(\n      identifier,\n      null,\n      Node.createOmittedType(range),\n      null, flags, range\n    );\n  }\n\n  // a dummy signature for programmatically generated native functions\n  private nativeDummySignature: FunctionTypeNode | null = null;\n\n  /** Creates a native function declaration. */\n  makeNativeFunctionDeclaration(\n    /** The simple name of the function. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `DECLARE`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): FunctionDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createFunctionDeclaration(\n      Node.createIdentifierExpression(name, range),\n      null,\n      this.nativeDummySignature || (this.nativeDummySignature = Node.createFunctionType([],\n        Node.createNamedType( // ^ AST signature doesn't really matter, is overridden anyway\n          Node.createSimpleTypeName(CommonSymbols.void_, range),\n          null, false, range\n        ),\n        null, false, range)\n      ),\n      null, null, flags, ArrowKind.NONE, range\n    );\n  }\n\n  /** Creates a native namespace declaration. */\n  makeNativeNamespaceDeclaration(\n    /** The simple name of the namespace. */\n    name: string,\n    /** Flags indicating specific traits, e.g. `EXPORT`. */\n    flags: CommonFlags = CommonFlags.NONE\n  ): NamespaceDeclaration {\n    var range = this.nativeSource.range;\n    return Node.createNamespaceDeclaration(\n      Node.createIdentifierExpression(name, range),\n      [], null, flags, range\n    );\n  }\n\n  /** Creates a native function. */\n  makeNativeFunction(\n    /** The simple name of the function. */\n    name: string,\n    /** Concrete function signature. */\n    signature: Signature,\n    /** Parent element, usually a file, class or namespace. */\n    parent: Element = this.nativeFile,\n    /** Flags indicating specific traits, e.g. `GENERIC`. */\n    flags: CommonFlags = CommonFlags.NONE,\n    /** Decorator flags representing built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ): Function {\n    return new Function(\n      name,\n      new FunctionPrototype(\n        name,\n        parent,\n        this.makeNativeFunctionDeclaration(name, flags),\n        decoratorFlags\n      ),\n      signature\n    );\n  }\n\n  /** Gets the (possibly merged) program element linked to the specified declaration. */\n  getElementByDeclaration(declaration: DeclarationStatement): DeclaredElement | null {\n    var elementsByDeclaration = this.elementsByDeclaration;\n    return elementsByDeclaration.has(declaration)\n      ? elementsByDeclaration.get(declaration)!\n      : null;\n  }\n\n  /** Initializes the program and its elements prior to compilation. */\n  initialize(options: Options): void {\n    this.options = options;\n\n    // register native types\n    this.registerNativeType(CommonSymbols.i8, Type.i8);\n    this.registerNativeType(CommonSymbols.i16, Type.i16);\n    this.registerNativeType(CommonSymbols.i32, Type.i32);\n    this.registerNativeType(CommonSymbols.i64, Type.i64);\n    this.registerNativeType(CommonSymbols.isize, options.isizeType);\n    this.registerNativeType(CommonSymbols.u8, Type.u8);\n    this.registerNativeType(CommonSymbols.u16, Type.u16);\n    this.registerNativeType(CommonSymbols.u32, Type.u32);\n    this.registerNativeType(CommonSymbols.u64, Type.u64);\n    this.registerNativeType(CommonSymbols.usize, options.usizeType);\n    this.registerNativeType(CommonSymbols.bool, Type.bool);\n    this.registerNativeType(CommonSymbols.f32, Type.f32);\n    this.registerNativeType(CommonSymbols.f64, Type.f64);\n    this.registerNativeType(CommonSymbols.void_, Type.void);\n    this.registerNativeType(CommonSymbols.number, Type.f64); // alias\n    this.registerNativeType(CommonSymbols.boolean, Type.bool); // alias\n    this.nativeFile.add(CommonSymbols.native, new TypeDefinition(\n      CommonSymbols.native,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.native, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.indexof, new TypeDefinition(\n      CommonSymbols.indexof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.indexof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.valueof, new TypeDefinition(\n      CommonSymbols.valueof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.valueof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    this.nativeFile.add(CommonSymbols.returnof, new TypeDefinition(\n      CommonSymbols.returnof,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(CommonSymbols.returnof, CommonFlags.EXPORT | CommonFlags.GENERIC),\n      DecoratorFlags.BUILTIN\n    ));\n    if (options.hasFeature(Feature.SIMD)) this.registerNativeType(CommonSymbols.v128, Type.v128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerNativeType(CommonSymbols.anyref, Type.anyref);\n\n    // register compiler hints\n    this.registerConstantInteger(CommonSymbols.ASC_TARGET, Type.i32,\n      i64_new(options.isWasm64 ? Target.WASM64 : Target.WASM32));\n    this.registerConstantInteger(CommonSymbols.ASC_NO_ASSERT, Type.bool,\n      i64_new(options.noAssert ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_MEMORY_BASE, Type.i32,\n      i64_new(options.memoryBase, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_OPTIMIZE_LEVEL, Type.i32,\n      i64_new(options.optimizeLevelHint, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_SHRINK_LEVEL, Type.i32,\n      i64_new(options.shrinkLevelHint, 0));\n\n    // register feature hints\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIGN_EXTENSION, Type.bool,\n      i64_new(options.hasFeature(Feature.SIGN_EXTENSION) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_MUTABLE_GLOBALS, Type.bool,\n      i64_new(options.hasFeature(Feature.MUTABLE_GLOBALS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_NONTRAPPING_F2I, Type.bool,\n      i64_new(options.hasFeature(Feature.NONTRAPPING_F2I) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_BULK_MEMORY, Type.bool,\n      i64_new(options.hasFeature(Feature.BULK_MEMORY) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_SIMD, Type.bool,\n      i64_new(options.hasFeature(Feature.SIMD) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_THREADS, Type.bool,\n      i64_new(options.hasFeature(Feature.THREADS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_EXCEPTION_HANDLING, Type.bool,\n      i64_new(options.hasFeature(Feature.EXCEPTION_HANDLING) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_TAIL_CALLS, Type.bool,\n      i64_new(options.hasFeature(Feature.TAIL_CALLS) ? 1 : 0, 0));\n    this.registerConstantInteger(CommonSymbols.ASC_FEATURE_REFERENCE_TYPES, Type.bool,\n      i64_new(options.hasFeature(Feature.REFERENCE_TYPES) ? 1 : 0, 0));\n\n    // remember deferred elements\n    var queuedImports = new Array<QueuedImport>();\n    var queuedExports = new Map<File,Map<string,QueuedExport>>();\n    var queuedExportsStar = new Map<File,QueuedExportStar[]>();\n    var queuedExtends = new Array<ClassPrototype>();\n    var queuedImplements = new Array<ClassPrototype>();\n\n    // initialize relevant declaration-like statements of the entire program\n    for (let i = 0, k = this.sources.length; i < k; ++i) {\n      let source = this.sources[i];\n      let file = new File(this, source);\n      this.filesByName.set(file.internalName, file);\n      let statements = source.statements;\n      for (let j = 0, l = statements.length; j < l; ++j) {\n        let statement = statements[j];\n        switch (statement.kind) {\n          case NodeKind.EXPORT: {\n            this.initializeExports(<ExportStatement>statement, file, queuedExports, queuedExportsStar);\n            break;\n          }\n          case NodeKind.EXPORTDEFAULT: {\n            this.initializeExportDefault(<ExportDefaultStatement>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.IMPORT: {\n            this.initializeImports(<ImportStatement>statement, file, queuedImports, queuedExports);\n            break;\n          }\n          case NodeKind.VARIABLE: {\n            this.initializeVariables(<VariableStatement>statement, file);\n            break;\n          }\n          case NodeKind.CLASSDECLARATION: {\n            this.initializeClass(<ClassDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.ENUMDECLARATION: {\n            this.initializeEnum(<EnumDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.FUNCTIONDECLARATION: {\n            this.initializeFunction(<FunctionDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.INTERFACEDECLARATION: {\n            this.initializeInterface(<InterfaceDeclaration>statement, file);\n            break;\n          }\n          case NodeKind.NAMESPACEDECLARATION: {\n            this.initializeNamespace(<NamespaceDeclaration>statement, file, queuedExtends, queuedImplements);\n            break;\n          }\n          case NodeKind.TYPEDECLARATION: {\n            this.initializeTypeDefinition(<TypeDeclaration>statement, file);\n            break;\n          }\n        }\n      }\n    }\n\n    // queued exports * should be linkable now that all files have been processed\n    for (let [file, exportsStar] of queuedExportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let exportStar = exportsStar[i];\n        let foreignFile = this.lookupForeignFile(exportStar.foreignPath, exportStar.foreignPathAlt);\n        if (!foreignFile) {\n          this.error(\n            DiagnosticCode.File_0_not_found,\n            exportStar.pathLiteral.range, exportStar.pathLiteral.value\n          );\n          continue;\n        }\n        file.ensureExportStar(foreignFile);\n      }\n    }\n\n    // queued imports should be resolvable now through traversing exports and queued exports\n    for (let i = 0, k = queuedImports.length; i < k; ++i) {\n      let queuedImport = queuedImports[i];\n      let foreignIdentifier = queuedImport.foreignIdentifier;\n      if (foreignIdentifier) { // i.e. import { foo [as bar] } from \"./baz\"\n        let element = this.lookupForeign(\n          foreignIdentifier.text,\n          queuedImport.foreignPath,\n          queuedImport.foreignPathAlt,\n          queuedExports\n        );\n        if (element) {\n          queuedImport.localFile.add(\n            queuedImport.localIdentifier.text,\n            element,\n            true // isImport\n          );\n        } else {\n          // FIXME: file not found is not reported if this happens?\n          this.error(\n            DiagnosticCode.Module_0_has_no_exported_member_1,\n            foreignIdentifier.range, queuedImport.foreignPath, foreignIdentifier.text\n          );\n        }\n      } else { // i.e. import * as bar from \"./bar\"\n        let foreignFile = this.lookupForeignFile(queuedImport.foreignPath, queuedImport.foreignPathAlt);\n        if (foreignFile) {\n          let localFile = queuedImport.localFile;\n          let localName = queuedImport.localIdentifier.text;\n          localFile.add(\n            localName,\n            foreignFile.asImportedNamespace(\n              localName,\n              localFile\n            ),\n            true // isImport\n          );\n        } else {\n          assert(false); // already reported by the parser not finding the file\n        }\n      }\n    }\n\n    // queued exports should be resolvable now that imports are finalized\n    for (let [file, exports] of queuedExports) {\n      for (let [exportName, queuedExport] of exports) {\n        let localName = queuedExport.localIdentifier.text;\n        let foreignPath = queuedExport.foreignPath;\n        if (foreignPath) { // i.e. export { foo [as bar] } from \"./baz\"\n          let element = this.lookupForeign(\n            localName,\n            foreignPath,\n            assert(queuedExport.foreignPathAlt), // must be set if foreignPath is\n            queuedExports\n          );\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            this.error(\n              DiagnosticCode.Module_0_has_no_exported_member_1,\n              queuedExport.localIdentifier.range,\n              foreignPath, localName\n            );\n          }\n        } else { // i.e. export { foo [as bar] }\n          let element = file.lookupInSelf(localName);\n          if (element) {\n            file.ensureExport(exportName, element);\n          } else {\n            let globalElement = this.lookupGlobal(localName);\n            if (globalElement && globalElement instanceof DeclaredElement) { // export { memory }\n              file.ensureExport(exportName, <DeclaredElement>globalElement);\n            } else {\n              this.error(\n                DiagnosticCode.Module_0_has_no_exported_member_1,\n                queuedExport.foreignIdentifier.range,\n                file.internalName, queuedExport.foreignIdentifier.text\n              );\n            }\n          }\n        }\n      }\n    }\n\n    // register ArrayBuffer (id=0), String (id=1), ArrayBufferView (id=2)\n    assert(this.nextClassId == 0);\n    this.arrayBufferInstance = this.requireClass(CommonSymbols.ArrayBuffer);\n    assert(this.arrayBufferInstance.id == 0);\n    this.stringInstance = this.requireClass(CommonSymbols.String);\n    assert(this.stringInstance.id == 1);\n    this.arrayBufferViewInstance = this.requireClass(CommonSymbols.ArrayBufferView);\n    assert(this.arrayBufferViewInstance.id == 2);\n\n    // register classes backing basic types\n    this.registerWrapperClass(Type.i8, CommonSymbols.I8);\n    this.registerWrapperClass(Type.i16, CommonSymbols.I16);\n    this.registerWrapperClass(Type.i32, CommonSymbols.I32);\n    this.registerWrapperClass(Type.i64, CommonSymbols.I64);\n    this.registerWrapperClass(options.isizeType, CommonSymbols.Isize);\n    this.registerWrapperClass(Type.u8, CommonSymbols.U8);\n    this.registerWrapperClass(Type.u16, CommonSymbols.U16);\n    this.registerWrapperClass(Type.u32, CommonSymbols.U32);\n    this.registerWrapperClass(Type.u64, CommonSymbols.U64);\n    this.registerWrapperClass(options.usizeType, CommonSymbols.Usize);\n    this.registerWrapperClass(Type.bool, CommonSymbols.Bool);\n    this.registerWrapperClass(Type.f32, CommonSymbols.F32);\n    this.registerWrapperClass(Type.f64, CommonSymbols.F64);\n    if (options.hasFeature(Feature.SIMD)) this.registerWrapperClass(Type.v128, CommonSymbols.V128);\n    if (options.hasFeature(Feature.REFERENCE_TYPES)) this.registerWrapperClass(Type.anyref, CommonSymbols.Anyref);\n\n    // register views but don't instantiate them yet\n    this.i8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int8Array, ElementKind.CLASS_PROTOTYPE);\n    this.i16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int16Array, ElementKind.CLASS_PROTOTYPE);\n    this.i32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int32Array, ElementKind.CLASS_PROTOTYPE);\n    this.i64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Int64Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8Array, ElementKind.CLASS_PROTOTYPE);\n    this.u8ClampedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint8ClampedArray, ElementKind.CLASS_PROTOTYPE);\n    this.u16ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint16Array, ElementKind.CLASS_PROTOTYPE);\n    this.u32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint32Array, ElementKind.CLASS_PROTOTYPE);\n    this.u64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Uint64Array, ElementKind.CLASS_PROTOTYPE);\n    this.f32ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float32Array, ElementKind.CLASS_PROTOTYPE);\n    this.f64ArrayPrototype = <ClassPrototype>this.require(CommonSymbols.Float64Array, ElementKind.CLASS_PROTOTYPE);\n\n    // resolve base prototypes of derived classes\n    var resolver = this.resolver;\n    for (let i = 0, k = queuedExtends.length; i < k; ++i) {\n      let thisPrototype = queuedExtends[i];\n      let extendsNode = assert(thisPrototype.extendsNode); // must be present if in queuedExtends\n      let baseElement = resolver.resolveTypeName(extendsNode.name, thisPrototype.parent); // reports\n      if (!baseElement) continue;\n      if (baseElement.kind == ElementKind.CLASS_PROTOTYPE) {\n        let basePrototype = <ClassPrototype>baseElement;\n        if (basePrototype.hasDecorator(DecoratorFlags.SEALED)) {\n          this.error(\n            DiagnosticCode.Class_0_is_sealed_and_cannot_be_extended,\n            extendsNode.range, (<ClassPrototype>baseElement).identifierNode.text\n          );\n        }\n        if (\n          basePrototype.hasDecorator(DecoratorFlags.UNMANAGED) !=\n          thisPrototype.hasDecorator(DecoratorFlags.UNMANAGED)\n        ) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa,\n            Range.join(thisPrototype.identifierNode.range, extendsNode.range)\n          );\n        }\n        thisPrototype.basePrototype = basePrototype;\n      } else {\n        this.error(\n          DiagnosticCode.A_class_may_only_extend_another_class,\n          extendsNode.range\n        );\n      }\n    }\n\n    // set up global aliases\n    {\n      let globalAliases = options.globalAliases;\n      if (globalAliases) {\n        for (let [alias, name] of globalAliases) {\n          if (!name.length) continue; // explicitly disabled\n          let firstChar = name.charCodeAt(0);\n          if (firstChar >= CharCode._0 && firstChar <= CharCode._9) {\n            this.registerConstantInteger(alias, Type.i32, i64_new(<i32>parseInt(name, 10)));\n          } else {\n            let elementsByName = this.elementsByName;\n            let element = elementsByName.get(name);\n            if (element) {\n              if (elementsByName.has(alias)) throw new Error(\"duplicate global element: \" + name);\n              elementsByName.set(alias, element);\n            }\n            else throw new Error(\"no such global element: \" + name);\n          }\n        }\n      }\n    }\n\n    // register stdlib components\n    this.arrayPrototype = <ClassPrototype>this.require(CommonSymbols.Array, ElementKind.CLASS_PROTOTYPE);\n    this.fixedArrayPrototype = <ClassPrototype>this.require(CommonSymbols.FixedArray, ElementKind.CLASS_PROTOTYPE);\n    this.setPrototype = <ClassPrototype>this.require(CommonSymbols.Set, ElementKind.CLASS_PROTOTYPE);\n    this.mapPrototype = <ClassPrototype>this.require(CommonSymbols.Map, ElementKind.CLASS_PROTOTYPE);\n    this.abortInstance = this.lookupFunction(CommonSymbols.abort); // can be disabled\n    this.allocInstance = this.requireFunction(CommonSymbols.alloc);\n    this.reallocInstance = this.requireFunction(CommonSymbols.realloc);\n    this.freeInstance = this.requireFunction(CommonSymbols.free);\n    this.retainInstance = this.requireFunction(CommonSymbols.retain);\n    this.releaseInstance = this.requireFunction(CommonSymbols.release);\n    this.collectInstance = this.requireFunction(CommonSymbols.collect);\n    this.typeinfoInstance = this.requireFunction(CommonSymbols.typeinfo);\n    this.instanceofInstance = this.requireFunction(CommonSymbols.instanceof_);\n    this.visitInstance = this.requireFunction(CommonSymbols.visit);\n    this.allocArrayInstance = this.requireFunction(CommonSymbols.allocArray);\n\n    // mark module exports, i.e. to apply proper wrapping behavior on the boundaries\n    for (let file of this.filesByName.values()) {\n      let exports = file.exports;\n      if (exports !== null && file.source.sourceKind == SourceKind.USER_ENTRY) {\n        for (let element of exports.values()) this.markModuleExport(element);\n      }\n    }\n  }\n\n  /** Requires that a global library element of the specified kind is present and returns it. */\n  private require(name: string, kind: ElementKind): Element {\n    var element = this.lookupGlobal(name);\n    if (!element) throw new Error(\"missing \" + name);\n    if (element.kind != kind) throw new Error(\"unexpected \" + name);\n    return element;\n  }\n\n  /** Requires that a non-generic global class is present and returns it. */\n  private requireClass(name: string): Class {\n    var prototype = this.require(name, ElementKind.CLASS_PROTOTYPE);\n    var resolved = this.resolver.resolveClass(<ClassPrototype>prototype, null);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Obtains a non-generic global function and returns it. Returns `null` if it does not exist. */\n  private lookupFunction(name: string): Function | null {\n    var prototype = this.lookupGlobal(name);\n    if (!prototype || prototype.kind != ElementKind.FUNCTION_PROTOTYPE) return null;\n    return this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n  }\n\n  /** Requires that a global function is present and returns it. */\n  private requireFunction(name: string, typeArguments: Type[] | null = null): Function {\n    var prototype = this.require(name, ElementKind.FUNCTION_PROTOTYPE);\n    var resolved = this.resolver.resolveFunction(<FunctionPrototype>prototype, typeArguments);\n    if (!resolved) throw new Error(\"invalid \" + name);\n    return resolved;\n  }\n\n  /** Marks an element and its children as a module export. */\n  private markModuleExport(element: Element): void {\n    element.set(CommonFlags.MODULE_EXPORT);\n    switch (element.kind) {\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instanceMembers = (<ClassPrototype>element).instanceMembers;\n        if (instanceMembers) for (let member of instanceMembers.values()) this.markModuleExport(member);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) this.markModuleExport(getterPrototype);\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) this.markModuleExport(setterPrototype);\n        break;\n      }\n      case ElementKind.PROPERTY:\n      case ElementKind.FUNCTION:\n      case ElementKind.FIELD:\n      case ElementKind.CLASS: assert(false); // assumes that there are no instances yet\n    }\n    {\n      let members = element.members;\n      if (members) for (let member of members.values()) this.markModuleExport(member);\n    }\n  }\n\n  /** Registers a native type with the program. */\n  private registerNativeType(name: string, type: Type): void {\n    var element = new TypeDefinition(\n      name,\n      this.nativeFile,\n      this.makeNativeTypeDeclaration(name, CommonFlags.EXPORT),\n      DecoratorFlags.BUILTIN\n    );\n    element.setType(type);\n    this.nativeFile.add(name, element);\n  }\n\n  /** Registers the backing class of a native type. */\n  private registerWrapperClass(type: Type, className: string): void {\n    var wrapperClasses = this.wrapperClasses;\n    assert(!type.classReference && !wrapperClasses.has(type));\n    var element = this.lookupGlobal(className);\n    if (!element) return;\n    assert(element.kind == ElementKind.CLASS_PROTOTYPE);\n    var classElement = this.resolver.resolveClass(<ClassPrototype>element, null);\n    if (!classElement) return;\n    classElement.wrappedType = type;\n    wrapperClasses.set(type, classElement);\n  }\n\n  /** Registers a constant integer value within the global scope. */\n  private registerConstantInteger(name: string, type: Type, value: I64): void {\n    assert(type.is(TypeFlags.INTEGER)); // must be an integer type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantIntegerValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Registers a constant float value within the global scope. */\n  private registerConstantFloat(name: string, type: Type, value: f64): void {\n    assert(type.is(TypeFlags.FLOAT)); // must be a float type\n    var global = new Global(\n      name,\n      this.nativeFile,\n      DecoratorFlags.NONE,\n      this.makeNativeVariableDeclaration(name, CommonFlags.CONST | CommonFlags.EXPORT)\n    );\n    global.setConstantFloatValue(value, type);\n    this.nativeFile.add(name, global);\n  }\n\n  /** Ensures that the given global element exists. Attempts to merge duplicates. */\n  ensureGlobal(name: string, element: DeclaredElement): DeclaredElement {\n    var elementsByName = this.elementsByName;\n    if (elementsByName.has(name)) {\n      let existing = elementsByName.get(name)!;\n      // NOTE: this is effectively only performed when merging native types with\n      // their respective namespaces in std/builtins, but can also trigger when a\n      // user has multiple global elements of the same name in different files,\n      // which might result in unexpected shared symbols accross files. considering\n      // this a wonky feature for now that we might want to revisit later.\n      if (existing !== element) {\n        let merged = tryMerge(existing, element);\n        if (!merged) {\n          if (isDeclaredElement(existing.kind)) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              name\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, name\n            );\n          }\n          return element;\n        }\n        element = merged;\n      }\n    }\n    elementsByName.set(name, element);\n    return element;\n  }\n\n  /** Looks up the element of the specified name in the global scope. */\n  lookupGlobal(name: string): Element | null {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element of the specified name in the global scope. Errors if not present. */\n  requireGlobal(name: string): Element {\n    var elements = this.elementsByName;\n    if (elements.has(name)) return elements.get(name)!;\n    throw new Error(\"missing global\");\n  }\n\n  /** Tries to locate a foreign file given its normalized path. */\n  private lookupForeignFile(\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string\n  ): File | null {\n    var filesByName = this.filesByName;\n    return filesByName.has(foreignPath)\n         ? filesByName.get(foreignPath)!\n         : filesByName.has(foreignPathAlt)\n         ? filesByName.get(foreignPathAlt)!\n         : null;\n  }\n\n  /** Tries to locate a foreign element by traversing exports and queued exports. */\n  private lookupForeign(\n    /** Identifier within the other file. */\n    foreignName: string,\n    /** Normalized path to the other file. */\n    foreignPath: string,\n    /** Alternative normalized path to the other file. */\n    foreignPathAlt: string,\n    /** So far queued exports. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): DeclaredElement | null {\n    do {\n      let foreignFile = this.lookupForeignFile(foreignPath, foreignPathAlt);\n      if (!foreignFile) return null; // no such file\n\n      // search already resolved exports\n      let element = foreignFile.lookupExport(foreignName);\n      if (element) return element;\n\n      // otherwise traverse queued exports\n      if (queuedExports.has(foreignFile)) {\n        let fileQueuedExports = queuedExports.get(foreignFile)!;\n        if (fileQueuedExports.has(foreignName)) {\n          let queuedExport = fileQueuedExports.get(foreignName)!;\n          if (queuedExport.foreignPath) { // imported from another file\n            foreignName = queuedExport.localIdentifier.text;\n            foreignPath = queuedExport.foreignPath;\n            foreignPathAlt = assert(queuedExport.foreignPathAlt);\n            continue;\n          } else { // local element of this file\n            element = foreignFile.lookupInSelf(queuedExport.localIdentifier.text);\n            if (element) return element;\n          }\n        }\n      }\n      break;\n    } while (true);\n    return null;\n  }\n\n  /** Validates that only supported decorators are present. */\n  private checkDecorators(\n    /** Decorators present on an element. */\n    decorators: DecoratorNode[] | null,\n    /** Accepted decorator flags. Emits diagnostics if any other decorators are present. */\n    acceptedFlags: DecoratorFlags\n  ): DecoratorFlags {\n    var flags = DecoratorFlags.NONE;\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator = decorators[i];\n        let kind = DecoratorKind.fromNode(decorator.name);\n        let flag = DecoratorFlags.fromKind(kind);\n        if (flag) {\n          if (flag == DecoratorFlags.BUILTIN) {\n            if (!(acceptedFlags & flag) && !decorator.range.source.isLibrary) {\n              this.error(\n                DiagnosticCode.Decorator_0_is_not_valid_here,\n                decorator.range, decorator.name.range.toString()\n              );\n            } else {\n              flags |= flag;\n            }\n          } else if (!(acceptedFlags & flag)) {\n            this.error(\n              DiagnosticCode.Decorator_0_is_not_valid_here,\n              decorator.range, decorator.name.range.toString()\n            );\n          } else if (flags & flag) {\n            this.error(\n              DiagnosticCode.Duplicate_decorator,\n              decorator.range\n            );\n          } else {\n            flags |= flag;\n          }\n        }\n      }\n    }\n    return flags;\n  }\n\n  /** Initializes a class declaration. */\n  private initializeClass(\n    /** The declaration to initialize. */\n    declaration: ClassDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): ClassPrototype | null {\n    var name = declaration.name.text;\n    var element = new ClassPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.SEALED |\n        DecoratorFlags.UNMANAGED\n      )\n    );\n    if (!parent.add(name, element)) return null;\n\n    var implementsTypes = declaration.implementsTypes;\n    if (implementsTypes) {\n      let numImplementsTypes = implementsTypes.length;\n      // cannot implement interfaces when unmanaged\n      if (element.hasDecorator(DecoratorFlags.UNMANAGED)) {\n        if (numImplementsTypes) {\n          this.error(\n            DiagnosticCode.Unmanaged_classes_cannot_implement_interfaces,\n            Range.join(\n              declaration.name.range,\n              implementsTypes[numImplementsTypes - 1].range\n            )\n          );\n        }\n      } else if (numImplementsTypes) {\n        // remember classes that implement interfaces\n        for (let i = 0; i < numImplementsTypes; ++i) {\n          this.warning(\n            DiagnosticCode.Not_implemented,\n            implementsTypes[i].range\n          );\n        }\n        queuedImplements.push(element);\n      }\n    }\n    // remember classes that extend another class\n    if (declaration.extendsType) queuedExtends.push(element);\n\n    // initialize members\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        case NodeKind.INDEXSIGNATUREDECLARATION: break; // ignored for now\n        default: assert(false); // class member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a field of a class or interface. */\n  private initializeField(\n    /** The declaration to initialize. */\n    declaration: FieldDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var decorators = declaration.decorators;\n    var element: DeclaredElement;\n    if (declaration.is(CommonFlags.STATIC)) { // global variable\n      assert(parent.kind != ElementKind.INTERFACE_PROTOTYPE);\n      element = new Global(\n        name,\n        parent,\n        this.checkDecorators(decorators,\n          (declaration.is(CommonFlags.READONLY)\n            ? DecoratorFlags.INLINE\n            : DecoratorFlags.NONE\n          ) | DecoratorFlags.LAZY | DecoratorFlags.UNSAFE\n        ),\n        declaration\n      );\n      if (!parent.add(name, element)) return;\n    } else { // actual instance field\n      assert(!declaration.isAny(CommonFlags.ABSTRACT | CommonFlags.GET | CommonFlags.SET));\n      element = new FieldPrototype(\n        name,\n        parent,\n        declaration,\n        this.checkDecorators(decorators, DecoratorFlags.UNSAFE)\n      );\n      if (!parent.addInstance(name, element)) return;\n    }\n  }\n\n  /** Initializes a method of a class or interface. */\n  private initializeMethod(\n    /** The declaration to initialize. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var name = declaration.name.text;\n    var isStatic = declaration.is(CommonFlags.STATIC);\n    var acceptedFlags = DecoratorFlags.INLINE | DecoratorFlags.UNSAFE;\n    if (!declaration.is(CommonFlags.GENERIC)) {\n      acceptedFlags |= DecoratorFlags.OPERATOR_BINARY\n                    |  DecoratorFlags.OPERATOR_PREFIX\n                    |  DecoratorFlags.OPERATOR_POSTFIX;\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, acceptedFlags)\n    );\n    if (isStatic) { // global function\n      assert(declaration.name.kind != NodeKind.CONSTRUCTOR);\n      if (!parent.add(name, element)) return;\n    } else { // actual instance method\n      if (!parent.addInstance(name, element)) return;\n    }\n    this.checkOperatorOverloads(declaration.decorators, element, parent);\n  }\n\n  /** Checks that operator overloads are generally valid, if present. */\n  private checkOperatorOverloads(\n    /** Decorators to check. */\n    decorators: DecoratorNode[] | null,\n    /** Decorated method. */\n    prototype: FunctionPrototype,\n    /** Parent class. */\n    classPrototype: ClassPrototype\n  ): void {\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        let decorator: DecoratorNode = decorators[i]; // FIXME: why does tsc want a type here?\n        switch (decorator.decoratorKind) {\n          case DecoratorKind.OPERATOR:\n          case DecoratorKind.OPERATOR_BINARY:\n          case DecoratorKind.OPERATOR_PREFIX:\n          case DecoratorKind.OPERATOR_POSTFIX: {\n            let numArgs = decorator.arguments && decorator.arguments.length || 0;\n            if (numArgs == 1) {\n              let firstArg = (<Expression[]>decorator.arguments)[0];\n              if (\n                firstArg.kind == NodeKind.LITERAL &&\n                (<LiteralExpression>firstArg).literalKind == LiteralKind.STRING\n              ) {\n                let text = (<StringLiteralExpression>firstArg).value;\n                let kind = OperatorKind.fromDecorator(decorator.decoratorKind, text);\n                if (kind == OperatorKind.INVALID) {\n                  this.error(\n                    DiagnosticCode._0_is_not_a_valid_operator,\n                    firstArg.range, text\n                  );\n                } else {\n                  let overloads = classPrototype.overloadPrototypes;\n                  if (overloads.has(kind)) {\n                    this.error(\n                      DiagnosticCode.Duplicate_function_implementation,\n                      firstArg.range\n                    );\n                  } else {\n                    prototype.operatorKind = kind;\n                    overloads.set(kind, prototype);\n                  }\n                }\n              } else {\n                this.error(\n                  DiagnosticCode.String_literal_expected,\n                  firstArg.range\n                );\n              }\n            } else {\n              this.error(\n                DiagnosticCode.Expected_0_arguments_but_got_1,\n                decorator.range, \"1\", numArgs.toString(10)\n              );\n            }\n          }\n        }\n      }\n    }\n  }\n\n  /** Ensures that the property introduced by the specified getter or setter exists.*/\n  private ensureProperty(\n    /** The declaration of the getter or setter introducing the property. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): PropertyPrototype | null {\n    var name = declaration.name.text;\n    if (declaration.is(CommonFlags.STATIC)) {\n      let parentMembers = parent.members;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name)!;\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.add(name, element)) return null;\n        return element;\n      }\n    } else {\n      let parentMembers = parent.instanceMembers;\n      if (parentMembers && parentMembers.has(name)) {\n        let element = <Element>parentMembers.get(name);\n        if (element.kind == ElementKind.PROPERTY_PROTOTYPE) return <PropertyPrototype>element;\n      } else {\n        let element = new PropertyPrototype(name, parent, declaration);\n        if (!parent.addInstance(name, element)) return null;\n        return element;\n      }\n    }\n    this.error(\n      DiagnosticCode.Duplicate_property_0,\n      declaration.name.range, name\n    );\n    return null;\n  }\n\n  /** Initializes a property of a class. */\n  private initializeProperty(\n    /** The declaration of the getter or setter. */\n    declaration: MethodDeclaration,\n    /** Parent class. */\n    parent: ClassPrototype\n  ): void {\n    var property = this.ensureProperty(declaration, parent);\n    if (!property) return;\n    var name = declaration.name.text;\n    var isGetter = declaration.is(CommonFlags.GET);\n    if (isGetter) {\n      if (property.getterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    } else {\n      if (property.setterPrototype) {\n        this.error(\n          DiagnosticCode.Duplicate_property_0,\n          declaration.name.range, name\n        );\n        return;\n      }\n    }\n    var element = new FunctionPrototype(\n      (isGetter ? GETTER_PREFIX : SETTER_PREFIX) + name,\n      property,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.INLINE | DecoratorFlags.UNSAFE\n      )\n    );\n    if (isGetter) {\n      property.getterPrototype = element;\n    } else {\n      property.setterPrototype = element;\n    }\n  }\n\n  /** Initializes an enum. */\n  private initializeEnum(\n    /** The declaration to initialize. */\n    declaration: EnumDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): Enum | null {\n    var name = declaration.name.text;\n    var element = new Enum(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL |\n        DecoratorFlags.INLINE |\n        DecoratorFlags.LAZY\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var values = declaration.values;\n    for (let i = 0, k = values.length; i < k; ++i) {\n      this.initializeEnumValue(values[i], element);\n    }\n    return element;\n  }\n\n  /** Initializes an enum value. */\n  private initializeEnumValue(\n    /** The declaration to initialize. */\n    declaration: EnumValueDeclaration,\n    /** Parent enum. */\n    parent: Enum\n  ): void {\n    var name = declaration.name.text;\n    var element = new EnumValue(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.NONE\n      )\n    );\n    if (!parent.add(name, element)) return;\n  }\n\n  /** Initializes an `export` statement. */\n  private initializeExports(\n    /** The statement to initialize. */\n    statement: ExportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>,\n    /** So far queued `export *`s. */\n    queuedExportsStar: Map<File,QueuedExportStar[]>\n  ): void {\n    var members = statement.members;\n    if (members) { // export { foo, bar } [from \"./baz\"]\n      for (let i = 0, k = members.length; i < k; ++i) {\n        this.initializeExport(members[i], parent, statement.internalPath, queuedExports);\n      }\n    } else { // export * from \"./baz\"\n      let queued: QueuedExportStar[];\n      if (queuedExportsStar.has(parent)) queued = queuedExportsStar.get(parent)!;\n      else queuedExportsStar.set(parent, queued = []);\n      let foreignPath = assert(statement.internalPath); // must be set for export *\n      queued.push(new QueuedExportStar(\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX,\n        assert(statement.path)\n      ));\n    }\n  }\n\n  /** Initializes a single `export` member. Does not handle `export *`. */\n  private initializeExport(\n    /** The member to initialize. */\n    member: ExportMember,\n    /** Local file. */\n    localFile: File,\n    /** Path to the other file, if present. */\n    foreignPath: string | null,\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var localName = member.localName.text;\n    var foreignName = member.exportedName.text;\n\n    // check for duplicates\n    var element = localFile.lookupExport(foreignName);\n    if (element) {\n      this.error(\n        DiagnosticCode.Export_declaration_conflicts_with_exported_declaration_of_0,\n        member.exportedName.range, foreignName\n      );\n      return;\n    }\n    // local element, i.e. export { foo [as bar] }\n    if (foreignPath === null) {\n\n      // resolve right away if the local element already exists\n      if (element = localFile.lookupInSelf(localName)) {\n        localFile.ensureExport(foreignName, element);\n\n      // otherwise queue it\n      } else {\n        let queued: Map<string,QueuedExport>;\n        if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n        else queuedExports.set(localFile, queued = new Map());\n        queued.set(foreignName, new QueuedExport(\n          member.localName,\n          member.exportedName,\n          null, null\n        ));\n      }\n\n    // foreign element, i.e. export { foo } from \"./bar\"\n    } else {\n      let queued: Map<string,QueuedExport>;\n      if (queuedExports.has(localFile)) queued = queuedExports.get(localFile)!;\n      else queuedExports.set(localFile, queued = new Map());\n      queued.set(foreignName, new QueuedExport(\n        member.localName,\n        member.exportedName,\n        foreignPath,\n        foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n          ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n          : foreignPath + INDEX_SUFFIX\n      ));\n    }\n  }\n\n  private initializeExportDefault(\n    /** The statement to initialize. */\n    statement: ExportDefaultStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `extends` clauses. */\n    queuedExtends: Array<ClassPrototype>,\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): void {\n    var declaration = statement.declaration;\n    var element: DeclaredElement | null = null;\n    switch (declaration.kind) {\n      case NodeKind.ENUMDECLARATION: {\n        element = this.initializeEnum(<EnumDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION: {\n        element = this.initializeFunction(<FunctionDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.CLASSDECLARATION: {\n        element = this.initializeClass(<ClassDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      case NodeKind.INTERFACEDECLARATION: {\n        element = this.initializeInterface(<InterfaceDeclaration>declaration, parent);\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        element = this.initializeNamespace(<NamespaceDeclaration>declaration, parent, queuedExtends, queuedImplements);\n        break;\n      }\n      default: assert(false);\n    }\n    if (element) {\n      let exports = parent.exports;\n      if (!exports) parent.exports = exports = new Map();\n      else {\n        if (exports.has(\"default\")) {\n          let existing = exports.get(\"default\")!;\n          this.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            declaration.name.range,\n            existing.declaration.name.range,\n            \"default\"\n          );\n          return;\n        }\n      }\n      exports.set(\"default\", element);\n    }\n  }\n\n  /** Initializes an `import` statement. */\n  private initializeImports(\n    /** The statement to initialize. */\n    statement: ImportStatement,\n    /** Parent file. */\n    parent: File,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var declarations = statement.declarations;\n    if (declarations) { // import { foo [as bar] } from \"./baz\"\n      for (let i = 0, k = declarations.length; i < k; ++i) {\n        this.initializeImport(\n          declarations[i],\n          parent,\n          statement.internalPath,\n          queuedImports,\n          queuedExports\n        );\n      }\n    } else if (statement.namespaceName) { // import * as foo from \"./bar\"\n      queuedImports.push(new QueuedImport(\n        parent,\n        statement.namespaceName,\n        null, // indicates import *\n        statement.internalPath,\n        statement.internalPath + INDEX_SUFFIX\n      ));\n    } else {\n      // import \"./foo\"\n    }\n  }\n\n  /** Initializes a single `import` declaration. Does not handle `import *`. */\n  private initializeImport( // { foo [as bar] }\n    /** The declaration to initialize. */\n    declaration: ImportDeclaration,\n    /** Parent file. */\n    parent: File,\n    /** Path to the other file. */\n    foreignPath: string,\n    /** So far queued `import`s. */\n    queuedImports: QueuedImport[],\n    /** So far queued `export`s. */\n    queuedExports: Map<File,Map<string,QueuedExport>>\n  ): void {\n    var foreignPathAlt = foreignPath.endsWith(INDEX_SUFFIX) // strip or add index depending on what's already present\n      ? foreignPath.substring(0, foreignPath.length - INDEX_SUFFIX.length)\n      : foreignPath + INDEX_SUFFIX;\n\n    // resolve right away if the element exists\n    var element = this.lookupForeign(declaration.foreignName.text, foreignPath, foreignPathAlt, queuedExports);\n    if (element) {\n      parent.add(declaration.name.text, element, true);\n      return;\n    }\n\n    // otherwise queue it\n    queuedImports.push(new QueuedImport(\n      parent,\n      declaration.name,\n      declaration.foreignName,\n      foreignPath,\n      foreignPathAlt\n    ));\n  }\n\n  /** Initializes a function. Does not handle methods. */\n  private initializeFunction(\n    /** The declaration to initialize. */\n    declaration: FunctionDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): FunctionPrototype | null {\n    var name = declaration.name.text;\n    var validDecorators = DecoratorFlags.UNSAFE | DecoratorFlags.BUILTIN;\n    if (declaration.is(CommonFlags.AMBIENT)) {\n      validDecorators |= DecoratorFlags.EXTERNAL;\n    } else {\n      validDecorators |= DecoratorFlags.INLINE;\n    }\n    if (!declaration.is(CommonFlags.INSTANCE)) {\n      if (parent.kind != ElementKind.CLASS_PROTOTYPE) {\n        validDecorators |= DecoratorFlags.GLOBAL;\n      }\n    }\n    var element = new FunctionPrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, validDecorators)\n    );\n    if (!parent.add(name, element)) return null;\n    return element;\n  }\n\n  /** Initializes an interface. */\n  private initializeInterface(\n    /** The declaration to initialize. */\n    declaration: InterfaceDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): InterfacePrototype | null {\n    var name = declaration.name.text;\n    var element = new InterfacePrototype(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators,\n        DecoratorFlags.GLOBAL\n      )\n    );\n    if (!parent.add(name, element)) return null;\n    var memberDeclarations = declaration.members;\n    for (let i = 0, k = memberDeclarations.length; i < k; ++i) {\n      let memberDeclaration = memberDeclarations[i];\n      switch (memberDeclaration.kind) {\n        case NodeKind.FIELDDECLARATION: {\n          this.initializeField(<FieldDeclaration>memberDeclaration, element);\n          break;\n        }\n        case NodeKind.METHODDECLARATION: {\n          if (memberDeclaration.isAny(CommonFlags.GET | CommonFlags.SET)) {\n            this.initializeProperty(<MethodDeclaration>memberDeclaration, element);\n          } else {\n            this.initializeMethod(<MethodDeclaration>memberDeclaration, element);\n          }\n          break;\n        }\n        default: assert(false); // interface member expected\n      }\n    }\n    return element;\n  }\n\n  /** Initializes a namespace. */\n  private initializeNamespace(\n    /** The declaration to initialize. */\n    declaration: NamespaceDeclaration,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** So far queued `extends` clauses. */\n    queuedExtends: ClassPrototype[],\n    /** So far queued `implements` clauses. */\n    queuedImplements: ClassPrototype[]\n  ): Namespace | null {\n    var name = declaration.name.text;\n    var original = new Namespace(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.GLOBAL)\n    );\n    if (!parent.add(name, original)) return null;\n    var element = assert(parent.lookupInSelf(name)); // possibly merged\n    var members = declaration.members;\n    for (let i = 0, k = members.length; i < k; ++i) {\n      let member = members[i];\n      switch (member.kind) {\n        case NodeKind.CLASSDECLARATION: {\n          this.initializeClass(<ClassDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.ENUMDECLARATION: {\n          this.initializeEnum(<EnumDeclaration>member, original);\n          break;\n        }\n        case NodeKind.FUNCTIONDECLARATION: {\n          this.initializeFunction(<FunctionDeclaration>member, original);\n          break;\n        }\n        case NodeKind.INTERFACEDECLARATION: {\n          this.initializeInterface(<InterfaceDeclaration>member, original);\n          break;\n        }\n        case NodeKind.NAMESPACEDECLARATION: {\n          this.initializeNamespace(<NamespaceDeclaration>member, original, queuedExtends, queuedImplements);\n          break;\n        }\n        case NodeKind.TYPEDECLARATION: {\n          this.initializeTypeDefinition(<TypeDeclaration>member, original);\n          break;\n        }\n        case NodeKind.VARIABLE: {\n          this.initializeVariables(<VariableStatement>member, original);\n          break;\n        }\n        default: assert(false); // namespace member expected\n      }\n    }\n    if (original != element) copyMembers(original, element); // retain original parent\n    return element;\n  }\n\n  /** Initializes a `type` definition. */\n  private initializeTypeDefinition(\n    /** The declaration to initialize. */\n    declaration: TypeDeclaration,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var name = declaration.name.text;\n    var element = new TypeDefinition(\n      name,\n      parent,\n      declaration,\n      this.checkDecorators(declaration.decorators, DecoratorFlags.NONE)\n    );\n    parent.add(name, element); // reports\n  }\n\n  /** Initializes a variable statement. */\n  private initializeVariables(\n    /** The statement to initialize. */\n    statement: VariableStatement,\n    /** Parent element, usually a file or namespace. */\n    parent: Element\n  ): void {\n    var declarations = statement.declarations;\n    for (let i = 0, k = declarations.length; i < k; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let acceptedFlags = DecoratorFlags.GLOBAL | DecoratorFlags.LAZY;\n      if (declaration.is(CommonFlags.DECLARE)) {\n        acceptedFlags |= DecoratorFlags.EXTERNAL;\n      }\n      if (declaration.is(CommonFlags.CONST)) {\n        acceptedFlags |= DecoratorFlags.INLINE;\n      }\n      let element = new Global(\n        name,\n        parent,\n        this.checkDecorators(declaration.decorators, acceptedFlags),\n        declaration\n      );\n      if (!parent.add(name, element)) continue; // reports\n    }\n  }\n\n  /** Determines the element type of a built-in array. */\n  // determineBuiltinArrayType(target: Class): Type | null {\n  //   switch (target.internalName) {\n  //     case BuiltinSymbols.Int8Array: return Type.i8;\n  //     case BuiltinSymbols.Uint8ClampedArray:\n  //     case BuiltinSymbols.Uint8Array: return Type.u8;\n  //     case BuiltinSymbols.Int16Array: return Type.i16;\n  //     case BuiltinSymbols.Uint16Array: return Type.u16;\n  //     case BuiltinSymbols.Int32Array: return Type.i32;\n  //     case BuiltinSymbols.Uint32Array: return Type.u32;\n  //     case BuiltinSymbols.Int64Array: return Type.i64;\n  //     case BuiltinSymbols.Uint64Array: return Type.u64;\n  //     case BuiltinSymbols.Float32Array: return Type.f32;\n  //     case BuiltinSymbols.Float64Array: return Type.f64;\n  //   }\n  //   var current: Class | null = target;\n  //   var arrayPrototype = this.arrayPrototype;\n  //   do {\n  //     if (current.prototype == arrayPrototype) { // Array<T>\n  //       let typeArguments = assert(current.typeArguments);\n  //       assert(typeArguments.length == 1);\n  //       return typeArguments[0];\n  //     }\n  //   } while (current = current.base);\n  //   return null;\n  // }\n}\n\n/** Indicates the specific kind of an {@link Element}. */\nexport enum ElementKind {\n  /** A {@link Global}. */\n  GLOBAL,\n  /** A {@link Local}. */\n  LOCAL,\n  /** An {@link Enum}. */\n  ENUM,\n  /** An {@link EnumValue}. */\n  ENUMVALUE,\n  /** A {@link FunctionPrototype}. */\n  FUNCTION_PROTOTYPE,\n  /** A {@link Function}. */\n  FUNCTION,\n  /** A {@link FunctionTarget}. */\n  FUNCTION_TARGET,\n  /** A {@link ClassPrototype}. */\n  CLASS_PROTOTYPE,\n  /** A {@link Class}. */\n  CLASS,\n  /** An {@link InterfacePrototype}. */\n  INTERFACE_PROTOTYPE,\n  /** An {@link Interface}. */\n  INTERFACE,\n  /** A {@link FieldPrototype}. */\n  FIELD_PROTOTYPE,\n  /** A {@link Field}. */\n  FIELD,\n  /** A {@link PropertyPrototype}.  */\n  PROPERTY_PROTOTYPE,\n  /** A {@link Property}. */\n  PROPERTY,\n  /** A {@link Namespace}. */\n  NAMESPACE,\n  /** A {@link File}. */\n  FILE,\n  /** A {@link TypeDefinition}.  */\n  TYPEDEFINITION,\n  /** An {@link IndexSignature}. */\n  INDEXSIGNATURE\n}\n\n/** Indicates built-in decorators that are present. */\nexport enum DecoratorFlags {\n  /** No flags set. */\n  NONE = 0,\n  /** Is a program global. */\n  GLOBAL = 1 << 0,\n  /** Is a binary operator overload. */\n  OPERATOR_BINARY = 1 << 1,\n  /** Is a unary prefix operator overload. */\n  OPERATOR_PREFIX = 1 << 2,\n  /** Is a unary postfix operator overload. */\n  OPERATOR_POSTFIX = 1 << 3,\n  /** Is an unmanaged class. */\n  UNMANAGED = 1 << 4,\n  /** Is a sealed class. */\n  SEALED = 1 << 5,\n  /** Is always inlined. */\n  INLINE = 1 << 6,\n  /** Is using a different external name. */\n  EXTERNAL = 1 << 7,\n  /** Is a builtin. */\n  BUILTIN = 1 << 8,\n  /** Is compiled lazily. */\n  LAZY = 1 << 9,\n  /** Is considered unsafe code. */\n  UNSAFE = 1 << 10\n}\n\nexport namespace DecoratorFlags {\n\n  /** Translates a decorator kind to the respective decorator flag. */\n  export function fromKind(kind: DecoratorKind): DecoratorFlags {\n    switch (kind) {\n      case DecoratorKind.GLOBAL: return DecoratorFlags.GLOBAL;\n      case DecoratorKind.OPERATOR:\n      case DecoratorKind.OPERATOR_BINARY: return DecoratorFlags.OPERATOR_BINARY;\n      case DecoratorKind.OPERATOR_PREFIX: return DecoratorFlags.OPERATOR_PREFIX;\n      case DecoratorKind.OPERATOR_POSTFIX: return DecoratorFlags.OPERATOR_POSTFIX;\n      case DecoratorKind.UNMANAGED: return DecoratorFlags.UNMANAGED;\n      case DecoratorKind.SEALED: return DecoratorFlags.SEALED;\n      case DecoratorKind.INLINE: return DecoratorFlags.INLINE;\n      case DecoratorKind.EXTERNAL: return DecoratorFlags.EXTERNAL;\n      case DecoratorKind.BUILTIN: return DecoratorFlags.BUILTIN;\n      case DecoratorKind.LAZY: return DecoratorFlags.LAZY;\n      case DecoratorKind.UNSAFE: return DecoratorFlags.UNSAFE;\n      default: return DecoratorFlags.NONE;\n    }\n  }\n}\n\n/** Base class of all program elements. */\nexport abstract class Element {\n\n  /** Parent element. */\n  parent: Element;\n  /** Common flags indicating specific traits. */\n  flags: CommonFlags = CommonFlags.NONE;\n  /** Decorator flags indicating annotated traits. */\n  decoratorFlags: DecoratorFlags = DecoratorFlags.NONE;\n  /** Member elements. */\n  members: Map<string,DeclaredElement> | null = null;\n  /** Shadowing type in type space, if any. */\n  shadowType: TypeDefinition | null = null;\n\n  /** Constructs a new program element. */\n  protected constructor(\n    /** Specific element kind. */\n    public kind: ElementKind,\n    /** Simple name. */\n    public name: string,\n    /** Internal name referring to this element. */\n    public internalName: string,\n    /** Containing {@link Program}. */\n    public program: Program,\n    /** Parent element. */\n    parent: Element | null\n  ) {\n    this.program = program;\n    this.name = name;\n    this.internalName = internalName;\n    if (parent) {\n      this.parent = parent;\n    } else {\n      assert(this.kind == ElementKind.FILE);\n      this.parent = this; // special case to keep this.parent non-nullable\n    }\n  }\n\n  /** Gets the enclosing file. */\n  get file(): File {\n    var current: Element = this;\n    do if ((current = current.parent).kind == ElementKind.FILE) return <File>current;\n    while (true);\n  }\n\n  /** Tests if this element has a specific flag or flags. */\n  is(flag: CommonFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this element has any of the specified flags. */\n  isAny(flags: CommonFlags): bool { return (this.flags & flags) != 0; }\n  /** Sets a specific flag or flags. */\n  set(flag: CommonFlags): void { this.flags |= flag; }\n  /** Unsets the specific flag or flags. */\n  unset(flag: CommonFlags): void {this.flags &= ~flag; }\n  /** Tests if this element has a specific decorator flag or flags. */\n  hasDecorator(flag: DecoratorFlags): bool { return (this.decoratorFlags & flag) == flag; }\n\n  /** Looks up the element with the specified name within this element. */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var members = this.members;\n    if (members && members.has(name)) return members.get(name)!;\n    return null;\n  }\n\n  /** Looks up the element with the specified name relative to this element, like in JS. */\n  abstract lookup(name: string): Element | null;\n\n  /** Adds an element as a member of this one. Reports and returns `false` if a duplicate. */\n  add(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var members = this.members;\n    if (!members) this.members = members = new Map();\n    else if (members.has(name)) {\n      let existing = members.get(name)!;\n      if (existing.parent !== this) {\n        // override non-own element\n      } else {\n        let merged = tryMerge(existing, element);\n        if (merged) {\n          element = merged; // use merged element\n        } else {\n          if (isDeclaredElement(existing.kind)) {\n            this.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range,\n              (<DeclaredElement>existing).declaration.name.range,\n              element.identifierNode.text\n            );\n          } else {\n            this.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              element.identifierNode.range, element.identifierNode.text\n            );\n          }\n          return false;\n        }\n      }\n    }\n    members.set(name, element);\n    var program = this.program;\n    if (element.kind != ElementKind.FUNCTION_PROTOTYPE || !(<FunctionPrototype>element).isBound) {\n      // prefer unbound prototypes in global lookup maps\n      program.elementsByName.set(element.internalName, element);\n      program.elementsByDeclaration.set(originalDeclaration, element);\n    }\n    return true;\n  }\n\n  /** Returns a string representation of this element. */\n  toString(): string {\n    return ElementKind[this.kind] + \":\" + this.internalName;\n  }\n}\n\n// Kinds of all declared elements\nvar declaredElements = new Set<ElementKind>();\n\n/** Tests if the specified element kind indicates a declared element. */\nexport function isDeclaredElement(kind: ElementKind): bool {\n  return declaredElements.has(kind);\n}\n\n/** Base class of elements with an associated declaration statement. */\nexport abstract class DeclaredElement extends Element {\n\n  /** Constructs a new declared program element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    public declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent);\n    declaredElements.add(kind);\n    // It is necessary to have access to identifiers of all members and exports\n    // for reporting purposes and this is the lowest common denominator. Comes\n    // at the expense of not having more specific type information in derived\n    // classes, though. Instead, derived classes implement getters for other\n    // important AST nodes directly through manual casting, allowing the resolver\n    // etc. to not worry about actual declarations.\n    this.declaration = declaration;\n    this.flags = declaration.flags; // inherit\n  }\n\n  /** Tests if this element is a library element. */\n  get isDeclaredInLibrary(): bool {\n    return this.declaration.range.source.isLibrary;\n  }\n\n  /** Gets the associated identifier node. */\n  get identifierNode(): IdentifierExpression {\n    return this.declaration.name;\n  }\n\n  /** Gets the assiciated decorator nodes. */\n  get decoratorNodes(): DecoratorNode[] | null {\n    return this.declaration.decorators;\n  }\n}\n\n// Kinds of all typed elements\nvar typedElements = new Set<ElementKind>();\n\n/** Checks if the specified element kind indicates a typed element. */\nexport function isTypedElement(kind: ElementKind): bool {\n  return typedElements.has(kind);\n}\n\n/** Base class of elements that can be resolved to a concrete type. */\nexport abstract class TypedElement extends DeclaredElement {\n\n  /** Resolved type. Set once `is(RESOLVED)`, otherwise void. */\n  type: Type = Type.void;\n\n  constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Internal name referring to this element. */\n    internalName: string,\n    /** Containing {@link Program}. */\n    program: Program,\n    /** Parent element. */\n    parent: Element | null,\n    /** Declaration reference. */\n    declaration: DeclarationStatement\n  ) {\n    super(kind, name, internalName, program, parent, declaration);\n    typedElements.add(kind);\n  }\n\n  /** Sets the resolved type of this element. */\n  setType(type: Type): void {\n    assert(!this.is(CommonFlags.RESOLVED));\n    this.type = type;\n    this.set(CommonFlags.RESOLVED);\n  }\n}\n\n/** A file representing the implicit top-level namespace of a source. */\nexport class File extends Element {\n\n  /** File exports. */\n  exports: Map<string,DeclaredElement> | null = null;\n  /** File re-exports. */\n  exportsStar: File[] | null = null;\n  /** Top-level start function of this file. */\n  startFunction: Function;\n\n  /** Constructs a new file. */\n  constructor(\n    /** Program this file belongs to. */\n    program: Program,\n    /** Source of this file. */\n    public source: Source\n  ) {\n    super(\n      ElementKind.FILE,\n      source.normalizedPath,\n      source.internalPath,\n      program,\n      null // special case for files\n    );\n    this.source = source;\n    assert(!program.filesByName.has(this.internalName));\n    program.filesByName.set(this.internalName, this);\n    var startFunction = this.program.makeNativeFunction(\n      \"start:\" + this.internalName,\n      new Signature(program, null, Type.void),\n      this\n    );\n    startFunction.internalName = startFunction.name;\n    this.startFunction = startFunction;\n  }\n\n  /* @override */\n  add(name: string, element: DeclaredElement, isImport: bool = false): bool {\n    if (element.hasDecorator(DecoratorFlags.GLOBAL)) {\n      element = this.program.ensureGlobal(name, element); // possibly merged globally\n    }\n    if (!super.add(name, element)) return false;\n    element = assert(this.lookupInSelf(name)); // possibly merged locally\n    if (element.is(CommonFlags.EXPORT) && !isImport) {\n      this.ensureExport(\n        element.name,\n        element\n      );\n    }\n    return true;\n  }\n\n  /* @override */\n  lookupInSelf(name: string): DeclaredElement | null {\n    var element = super.lookupInSelf(name);\n    if (element) return element;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        if (element = exportsStar[i].lookupInSelf(name)) return element;\n      }\n    }\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var element = this.lookupInSelf(name);\n    if (element) return element;\n    return this.program.lookupGlobal(name);\n  }\n\n  /** Ensures that an element is an export of this file. */\n  ensureExport(name: string, element: DeclaredElement): void {\n    var exports = this.exports;\n    if (!exports) this.exports = exports = new Map();\n    exports.set(name, element);\n    if (this.source.sourceKind == SourceKind.LIBRARY_ENTRY) this.program.ensureGlobal(name, element);\n  }\n\n  /** Ensures that another file is a re-export of this file. */\n  ensureExportStar(file: File): void {\n    var exportsStar = this.exportsStar;\n    if (!exportsStar) this.exportsStar = exportsStar = [];\n    else if (exportsStar.includes(file)) return;\n    exportsStar.push(file);\n  }\n\n  /** Looks up the export of the specified name. */\n  lookupExport(name: string): DeclaredElement | null {\n    var exports = this.exports;\n    if (exports && exports.has(name)) return exports.get(name)!;\n    var exportsStar = this.exportsStar;\n    if (exportsStar) {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) {\n        let element = exportsStar[i].lookupExport(name);\n        if (element) return element;\n      }\n    }\n    return null;\n  }\n\n  /** Creates an imported namespace from this file. */\n  asImportedNamespace(name: string, parent: Element): Namespace {\n    var ns = new Namespace(\n      name,\n      parent,\n      this.program.makeNativeNamespaceDeclaration(name)\n    );\n    var exports = this.exports;\n    if (exports) {\n      for (let [memberName, member] of exports) {\n        ns.add(memberName, member);\n      }\n    }\n    return ns;\n  }\n}\n\n/** A type definition. */\nexport class TypeDefinition extends TypedElement {\n\n  /** Constructs a new type definition. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: TypeDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.TYPEDEFINITION,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<TypeDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode {\n    return (<TypeDeclaration>this.declaration).type;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A namespace that differs from a file in being user-declared with a name. */\nexport class Namespace extends DeclaredElement {\n\n  /** Constructs a new namespace. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or another namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: NamespaceDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.NAMESPACE,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** An enum. */\nexport class Enum extends TypedElement {\n\n  /** Constructs a new enum. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: EnumDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUM,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.lookupInSelf(name)\n        || this.parent.lookup(name);\n  }\n}\n\n/** Indicates the kind of an inlined constant value. */\nexport const enum ConstantValueKind {\n  /** No constant value. */\n  NONE,\n  /** Constant integer value. */\n  INTEGER,\n  /** Constant float value. */\n  FLOAT\n}\n\n/** Base class of all variable-like program elements. */\nexport abstract class VariableLikeElement extends TypedElement {\n\n  /** Constant value kind. */\n  constantValueKind: ConstantValueKind = ConstantValueKind.NONE;\n  /** Constant integer value, if applicable. */\n  constantIntegerValue: I64;\n  /** Constant float value, if applicable. */\n  constantFloatValue: f64;\n\n  /** Constructs a new variable-like element. */\n  protected constructor(\n    /** Specific element kind. */\n    kind: ElementKind,\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or class. */\n    parent: Element,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      kind,\n      name,\n      mangleInternalName(name, parent, false),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.flags = declaration.flags;\n  }\n\n  /** Gets the associated type node.s */\n  get typeNode(): TypeNode | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<VariableLikeDeclarationStatement>this.declaration).initializer;\n  }\n\n  /** Applies a constant integer value to this element. */\n  setConstantIntegerValue(value: I64, type: Type): void {\n    assert(type.is(TypeFlags.INTEGER));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.INTEGER;\n    this.constantIntegerValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** Applies a constant float value to this element. */\n  setConstantFloatValue(value: f64, type: Type): void {\n    assert(type.is(TypeFlags.FLOAT));\n    this.type = type;\n    this.constantValueKind = ConstantValueKind.FLOAT;\n    this.constantFloatValue = value;\n    this.set(CommonFlags.CONST | CommonFlags.INLINED | CommonFlags.RESOLVED);\n  }\n\n  /** @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An enum value. */\nexport class EnumValue extends VariableLikeElement {\n\n  /** Constructs a new enum value. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent enum. */\n    parent: Enum,\n    /** Declaration reference. */\n    declaration: EnumValueDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.ENUMVALUE,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n    this.setType(Type.i32);\n  }\n\n  /** Whether this enum value is immutable. */\n  isImmutable: bool = false;\n\n  /** Gets the associated value node. */\n  get valueNode(): Expression | null {\n    return (<EnumValueDeclaration>this.declaration).value;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A global variable. */\nexport class Global extends VariableLikeElement {\n\n  /** Constructs a new global variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file, namespace or static class. */\n    parent: Element,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags,\n    /** Declaration reference. Creates a native declaration if omitted. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.GLOBAL,\n      name,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n}\n\n/** A function parameter. */\nexport class Parameter {\n  /** Constructs a new function parameter. */\n  constructor(\n    /** Parameter name. */\n    public name: string,\n    /** Parameter type. */\n    public type: Type,\n    /** Parameter initializer, if present. */\n    public initializer: Expression | null = null\n  ) {}\n}\n\n/** A local variable. */\nexport class Local extends VariableLikeElement {\n\n  /** Constructs a new local variable. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Zero-based index within the enclosing function. `-1` indicates a virtual local. */\n    public index: i32,\n    /** Resolved type. */\n    type: Type,\n    /** Parent function. */\n    parent: Function,\n    /** Declaration reference. */\n    declaration: VariableLikeDeclarationStatement = parent.program.makeNativeVariableDeclaration(name)\n  ) {\n    super(\n      ElementKind.LOCAL,\n      name,\n      parent,\n      declaration\n    );\n    this.index = index;\n    assert(type != Type.void);\n    this.setType(type);\n  }\n}\n\n/** A yet unresolved function prototype. */\nexport class FunctionPrototype extends DeclaredElement {\n\n  /** Operator kind, if an overload. */\n  operatorKind: OperatorKind = OperatorKind.INVALID;\n  /** Already resolved instances. */\n  instances: Map<string,Function> | null = null;\n\n  /** Clones of this prototype that are bounds to specific classes. */\n  private boundPrototypes: Map<Class,FunctionPrototype> | null = null;\n\n  /** Constructs a new function prototype. */\n  constructor(\n    /** Simple name */\n    name: string,\n    /** Parent element, usually a file, namespace or class (if a method). */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: FunctionDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FUNCTION_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<FunctionDeclaration>this.declaration).typeParameters;\n  }\n\n  /** Gets the associated function type node. */\n  get functionTypeNode(): FunctionTypeNode {\n    return (<FunctionDeclaration>this.declaration).signature;\n  }\n\n  /** Gets the associated body node. */\n  get bodyNode(): Statement | null {\n    return (<FunctionDeclaration>this.declaration).body;\n  }\n\n  /** Gets the arrow function kind. */\n  get arrowKind(): ArrowKind {\n    return (<FunctionDeclaration>this.declaration).arrowKind;\n  }\n\n  /** Tests if this prototype is bound to a class. */\n  get isBound(): bool {\n    var parent = this.parent;\n    return parent.kind == ElementKind.CLASS\n        || parent.kind == ElementKind.PROPERTY_PROTOTYPE && parent.parent.kind == ElementKind.CLASS;\n  }\n\n  /** Creates a clone of this prototype that is bound to a concrete class instead. */\n  toBound(classInstance: Class): FunctionPrototype {\n    assert(this.is(CommonFlags.INSTANCE));\n    assert(!this.isBound);\n    var boundPrototypes = this.boundPrototypes;\n    if (!boundPrototypes) this.boundPrototypes = boundPrototypes = new Map();\n    else if (boundPrototypes.has(classInstance)) return boundPrototypes.get(classInstance)!;\n    var declaration = this.declaration; assert(declaration.kind == NodeKind.METHODDECLARATION);\n    var bound = new FunctionPrototype(\n      this.name,\n      classInstance, // !\n      <MethodDeclaration>declaration,\n      this.decoratorFlags\n    );\n    bound.flags = this.flags;\n    bound.operatorKind = this.operatorKind;\n    // NOTE: this.instances holds instances per bound class / unbound\n    boundPrototypes.set(classInstance, bound);\n    return bound;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Function | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Function>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Function): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved function. */\nexport class Function extends TypedElement {\n\n  /** Function prototype. */\n  prototype: FunctionPrototype;\n  /** Function signature. */\n  signature: Signature;\n  /** Map of locals by name. */\n  localsByName: Map<string,Local> = new Map();\n  /** Array of locals by index. */\n  localsByIndex: Local[] = [];\n  /** List of additional non-parameter locals. */\n  additionalLocals: Type[] = [];\n  /** Contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Default control flow. */\n  flow: Flow;\n  /** Remembered debug locations. */\n  debugLocations: Range[] = [];\n  /** Function reference, if compiled. */\n  ref: FunctionRef = 0;\n  /** Function table index, if any. */\n  functionTableIndex: i32 = -1;\n  /** Trampoline function for calling with omitted arguments. */\n  trampoline: Function | null = null;\n\n  /** Counting id of inline operations involving this function. */\n  nextInlineId: i32 = 0;\n  /** Counting id of anonymous inner functions. */\n  nextAnonymousId: i32 = 0;\n  /** Counting id of autorelease variables. */\n  nextAutoreleaseId: i32 = 0;\n\n  /** Constructs a new concrete function. */\n  constructor(\n    /** Name incl. type parameters, i.e. `foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** Respective function prototype. */\n    prototype: FunctionPrototype,\n    /** Concrete signature. */\n    signature: Signature, // pre-resolved\n    /** Contextual type arguments inherited from its parent class, if any. */\n    contextualTypeArguments: Map<string,Type> | null = null\n  ) {\n    super(\n      ElementKind.FUNCTION,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    this.prototype = prototype;\n    this.signature = signature;\n    this.flags = prototype.flags | CommonFlags.RESOLVED;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.contextualTypeArguments = contextualTypeArguments;\n    this.type = Type.u32.asFunction(signature);\n    if (!prototype.is(CommonFlags.AMBIENT)) {\n      let localIndex = 0;\n      if (this.is(CommonFlags.INSTANCE)) {\n        let local = new Local(\n          CommonSymbols.this_,\n          localIndex++,\n          assert(signature.thisType),\n          this\n        );\n        this.localsByName.set(CommonSymbols.this_, local);\n        this.localsByIndex[local.index] = local;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n        let parameterType = parameterTypes[i];\n        let parameterName = signature.getParameterName(i);\n        let local = new Local(\n          parameterName,\n          localIndex++,\n          parameterType,\n          this\n        );\n        this.localsByName.set(parameterName, local);\n        this.localsByIndex[local.index] = local;\n      }\n    }\n    this.flow = Flow.create(this);\n    registerConcreteElement(this.program, this);\n  }\n\n  /** Adds a local of the specified type, with an optional name. */\n  addLocal(type: Type, name: string | null = null, declaration: VariableDeclaration | null = null): Local {\n    // if it has a name, check previously as this method will throw otherwise\n    var localIndex = this.signature.parameterTypes.length + this.additionalLocals.length;\n    if (this.is(CommonFlags.INSTANCE)) ++localIndex;\n    var localName = name !== null\n      ? name\n      : \"var$\" + localIndex.toString();\n    var local = new Local(\n      localName,\n      localIndex,\n      type,\n      this,\n      declaration || this.program.makeNativeVariableDeclaration(localName)\n    );\n    if (name) {\n      if (this.localsByName.has(name)) throw new Error(\"duplicate local name\");\n      this.localsByName.set(name, local);\n    }\n    this.localsByIndex[local.index] = local;\n    this.additionalLocals.push(type);\n    return local;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    var locals = this.localsByName;\n    if (locals.has(name)) return locals.get(name)!;\n    return this.parent.lookup(name);\n  }\n\n  // used by flows to keep track of temporary locals\n  tempI32s: Local[] | null = null;\n  tempI64s: Local[] | null = null;\n  tempF32s: Local[] | null = null;\n  tempF64s: Local[] | null = null;\n  tempV128s: Local[] | null = null;\n  tempAnyrefs: Local[] | null = null;\n\n  // used by flows to keep track of break labels\n  nextBreakId: i32 = 0;\n  breakStack: i32[] | null = null;\n  breakLabel: string | null = null;\n\n  /** Finalizes the function once compiled, releasing no longer needed resources. */\n  finalize(module: Module, ref: FunctionRef): void {\n    this.ref = ref;\n    assert(!this.breakStack || !this.breakStack.length); // internal error\n    this.breakStack = null;\n    this.breakLabel = null;\n    this.tempI32s = this.tempI64s = this.tempF32s = this.tempF64s = null;\n    if (this.program.options.sourceMap) {\n      let debugLocations = this.debugLocations;\n      for (let i = 0, k = debugLocations.length; i < k; ++i) {\n        let debugLocation = debugLocations[i];\n        module.setDebugLocation(\n          ref,\n          debugLocation.debugInfoRef,\n          debugLocation.source.debugInfoIndex,\n          debugLocation.line,\n          debugLocation.column\n        );\n      }\n    }\n  }\n}\n\n/** A resolved function target, that is a function called indirectly by an index and signature. */\nexport class FunctionTarget extends Element {\n\n  /** Underlying signature. */\n  signature: Signature;\n  /** Function type. */\n  type: Type;\n\n  /** Constructs a new function target. */\n  constructor(\n    /** Concrete signature. */\n    signature: Signature,\n    /** Program reference. */\n    program: Program,\n    __s: string = \"\" // FIXME: current TS limitation workaround, but a fix seems underway\n  ) {\n    super(\n      ElementKind.FUNCTION_TARGET,\n      __s = \"sig:\" + signature.toSignatureString(),\n      __s,\n      program,\n      program.nativeFile\n    );\n    this.signature = signature;\n    this.flags = CommonFlags.RESOLVED;\n    this.type = Type.u32.asFunction(signature);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return null;\n  }\n}\n\n/** A yet unresolved instance field prototype. */\nexport class FieldPrototype extends DeclaredElement {\n\n  /** Constructs a new field prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration reference. */\n    declaration: FieldDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE\n  ) {\n    super(\n      ElementKind.FIELD_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, assert(declaration.is(CommonFlags.INSTANCE))),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type node. */\n  get typeNode(): TypeNode | null {\n    return (<FieldDeclaration>this.declaration).type;\n  }\n\n  /** Gets the associated initializer node. */\n  get initializerNode(): Expression | null {\n    return (<FieldDeclaration>this.declaration).initializer;\n  }\n\n  /** Gets the associated parameter index. Set if declared as a constructor parameter, otherwise `-1`. */\n  get parameterIndex(): i32 {\n    return (<FieldDeclaration>this.declaration).parameterIndex;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved instance field. */\nexport class Field extends VariableLikeElement {\n\n  /** Field prototype reference. */\n  prototype: FieldPrototype;\n  /** Field memory offset, if an instance field. */\n  memoryOffset: i32 = -1;\n\n  /** Constructs a new field. */\n  constructor(\n    /** Respective field prototype. */\n    prototype: FieldPrototype,\n    /** Parent class. */\n    parent: Class,\n    /** Concrete type. */\n    type: Type\n  ) {\n    super(\n      ElementKind.FIELD,\n      prototype.name,\n      parent,\n      <VariableLikeDeclarationStatement>prototype.declaration\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    assert(type != Type.void);\n    this.setType(type);\n    registerConcreteElement(this.program, this);\n  }\n}\n\n/** A property comprised of a getter and a setter function. */\nexport class PropertyPrototype extends DeclaredElement {\n\n  /** Getter prototype. */\n  getterPrototype: FunctionPrototype | null = null;\n  /** Setter prototype. */\n  setterPrototype: FunctionPrototype | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent class. */\n    parent: ClassPrototype,\n    /** Declaration of the getter or setter introducing the property. */\n    firstDeclaration: FunctionDeclaration\n  ) {\n    super(\n      ElementKind.PROPERTY_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, firstDeclaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      firstDeclaration\n    );\n    this.flags &= ~(CommonFlags.GET | CommonFlags.SET);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A resolved property. */\nexport class Property extends VariableLikeElement {\n\n  /** Prototype reference. */\n  prototype: PropertyPrototype;\n  /** Getter instance. */\n  getterInstance: Function | null = null;\n  /** Setter instance. */\n  setterInstance: Function | null = null;\n\n  /** Constructs a new property prototype. */\n  constructor(\n    /** Respective property prototype. */\n    prototype: PropertyPrototype,\n    /** Parent element, usually a static class prototype or class instance. */\n    parent: Element\n  ) {\n    super(\n      ElementKind.PROPERTY,\n      prototype.name,\n      parent,\n      prototype.program.makeNativeVariableDeclaration(\n        prototype.name,\n        prototype.is(CommonFlags.INSTANCE)\n          ? CommonFlags.INSTANCE\n          : CommonFlags.NONE\n      )\n    );\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    registerConcreteElement(this.program, this);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** An resolved index signature. */\nexport class IndexSignature extends VariableLikeElement {\n\n  /** Constructs a new index prototype. */\n  constructor(\n    /** Parent class. */\n    parent: Class\n  ) {\n    super(ElementKind.INDEXSIGNATURE, parent.internalName + \"[]\", parent);\n  }\n\n  /** Obtains the getter instance. */\n  getGetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n  }\n\n  /** Obtains the setter instance. */\n  getSetterInstance(isUnchecked: bool): Function | null {\n    return (<Class>this.parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\n/** A yet unresolved class prototype. */\nexport class ClassPrototype extends DeclaredElement {\n\n  /** Instance member prototypes. */\n  instanceMembers: Map<string,Element> | null = null;\n  /** Base class prototype, if applicable. */\n  basePrototype: ClassPrototype | null = null; // set in Program#initialize\n  /** Constructor prototype. */\n  constructorPrototype: FunctionPrototype | null = null;\n  /** Operator overload prototypes. */\n  overloadPrototypes: Map<OperatorKind, FunctionPrototype> = new Map();\n  /** Already resolved instances. */\n  instances: Map<string,Class> | null = null;\n\n  constructor(\n    /** Simple name. */\n    name: string,\n    /** Parent element, usually a file or namespace. */\n    parent: Element,\n    /** Declaration reference. */\n    declaration: ClassDeclaration,\n    /** Pre-checked flags indicating built-in decorators. */\n    decoratorFlags: DecoratorFlags = DecoratorFlags.NONE,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE_PROTOTYPE : ElementKind.CLASS_PROTOTYPE,\n      name,\n      mangleInternalName(name, parent, declaration.is(CommonFlags.INSTANCE)),\n      parent.program,\n      parent,\n      declaration\n    );\n    this.decoratorFlags = decoratorFlags;\n  }\n\n  /** Gets the associated type parameter nodes. */\n  get typeParameterNodes(): TypeParameterNode[] | null {\n    return (<ClassDeclaration>this.declaration).typeParameters;\n  }\n  /** Gets the associated extends node. */\n  get extendsNode(): NamedTypeNode | null {\n    return (<ClassDeclaration>this.declaration).extendsType;\n  }\n  /** Gets the associated implements nodes. */\n  get implementsNodes(): NamedTypeNode[] | null {\n    return (<ClassDeclaration>this.declaration).implementsTypes;\n  }\n\n  /** Tests if this prototype is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    var arrayBufferViewInstance = this.program.arrayBufferViewInstance;\n    return arrayBufferViewInstance !== null\n        && this.extends(arrayBufferViewInstance.prototype);\n  }\n\n  /** Tests if this prototype extends the specified. */\n  extends(basePtototype: ClassPrototype | null): bool {\n    var current: ClassPrototype | null = this;\n    do if (current === basePtototype) return true;\n    while (current = current.basePrototype);\n    return false;\n  }\n\n  /** Adds an element as an instance member of this one. Returns the previous element if a duplicate. */\n  addInstance(name: string, element: DeclaredElement): bool {\n    var originalDeclaration = element.declaration;\n    var instanceMembers = this.instanceMembers;\n    if (!instanceMembers) this.instanceMembers = instanceMembers = new Map();\n    else if (instanceMembers.has(name)) {\n      let existing = instanceMembers.get(name)!;\n      let merged = tryMerge(existing, element);\n      if (!merged) {\n        if (isDeclaredElement(existing.kind)) {\n          this.program.errorRelated(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range,\n            (<DeclaredElement>existing).declaration.name.range,\n            element.identifierNode.text\n          );\n        } else {\n          this.program.error(\n            DiagnosticCode.Duplicate_identifier_0,\n            element.identifierNode.range, element.identifierNode.text\n          );\n        }\n        return false;\n      }\n      element = merged;\n    }\n    instanceMembers.set(name, element);\n    if (element.is(CommonFlags.EXPORT) && this.is(CommonFlags.MODULE_EXPORT)) {\n      element.set(CommonFlags.MODULE_EXPORT); // propagate\n    }\n    this.program.elementsByDeclaration.set(originalDeclaration, element);\n    return true;\n  }\n\n  /** Gets the resolved instance for the specified instance key, if already resolved. */\n  getResolvedInstance(instanceKey: string): Class | null {\n    var instances = this.instances;\n    if (instances && instances.has(instanceKey)) return <Class>instances.get(instanceKey);\n    return null;\n  }\n\n  /** Sets the resolved instance for the specified instance key. */\n  setResolvedInstance(instanceKey: string, instance: Class): void {\n    var instances = this.instances;\n    if (!instances) this.instances = instances = new Map();\n    else assert(!instances.has(instanceKey));\n    instances.set(instanceKey, instance);\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n}\n\nconst enum AcyclicState {\n  UNKNOWN,\n  ACYCLIC,\n  NOT_ACYCLIC\n}\n\n/** A resolved class. */\nexport class Class extends TypedElement {\n\n  /** Class prototype. */\n  prototype: ClassPrototype;\n  /** Resolved type arguments. */\n  typeArguments: Type[] | null;\n  /** Base class, if applicable. */\n  base: Class | null;\n  /** Contextual type arguments for fields and methods. */\n  contextualTypeArguments: Map<string,Type> | null = null;\n  /** Current member memory offset. */\n  currentMemoryOffset: u32 = 0;\n  /** Constructor instance. */\n  constructorInstance: Function | null = null;\n  /** Operator overloads. */\n  overloads: Map<OperatorKind,Function> | null = null;\n  /** Index signature, if present. */\n  indexSignature: IndexSignature | null = null;\n  /** Unique class id. */\n  private _id: u32 = 0;\n  /** Remembers acyclic state. */\n  private _acyclic: AcyclicState = AcyclicState.UNKNOWN;\n  /** Runtime type information flags. */\n  rttiFlags: u32 = 0;\n  /** Wrapped type, if a wrapper for a basic type. */\n  wrappedType: Type | null = null;\n\n  /** Gets the unique runtime id of this class. */\n  get id(): u32 {\n    return this._id; // unmanaged remains 0 (=ArrayBuffer)\n  }\n\n  /** Tests if this class is of a builtin array type (Array/TypedArray). */\n  get isBuiltinArray(): bool {\n    return this.prototype.isBuiltinArray;\n  }\n\n  /** Tests if this class is array-like. */\n  get isArrayLike(): bool {\n    if (this.isBuiltinArray) return true;\n    var lengthField = this.lookupInSelf(\"length\");\n    return lengthField !== null && (\n      lengthField.kind == ElementKind.FIELD ||\n      (\n        lengthField.kind == ElementKind.PROPERTY &&\n        (<Property>lengthField).getterInstance !== null // TODO: resolve & check type?\n      )\n    ) && (\n      this.lookupOverload(OperatorKind.INDEXED_GET) !== null ||\n      this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET) !== null\n    );\n  }\n\n  /** Constructs a new class. */\n  constructor(\n    /** Name incl. type parameters, i.e. `Foo<i32>`. */\n    nameInclTypeParameters: string,\n    /** The respective class prototype. */\n    prototype: ClassPrototype,\n    /** Concrete type arguments, if any. */\n    typeArguments: Type[] | null = null,\n    /** Base class, if derived. */\n    base: Class | null = null,\n    _isInterface: bool = false // FIXME\n  ) {\n    super(\n      _isInterface ? ElementKind.INTERFACE : ElementKind.CLASS,\n      nameInclTypeParameters,\n      mangleInternalName(nameInclTypeParameters, prototype.parent, prototype.is(CommonFlags.INSTANCE)),\n      prototype.program,\n      prototype.parent,\n      prototype.declaration\n    );\n    var program = this.program;\n    this.prototype = prototype;\n    this.flags = prototype.flags;\n    this.decoratorFlags = prototype.decoratorFlags;\n    this.typeArguments = typeArguments;\n    this.setType(program.options.usizeType.asClass(this));\n    this.base = base;\n\n    if (!this.hasDecorator(DecoratorFlags.UNMANAGED)) {\n      let id = program.nextClassId++;\n      this._id = id;\n      program.managedClasses.set(id, this);\n    }\n\n    // inherit static members and contextual type arguments from base class\n    if (base) {\n      let inheritedTypeArguments = base.contextualTypeArguments;\n      if (inheritedTypeArguments) {\n        let contextualTypeArguments = this.contextualTypeArguments;\n        for (let [baseName, baseType] of inheritedTypeArguments) {\n          if (!contextualTypeArguments) this.contextualTypeArguments = contextualTypeArguments = new Map();\n          contextualTypeArguments.set(baseName, baseType);\n        }\n      }\n    }\n\n    // apply pre-checked instance-specific contextual type arguments\n    var typeParameters = prototype.typeParameterNodes;\n    if (typeArguments) {\n      let numTypeArguments = typeArguments.length;\n      if (!typeParameters || numTypeArguments != typeParameters.length) {\n        throw new Error(\"type argument count mismatch\");\n      }\n      if (numTypeArguments) {\n        if (!this.contextualTypeArguments) this.contextualTypeArguments = new Map();\n        for (let i = 0; i < numTypeArguments; ++i) {\n          this.contextualTypeArguments.set(typeParameters[i].name.text, typeArguments[i]);\n        }\n      }\n    } else if (typeParameters && typeParameters.length) {\n      throw new Error(\"type argument count mismatch\");\n    }\n    registerConcreteElement(program, this);\n  }\n\n  /** Tests if a value of this class type is assignable to a target of the specified class type. */\n  isAssignableTo(target: Class): bool {\n    var current: Class | null = this;\n    do if (current == target) return true;\n    while (current = current.base);\n    return false;\n  }\n\n  /** Looks up the operator overload of the specified kind. */\n  lookupOverload(kind: OperatorKind, unchecked: bool = false): Function | null {\n    if (unchecked) {\n      switch (kind) {\n        case OperatorKind.INDEXED_GET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_GET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        case OperatorKind.INDEXED_SET: {\n          let uncheckedOverload = this.lookupOverload(OperatorKind.UNCHECKED_INDEXED_SET);\n          if (uncheckedOverload) return uncheckedOverload;\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    var instance: Class | null = this;\n    do {\n      let overloads = instance.overloads;\n      if (overloads) {\n        let overload = overloads.get(kind);\n        if (overload) return overload;\n      }\n    } while (instance = instance.base);\n    return null;\n  }\n\n  /* @override */\n  lookup(name: string): Element | null {\n    return this.parent.lookup(name);\n  }\n\n  /** Calculates the memory offset of the specified field. */\n  offsetof(fieldName: string): u32 {\n    var members = assert(this.members);\n    assert(members.has(fieldName));\n    var field = <Element>members.get(fieldName);\n    assert(field.kind == ElementKind.FIELD);\n    return (<Field>field).memoryOffset;\n  }\n\n  /** Writes a field value to a buffer and returns the number of bytes written. */\n  writeField<T>(name: string, value: T, buffer: Uint8Array, baseOffset: i32): i32 {\n    var field = this.lookupInSelf(name);\n    if (field && field.kind == ElementKind.FIELD) {\n      let offset = baseOffset + (<Field>field).memoryOffset;\n      switch ((<Field>field).type.kind) {\n        case TypeKind.I8:\n        case TypeKind.U8: {\n          writeI8(i32(value), buffer, offset);\n          return 1;\n        }\n        case TypeKind.I16:\n        case TypeKind.U16: {\n          writeI16(i32(value), buffer, offset);\n          return 2;\n        }\n        case TypeKind.I32:\n        case TypeKind.U32: {\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.ISIZE:\n        case TypeKind.USIZE: {\n          assert(!this.program.options.isWasm64); // TODO\n          writeI32(i32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F32: {\n          writeF32(f32(value), buffer, offset);\n          return 4;\n        }\n        case TypeKind.F64: {\n          writeF64(f64(value), buffer, offset);\n          return 8;\n        }\n      }\n    }\n    assert(false);\n    return 0;\n  }\n\n  /** Tests if this class extends the specified prototype. */\n  extends(prototype: ClassPrototype): bool {\n    return this.prototype.extends(prototype);\n  }\n\n  /** Gets the concrete type arguments to the specified extendend prototype. */\n  getTypeArgumentsTo(extendedPrototype: ClassPrototype): Type[] | null {\n    var current: Class | null = this;\n    do if (current.prototype === extendedPrototype) return current.typeArguments;\n    while (current = current.base);\n    return null;\n  }\n\n  /** Gets the value type of an array. Must be an array. */\n  getArrayValueType(): Type {\n    var current: Class = this;\n    var program = this.program;\n    var abvInstance = program.arrayBufferViewInstance;\n    while (current.base !== abvInstance) {\n      current = assert(current.base);\n    }\n    switch (current.prototype) {\n      case program.i8ArrayPrototype: return Type.i8;\n      case program.i16ArrayPrototype: return Type.i16;\n      case program.i32ArrayPrototype: return Type.i32;\n      case program.i64ArrayPrototype: return Type.i64;\n      case program.u8ArrayPrototype:\n      case program.u8ClampedArrayPrototype: return Type.u8;\n      case program.u16ArrayPrototype: return Type.u16;\n      case program.u32ArrayPrototype: return Type.u32;\n      case program.u64ArrayPrototype: return Type.u64;\n      case program.f32ArrayPrototype: return Type.f32;\n      case program.f64ArrayPrototype: return Type.f64;\n      case program.arrayPrototype: return assert(this.getTypeArgumentsTo(program.arrayPrototype))[0];\n      default: assert(false);\n    }\n    return Type.void;\n  }\n\n  /** Tests if this class is inherently acyclic. */\n  get isAcyclic(): bool {\n    var acyclic = this._acyclic;\n    if (acyclic == AcyclicState.UNKNOWN) {\n      let hasCycle = this.cyclesTo(this);\n      if (hasCycle) this._acyclic = acyclic = AcyclicState.NOT_ACYCLIC;\n      else this._acyclic = acyclic = AcyclicState.ACYCLIC;\n    }\n    return acyclic == AcyclicState.ACYCLIC;\n  }\n\n  /** Tests if this class potentially forms a reference cycle to another one. */\n  private cyclesTo(other: Class, except: Set<Class> = new Set()): bool {\n    // TODO: The pure RC paper describes acyclic data structures as classes that may contain\n    //\n    // - scalars\n    // - references to classes that are both acyclic and final (here: Java); and\n    // - arrays (in our case: also sets, maps) of either of the above\n    //\n    // Our implementation, however, treats all objects that do not reference themselves directly\n    // or indirectly as acylic, allowing them to contain inner cycles of other non-acyclic objects.\n    // This contradicts the second assumption and must be revisited when actually implementing RC.\n\n    if (except.has(this)) return false;\n    except.add(this); // don't recurse indefinitely\n\n    // Find out if any field references 'other' directly or indirectly\n    var current: Class | null;\n    var members = this.members;\n    if (members) {\n      for (let member of members.values()) {\n        if (member.kind == ElementKind.FIELD) {\n          let type = (<Field>member).type;\n          if (type.is(TypeFlags.REFERENCE)) {\n            if ((current = type.classReference) !== null && (\n              current === other ||\n              current.cyclesTo(other, except)\n            )) return true;\n          }\n        }\n      }\n    }\n\n    // Do the same for non-field data\n    var basePrototype: ClassPrototype | null;\n\n    // Array<T->other?>\n    if ((basePrototype = this.program.arrayPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Set<K->other?>\n    } else if ((basePrototype = this.program.setPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 1);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n\n    // Map<K->other?,V->other?>\n    } else if ((basePrototype = this.program.mapPrototype) && this.prototype.extends(basePrototype)) {\n      let typeArguments = assert(this.getTypeArgumentsTo(basePrototype));\n      assert(typeArguments.length == 2);\n      if (\n        (current = typeArguments[0].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n      if (\n        (current = typeArguments[1].classReference) !== null &&\n        (\n          current === other ||\n          current.cyclesTo(other, except)\n        )\n      ) return true;\n    }\n    return false;\n  }\n}\n\n/** A yet unresolved interface. */\nexport class InterfacePrototype extends ClassPrototype { // FIXME\n\n  /** Constructs a new interface prototype. */\n  constructor(\n    name: string,\n    parent: Element,\n    declaration: InterfaceDeclaration,\n    decoratorFlags: DecoratorFlags\n  ) {\n    super(\n      name,\n      parent,\n      declaration,\n      decoratorFlags,\n      true\n    );\n  }\n}\n\n/** A resolved interface. */\nexport class Interface extends Class { // FIXME\n\n  /** Constructs a new interface. */\n  constructor(\n    nameInclTypeParameters: string,\n    prototype: InterfacePrototype,\n    typeArguments: Type[] = [],\n    base: Interface | null = null\n  ) {\n    super(\n      nameInclTypeParameters,\n      prototype,\n      typeArguments,\n      base,\n      true\n    );\n  }\n}\n\n/** Registers a concrete element with a program. */\nfunction registerConcreteElement(program: Program, element: Element): void {\n  assert(!program.instancesByName.has(element.internalName));\n  program.instancesByName.set(element.internalName, element);\n}\n\n/** Attempts to merge two elements. Returns the merged element on success. */\nfunction tryMerge(older: Element, newer: Element): DeclaredElement | null {\n  // NOTE: some of the following cases are not supported by TS, not sure why exactly.\n  // suggesting to just merge what seems to be possible for now and revisit later.\n  assert(older.program === newer.program);\n  assert(!newer.members);\n  var merged: DeclaredElement | null = null;\n  switch (older.kind) {\n    case ElementKind.FUNCTION_PROTOTYPE: {\n      switch (newer.kind) {\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.CLASS_PROTOTYPE:\n    case ElementKind.ENUM: {\n      if (newer.kind == ElementKind.NAMESPACE) {\n        copyMembers(newer, older);\n        merged = <DeclaredElement>older;\n        break;\n      }\n      break;\n    }\n    case ElementKind.NAMESPACE: {\n      switch (newer.kind) {\n        case ElementKind.ENUM:\n        case ElementKind.CLASS_PROTOTYPE:      // TS2434\n        case ElementKind.FUNCTION_PROTOTYPE: { // TS2434\n          copyMembers(older, newer);\n          merged = <DeclaredElement>newer;\n          break;\n        }\n        case ElementKind.NAMESPACE: {\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n          break;\n        }\n        case ElementKind.TYPEDEFINITION: {\n          if (!older.shadowType) {\n            older.shadowType = <TypeDefinition>newer;\n            copyMembers(newer, older);\n            merged = <DeclaredElement>older;\n          }\n          break;\n        }\n      }\n      break;\n    }\n    case ElementKind.GLOBAL: {\n      if (newer.kind == ElementKind.TYPEDEFINITION) {\n        if (!older.shadowType) {\n          older.shadowType = <TypeDefinition>newer;\n          copyMembers(newer, older);\n          merged = <DeclaredElement>older;\n        }\n      }\n      break;\n    }\n    case ElementKind.TYPEDEFINITION: {\n      switch (newer.kind) {\n        case ElementKind.GLOBAL:\n        case ElementKind.FUNCTION_PROTOTYPE:\n        case ElementKind.NAMESPACE: {\n          if (!newer.shadowType) {\n            newer.shadowType = <TypeDefinition>older;\n            copyMembers(older, newer);\n            merged = <DeclaredElement>newer;\n          }\n          break;\n        }\n      }\n      break;\n    }\n  }\n  if (merged) {\n    let olderIsExport = older.is(CommonFlags.EXPORT) || older.hasDecorator(DecoratorFlags.GLOBAL);\n    let newerIsExport = newer.is(CommonFlags.EXPORT) || newer.hasDecorator(DecoratorFlags.GLOBAL);\n    if (olderIsExport != newerIsExport) {\n      older.program.error(\n        DiagnosticCode.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local,\n        merged.identifierNode.range, merged.identifierNode.text\n      );\n    }\n  }\n  return merged;\n}\n\n/** Copies the members of `src` to `dest`. */\nfunction copyMembers(src: Element, dest: Element): void {\n  var srcMembers = src.members;\n  if (srcMembers) {\n    let destMembers = dest.members;\n    if (!destMembers) dest.members = destMembers = new Map();\n    for (let [memberName, member] of srcMembers) {\n      destMembers.set(memberName, member);\n    }\n  }\n}\n\n/** Mangles the internal name of an element with the specified name that is a child of the given parent. */\nexport function mangleInternalName(name: string, parent: Element, isInstance: bool, asGlobal: bool = false): string {\n  switch (parent.kind) {\n    case ElementKind.FILE: {\n      if (asGlobal) return name;\n      return parent.internalName + PATH_DELIMITER + name;\n    }\n    case ElementKind.FUNCTION: {\n      if (asGlobal) return name;\n      assert(!isInstance);\n      return parent.internalName + INNER_DELIMITER + name;\n    }\n    default: {\n      return mangleInternalName(parent.name, parent.parent, parent.is(CommonFlags.INSTANCE), asGlobal)\n           + (isInstance ? INSTANCE_DELIMITER : STATIC_DELIMITER) + name;\n    }\n  }\n}\n","/**\n * A thin wrapper around Binaryen's C-API.\n * @module module\n *//***/\n\nimport { Target } from \"./common\";\n\nexport type ModuleRef = usize;\nexport type FunctionTypeRef = usize;\nexport type FunctionRef = usize;\nexport type ExpressionRef = usize;\nexport type GlobalRef = usize;\nexport type EventRef = usize;\nexport type ImportRef = usize;\nexport type ExportRef = usize;\nexport type RelooperRef = usize;\nexport type RelooperBlockRef = usize;\nexport type Index = u32;\n\nexport enum NativeType {\n  None = _BinaryenTypeNone(),\n  I32  = _BinaryenTypeInt32(),\n  I64  = _BinaryenTypeInt64(),\n  F32  = _BinaryenTypeFloat32(),\n  F64  = _BinaryenTypeFloat64(),\n  V128 = _BinaryenTypeVec128(),\n  Anyref = _BinaryenTypeAnyref(),\n  Exnref = _BinaryenTypeExnref(),\n  Unreachable = _BinaryenTypeUnreachable(),\n  Auto = _BinaryenTypeAuto()\n}\n\nexport enum FeatureFlags {\n  MVP = _BinaryenFeatureMVP(),\n  Atomics = _BinaryenFeatureAtomics(),\n  MutableGloabls = _BinaryenFeatureMutableGlobals(),\n  NontrappingFPToInt = _BinaryenFeatureNontrappingFPToInt(),\n  SIMD128 = _BinaryenFeatureSIMD128(),\n  BulkMemory = _BinaryenFeatureBulkMemory(),\n  SignExt = _BinaryenFeatureSignExt(),\n  ExceptionHandling = _BinaryenFeatureExceptionHandling(),\n  TailCall = _BinaryenFeatureTailCall(),\n  ReferenceTypes = _BinaryenFeatureReferenceTypes(),\n  All = _BinaryenFeatureAll()\n}\n\nexport enum ExpressionId {\n  Invalid = _BinaryenInvalidId(),\n  Block = _BinaryenBlockId(),\n  If = _BinaryenIfId(),\n  Loop = _BinaryenLoopId(),\n  Break = _BinaryenBreakId(),\n  Switch = _BinaryenSwitchId(),\n  Call = _BinaryenCallId(),\n  CallIndirect = _BinaryenCallIndirectId(),\n  LocalGet = _BinaryenLocalGetId(),\n  LocalSet = _BinaryenLocalSetId(),\n  GlobalGet = _BinaryenGlobalGetId(),\n  GlobalSet = _BinaryenGlobalSetId(),\n  Load = _BinaryenLoadId(),\n  Store = _BinaryenStoreId(),\n  Const = _BinaryenConstId(),\n  Unary = _BinaryenUnaryId(),\n  Binary = _BinaryenBinaryId(),\n  Select = _BinaryenSelectId(),\n  Drop = _BinaryenDropId(),\n  Return = _BinaryenReturnId(),\n  Host = _BinaryenHostId(),\n  Nop = _BinaryenNopId(),\n  Unreachable = _BinaryenUnreachableId(),\n  AtomicCmpxchg = _BinaryenAtomicCmpxchgId(),\n  AtomicRMW = _BinaryenAtomicRMWId(),\n  AtomicWait = _BinaryenAtomicWaitId(),\n  AtomicNotify = _BinaryenAtomicNotifyId(),\n  AtomicFence = _BinaryenAtomicFenceId(),\n  SIMDExtract = _BinaryenSIMDExtractId(),\n  SIMDReplace = _BinaryenSIMDReplaceId(),\n  SIMDShuffle = _BinaryenSIMDShuffleId(),\n  SIMDTernary = _BinaryenSIMDTernaryId(),\n  SIMDShift = _BinaryenSIMDShiftId(),\n  SIMDLoad = _BinaryenSIMDLoadId(),\n  MemoryInit = _BinaryenMemoryInitId(),\n  DataDrop = _BinaryenDataDropId(),\n  MemoryCopy = _BinaryenMemoryCopyId(),\n  MemoryFill = _BinaryenMemoryFillId(),\n  Try = _BinaryenTryId(),\n  Throw = _BinaryenThrowId(),\n  Rethrow = _BinaryenRethrowId(),\n  BrOnExn = _BinaryenBrOnExnId(),\n  Push = _BinaryenPushId(),\n  Pop = _BinaryenPopId()\n}\n\nexport enum UnaryOp {\n  ClzI32 = _BinaryenClzInt32(),\n  CtzI32 = _BinaryenCtzInt32(),\n  PopcntI32 = _BinaryenPopcntInt32(),\n  NegF32 = _BinaryenNegFloat32(),\n  AbsF32 = _BinaryenAbsFloat32(),\n  CeilF32 = _BinaryenCeilFloat32(),\n  FloorF32 = _BinaryenFloorFloat32(),\n  TruncF32 = _BinaryenTruncFloat32(),\n  NearestF32 = _BinaryenNearestFloat32(),\n  SqrtF32 = _BinaryenSqrtFloat32(),\n  EqzI32 = _BinaryenEqZInt32(),\n  ClzI64 = _BinaryenClzInt64(),\n  CtzI64 = _BinaryenCtzInt64(),\n  PopcntI64 = _BinaryenPopcntInt64(),\n  NegF64 = _BinaryenNegFloat64(),\n  AbsF64 = _BinaryenAbsFloat64(),\n  CeilF64 = _BinaryenCeilFloat64(),\n  FloorF64 = _BinaryenFloorFloat64(),\n  TruncF64 = _BinaryenTruncFloat64(),\n  NearestF64 = _BinaryenNearestFloat64(),\n  SqrtF64 = _BinaryenSqrtFloat64(),\n  EqzI64 = _BinaryenEqZInt64(),\n  ExtendI32 = _BinaryenExtendSInt32(),\n  ExtendU32 = _BinaryenExtendUInt32(),\n  WrapI64 = _BinaryenWrapInt64(),\n  TruncF32ToI32 = _BinaryenTruncSFloat32ToInt32(),\n  TruncF32ToI64 = _BinaryenTruncSFloat32ToInt64(),\n  TruncF32ToU32 = _BinaryenTruncUFloat32ToInt32(),\n  TruncF32ToU64 = _BinaryenTruncUFloat32ToInt64(),\n  TruncF64ToI32 = _BinaryenTruncSFloat64ToInt32(),\n  TruncF64ToI64 = _BinaryenTruncSFloat64ToInt64(),\n  TruncF64ToU32 = _BinaryenTruncUFloat64ToInt32(),\n  TruncF64ToU64 = _BinaryenTruncUFloat64ToInt64(),\n  ReinterpretF32 = _BinaryenReinterpretFloat32(),\n  ReinterpretF64 = _BinaryenReinterpretFloat64(),\n  ConvertI32ToF32 = _BinaryenConvertSInt32ToFloat32(),\n  ConvertI32ToF64 = _BinaryenConvertSInt32ToFloat64(),\n  ConvertU32ToF32 = _BinaryenConvertUInt32ToFloat32(),\n  ConvertU32ToF64 = _BinaryenConvertUInt32ToFloat64(),\n  ConvertI64ToF32 = _BinaryenConvertSInt64ToFloat32(),\n  ConvertI64ToF64 = _BinaryenConvertSInt64ToFloat64(),\n  ConvertU64ToF32 = _BinaryenConvertUInt64ToFloat32(),\n  ConvertU64ToF64 = _BinaryenConvertUInt64ToFloat64(),\n  PromoteF32 = _BinaryenPromoteFloat32(),\n  DemoteF64 = _BinaryenDemoteFloat64(),\n  ReinterpretI32 = _BinaryenReinterpretInt32(),\n  ReinterpretI64 = _BinaryenReinterpretInt64(),\n\n  // see: https://github.com/WebAssembly/sign-extension-ops\n  ExtendI8ToI32 = _BinaryenExtendS8Int32(),\n  ExtendI16ToI32 = _BinaryenExtendS16Int32(),\n  ExtendI8ToI64 = _BinaryenExtendS8Int64(),\n  ExtendI16ToI64 = _BinaryenExtendS16Int64(),\n  ExtendI32ToI64 = _BinaryenExtendS32Int64(),\n\n  // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  TruncF32ToI32Sat = _BinaryenTruncSatSFloat32ToInt32(),\n  TruncF32ToU32Sat = _BinaryenTruncSatUFloat32ToInt32(),\n  TruncF64ToI32Sat = _BinaryenTruncSatSFloat64ToInt32(),\n  TruncF64ToU32Sat = _BinaryenTruncSatUFloat64ToInt32(),\n  TruncF32ToI64Sat = _BinaryenTruncSatSFloat32ToInt64(),\n  TruncF32ToU64Sat = _BinaryenTruncSatUFloat32ToInt64(),\n  TruncF64ToI64Sat = _BinaryenTruncSatSFloat64ToInt64(),\n  TruncF64ToU64Sat = _BinaryenTruncSatUFloat64ToInt64(),\n\n  // see: https://github.com/WebAssembly/simd\n  SplatI8x16 = _BinaryenSplatVecI8x16(),\n  SplatI16x8 = _BinaryenSplatVecI16x8(),\n  SplatI32x4 = _BinaryenSplatVecI32x4(),\n  SplatI64x2 = _BinaryenSplatVecI64x2(),\n  SplatF32x4 = _BinaryenSplatVecF32x4(),\n  SplatF64x2 = _BinaryenSplatVecF64x2(),\n  NotV128 = _BinaryenNotVec128(),\n  NegI8x16 = _BinaryenNegVecI8x16(),\n  AnyTrueI8x16 = _BinaryenAnyTrueVecI8x16(),\n  AllTrueI8x16 = _BinaryenAllTrueVecI8x16(),\n  NegI16x8 = _BinaryenNegVecI16x8(),\n  AnyTrueI16x8 = _BinaryenAnyTrueVecI16x8(),\n  AllTrueI16x8 = _BinaryenAllTrueVecI16x8(),\n  NegI32x4 = _BinaryenNegVecI32x4(),\n  AnyTrueI32x4 = _BinaryenAnyTrueVecI32x4(),\n  AllTrueI32x4 = _BinaryenAllTrueVecI32x4(),\n  NegI64x2 = _BinaryenNegVecI64x2(),\n  AnyTrueI64x2 = _BinaryenAnyTrueVecI64x2(),\n  AllTrueI64x2 = _BinaryenAllTrueVecI64x2(),\n  AbsF32x4 = _BinaryenAbsVecF32x4(),\n  NegF32x4 = _BinaryenNegVecF32x4(),\n  SqrtF32x4 = _BinaryenSqrtVecF32x4(),\n  AbsF64x2 = _BinaryenAbsVecF64x2(),\n  NegF64x2 = _BinaryenNegVecF64x2(),\n  SqrtF64x2 = _BinaryenSqrtVecF64x2(),\n  TruncSatF32x4ToI32x4 = _BinaryenTruncSatSVecF32x4ToVecI32x4(),\n  TruncSatF32x4ToU32x4 = _BinaryenTruncSatUVecF32x4ToVecI32x4(),\n  TruncSatF64x2ToI64x2 = _BinaryenTruncSatSVecF64x2ToVecI64x2(),\n  TruncSatF64x2ToU64x2 = _BinaryenTruncSatUVecF64x2ToVecI64x2(),\n  ConvertI32x4ToF32x4 = _BinaryenConvertSVecI32x4ToVecF32x4(),\n  ConvertU32x4ToF32x4 = _BinaryenConvertUVecI32x4ToVecF32x4(),\n  ConvertI64x2ToF64x2 = _BinaryenConvertSVecI64x2ToVecF64x2(),\n  ConvertU64x2ToF64x2 = _BinaryenConvertUVecI64x2ToVecF64x2(),\n  WidenLowI8x16ToI16x8 = _BinaryenWidenLowSVecI8x16ToVecI16x8(),\n  WidenLowU8x16ToU16x8 = _BinaryenWidenLowUVecI8x16ToVecI16x8(),\n  WidenHighI8x16ToI16x8 = _BinaryenWidenHighSVecI8x16ToVecI16x8(),\n  WidenHighU8x16ToU16x8 = _BinaryenWidenHighUVecI8x16ToVecI16x8(),\n  WidenLowI16x8ToI32x4 = _BinaryenWidenLowSVecI16x8ToVecI32x4(),\n  WidenLowU16x8ToU32x4 = _BinaryenWidenLowUVecI16x8ToVecI32x4(),\n  WidenHighI16x8ToI32x4 = _BinaryenWidenHighSVecI16x8ToVecI32x4(),\n  WidenHighU16x8ToU32x4 = _BinaryenWidenHighUVecI16x8ToVecI32x4()\n}\n\nexport enum BinaryOp {\n  AddI32 = _BinaryenAddInt32(),\n  SubI32 = _BinaryenSubInt32(),\n  MulI32 = _BinaryenMulInt32(),\n  DivI32 = _BinaryenDivSInt32(),\n  DivU32 = _BinaryenDivUInt32(),\n  RemI32 = _BinaryenRemSInt32(),\n  RemU32 = _BinaryenRemUInt32(),\n  AndI32 = _BinaryenAndInt32(),\n  OrI32 = _BinaryenOrInt32(),\n  XorI32 = _BinaryenXorInt32(),\n  ShlI32 = _BinaryenShlInt32(),\n  ShrU32 = _BinaryenShrUInt32(),\n  ShrI32 = _BinaryenShrSInt32(),\n  RotlI32 = _BinaryenRotLInt32(),\n  RotrI32 = _BinaryenRotRInt32(),\n  EqI32 = _BinaryenEqInt32(),\n  NeI32 = _BinaryenNeInt32(),\n  LtI32 = _BinaryenLtSInt32(),\n  LtU32 = _BinaryenLtUInt32(),\n  LeI32 = _BinaryenLeSInt32(),\n  LeU32 = _BinaryenLeUInt32(),\n  GtI32 = _BinaryenGtSInt32(),\n  GtU32 = _BinaryenGtUInt32(),\n  GeI32 = _BinaryenGeSInt32(),\n  GeU32 = _BinaryenGeUInt32(),\n  AddI64 = _BinaryenAddInt64(),\n  SubI64 = _BinaryenSubInt64(),\n  MulI64 = _BinaryenMulInt64(),\n  DivI64 = _BinaryenDivSInt64(),\n  DivU64 = _BinaryenDivUInt64(),\n  RemI64 = _BinaryenRemSInt64(),\n  RemU64 = _BinaryenRemUInt64(),\n  AndI64 = _BinaryenAndInt64(),\n  OrI64 = _BinaryenOrInt64(),\n  XorI64 = _BinaryenXorInt64(),\n  ShlI64 = _BinaryenShlInt64(),\n  ShrU64 = _BinaryenShrUInt64(),\n  ShrI64 = _BinaryenShrSInt64(),\n  RotlI64 = _BinaryenRotLInt64(),\n  RotrI64 = _BinaryenRotRInt64(),\n  EqI64 = _BinaryenEqInt64(),\n  NeI64 = _BinaryenNeInt64(),\n  LtI64 = _BinaryenLtSInt64(),\n  LtU64 = _BinaryenLtUInt64(),\n  LeI64 = _BinaryenLeSInt64(),\n  LeU64 = _BinaryenLeUInt64(),\n  GtI64 = _BinaryenGtSInt64(),\n  GtU64 = _BinaryenGtUInt64(),\n  GeI64 = _BinaryenGeSInt64(),\n  GeU64 = _BinaryenGeUInt64(),\n  AddF32 = _BinaryenAddFloat32(),\n  SubF32 = _BinaryenSubFloat32(),\n  MulF32 = _BinaryenMulFloat32(),\n  DivF32 = _BinaryenDivFloat32(),\n  CopysignF32 = _BinaryenCopySignFloat32(),\n  MinF32 = _BinaryenMinFloat32(),\n  MaxF32 = _BinaryenMaxFloat32(),\n  EqF32 = _BinaryenEqFloat32(),\n  NeF32 = _BinaryenNeFloat32(),\n  LtF32 = _BinaryenLtFloat32(),\n  LeF32 = _BinaryenLeFloat32(),\n  GtF32 = _BinaryenGtFloat32(),\n  GeF32 = _BinaryenGeFloat32(),\n  AddF64 = _BinaryenAddFloat64(),\n  SubF64 = _BinaryenSubFloat64(),\n  MulF64 = _BinaryenMulFloat64(),\n  DivF64 = _BinaryenDivFloat64(),\n  CopysignF64 = _BinaryenCopySignFloat64(),\n  MinF64 = _BinaryenMinFloat64(),\n  MaxF64 = _BinaryenMaxFloat64(),\n  EqF64 = _BinaryenEqFloat64(),\n  NeF64 = _BinaryenNeFloat64(),\n  LtF64 = _BinaryenLtFloat64(),\n  LeF64 = _BinaryenLeFloat64(),\n  GtF64 = _BinaryenGtFloat64(),\n  GeF64 = _BinaryenGeFloat64(),\n\n  // see: https://github.com/WebAssembly/simd\n  EqI8x16 = _BinaryenEqVecI8x16(),\n  NeI8x16 = _BinaryenNeVecI8x16(),\n  LtI8x16 = _BinaryenLtSVecI8x16(),\n  LtU8x16 = _BinaryenLtUVecI8x16(),\n  LeI8x16 = _BinaryenLeSVecI8x16(),\n  LeU8x16 = _BinaryenLeUVecI8x16(),\n  GtI8x16 = _BinaryenGtSVecI8x16(),\n  GtU8x16 = _BinaryenGtUVecI8x16(),\n  GeI8x16 = _BinaryenGeSVecI8x16(),\n  GeU8x16 = _BinaryenGeUVecI8x16(),\n  EqI16x8 = _BinaryenEqVecI16x8(),\n  NeI16x8 = _BinaryenNeVecI16x8(),\n  LtI16x8 = _BinaryenLtSVecI16x8(),\n  LtU16x8 = _BinaryenLtUVecI16x8(),\n  LeI16x8 = _BinaryenLeSVecI16x8(),\n  LeU16x8 = _BinaryenLeUVecI16x8(),\n  GtI16x8 = _BinaryenGtSVecI16x8(),\n  GtU16x8 = _BinaryenGtUVecI16x8(),\n  GeI16x8 = _BinaryenGeSVecI16x8(),\n  GeU16x8 = _BinaryenGeUVecI16x8(),\n  EqI32x4 = _BinaryenEqVecI32x4(),\n  NeI32x4 = _BinaryenNeVecI32x4(),\n  LtI32x4 = _BinaryenLtSVecI32x4(),\n  LtU32x4 = _BinaryenLtUVecI32x4(),\n  LeI32x4 = _BinaryenLeSVecI32x4(),\n  LeU32x4 = _BinaryenLeUVecI32x4(),\n  GtI32x4 = _BinaryenGtSVecI32x4(),\n  GtU32x4 = _BinaryenGtUVecI32x4(),\n  GeI32x4 = _BinaryenGeSVecI32x4(),\n  GeU32x4 = _BinaryenGeUVecI32x4(),\n  EqF32x4 = _BinaryenEqVecF32x4(),\n  NeF32x4 = _BinaryenNeVecF32x4(),\n  LtF32x4 = _BinaryenLtVecF32x4(),\n  LeF32x4 = _BinaryenLeVecF32x4(),\n  GtF32x4 = _BinaryenGtVecF32x4(),\n  GeF32x4 = _BinaryenGeVecF32x4(),\n  EqF64x2 = _BinaryenEqVecF64x2(),\n  NeF64x2 = _BinaryenNeVecF64x2(),\n  LtF64x2 = _BinaryenLtVecF64x2(),\n  LeF64x2 = _BinaryenLeVecF64x2(),\n  GtF64x2 = _BinaryenGtVecF64x2(),\n  GeF64x2 = _BinaryenGeVecF64x2(),\n  AndV128 = _BinaryenAndVec128(),\n  OrV128 = _BinaryenOrVec128(),\n  XorV128 = _BinaryenXorVec128(),\n  AndNotV128 = _BinaryenAndNotVec128(),\n  AddI8x16 = _BinaryenAddVecI8x16(),\n  AddSatI8x16 = _BinaryenAddSatSVecI8x16(),\n  AddSatU8x16 = _BinaryenAddSatUVecI8x16(),\n  SubI8x16 = _BinaryenSubVecI8x16(),\n  SubSatI8x16 = _BinaryenSubSatSVecI8x16(),\n  SubSatU8x16 = _BinaryenSubSatUVecI8x16(),\n  MulI8x16 = _BinaryenMulVecI8x16(),\n  MinI8x16 = _BinaryenMinSVecI8x16(),\n  MinU8x16 = _BinaryenMinUVecI8x16(),\n  MaxI8x16 = _BinaryenMaxSVecI8x16(),\n  MaxU8x16 = _BinaryenMaxUVecI8x16(),\n  AddI16x8 = _BinaryenAddVecI16x8(),\n  AddSatI16x8 = _BinaryenAddSatSVecI16x8(),\n  AddSatU16x8 = _BinaryenAddSatUVecI16x8(),\n  SubI16x8 = _BinaryenSubVecI16x8(),\n  SubSatI16x8 = _BinaryenSubSatSVecI16x8(),\n  SubSatU16x8 = _BinaryenSubSatUVecI16x8(),\n  MulI16x8 = _BinaryenMulVecI16x8(),\n  MinI16x8 = _BinaryenMinSVecI16x8(),\n  MinU16x8 = _BinaryenMinUVecI16x8(),\n  MaxI16x8 = _BinaryenMaxSVecI16x8(),\n  MaxU16x8 = _BinaryenMaxUVecI16x8(),\n  AddI32x4 = _BinaryenAddVecI32x4(),\n  SubI32x4 = _BinaryenSubVecI32x4(),\n  MulI32x4 = _BinaryenMulVecI32x4(),\n  MinI32x4 = _BinaryenMinSVecI32x4(),\n  MinU32x4 = _BinaryenMinUVecI32x4(),\n  MaxI32x4 = _BinaryenMaxSVecI32x4(),\n  MaxU32x4 = _BinaryenMaxUVecI32x4(),\n  DotI16x8 = _BinaryenDotSVecI16x8ToVecI32x4(),\n  AddI64x2 = _BinaryenAddVecI64x2(),\n  SubI64x2 = _BinaryenSubVecI64x2(),\n  AddF32x4 = _BinaryenAddVecF32x4(),\n  SubF32x4 = _BinaryenSubVecF32x4(),\n  MulF32x4 = _BinaryenMulVecF32x4(),\n  DivF32x4 = _BinaryenDivVecF32x4(),\n  MinF32x4 = _BinaryenMinVecF32x4(),\n  MaxF32x4 = _BinaryenMaxVecF32x4(),\n  AddF64x2 = _BinaryenAddVecF64x2(),\n  SubF64x2 = _BinaryenSubVecF64x2(),\n  MulF64x2 = _BinaryenMulVecF64x2(),\n  DivF64x2 = _BinaryenDivVecF64x2(),\n  MinF64x2 = _BinaryenMinVecF64x2(),\n  MaxF64x2 = _BinaryenMaxVecF64x2(),\n  NarrowI16x8ToI8x16 = _BinaryenNarrowSVecI16x8ToVecI8x16(),\n  NarrowU16x8ToU8x16 = _BinaryenNarrowUVecI16x8ToVecI8x16(),\n  NarrowI32x4ToI16x8 = _BinaryenNarrowSVecI32x4ToVecI16x8(),\n  NarrowU32x4ToU16x8 = _BinaryenNarrowUVecI32x4ToVecI16x8(),\n  SwizzleV8x16 = _BinaryenSwizzleVec8x16()\n}\n\nexport enum HostOp {\n  MemorySize = _BinaryenMemorySize(),\n  MemoryGrow = _BinaryenMemoryGrow(),\n}\n\nexport enum AtomicRMWOp {\n  Add = _BinaryenAtomicRMWAdd(),\n  Sub = _BinaryenAtomicRMWSub(),\n  And = _BinaryenAtomicRMWAnd(),\n  Or = _BinaryenAtomicRMWOr(),\n  Xor = _BinaryenAtomicRMWXor(),\n  Xchg = _BinaryenAtomicRMWXchg()\n}\n\nexport enum SIMDExtractOp {\n  ExtractLaneI8x16 = _BinaryenExtractLaneSVecI8x16(),\n  ExtractLaneU8x16 = _BinaryenExtractLaneUVecI8x16(),\n  ExtractLaneI16x8 = _BinaryenExtractLaneSVecI16x8(),\n  ExtractLaneU16x8 = _BinaryenExtractLaneUVecI16x8(),\n  ExtractLaneI32x4 = _BinaryenExtractLaneVecI32x4(),\n  ExtractLaneI64x2 = _BinaryenExtractLaneVecI64x2(),\n  ExtractLaneF32x4 = _BinaryenExtractLaneVecF32x4(),\n  ExtractLaneF64x2 = _BinaryenExtractLaneVecF64x2(),\n}\n\nexport enum SIMDReplaceOp {\n  ReplaceLaneI8x16 = _BinaryenReplaceLaneVecI8x16(),\n  ReplaceLaneI16x8 = _BinaryenReplaceLaneVecI16x8(),\n  ReplaceLaneI32x4 = _BinaryenReplaceLaneVecI32x4(),\n  ReplaceLaneI64x2 = _BinaryenReplaceLaneVecI64x2(),\n  ReplaceLaneF32x4 = _BinaryenReplaceLaneVecF32x4(),\n  ReplaceLaneF64x2 = _BinaryenReplaceLaneVecF64x2()\n}\n\nexport enum SIMDShiftOp {\n  ShlI8x16 = _BinaryenShlVecI8x16(),\n  ShrI8x16 = _BinaryenShrSVecI8x16(),\n  ShrU8x16 = _BinaryenShrUVecI8x16(),\n  ShlI16x8 = _BinaryenShlVecI16x8(),\n  ShrI16x8 = _BinaryenShrSVecI16x8(),\n  ShrU16x8 = _BinaryenShrUVecI16x8(),\n  ShlI32x4 = _BinaryenShlVecI32x4(),\n  ShrI32x4 = _BinaryenShrSVecI32x4(),\n  ShrU32x4 = _BinaryenShrUVecI32x4(),\n  ShlI64x2 = _BinaryenShlVecI64x2(),\n  ShrI64x2 = _BinaryenShrSVecI64x2(),\n  ShrU64x2 = _BinaryenShrUVecI64x2()\n}\n\nexport enum SIMDTernaryOp {\n  Bitselect = _BinaryenBitselectVec128(),\n  QFMAF32x4 = _BinaryenQFMAVecF32x4(),\n  QFMSF32x4 = _BinaryenQFMSVecF32x4(),\n  QFMAF64x2 = _BinaryenQFMAVecF64x2(),\n  QFMSF64x2 = _BinaryenQFMSVecF64x2()\n}\n\nexport enum SIMDLoadOp {\n  LoadSplatV8x16 = _BinaryenLoadSplatVec8x16(),\n  LoadSplatV16x8 = _BinaryenLoadSplatVec16x8(),\n  LoadSplatV32x4 = _BinaryenLoadSplatVec32x4(),\n  LoadSplatV64x2 = _BinaryenLoadSplatVec64x2(),\n  LoadI8ToI16x8 = _BinaryenLoadExtSVec8x8ToVecI16x8(),\n  LoadU8ToU16x8 = _BinaryenLoadExtUVec8x8ToVecI16x8(),\n  LoadI16ToI32x4 = _BinaryenLoadExtSVec16x4ToVecI32x4(),\n  LoadU16ToU32x4 = _BinaryenLoadExtUVec16x4ToVecI32x4(),\n  LoadI32ToI64x2 = _BinaryenLoadExtSVec32x2ToVecI64x2(),\n  LoadU32ToU64x2 = _BinaryenLoadExtUVec32x2ToVecI64x2()\n}\n\nexport class MemorySegment {\n\n  buffer: Uint8Array;\n  offset: I64;\n\n  static create(buffer: Uint8Array, offset: I64): MemorySegment {\n    var segment = new MemorySegment();\n    segment.buffer = buffer;\n    segment.offset = offset;\n    return segment;\n  }\n}\n\nexport class Module {\n\n  ref: ModuleRef;\n\n  private lit: usize;\n\n  static create(): Module {\n    var module = new Module();\n    module.ref = _BinaryenModuleCreate();\n    module.lit = memory.allocate(_BinaryenSizeofLiteral());\n    return module;\n  }\n\n  static createFrom(buffer: Uint8Array): Module {\n    var cArr = allocU8Array(buffer);\n    try {\n      let module = new Module();\n      module.ref = _BinaryenModuleRead(cArr, buffer.length);\n      module.lit = memory.allocate(_BinaryenSizeofLiteral());\n      return module;\n    } finally {\n      memory.free(changetype<usize>(cArr));\n    }\n  }\n\n  private constructor() { }\n\n  // types\n\n  addFunctionType(\n    name: string,\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenAddFunctionType(this.ref, cStr, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunctionTypeBySignature(\n    result: NativeType,\n    paramTypes: NativeType[] | null\n  ): FunctionTypeRef {\n    var cArr = allocI32Array(paramTypes);\n    try {\n      return _BinaryenGetFunctionTypeBySignature(this.ref, result, cArr, paramTypes ? paramTypes.length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeFunctionType(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunctionType(this.ref, cStr);\n  }\n\n  // constants\n\n  i32(value: i32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  i64(valueLow: i32, valueHigh: i32 = 0): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralInt64(out, valueLow, valueHigh);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f32(value: f32): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat32(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  f64(value: f64): ExpressionRef {\n    var out = this.lit;\n    _BinaryenLiteralFloat64(out, value);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  v128(bytes: Uint8Array): ExpressionRef {\n    assert(bytes.length == 16);\n    var out = this.lit;\n    for (let i = 0; i < 16; ++i) store<u8>(out + i, bytes[i]);\n    _BinaryenLiteralVec128(out, out);\n    return _BinaryenConst(this.ref, out);\n  }\n\n  // expressions\n\n  unary(\n    op: UnaryOp,\n    expr: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenUnary(this.ref, op, expr);\n  }\n\n  binary(\n    op: BinaryOp,\n    left: ExpressionRef,\n    right: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenBinary(this.ref, op, left, right);\n  }\n\n  host(\n    op: HostOp,\n    name: string | null = null,\n    operands: ExpressionRef[] | null = null\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenHost(this.ref, op, cStr, cArr, operands ? (<ExpressionRef[]>operands).length : 0);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  local_get(\n    index: i32,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenLocalGet(this.ref, index, type);\n  }\n\n  local_tee(\n    index: i32,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalTee(this.ref, index, value);\n  }\n\n  global_get(\n    name: string,\n    type: NativeType\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalGet(this.ref, cStr, type);\n  }\n\n  load(\n    bytes: Index,\n    signed: bool,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    return _BinaryenLoad(this.ref, bytes, signed ? 1 : 0, offset, align, type, ptr);\n  }\n\n  store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0,\n    align: Index = bytes // naturally aligned by default\n  ): ExpressionRef {\n    if (type < NativeType.None || type > NativeType.V128) throw new Error(\"here: \" + type);\n    return _BinaryenStore(this.ref, bytes, offset, align, ptr, value, type);\n  }\n\n  atomic_load(\n    bytes: Index,\n    ptr: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicLoad(this.ref, bytes, offset, type, ptr);\n  }\n\n  atomic_store(\n    bytes: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType,\n    offset: Index = 0\n  ): ExpressionRef {\n    return _BinaryenAtomicStore(this.ref, bytes, offset, ptr, value, type);\n  }\n\n  atomic_rmw(\n    op: AtomicRMWOp,\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    value: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicRMW(this.ref, op, bytes, offset, ptr, value, type);\n  }\n\n  atomic_cmpxchg(\n    bytes: Index,\n    offset: Index,\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    replacement: ExpressionRef,\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicCmpxchg(this.ref, bytes, offset, ptr, expected, replacement, type);\n  }\n\n  atomic_wait(\n    ptr: ExpressionRef,\n    expected: ExpressionRef,\n    timeout: ExpressionRef,\n    expectedType: NativeType\n  ): ExpressionRef {\n    return _BinaryenAtomicWait(this.ref, ptr, expected, timeout, expectedType);\n  }\n\n  atomic_notify(\n    ptr: ExpressionRef,\n    notifyCount: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenAtomicNotify(this.ref, ptr, notifyCount);\n  }\n\n  atomic_fence(): ExpressionRef {\n    return _BinaryenAtomicFence(this.ref);\n  }\n\n  // statements\n\n  local_set(\n    index: Index,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenLocalSet(this.ref, index, value);\n  }\n\n  global_set(\n    name: string,\n    value: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGlobalSet(this.ref, cStr, value);\n  }\n\n  block(\n    label: string | null,\n    children: ExpressionRef[],\n    type: NativeType = NativeType.None\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    var cArr = allocPtrArray(children);\n    try {\n      return _BinaryenBlock(this.ref, cStr, cArr, children.length, type);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  br(\n    label: string | null,\n    condition: ExpressionRef = 0,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenBreak(this.ref, cStr, condition, value);\n  }\n\n  drop(\n    expression: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenDrop(this.ref, expression);\n  }\n\n  loop(\n    label: string | null,\n    body: ExpressionRef\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(label);\n    return _BinaryenLoop(this.ref, cStr, body);\n  }\n\n  if(\n    condition: ExpressionRef,\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenIf(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  nop(): ExpressionRef {\n    return _BinaryenNop(this.ref);\n  }\n\n  return(\n    expression: ExpressionRef = 0\n  ): ExpressionRef {\n    return _BinaryenReturn(this.ref, expression);\n  }\n\n  select(\n    ifTrue: ExpressionRef,\n    ifFalse: ExpressionRef,\n    condition: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSelect(this.ref, condition, ifTrue, ifFalse);\n  }\n\n  switch(\n    names: string[],\n    defaultName: string | null,\n    condition: ExpressionRef,\n    value: ExpressionRef = 0\n  ): ExpressionRef {\n    var numNames = names.length;\n    var strs = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      strs[i] = this.allocStringCached(names[i]);\n    }\n    var cArr = allocI32Array(strs);\n    var cStr = this.allocStringCached(defaultName);\n    try {\n      return _BinaryenSwitch(this.ref, cArr, numNames, cStr, condition, value);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(target);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType)\n        : _BinaryenCall(this.ref, cStr, cArr, operands && operands.length || 0, returnType);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call(\n    target: string,\n    operands: ExpressionRef[] | null,\n    returnType: NativeType\n  ): ExpressionRef {\n    return this.call(target, operands, returnType, true);\n  }\n\n  call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n    isReturn: bool = false\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(typeName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return isReturn\n        ? _BinaryenReturnCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr)\n        : _BinaryenCallIndirect(this.ref, index, cArr, operands && operands.length || 0, cStr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  return_call_indirect(\n    index: ExpressionRef,\n    operands: ExpressionRef[] | null,\n    typeName: string,\n  ): ExpressionRef {\n    return this.call_indirect(index, operands, typeName, true);\n  }\n\n  unreachable(): ExpressionRef {\n    return _BinaryenUnreachable(this.ref);\n  }\n\n  // bulk memory\n\n  memory_copy(\n    dest: ExpressionRef,\n    source: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryCopy(this.ref, dest, source, size);\n  }\n\n  memory_fill(\n    dest: ExpressionRef,\n    value: ExpressionRef,\n    size: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenMemoryFill(this.ref, dest, value, size);\n  }\n\n  // exception handling\n\n  try(\n    body: ExpressionRef,\n    catchBody: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenTry(this.ref, body, catchBody);\n  }\n\n  throw(\n    eventName: string,\n    operands: ExpressionRef[]\n  ): ExpressionRef {\n    var cStr = this.allocStringCached(eventName);\n    var cArr = allocPtrArray(operands);\n    try {\n      return _BinaryenThrow(this.ref, cStr, cArr, operands.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  rethrow(\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenRethrow(this.ref, exnref);\n  }\n\n  br_on_exn(\n    name: string,\n    eventName: string,\n    exnref: ExpressionRef\n  ): ExpressionRef {\n    var cStr1 = this.allocStringCached(name);\n    var cStr2 = this.allocStringCached(eventName);\n    return _BinaryenBrOnExn(this.ref, cStr1, cStr2, exnref);\n  }\n\n  // push / pop (multi value?)\n\n  push(\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenPush(this.ref, value);\n  }\n\n  pop(\n    type: NativeType\n  ): ExpressionRef {\n    return _BinaryenPop(this.ref, type);\n  }\n\n  // simd\n\n  simd_extract(\n    op: SIMDExtractOp,\n    vec: ExpressionRef,\n    idx: u8\n  ): ExpressionRef {\n    return _BinaryenSIMDExtract(this.ref, op, vec, idx);\n  }\n\n  simd_replace(\n    op: SIMDReplaceOp,\n    vec: ExpressionRef,\n    idx: u8,\n    value: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDReplace(this.ref, op, vec, idx, value);\n  }\n\n  simd_shuffle(\n    vec1: ExpressionRef,\n    vec2: ExpressionRef,\n    mask: Uint8Array\n  ): ExpressionRef {\n    assert(mask.length == 16);\n    var cArr = allocU8Array(mask);\n    try {\n      return _BinaryenSIMDShuffle(this.ref, vec1, vec2, cArr);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  simd_ternary(\n    op: SIMDTernaryOp,\n    a: ExpressionRef,\n    b: ExpressionRef,\n    c: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDTernary(this.ref, op, a, b, c);\n  }\n\n  simd_shift(\n    op: SIMDShiftOp,\n    vec: ExpressionRef,\n    shift: ExpressionRef\n  ): ExpressionRef {\n    return _BinaryenSIMDShift(this.ref, op, vec, shift);\n  }\n\n  simd_load(\n    op: SIMDLoadOp,\n    ptr: ExpressionRef,\n    offset: u32,\n    align: u32\n  ): ExpressionRef {\n    return _BinaryenSIMDLoad(this.ref, op, offset, align, ptr);\n  }\n\n  // meta\n\n  addGlobal(\n    name: string,\n    type: NativeType,\n    mutable: bool,\n    initializer: ExpressionRef\n  ): GlobalRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddGlobal(this.ref, cStr, type, mutable, initializer);\n  }\n\n  removeGlobal(\n    name: string\n  ): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveGlobal(this.ref, cStr);\n  }\n\n  addEvent(\n    name: string,\n    attribute: u32,\n    type: FunctionRef\n  ): EventRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenAddEvent(this.ref, cStr, attribute, type);\n  }\n\n  addFunction(\n    name: string,\n    type: FunctionTypeRef,\n    varTypes: NativeType[] | null,\n    body: ExpressionRef\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocI32Array(varTypes);\n    try {\n      return _BinaryenAddFunction(this.ref, cStr, type, cArr, varTypes ? varTypes.length : 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getFunction(\n    name: string\n  ): FunctionRef {\n    var cStr = this.allocStringCached(name);\n    return _BinaryenGetFunction(this.ref, cStr);\n  }\n\n  removeFunction(name: string): void {\n    var cStr = this.allocStringCached(name);\n    _BinaryenRemoveFunction(this.ref, cStr);\n  }\n\n  private hasTemporaryFunction: bool = false;\n\n  addTemporaryFunction(result: NativeType, paramTypes: NativeType[] | null, body: ExpressionRef): FunctionRef {\n    this.hasTemporaryFunction = assert(!this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    var cArr = allocI32Array(paramTypes);\n    try {\n      let typeRef = _BinaryenAddFunctionType(this.ref, tempName, result, cArr, paramTypes ? paramTypes.length : 0);\n      return _BinaryenAddFunction(this.ref, tempName, typeRef, 0, 0, body);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  removeTemporaryFunction(): void {\n    this.hasTemporaryFunction = !assert(this.hasTemporaryFunction);\n    var tempName = this.allocStringCached(\"\");\n    _BinaryenRemoveFunction(this.ref, tempName);\n    _BinaryenRemoveFunctionType(this.ref, tempName);\n  }\n\n  addFunctionExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddFunctionExport(this.ref, cStr1, cStr2);\n  }\n\n  addTableExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddTableExport(this.ref, cStr1, cStr2);\n  }\n\n  addMemoryExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddMemoryExport(this.ref, cStr1, cStr2);\n  }\n\n  addGlobalExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddGlobalExport(this.ref, cStr1, cStr2);\n  }\n\n  addEventExport(\n    internalName: string,\n    externalName: string\n  ): ExportRef {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalName);\n    return _BinaryenAddEventExport(this.ref, cStr1, cStr2);\n  }\n\n  removeExport(externalName: string): void {\n    var cStr = this.allocStringCached(externalName);\n    _BinaryenRemoveExport(this.ref, cStr);\n  }\n\n  addFunctionImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    functionType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddFunctionImport(this.ref, cStr1, cStr2, cStr3, functionType);\n  }\n\n  addTableImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddTableImport(this.ref, cStr1, cStr2, cStr3);\n  }\n\n  addMemoryImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    shared: bool = false,\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddMemoryImport(this.ref, cStr1, cStr2, cStr3, shared);\n  }\n\n  addGlobalImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    globalType: NativeType,\n    mutable: bool = false\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddGlobalImport(this.ref, cStr1, cStr2, cStr3, globalType, mutable);\n  }\n\n  addEventImport(\n    internalName: string,\n    externalModuleName: string,\n    externalBaseName: string,\n    attribute: u32,\n    eventType: FunctionTypeRef\n  ): void {\n    var cStr1 = this.allocStringCached(internalName);\n    var cStr2 = this.allocStringCached(externalModuleName);\n    var cStr3 = this.allocStringCached(externalBaseName);\n    _BinaryenAddEventImport(this.ref, cStr1, cStr2, cStr3, attribute, eventType);\n  }\n\n  /** Unlimited memory constant. */\n  static readonly UNLIMITED_MEMORY: Index = <Index>-1;\n\n  setMemory(\n    initial: Index,\n    maximum: Index,\n    segments: MemorySegment[],\n    target: Target,\n    exportName: string | null = null,\n    shared: bool = false\n  ): void {\n    var cStr = this.allocStringCached(exportName);\n    var k = segments.length;\n    var segs = new Array<usize>(k);\n    var psvs = new Uint8Array(k);\n    var offs = new Array<ExpressionRef>(k);\n    var sizs = new Array<Index>(k);\n    for (let i = 0; i < k; ++i) {\n      let buffer = segments[i].buffer;\n      let offset = segments[i].offset;\n      segs[i] = allocU8Array(buffer);\n      psvs[i] = 0; // no passive segments currently\n      offs[i] = target == Target.WASM64\n        ? this.i64(i64_low(offset), i64_high(offset))\n        : this.i32(i64_low(offset));\n      sizs[i] = buffer.length;\n    }\n    var cArr1 = allocI32Array(segs);\n    var cArr2 = allocU8Array(psvs);\n    var cArr3 = allocI32Array(offs);\n    var cArr4 = allocI32Array(sizs);\n    try {\n      _BinaryenSetMemory(this.ref, initial, maximum, cStr, cArr1, cArr2, cArr3, cArr4, k, shared);\n    } finally {\n      memory.free(cArr4);\n      memory.free(cArr3);\n      memory.free(cArr2);\n      memory.free(cArr1);\n      for (let i = k - 1; i >= 0; --i) memory.free(segs[i]);\n    }\n  }\n\n  setFunctionTable(\n    initial: Index,\n    maximum: Index,\n    funcs: string[],\n    offset: ExpressionRef\n  ): void {\n    var numNames = funcs.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = this.allocStringCached(funcs[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      _BinaryenSetFunctionTable(this.ref, initial, maximum, cArr, numNames, offset);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  setStart(func: FunctionRef): void {\n    _BinaryenSetStart(this.ref, func);\n  }\n\n  addCustomSection(name: string, contents: Uint8Array): void {\n    var cStr = this.allocStringCached(name);\n    var cArr = allocU8Array(contents);\n    try {\n      _BinaryenAddCustomSection(this.ref, cStr, cArr, contents.length);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  getOptimizeLevel(): i32 {\n    return _BinaryenGetOptimizeLevel();\n  }\n\n  setOptimizeLevel(level: i32 = 2): void {\n    _BinaryenSetOptimizeLevel(level);\n  }\n\n  getShrinkLevel(): i32 {\n    return _BinaryenGetShrinkLevel();\n  }\n\n  setShrinkLevel(level: i32 = 1): void {\n    _BinaryenSetShrinkLevel(level);\n  }\n\n  setDebugInfo(on: bool = false): void {\n    _BinaryenSetDebugInfo(on);\n  }\n\n  getFeatures(): BinaryenFeatureFlags {\n    return _BinaryenModuleGetFeatures(this.ref);\n  }\n\n  setFeatures(featureFlags: BinaryenFeatureFlags): void {\n    _BinaryenModuleSetFeatures(this.ref, featureFlags);\n  }\n\n  optimize(func: FunctionRef = 0): void {\n    if (func) {\n      _BinaryenFunctionOptimize(func, this.ref);\n    } else {\n      _BinaryenModuleOptimize(this.ref);\n    }\n  }\n\n  runPasses(passes: string[], func: FunctionRef = 0): void {\n    var numNames = passes.length;\n    var names = new Array<usize>(numNames);\n    for (let i = 0; i < numNames; ++i) {\n      names[i] = allocString(passes[i]);\n    }\n    var cArr = allocI32Array(names);\n    try {\n      if (func) {\n        _BinaryenFunctionRunPasses(func, this.ref, cArr, numNames);\n      } else {\n        _BinaryenModuleRunPasses(this.ref, cArr, numNames);\n      }\n    } finally {\n      memory.free(cArr);\n      for (let i = numNames; i >= 0; --i) memory.free(names[i]);\n    }\n  }\n\n  private cachedPrecomputeNames: usize = 0;\n\n  precomputeExpression(expr: ExpressionRef): ExpressionRef {\n    // remember the previous optimize levels and set to max instead, to be sure\n    var previousOptimizeLevel = _BinaryenGetOptimizeLevel();\n    var previousShrinkLevel = _BinaryenGetShrinkLevel();\n    var previousDebugInfo = _BinaryenGetDebugInfo();\n    _BinaryenSetOptimizeLevel(4);\n    _BinaryenSetShrinkLevel(0);\n    _BinaryenSetDebugInfo(false);\n\n    // wrap the expression in a temp. function and run the precompute pass on it\n    var type = _BinaryenExpressionGetType(expr);\n    var func = this.addTemporaryFunction(type, null, expr);\n    var names = this.cachedPrecomputeNames;\n    if (!names) {\n      this.cachedPrecomputeNames = names = allocI32Array([\n        this.allocStringCached(\"vacuum\"),\n        this.allocStringCached(\"precompute\")\n      ]);\n    }\n    _BinaryenFunctionRunPasses(func, this.ref, names, 2);\n    expr = _BinaryenFunctionGetBody(func);\n    if (_BinaryenExpressionGetId(expr) == ExpressionId.Return) {\n      expr = _BinaryenReturnGetValue(expr);\n    }\n    this.removeTemporaryFunction();\n\n    // reset optimize levels to previous\n    _BinaryenSetOptimizeLevel(previousOptimizeLevel);\n    _BinaryenSetShrinkLevel(previousShrinkLevel);\n    _BinaryenSetDebugInfo(previousDebugInfo);\n    return expr;\n  }\n\n  validate(): bool {\n    return _BinaryenModuleValidate(this.ref) == 1;\n  }\n\n  interpret(): void {\n    _BinaryenModuleInterpret(this.ref);\n  }\n\n  toBinary(sourceMapUrl: string | null): BinaryModule {\n    var out = this.lit; // safe to reuse as long as..\n    assert(_BinaryenSizeofLiteral() >= 12);\n    var cStr = allocString(sourceMapUrl);\n    var binaryPtr: usize = 0;\n    var sourceMapPtr: usize = 0;\n    try {\n      _BinaryenModuleAllocateAndWrite(out, this.ref, cStr);\n      binaryPtr = readInt(out);\n      let binaryBytes = readInt(out + 4);\n      sourceMapPtr = readInt(out + 4 * 2);\n      let ret = new BinaryModule();\n      ret.output = readBuffer(binaryPtr, binaryBytes);\n      ret.sourceMap = readString(sourceMapPtr);\n      return ret;\n    } finally {\n      if (cStr) memory.free(cStr);\n      if (binaryPtr) memory.free(binaryPtr);\n      if (sourceMapPtr) memory.free(sourceMapPtr);\n    }\n  }\n\n  toText(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  toAsmjs(): string {\n    throw new Error(\"not implemented\"); // JS glue overrides this\n  }\n\n  private cachedStrings: Map<string,usize> = new Map();\n\n  private allocStringCached(str: string | null): usize {\n    if (str == null) return 0;\n    var cachedStrings = this.cachedStrings;\n    if (cachedStrings.has(str)) return <usize>cachedStrings.get(str);\n    var ptr = allocString(str);\n    cachedStrings.set(str, ptr);\n    return ptr;\n  }\n\n  dispose(): void {\n    assert(this.ref);\n    for (let ptr of this.cachedStrings.values()) memory.free(ptr);\n    this.cachedStrings = new Map();\n    memory.free(this.lit);\n    memory.free(this.cachedPrecomputeNames);\n    this.cachedPrecomputeNames = 0;\n    _BinaryenModuleDispose(this.ref);\n    this.ref = 0;\n  }\n\n  createRelooper(): Relooper {\n    return Relooper.create(this);\n  }\n\n  cloneExpression(\n    expr: ExpressionRef,\n    noSideEffects: bool = false,\n    maxDepth: i32 = i32.MAX_VALUE\n  ): ExpressionRef { // currently supports side effect free expressions only\n    if (maxDepth < 0) return 0;\n    maxDepth -= 1;\n\n    var nested1: ExpressionRef,\n        nested2: ExpressionRef;\n\n    switch (_BinaryenExpressionGetId(expr)) {\n      case ExpressionId.Const: {\n        switch (_BinaryenExpressionGetType(expr)) {\n          case NativeType.I32: {\n            return this.i32(_BinaryenConstGetValueI32(expr));\n          }\n          case NativeType.I64: {\n            return this.i64(\n              _BinaryenConstGetValueI64Low(expr),\n              _BinaryenConstGetValueI64High(expr)\n            );\n          }\n          case NativeType.F32: {\n            return this.f32(_BinaryenConstGetValueF32(expr));\n          }\n          case NativeType.F64: {\n            return this.f64(_BinaryenConstGetValueF64(expr));\n          }\n          case NativeType.V128: {\n            // TODO\n            return 0;\n          }\n          // Not possible to clone an anyref as it is opaque\n          case NativeType.Anyref: {\n            return 0;\n          }\n          default: {\n            throw new Error(\"concrete type expected\");\n          }\n        }\n      }\n      case ExpressionId.LocalGet: {\n        return _BinaryenLocalGet(this.ref,\n          _BinaryenLocalGetGetIndex(expr),\n          _BinaryenExpressionGetType(expr)\n        );\n      }\n      case ExpressionId.GlobalGet: {\n        let globalName = _BinaryenGlobalGetGetName(expr);\n        if (!globalName) break;\n        return _BinaryenGlobalGet(this.ref, globalName, _BinaryenExpressionGetType(expr));\n      }\n      case ExpressionId.Load: {\n        if (!(nested1 = this.cloneExpression(_BinaryenLoadGetPtr(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return (\n          _BinaryenLoadIsAtomic(expr)\n            ? _BinaryenAtomicLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n            : _BinaryenLoad(this.ref,\n                _BinaryenLoadGetBytes(expr),\n                _BinaryenLoadIsSigned(expr) ? 1 : 0,\n                _BinaryenLoadGetOffset(expr),\n                _BinaryenLoadGetAlign(expr),\n                _BinaryenExpressionGetType(expr),\n                nested1\n              )\n        );\n      }\n      case ExpressionId.Unary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenUnaryGetValue(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenUnary(this.ref, _BinaryenUnaryGetOp(expr), nested1);\n      }\n      case ExpressionId.Binary: {\n        if (!(nested1 = this.cloneExpression(_BinaryenBinaryGetLeft(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        if (!(nested2 = this.cloneExpression(_BinaryenBinaryGetRight(expr), noSideEffects, maxDepth))) {\n          break;\n        }\n        return _BinaryenBinary(this.ref, _BinaryenBinaryGetOp(expr), nested1, nested2);\n      }\n    }\n    return 0;\n  }\n\n  // source map generation\n\n  addDebugInfoFile(name: string): Index {\n    var cStr = allocString(name);\n    try {\n      return _BinaryenModuleAddDebugInfoFileName(this.ref, cStr);\n    } finally {\n      memory.free(cStr);\n    }\n  }\n\n  getDebugInfoFile(index: Index): string | null {\n    return readString(_BinaryenModuleGetDebugInfoFileName(this.ref, index));\n  }\n\n  setDebugLocation(\n    func: FunctionRef,\n    expr: ExpressionRef,\n    fileIndex: Index,\n    lineNumber: Index,\n    columnNumber: Index\n  ): void {\n    _BinaryenFunctionSetDebugLocation(func, expr, fileIndex, lineNumber, columnNumber);\n  }\n}\n\n// expressions\n\nexport function getExpressionId(expr: ExpressionRef): ExpressionId {\n  return _BinaryenExpressionGetId(expr);\n}\n\nexport function getExpressionType(expr: ExpressionRef): NativeType {\n  return _BinaryenExpressionGetType(expr);\n}\n\nexport function getConstValueI32(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI32(expr);\n}\n\nexport function getConstValueI64Low(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64Low(expr);\n}\n\nexport function getConstValueI64High(expr: ExpressionRef): i32 {\n  return _BinaryenConstGetValueI64High(expr);\n}\n\nexport function getConstValueF32(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF32(expr);\n}\n\nexport function getConstValueF64(expr: ExpressionRef): f32 {\n  return _BinaryenConstGetValueF64(expr);\n}\n\nexport function getLocalGetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalGetGetIndex(expr);\n}\n\nexport function getLocalSetIndex(expr: ExpressionRef): Index {\n  return _BinaryenLocalSetGetIndex(expr);\n}\n\nexport function getLocalSetValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLocalSetGetValue(expr);\n}\n\nexport function isLocalTee(expr: ExpressionRef): bool {\n  return _BinaryenLocalSetIsTee(expr);\n}\n\nexport function getGlobalGetName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenGlobalGetGetName(expr));\n}\n\nexport function getBinaryOp(expr: ExpressionRef): BinaryOp {\n  return _BinaryenBinaryGetOp(expr);\n}\n\nexport function getBinaryLeft(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetLeft(expr);\n}\n\nexport function getBinaryRight(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBinaryGetRight(expr);\n}\n\nexport function getUnaryOp(expr: ExpressionRef): UnaryOp {\n  return _BinaryenUnaryGetOp(expr);\n}\n\nexport function getUnaryValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenUnaryGetValue(expr);\n}\n\nexport function getLoadBytes(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetBytes(expr);\n}\n\nexport function getLoadOffset(expr: ExpressionRef): u32 {\n  return _BinaryenLoadGetOffset(expr);\n}\n\nexport function getLoadPtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoadGetPtr(expr);\n}\n\nexport function isLoadSigned(expr: ExpressionRef): bool {\n  return _BinaryenLoadIsSigned(expr);\n}\n\nexport function getStoreBytes(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetBytes(expr);\n}\n\nexport function getStoreOffset(expr: ExpressionRef): u32 {\n  return _BinaryenStoreGetOffset(expr);\n}\n\nexport function getStorePtr(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetPtr(expr);\n}\n\nexport function getStoreValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenStoreGetValue(expr);\n}\n\nexport function getBlockName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBlockGetName(expr));\n}\n\nexport function getBlockChildCount(expr: ExpressionRef): Index {\n  return _BinaryenBlockGetNumChildren(expr);\n}\n\nexport function getBlockChild(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenBlockGetChild(expr, index);\n}\n\nexport function getIfCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetCondition(expr);\n}\n\nexport function getIfTrue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfTrue(expr);\n}\n\nexport function getIfFalse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenIfGetIfFalse(expr);\n}\n\nexport function getLoopName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenLoopGetName(expr));\n}\n\nexport function getLoopBody(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenLoopGetBody(expr);\n}\n\nexport function getBreakName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenBreakGetName(expr));\n}\n\nexport function getBreakCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenBreakGetCondition(expr);\n}\n\nexport function getSelectThen(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfTrue(expr);\n}\n\nexport function getSelectElse(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetIfFalse(expr);\n}\n\nexport function getSelectCondition(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenSelectGetCondition(expr);\n}\n\nexport function getDropValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenDropGetValue(expr);\n}\n\nexport function getReturnValue(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenReturnGetValue(expr);\n}\n\nexport function getCallTarget(expr: ExpressionRef): string | null {\n  return readString(_BinaryenCallGetTarget(expr));\n}\n\nexport function getCallOperandCount(expr: ExpressionRef): i32 {\n  return _BinaryenCallGetNumOperands(expr);\n}\n\nexport function getCallOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenCallGetOperand(expr, index);\n}\n\nexport function getHostOp(expr: ExpressionRef): ExpressionRef {\n  return _BinaryenHostGetOp(expr);\n}\n\nexport function getHostOperandCount(expr: ExpressionRef): Index {\n  return _BinaryenHostGetNumOperands(expr);\n}\n\nexport function getHostOperand(expr: ExpressionRef, index: Index): ExpressionRef {\n  return _BinaryenHostGetOperand(expr, index);\n}\n\nexport function getHostName(expr: ExpressionRef): string | null {\n  return readString(_BinaryenHostGetNameOperand(expr));\n}\n\n// functions\n\nexport function getFunctionBody(func: FunctionRef): ExpressionRef {\n  return _BinaryenFunctionGetBody(func);\n}\n\nexport function getFunctionName(func: FunctionRef): string | null {\n  return readString(_BinaryenFunctionGetName(func));\n}\n\nexport function getFunctionParamCount(func: FunctionRef): Index {\n  return _BinaryenFunctionGetNumParams(func);\n}\n\nexport function getFunctionParamType(func: FunctionRef, index: Index): NativeType {\n  return _BinaryenFunctionGetParam(func, index);\n}\n\nexport function getFunctionResultType(func: FunctionRef): NativeType {\n  return _BinaryenFunctionGetResult(func);\n}\n\nexport class Relooper {\n\n  module: Module;\n  ref: RelooperRef;\n\n  static create(module: Module): Relooper {\n    var relooper = new Relooper();\n    relooper.module = module;\n    relooper.ref = _RelooperCreate(module.ref);\n    return relooper;\n  }\n\n  private constructor() {}\n\n  addBlock(code: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlock(this.ref, code);\n  }\n\n  addBranch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    condition: ExpressionRef = 0,\n    code: ExpressionRef = 0\n  ): void {\n    _RelooperAddBranch(from, to, condition, code);\n  }\n\n  addBlockWithSwitch(code: ExpressionRef, condition: ExpressionRef): RelooperBlockRef {\n    return _RelooperAddBlockWithSwitch(this.ref, code, condition);\n  }\n\n  addBranchForSwitch(\n    from: RelooperBlockRef,\n    to: RelooperBlockRef,\n    indexes: i32[],\n    code: ExpressionRef = 0\n  ): void {\n    var cArr = allocI32Array(indexes);\n    try {\n      _RelooperAddBranchForSwitch(from, to, cArr, indexes.length, code);\n    } finally {\n      memory.free(cArr);\n    }\n  }\n\n  renderAndDispose(entry: RelooperBlockRef, labelHelper: Index): ExpressionRef {\n    return _RelooperRenderAndDispose(this.ref, entry, labelHelper);\n  }\n}\n\nexport function hasSideEffects(expr: ExpressionRef): bool {\n  // TODO: there's more\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.LocalGet:\n    case ExpressionId.GlobalGet:\n    case ExpressionId.Const:\n    case ExpressionId.Nop: {\n      return false;\n    }\n    case ExpressionId.Block: {\n      for (let i = 0, k = _BinaryenBlockGetNumChildren(expr); i < k; ++i) {\n        if (hasSideEffects(_BinaryenBlockGetChild(expr, i))) return true;\n      }\n      return false;\n    }\n    case ExpressionId.If: {\n      return hasSideEffects(_BinaryenIfGetCondition(expr))\n          || hasSideEffects(_BinaryenIfGetIfTrue(expr))\n          || hasSideEffects(_BinaryenIfGetIfFalse(expr));\n    }\n    case ExpressionId.Unary: {\n      return hasSideEffects(_BinaryenUnaryGetValue(expr));\n    }\n    case ExpressionId.Binary: {\n      return hasSideEffects(_BinaryenBinaryGetLeft(expr))\n          || hasSideEffects(_BinaryenBinaryGetRight(expr));\n    }\n    case ExpressionId.Drop: {\n      return hasSideEffects(_BinaryenDropGetValue(expr));\n    }\n    case ExpressionId.Select: {\n      return hasSideEffects(_BinaryenSelectGetIfTrue(expr))\n          || hasSideEffects(_BinaryenSelectGetIfFalse(expr))\n          || hasSideEffects(_BinaryenSelectGetCondition(expr));\n    }\n  }\n  return true;\n}\n\n// helpers\n// can't do stack allocation here: STACKTOP is a global in WASM but a hidden variable in asm.js\n\nfunction allocU8Array(u8s: Uint8Array | null): usize {\n  if (!u8s) return 0;\n  var numValues = u8s.length;\n  var ptr = memory.allocate(numValues);\n  var idx = ptr;\n  for (let i = 0; i < numValues; ++i) {\n    store<u8>(idx++, u8s[i]);\n  }\n  return ptr;\n}\n\nfunction allocI32Array(i32s: i32[] | null): usize {\n  if (!i32s) return 0;\n  var ptr = memory.allocate(i32s.length << 2);\n  var idx = ptr;\n  for (let i = 0, k = i32s.length; i < k; ++i) {\n    let val = i32s[i];\n    // store<i32>(idx, val) is not portable\n    store<u8>(idx    , ( val         & 0xff) as u8);\n    store<u8>(idx + 1, ((val >>   8) & 0xff) as u8);\n    store<u8>(idx + 2, ((val >>  16) & 0xff) as u8);\n    store<u8>(idx + 3, ( val >>> 24        ) as u8);\n    idx += 4;\n  }\n  return ptr;\n}\n\nfunction allocPtrArray(ptrs: usize[] | null): usize {\n  return allocI32Array(ptrs); // TODO: WASM64 one day\n}\n\nfunction stringLengthUTF8(str: string): usize {\n  var len = 0;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\nfunction allocString(str: string | null): usize {\n  if (str == null) return 0;\n  var ptr = memory.allocate(stringLengthUTF8(str) + 1);\n  // the following is based on Emscripten's stringToUTF8Array\n  var idx = ptr;\n  for (let i = 0, k = str.length; i < k; ++i) {\n    let u = str.charCodeAt(i);\n    if (u >= 0xD800 && u <= 0xDFFF && i + 1 < k) {\n      u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      store<u8>(idx++, u as u8);\n    } else if (u <= 0x7FF) {\n      store<u8>(idx++, (0xC0 |  (u >>> 6)       ) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0xFFFF) {\n      store<u8>(idx++, (0xE0 |  (u >>> 12)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x1FFFFF) {\n      store<u8>(idx++, (0xF0 |  (u >>> 18)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else if (u <= 0x3FFFFFF) {\n      store<u8>(idx++, (0xF8 |  (u >>> 24)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    } else {\n      store<u8>(idx++, (0xFC |  (u >>> 30)      ) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 24) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 18) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>> 12) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ((u >>>  6) & 63)) as u8);\n      store<u8>(idx++, (0x80 | ( u         & 63)) as u8);\n    }\n  }\n  store<u8>(idx, 0);\n  return ptr;\n}\n\nfunction readInt(ptr: usize): i32 {\n  return (\n     load<u8>(ptr    )        |\n    (load<u8>(ptr + 1) <<  8) |\n    (load<u8>(ptr + 2) << 16) |\n    (load<u8>(ptr + 3) << 24)\n  );\n}\n\nfunction readBuffer(ptr: usize, length: usize): Uint8Array {\n  var ret = new Uint8Array(length);\n  for (let i: usize = 0; i < length; ++i) {\n    ret[i] = load<u8>(ptr + i);\n  }\n  return ret;\n}\n\nexport function readString(ptr: usize): string | null {\n  if (!ptr) return null;\n  var arr = new Array<i32>();\n  // the following is based on Emscripten's UTF8ArrayToString\n  var cp: u32;\n  var u1: u32, u2: u32, u3: u32, u4: u32, u5: u32;\n  while (cp = load<u8>(ptr++)) {\n    if (!(cp & 0x80)) {\n      arr.push(cp);\n      continue;\n    }\n    u1 = load<u8>(ptr++) & 63;\n    if ((cp & 0xE0) == 0xC0) {\n      arr.push(((cp & 31) << 6) | u1);\n      continue;\n    }\n    u2 = load<u8>(ptr++) & 63;\n    if ((cp & 0xF0) == 0xE0) {\n      cp = ((cp & 15) << 12) | (u1 << 6) | u2;\n    } else {\n      u3 = load<u8>(ptr++) & 63;\n      if ((cp & 0xF8) == 0xF0) {\n        cp = ((cp & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n      } else {\n        u4 = load<u8>(ptr++) & 63;\n        if ((cp & 0xFC) == 0xF8) {\n          cp = ((cp & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n        } else {\n          u5 = load<u8>(ptr++) & 63;\n          cp = ((cp & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n        }\n      }\n    }\n    arr.push(cp);\n    // if (cp < 0x10000) {\n    //   arr.push(cp);\n    // } else {\n    //   var ch = cp - 0x10000;\n    //   arr.push(0xD800 | (ch >> 10));\n    //   arr.push(0xDC00 | (ch & 0x3FF));\n    // }\n  }\n  // return String.fromCharCodes(arr);\n  return String.fromCodePoints(arr);\n}\n\n/** Result structure of {@link Module#toBinary}. */\nexport class BinaryModule {\n  /** WebAssembly binary. */\n  output: Uint8Array;\n  /** Source map, if generated. */\n  sourceMap: string | null;\n}\n\n/** Tests if an expression needs an explicit 'unreachable' when it is the terminating statement. */\nexport function needsExplicitUnreachable(expr: ExpressionRef): bool {\n  // not applicable if pushing a value to the stack\n  if (_BinaryenExpressionGetType(expr) != NativeType.Unreachable) return false;\n\n  switch (_BinaryenExpressionGetId(expr)) {\n    case ExpressionId.Unreachable:\n    case ExpressionId.Return: return false;\n    case ExpressionId.Break: return _BinaryenBreakGetCondition(expr) != 0;\n    case ExpressionId.Block: {\n      if (!_BinaryenBlockGetName(expr)) { // can't break out of it\n        let numChildren = _BinaryenBlockGetNumChildren(expr); // last child needs unreachable\n        return numChildren > 0 && needsExplicitUnreachable(_BinaryenBlockGetChild(expr, numChildren - 1));\n      }\n    }\n  }\n  return true;\n}\n\n/** Traverses all expression members of an expression, calling the given visitor. */\nexport function traverse<T>(expr: ExpressionRef, data: T, visit: (expr: ExpressionRef, data: T) => void): bool {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.Block: {\n      for (let i = 0, n = _BinaryenBlockGetNumChildren(expr); i < n; ++i) {\n        visit(_BinaryenBlockGetChild(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.If: {\n      visit(_BinaryenIfGetCondition(expr), data);\n      visit(_BinaryenIfGetIfTrue(expr), data);\n      let ifFalse = _BinaryenIfGetIfFalse(expr);\n      if (ifFalse) visit(ifFalse, data);\n      break;\n    }\n    case ExpressionId.Loop: {\n      visit(_BinaryenLoopGetBody(expr), data);\n      break;\n    }\n    case ExpressionId.Break: {\n      let condition = _BinaryenBreakGetCondition(expr);\n      if (condition) visit(condition, data);\n      break;\n    }\n    case ExpressionId.Switch: {\n      visit(_BinaryenSwitchGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Call: {\n      for (let i = 0, n = _BinaryenCallGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.CallIndirect: {\n      for (let i = 0, n = _BinaryenCallIndirectGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenCallIndirectGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.LocalGet: {\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      visit(_BinaryenLocalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.GlobalGet: {\n      break;\n    }\n    case ExpressionId.GlobalSet: {\n      visit(_BinaryenGlobalSetGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Load: {\n      visit(_BinaryenLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.Store: {\n      visit(_BinaryenStoreGetPtr(expr), data);\n      visit(_BinaryenStoreGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicRMW: {\n      visit(_BinaryenAtomicRMWGetPtr(expr), data);\n      visit(_BinaryenAtomicRMWGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicCmpxchg: {\n      visit(_BinaryenAtomicCmpxchgGetPtr(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetExpected(expr), data);\n      visit(_BinaryenAtomicCmpxchgGetReplacement(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicWait: {\n      visit(_BinaryenAtomicWaitGetPtr(expr), data);\n      visit(_BinaryenAtomicWaitGetExpected(expr), data);\n      visit(_BinaryenAtomicWaitGetTimeout(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicNotify: {\n      visit(_BinaryenAtomicNotifyGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.AtomicFence: {\n      break;\n    }\n    case ExpressionId.SIMDExtract: {\n      visit(_BinaryenSIMDExtractGetVec(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDReplace: {\n      visit(_BinaryenSIMDReplaceGetVec(expr), data);\n      visit(_BinaryenSIMDReplaceGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShuffle: {\n      visit(_BinaryenSIMDShuffleGetLeft(expr), data);\n      visit(_BinaryenSIMDShuffleGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDTernary: {\n      visit(_BinaryenSIMDTernaryGetA(expr), data);\n      visit(_BinaryenSIMDTernaryGetB(expr), data);\n      visit(_BinaryenSIMDTernaryGetC(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDShift: {\n      visit(_BinaryenSIMDShiftGetVec(expr), data);\n      visit(_BinaryenSIMDShiftGetShift(expr), data);\n      break;\n    }\n    case ExpressionId.SIMDLoad: {\n      visit(_BinaryenSIMDLoadGetPtr(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryInit: {\n      visit(_BinaryenMemoryInitGetDest(expr), data);\n      visit(_BinaryenMemoryInitGetOffset(expr), data);\n      visit(_BinaryenMemoryInitGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.DataDrop: {\n      break;\n    }\n    case ExpressionId.MemoryCopy: {\n      visit(_BinaryenMemoryCopyGetDest(expr), data);\n      visit(_BinaryenMemoryCopyGetSource(expr), data);\n      visit(_BinaryenMemoryCopyGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.MemoryFill: {\n      visit(_BinaryenMemoryFillGetDest(expr), data);\n      visit(_BinaryenMemoryFillGetValue(expr), data);\n      visit(_BinaryenMemoryFillGetSize(expr), data);\n      break;\n    }\n    case ExpressionId.Try: {\n      visit(_BinaryenTryGetBody(expr), data);\n      visit(_BinaryenTryGetCatchBody(expr), data);\n      break;\n    }\n    case ExpressionId.Throw: {\n      for (let i = 0, n = _BinaryenThrowGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenThrowGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Rethrow: {\n      visit(_BinaryenRethrowGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.BrOnExn: {\n      visit(_BinaryenBrOnExnGetExnref(expr), data);\n      break;\n    }\n    case ExpressionId.Push: {\n      visit(_BinaryenPushGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Pop: {\n      break;\n    }\n    case ExpressionId.Const: {\n      break;\n    }\n    case ExpressionId.Unary: {\n      visit(_BinaryenUnaryGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Binary: {\n      visit(_BinaryenBinaryGetLeft(expr), data);\n      visit(_BinaryenBinaryGetRight(expr), data);\n      break;\n    }\n    case ExpressionId.Select: {\n      visit(_BinaryenSelectGetIfTrue(expr), data);\n      visit(_BinaryenSelectGetIfFalse(expr), data);\n      visit(_BinaryenSelectGetCondition(expr), data);\n      break;\n    }\n    case ExpressionId.Drop: {\n      visit(_BinaryenDropGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Return: {\n      visit(_BinaryenReturnGetValue(expr), data);\n      break;\n    }\n    case ExpressionId.Host: {\n      for (let i = 0, n = _BinaryenHostGetNumOperands(expr); i < n; ++i) {\n        visit(_BinaryenHostGetOperand(expr, i), data);\n      }\n      break;\n    }\n    case ExpressionId.Nop: {\n      break;\n    }\n    case ExpressionId.Unreachable: {\n      break;\n    }\n    default: assert(false);\n  }\n  return true;\n}\n","/**\n * Mappings from AssemblyScript types to WebAssembly types.\n * @module types\n *//***/\n\nimport {\n  Class,\n  FunctionTarget,\n  Program,\n  DecoratorFlags\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionRef,\n  Module\n} from \"./module\";\n\n/** Indicates the kind of a type. */\nexport const enum TypeKind {\n\n  // signed integers\n\n  /** An 8-bit signed integer. */\n  I8,\n  /** A 16-bit signed integer. */\n  I16,\n  /** A 32-bit signed integer. */\n  I32,\n  /** A 64-bit signed integer. */\n  I64,\n  /** A 32-bit/64-bit signed integer, depending on the target. */\n  ISIZE,\n\n  // unsigned integers\n\n  /** An 8-bit unsigned integer. */\n  U8,\n  /** A 16-bit unsigned integer. */\n  U16,\n  /** A 32-bit unsigned integer. Also the base of function types. */\n  U32,\n  /** A 64-bit unsigned integer. */\n  U64,\n  /** A 32-bit/64-bit unsigned integer, depending on the target. Also the base of class types. */\n  USIZE,\n  /** A 1-bit unsigned integer. */\n  BOOL, // sic\n\n  // floats\n\n  /** A 32-bit float. */\n  F32,\n  /** A 64-bit double. */\n  F64,\n\n  // vectors\n\n  /** A 128-bit vector. */\n  V128,\n\n  // references\n\n  /** A host reference. */\n  ANYREF,\n\n  // other\n\n  /** No return type. */\n  VOID\n}\n\n/** Indicates capabilities of a type. */\nexport const enum TypeFlags {\n  NONE = 0,\n  /** Is a signed type that can represent negative values. */\n  SIGNED = 1 << 0,\n  /** Is an unsigned type that cannot represent negative values. */\n  UNSIGNED = 1 << 1,\n  /** Is an integer type. */\n  INTEGER = 1 << 2,\n  /** Is a floating point type. */\n  FLOAT = 1 << 3,\n  /** Is a pointer type. */\n  POINTER = 1 << 4,\n  /** Is smaller than 32-bits. */\n  SHORT = 1 << 5,\n  /** Is larger than 32-bits. */\n  LONG = 1 << 6,\n  /** Is a value type. */\n  VALUE = 1 << 7,\n  /** Is a reference type (either a class or a function type). */\n  REFERENCE = 1 << 8,\n  /** Is a nullable type. */\n  NULLABLE = 1 << 9,\n  /** Is a vector type. */\n  VECTOR = 1 << 10\n}\n\nconst v128_zero = new Uint8Array(16);\n\n/** Represents a resolved type. */\nexport class Type {\n\n  /** Type kind. */\n  kind: TypeKind;\n  /** Type flags. */\n  flags: TypeFlags;\n  /** Size in bits. */\n  size: u32;\n  /** Size in bytes. */\n  byteSize: i32;\n  /** Underlying class reference, if a class type. */\n  classReference: Class | null;\n  /** Underlying signature reference, if a function type. */\n  signatureReference: Signature | null;\n  /** Respective non-nullable type, if nullable. */\n  nonNullableType: Type;\n  /** Cached nullable type, if non-nullable. */\n  private cachedNullableType: Type | null = null;\n\n  /** Constructs a new resolved type. */\n  constructor(kind: TypeKind, flags: TypeFlags, size: u32) {\n    this.kind = kind;\n    this.flags = flags;\n    this.size = size;\n    this.byteSize = <i32>ceil<f64>(<f64>size / 8);\n    this.classReference = null;\n    this.signatureReference = null;\n    this.nonNullableType = this;\n  }\n\n  /** Returns the closest int type representing this type. */\n  get intType(): Type {\n    switch (this.kind) {\n      case TypeKind.I8: return Type.i8;\n      case TypeKind.I16: return Type.i16;\n      case TypeKind.F32:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.F64:\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.ISIZE: return this.size == 64 ? Type.isize64 : Type.isize32;\n      case TypeKind.U8: return Type.u8;\n      case TypeKind.U16: return Type.u16;\n      case TypeKind.U32: return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.USIZE: return this.size == 64 ? Type.usize64 : Type.usize32;\n      case TypeKind.BOOL:\n      default: return Type.i32;\n    }\n  }\n\n  /** Substitutes this type with the auto type if this type is void. */\n  get exceptVoid(): Type {\n    if (this.kind == TypeKind.VOID) return Type.auto;\n    return this;\n  }\n\n  /** Gets this type's logarithmic alignment in memory. */\n  get alignLog2(): i32 {\n    return 31 - clz<i32>(this.byteSize);\n  }\n\n  /** Tests if this is a managed type that needs GC hooks. */\n  get isManaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Tests if this is a class type explicitly annotated as unmanaged. */\n  get isUnmanaged(): bool {\n    var classReference = this.classReference;\n    return classReference !== null && classReference.hasDecorator(DecoratorFlags.UNMANAGED);\n  }\n\n  /** Computes the sign-extending shift in the target type. */\n  computeSmallIntegerShift(targetType: Type): u32 {\n    return targetType.size - this.size;\n  }\n\n  /** Computes the truncating mask in the target type. */\n  computeSmallIntegerMask(targetType: Type): u32 {\n    var size = this.is(TypeFlags.UNSIGNED) ? this.size : this.size - 1;\n    return ~0 >>> (targetType.size - size);\n  }\n\n  /** Tests if this type has (all of) the specified flags. */\n  is(flags: TypeFlags): bool { return (this.flags & flags) == flags; }\n  /** Tests if this type has any of the specified flags. */\n  isAny(flags: TypeFlags): bool { return (this.flags & flags) != 0; }\n\n  /** Composes a class type from this type and a class. */\n  asClass(classType: Class): Type {\n    assert(this.kind == TypeKind.USIZE && !this.classReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.classReference = classType;\n    return ret;\n  }\n\n  /** Composes a function type from this type and a function. */\n  asFunction(signature: Signature): Type {\n    assert(this.kind == TypeKind.U32 && !this.signatureReference);\n    var ret = new Type(this.kind, this.flags & ~TypeFlags.VALUE | TypeFlags.REFERENCE, this.size);\n    ret.signatureReference = signature;\n    return ret;\n  }\n\n  /** Composes the respective nullable type of this type. */\n  asNullable(): Type {\n    assert(this.is(TypeFlags.REFERENCE));\n    if (!this.cachedNullableType) {\n      assert(!this.is(TypeFlags.NULLABLE));\n      this.cachedNullableType = new Type(this.kind, this.flags | TypeFlags.NULLABLE, this.size);\n      this.cachedNullableType.nonNullableType = this;\n      this.cachedNullableType.classReference = this.classReference;       // either a class reference\n      this.cachedNullableType.signatureReference = this.signatureReference; // or a function reference\n    }\n    return this.cachedNullableType;\n  }\n\n  /** Tests if a value of this type is assignable to the target type incl. implicit conversion. */\n  isAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    var currentClass: Class | null;\n    var targetClass: Class | null;\n    var currentFunction: Signature | null;\n    var targetFunction: Signature | null;\n    if (this.is(TypeFlags.REFERENCE)) {\n      if (target.is(TypeFlags.REFERENCE)) {\n        if (!this.is(TypeFlags.NULLABLE) || target.is(TypeFlags.NULLABLE)) {\n          if (currentClass = this.classReference) {\n            if (targetClass = target.classReference) {\n              return currentClass.isAssignableTo(targetClass);\n            }\n          } else if (currentFunction = this.signatureReference) {\n            if (targetFunction = target.signatureReference) {\n              return currentFunction.isAssignableTo(targetFunction);\n            }\n          } else if (this.kind == TypeKind.ANYREF && target.kind == TypeKind.ANYREF) {\n            return true;\n          }\n        }\n      }\n    } else if (!target.is(TypeFlags.REFERENCE)) {\n      if (this.is(TypeFlags.INTEGER)) {\n        if (target.is(TypeFlags.INTEGER)) {\n          if (\n            !signednessIsRelevant ||\n            this == Type.bool || // a bool (0 or 1) can be safely assigned to all sorts of integers\n            this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n          ) {\n            return this.size <= target.size;\n          }\n        } else if (target.kind == TypeKind.F32) {\n          return this.size <= 23; // mantissa bits\n        } else if (target.kind == TypeKind.F64) {\n          return this.size <= 52; // ^\n        }\n      } else if (this.is(TypeFlags.FLOAT)) {\n        if (target.is(TypeFlags.FLOAT)) {\n          return this.size <= target.size;\n        }\n      } else if (this.is(TypeFlags.VECTOR)) {\n        if (target.is(TypeFlags.VECTOR)) {\n          return this.size == target.size;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Tests if a value of this type is assignable to the target type excl. implicit conversion. */\n  isStrictlyAssignableTo(target: Type, signednessIsRelevant: bool = false): bool {\n    if (this.is(TypeFlags.REFERENCE)) return this.isAssignableTo(target);\n    else if (target.is(TypeFlags.REFERENCE)) return false;\n    if (this.is(TypeFlags.INTEGER)) {\n      return target.is(TypeFlags.INTEGER) && target.size == this.size && (\n        !signednessIsRelevant || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED)\n      );\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Tests if a value of this type can be changed to the target type using `changetype`. */\n  isChangeableTo(target: Type): bool {\n    if (this.is(TypeFlags.INTEGER) && target.is(TypeFlags.INTEGER)) {\n      let size = this.size;\n      return size == target.size && (size >= 32 || this.is(TypeFlags.SIGNED) == target.is(TypeFlags.SIGNED));\n    }\n    return this.kind == target.kind;\n  }\n\n  /** Determines the common denominator type of two types, if there is any. */\n  static commonDenominator(left: Type, right: Type, signednessIsImportant: bool): Type | null {\n    if (right.isAssignableTo(left, signednessIsImportant)) return left;\n    else if (left.isAssignableTo(right, signednessIsImportant)) return right;\n    return null;\n  }\n\n  /** Converts this type to a string. */\n  toString(): string {\n    if (this.is(TypeFlags.REFERENCE)) {\n      let classReference = this.classReference;\n      if (classReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? classReference.internalName + \" | null\"\n          : classReference.internalName;\n      }\n      let signatureReference = this.signatureReference;\n      if (signatureReference) {\n        return this.is(TypeFlags.NULLABLE)\n          ? \"(\" + signatureReference.toString() + \") | null\"\n          : signatureReference.toString();\n      }\n      // TODO: Reflect.apply(value, \"toString\", []) ?\n      assert(this.kind == TypeKind.ANYREF);\n      return \"anyref\";\n    }\n    switch (this.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"i64\";\n      case TypeKind.ISIZE: return \"isize\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n      case TypeKind.U64: return \"u64\";\n      case TypeKind.USIZE: return \"usize\";\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.ANYREF: return \"anyref\";\n      default: assert(false);\n      case TypeKind.VOID: return \"void\";\n    }\n  }\n\n  // Binaryen specific\n\n  /** Converts this type to its respective native type. */\n  toNativeType(): NativeType {\n    switch (this.kind) {\n      default: return NativeType.I32;\n      case TypeKind.I64:\n      case TypeKind.U64: return NativeType.I64;\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? NativeType.I64 : NativeType.I32;\n      case TypeKind.F32: return NativeType.F32;\n      case TypeKind.F64: return NativeType.F64;\n      case TypeKind.V128: return NativeType.V128;\n      case TypeKind.ANYREF: return NativeType.Anyref;\n      case TypeKind.VOID:  return NativeType.None;\n    }\n  }\n\n  /** Converts this type to its native `0` value. */\n  toNativeZero(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(0);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(0);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(0);\n      case TypeKind.F32: return module.f32(0);\n      case TypeKind.F64: return module.f64(0);\n      case TypeKind.V128: return module.v128(v128_zero);\n    }\n  }\n\n  /** Converts this type to its native `1` value. */\n  toNativeOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n      case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(1);\n      case TypeKind.F32: return module.f32(1);\n      case TypeKind.F64: return module.f64(1);\n    }\n  }\n\n  /** Converts this type to its native `-1` value. */\n  toNativeNegOne(module: Module): ExpressionRef {\n    switch (this.kind) {\n      case TypeKind.V128:\n          case TypeKind.ANYREF:\n      case TypeKind.VOID: assert(false);\n      default: return module.i32(-1);\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: if (this.size != 64) return module.i32(-1);\n      case TypeKind.I64:\n      case TypeKind.U64: return module.i64(-1, -1);\n      case TypeKind.F32: return module.f32(-1);\n      case TypeKind.F64: return module.f64(-1);\n    }\n  }\n\n  /** Converts this type to its signature string. */\n  toSignatureString(): string {\n    switch (this.kind) {\n      // same naming scheme as Binaryen\n      case TypeKind.I8:\n      case TypeKind.U8:\n      case TypeKind.I16:\n      case TypeKind.U16:\n      case TypeKind.I32:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return \"i\";\n      case TypeKind.I64:\n      case TypeKind.U64: return \"j\";\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: return this.size == 64 ? \"j\" : \"i\";\n      case TypeKind.F32: return \"f\";\n      case TypeKind.F64: return \"d\";\n      case TypeKind.V128: return \"V\";\n      case TypeKind.ANYREF: return \"a\";\n      case TypeKind.VOID: return \"v\";\n      default: assert(false);\n    }\n    return \"i\";\n  }\n\n  // Types\n\n  /** An 8-bit signed integer. */\n  static readonly i8: Type  = new Type(TypeKind.I8,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit signed integer. */\n  static readonly i16: Type = new Type(TypeKind.I16,\n    TypeFlags.SIGNED   |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit signed integer. */\n  static readonly i32: Type = new Type(TypeKind.I32,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed integer. */\n  static readonly i64: Type = new Type(TypeKind.I64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit signed size. WASM32 only. */\n  static readonly isize32: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit signed size. WASM64 only. */\n  static readonly isize64: Type = new Type(TypeKind.ISIZE,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** An 8-bit unsigned integer. */\n  static readonly u8: Type = new Type(TypeKind.U8,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   8\n  );\n\n  /** A 16-bit unsigned integer. */\n  static readonly u16: Type = new Type(TypeKind.U16,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  16\n  );\n\n  /** A 32-bit unsigned integer. */\n  static readonly u32: Type = new Type(TypeKind.U32,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned integer. */\n  static readonly u64: Type = new Type(TypeKind.U64,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 32-bit unsigned size. WASM32 only. */\n  static readonly usize32: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit unsigned size. WASM64 only. */\n  static readonly usize64: Type = new Type(TypeKind.USIZE,\n    TypeFlags.UNSIGNED |\n    TypeFlags.LONG     |\n    TypeFlags.INTEGER  |\n    TypeFlags.POINTER  |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 1-bit unsigned integer. */\n  static readonly bool: Type = new Type(TypeKind.BOOL,\n    TypeFlags.UNSIGNED |\n    TypeFlags.SHORT    |\n    TypeFlags.INTEGER  |\n    TypeFlags.VALUE,   1\n  );\n\n  /** A 32-bit float. */\n  static readonly f32: Type = new Type(TypeKind.F32,\n    TypeFlags.SIGNED   |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  32\n  );\n\n  /** A 64-bit float. */\n  static readonly f64: Type = new Type(TypeKind.F64,\n    TypeFlags.SIGNED   |\n    TypeFlags.LONG     |\n    TypeFlags.FLOAT    |\n    TypeFlags.VALUE,  64\n  );\n\n  /** A 128-bit vector. */\n  static readonly v128: Type = new Type(TypeKind.V128,\n    TypeFlags.VECTOR   |\n    TypeFlags.VALUE, 128\n  );\n\n  /** A host reference. */\n  static readonly anyref: Type = new Type(TypeKind.ANYREF,\n    TypeFlags.REFERENCE, 0\n  );\n\n  /** No return type. */\n  static readonly void: Type = new Type(TypeKind.VOID, TypeFlags.NONE, 0);\n\n  /** Alias of i32 indicating type inference of locals and globals with just an initializer. */\n  static readonly auto: Type = new Type(Type.i32.kind, Type.i32.flags, Type.i32.size);\n}\n\n/** Converts an array of types to an array of native types. */\nexport function typesToNativeTypes(types: Type[]): NativeType[] {\n  var numTypes = types.length;\n  var ret = new Array<NativeType>(numTypes);\n  for (let i = 0; i < numTypes; ++i) ret[i] = types[i].toNativeType();\n  return ret;\n}\n\n/** Converts an array of types to its combined string representation. */\nexport function typesToString(types: Type[]): string {\n  var numTypes = types.length;\n  if (!numTypes) return \"\";\n  var sb = new Array<string>(numTypes);\n  for (let i = 0; i < numTypes; ++i) sb[i] = types[i].toString();\n  return sb.join(\",\");\n}\n\n/** Represents a fully resolved function signature. */\nexport class Signature {\n  /** The unique program id that represents this signature. */\n  id: u32 = 0;\n  /** Parameter types, if any, excluding `this`. */\n  parameterTypes: Type[];\n  /** Parameter names, if known, excluding `this`. */\n  parameterNames: string[] | null;\n  /** Number of required parameters excluding `this`. Other parameters are considered optional. */\n  requiredParameters: i32;\n  /** Return type. */\n  returnType: Type;\n  /** This type, if an instance signature. */\n  thisType: Type | null;\n  /** Whether the last parameter is a rest parameter. */\n  hasRest: bool;\n  /** Cached {@link FunctionTarget}. */\n  cachedFunctionTarget: FunctionTarget | null = null;\n  /** Respective function type. */\n  type: Type;\n  /** The program that created this signature. */\n  program: Program;\n\n  /** Constructs a new signature. */\n  constructor(\n    program: Program,\n    parameterTypes: Type[] | null = null,\n    returnType: Type | null = null,\n    thisType: Type | null = null\n  ) {\n    this.parameterTypes = parameterTypes ? parameterTypes : [];\n    this.parameterNames = null;\n    this.requiredParameters = 0;\n    this.returnType = returnType ? returnType : Type.void;\n    this.thisType = thisType;\n    this.program = program;\n    this.hasRest = false;\n    this.type = Type.u32.asFunction(this);\n\n    var signatureTypes = program.uniqueSignatures;\n    var length = signatureTypes.length;\n    for (let i = 0; i < length; i++) {\n      let compare = signatureTypes[i];\n      if (this.equals(compare)) {\n        this.id = compare.id;\n        return this;\n      }\n    }\n    program.uniqueSignatures.push(this);\n    this.id = program.nextSignatureId++;\n  }\n\n  asFunctionTarget(program: Program): FunctionTarget {\n    var target = this.cachedFunctionTarget;\n    if (!target) this.cachedFunctionTarget = target = new FunctionTarget(this, program);\n    else assert(target.program == program);\n    return target;\n  }\n\n  /** Gets the known or, alternatively, generic parameter name at the specified index. */\n  getParameterName(index: i32): string {\n    var parameterNames = this.parameterNames;\n    return parameterNames && parameterNames.length > index\n      ? parameterNames[index]\n      : getDefaultParameterName(index);\n  }\n\n  /** Tests if a value of this function type is assignable to a target of the specified function type. */\n  isAssignableTo(target: Signature): bool {\n    return this.equals(target);\n  }\n\n  /** Tests to see if a signature equals another signature. */\n  equals(value: Signature): bool {\n    // TODO: maybe cache results?\n\n    // check `this` type\n    var thisThisType = this.thisType;\n    var targetThisType = value.thisType;\n    if (thisThisType) {\n      if (!(targetThisType && thisThisType.isAssignableTo(targetThisType))) return false;\n    } else if (targetThisType) {\n      return false;\n    }\n\n    // check rest parameter\n    if (this.hasRest != value.hasRest) return false; // TODO\n\n    // check parameter types\n    var thisParameterTypes = this.parameterTypes;\n    var targetParameterTypes = value.parameterTypes;\n    var numParameters = thisParameterTypes.length;\n    if (numParameters != targetParameterTypes.length) return false;\n    for (let i = 0; i < numParameters; ++i) {\n      let thisParameterType = thisParameterTypes[i];\n      let targetParameterType = targetParameterTypes[i];\n      if (!thisParameterType.isAssignableTo(targetParameterType)) return false;\n    }\n\n    // check return type\n    var thisReturnType = this.returnType;\n    var targetReturnType = value.returnType;\n    return thisReturnType == targetReturnType || thisReturnType.isAssignableTo(targetReturnType);\n  }\n\n  /** Converts a signature to a function type string. */\n  static makeSignatureString(parameterTypes: Type[] | null, returnType: Type, thisType: Type | null = null): string {\n    var sb = [];\n    sb.push(returnType.toSignatureString());\n    if (thisType) sb.push(thisType.toSignatureString());\n    if (parameterTypes) {\n      for (let i = 0, k = parameterTypes.length; i < k; ++i) sb.push(parameterTypes[i].toSignatureString());\n    }\n    return \"FUNCSIG$\" + sb.join(\"\");\n  }\n\n  /** Converts this signature to a function type string. */\n  toSignatureString(): string {\n    return Signature.makeSignatureString(this.parameterTypes, this.returnType, this.thisType);\n  }\n\n  /** Converts this signature to a string. */\n  toString(): string {\n    var sb = new Array<string>();\n    sb.push(\"(\");\n    var index = 0;\n    var thisType = this.thisType;\n    if (thisType) {\n      sb.push(\"this: \");\n      assert(!thisType.signatureReference);\n      sb.push(thisType.toString());\n      index = 1;\n    }\n    var parameters = this.parameterTypes;\n    var numParameters = parameters.length;\n    if (numParameters) {\n      let names = this.parameterNames;\n      let numNames = names ? names.length : 0;\n      let optionalStart = this.requiredParameters;\n      let restIndex = this.hasRest ? numParameters - 1 : -1;\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        if (index) sb.push(\", \");\n        if (i == restIndex) sb.push(\"...\");\n        if (i < numNames) sb.push((<string[]>names)[i]);\n        else sb.push(getDefaultParameterName(i));\n        if (i >= optionalStart && i != restIndex) sb.push(\"?: \");\n        else sb.push(\": \");\n        sb.push(parameters[i].toString());\n      }\n    }\n    sb.push(\") => \");\n    sb.push(this.returnType.toString());\n    return sb.join(\"\");\n  }\n}\n\n// helpers\n\n// Cached default parameter names used where names are unknown.\nvar cachedDefaultParameterNames: string[] | null = null;\n\n/** Gets the cached default parameter name for the specified index. */\nexport function getDefaultParameterName(index: i32): string {\n  if (!cachedDefaultParameterNames) cachedDefaultParameterNames = [];\n  for (let i = cachedDefaultParameterNames.length; i <= index; ++i) {\n    cachedDefaultParameterNames.push(\"arg$\" + i.toString(10));\n  }\n  return cachedDefaultParameterNames[index - 1];\n}\n","/**\n * A TypeScript tokenizer modified for AssemblyScript.\n *\n * Skips over trivia and provides a general mark/reset mechanism for the parser to utilize on\n * ambiguous tokens.\n *\n * @module tokenizer\n *//***/\n\nimport {\n  DiagnosticCode,\n  DiagnosticMessage,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Source,\n  CommentKind\n} from \"./ast\";\n\nimport {\n  CharCode,\n  isLineBreak,\n  isWhiteSpace,\n  isIdentifierStart,\n  isIdentifierPart,\n  isDecimalDigit,\n  isOctalDigit,\n  isKeywordCharacter\n} from \"./util\";\n\n/** Named token types. */\nexport enum Token {\n\n  // keywords\n  // discarded: ANY, BOOLEAN, NEVER, NUMBER, STRING, SYMBOL, UNDEFINED, LESSTHAN_SLASH\n\n  ABSTRACT,\n  AS,\n  ASYNC,\n  AWAIT,        // ES2017\n  BREAK,        // ES2017\n  CASE,         // ES2017\n  CATCH,        // ES2017\n  CLASS,        // ES2017\n  CONST,        // ES2017\n  CONTINUE,     // ES2017\n  CONSTRUCTOR,\n  DEBUGGER,     // ES2017\n  DECLARE,\n  DEFAULT,      // ES2017\n  DELETE,       // ES2017\n  DO,           // ES2017\n  ELSE,         // ES2017\n  ENUM,         // ES2017 future\n  EXPORT,       // ES2017\n  EXTENDS,      // ES2017\n  FALSE,        // ES\n  FINALLY,      // ES2017\n  FOR,          // ES2017\n  FROM,         // AS possible identifier\n  FUNCTION,     // ES2017\n  GET,\n  IF,           // ES2017\n  IMPLEMENTS,   // ES2017 non-lexical\n  IMPORT,       // ES2017\n  IN,           // ES2017\n  INSTANCEOF,   // ES2017\n  INTERFACE,    // ES2017 non-lexical\n  IS,\n  KEYOF,\n  LET,          // ES2017 non-lexical\n  MODULE,       // AS possible identifier\n  NAMESPACE,    // AS possible identifier\n  NEW,          // ES2017\n  NULL,         // ES\n  OF,\n  PACKAGE,      // ES2017 non-lexical\n  PRIVATE,      // ES2017 non-lexical\n  PROTECTED,    // ES2017 non-lexical\n  PUBLIC,       // ES2017 non-lexical\n  READONLY,\n  RETURN,       // ES2017\n  SET,\n  STATIC,       // ES2017 non-lexical\n  SUPER,        // ES2017\n  SWITCH,       // ES2017\n  THIS,         // ES2017\n  THROW,        // ES2017\n  TRUE,         // ES\n  TRY,          // ES2017\n  TYPE,         // AS possible identifier\n  TYPEOF,       // ES2017\n  VAR,          // ES2017\n  VOID,         // ES2017\n  WHILE,        // ES2017\n  WITH,         // ES2017\n  YIELD,        // ES2017\n\n  // punctuation\n\n  OPENBRACE,\n  CLOSEBRACE,\n  OPENPAREN,\n  CLOSEPAREN,\n  OPENBRACKET,\n  CLOSEBRACKET,\n  DOT,\n  DOT_DOT_DOT,\n  SEMICOLON,\n  COMMA,\n  LESSTHAN,\n  GREATERTHAN,\n  LESSTHAN_EQUALS,\n  GREATERTHAN_EQUALS,\n  EQUALS_EQUALS,\n  EXCLAMATION_EQUALS,\n  EQUALS_EQUALS_EQUALS,\n  EXCLAMATION_EQUALS_EQUALS,\n  EQUALS_GREATERTHAN,\n  PLUS,\n  MINUS,\n  ASTERISK_ASTERISK,\n  ASTERISK,\n  SLASH,\n  PERCENT,\n  PLUS_PLUS,\n  MINUS_MINUS,\n  LESSTHAN_LESSTHAN,\n  GREATERTHAN_GREATERTHAN,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN,\n  AMPERSAND,\n  BAR,\n  CARET,\n  EXCLAMATION,\n  TILDE,\n  AMPERSAND_AMPERSAND,\n  BAR_BAR,\n  QUESTION,\n  COLON,\n  EQUALS,\n  PLUS_EQUALS,\n  MINUS_EQUALS,\n  ASTERISK_EQUALS,\n  ASTERISK_ASTERISK_EQUALS,\n  SLASH_EQUALS,\n  PERCENT_EQUALS,\n  LESSTHAN_LESSTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_EQUALS,\n  GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS,\n  AMPERSAND_EQUALS,\n  BAR_EQUALS,\n  CARET_EQUALS,\n  AT,\n\n  // literals\n\n  IDENTIFIER,\n  STRINGLITERAL,\n  INTEGERLITERAL,\n  FLOATLITERAL,\n\n  // meta\n\n  INVALID,\n  ENDOFFILE\n}\n\nexport enum IdentifierHandling {\n  DEFAULT,\n  PREFER,\n  ALWAYS\n}\n\nexport function tokenFromKeyword(text: string): Token {\n  assert(text.length);\n  switch (text.charCodeAt(0)) {\n    case CharCode.a: {\n      switch (text) {\n        case \"abstract\": return Token.ABSTRACT;\n        case \"as\": return Token.AS;\n        case \"async\": return Token.ASYNC;\n        case \"await\": return Token.AWAIT;\n      }\n      break;\n    }\n    case CharCode.b: {\n      switch (text) {\n        case \"break\": return Token.BREAK;\n      }\n      break;\n    }\n    case CharCode.c: {\n      switch (text) {\n        case \"case\": return Token.CASE;\n        case \"catch\": return Token.CATCH;\n        case \"class\": return Token.CLASS;\n        case \"continue\": return Token.CONTINUE;\n        case \"const\": return Token.CONST;\n        case \"constructor\": return Token.CONSTRUCTOR;\n      }\n      break;\n    }\n    case CharCode.d: {\n      switch (text) {\n        case \"debugger\": return Token.DEBUGGER;\n        case \"declare\": return Token.DECLARE;\n        case \"default\": return Token.DEFAULT;\n        case \"delete\": return Token.DELETE;\n        case \"do\": return Token.DO;\n      }\n      break;\n    }\n    case CharCode.e: {\n      switch (text) {\n        case \"else\": return Token.ELSE;\n        case \"enum\": return Token.ENUM;\n        case \"export\": return Token.EXPORT;\n        case \"extends\": return Token.EXTENDS;\n      }\n      break;\n    }\n    case CharCode.f: {\n      switch (text) {\n        case \"false\": return Token.FALSE;\n        case \"finally\": return Token.FINALLY;\n        case \"for\": return Token.FOR;\n        case \"from\": return Token.FROM;\n        case \"function\": return Token.FUNCTION;\n      }\n      break;\n    }\n    case CharCode.g: {\n      switch (text) {\n        case \"get\": return Token.GET;\n      }\n      break;\n    }\n    case CharCode.i: {\n      switch (text) {\n        case \"if\": return Token.IF;\n        case \"implements\": return Token.IMPLEMENTS;\n        case \"import\": return Token.IMPORT;\n        case \"in\": return Token.IN;\n        case \"instanceof\": return Token.INSTANCEOF;\n        case \"interface\": return Token.INTERFACE;\n        case \"is\": return Token.IS;\n      }\n      break;\n    }\n    case CharCode.k: {\n      switch (text) {\n        case \"keyof\": return Token.KEYOF;\n      }\n      break;\n    }\n    case CharCode.l: {\n      switch (text) {\n        case \"let\": return Token.LET;\n      }\n      break;\n    }\n    case CharCode.m: {\n      switch (text) {\n        case \"module\": return Token.MODULE;\n      }\n      break;\n    }\n    case CharCode.n: {\n      switch (text) {\n        case \"namespace\": return Token.NAMESPACE;\n        case \"new\": return Token.NEW;\n        case \"null\": return Token.NULL;\n      }\n      break;\n    }\n    case CharCode.o: {\n      switch (text) {\n        case \"of\": return Token.OF;\n      }\n      break;\n    }\n    case CharCode.p: {\n      switch (text) {\n        case \"package\": return Token.PACKAGE;\n        case \"private\": return Token.PRIVATE;\n        case \"protected\": return Token.PROTECTED;\n        case \"public\": return Token.PUBLIC;\n      }\n      break;\n    }\n    case CharCode.r: {\n      switch (text) {\n        case \"readonly\": return Token.READONLY;\n        case \"return\": return Token.RETURN;\n      }\n      break;\n    }\n    case CharCode.s: {\n      switch (text) {\n        case \"set\": return Token.SET;\n        case \"static\": return Token.STATIC;\n        case \"super\": return Token.SUPER;\n        case \"switch\": return Token.SWITCH;\n      }\n      break;\n    }\n    case CharCode.t: {\n      switch (text) {\n        case \"this\": return Token.THIS;\n        case \"throw\": return Token.THROW;\n        case \"true\": return Token.TRUE;\n        case \"try\": return Token.TRY;\n        case \"type\": return Token.TYPE;\n        case \"typeof\": return Token.TYPEOF;\n      }\n      break;\n    }\n    case CharCode.v: {\n      switch (text) {\n        case \"var\": return Token.VAR;\n        case \"void\": return Token.VOID;\n      }\n      break;\n    }\n    case CharCode.w: {\n      switch (text) {\n        case \"while\": return Token.WHILE;\n        case \"with\": return Token.WITH;\n      }\n      break;\n    }\n    case CharCode.y: {\n      switch (text) {\n        case \"yield\": return Token.YIELD;\n      }\n      break;\n    }\n  }\n  return Token.INVALID;\n}\n\nexport function tokenIsAlsoIdentifier(token: Token): bool {\n  switch (token) {\n    case Token.ABSTRACT:\n    case Token.AS:\n    case Token.CONSTRUCTOR:\n    case Token.DECLARE:\n    case Token.DELETE:\n    case Token.FROM:\n    case Token.FOR:\n    case Token.GET:\n    case Token.INSTANCEOF:\n    case Token.IS:\n    case Token.KEYOF:\n    case Token.MODULE:\n    case Token.NAMESPACE:\n    case Token.NULL:\n    case Token.READONLY:\n    case Token.SET:\n    case Token.TYPE:\n    case Token.VOID: return true;\n    default: return false;\n  }\n}\n\nexport function isIllegalVariableIdentifier(name: string): bool {\n  assert(name.length);\n  switch (name.charCodeAt(0)) {\n    case CharCode.d: return name == \"delete\";\n    case CharCode.f: return name == \"for\";\n    case CharCode.i: return name == \"instanceof\";\n    case CharCode.n: return name == \"null\";\n    case CharCode.v: return name == \"void\";\n  }\n  return false;\n}\n\nexport function operatorTokenToString(token: Token): string {\n  switch (token) {\n    case Token.DELETE: return \"delete\";\n    case Token.IN: return \"in\";\n    case Token.INSTANCEOF: return \"instanceof\";\n    case Token.NEW: return \"new\";\n    case Token.TYPEOF: return \"typeof\";\n    case Token.VOID: return \"void\";\n    case Token.YIELD: return \"yield\";\n    case Token.DOT_DOT_DOT: return \"...\";\n    case Token.COMMA: return \",\";\n    case Token.LESSTHAN: return \"<\";\n    case Token.GREATERTHAN: return \">\";\n    case Token.LESSTHAN_EQUALS: return \"<=\";\n    case Token.GREATERTHAN_EQUALS: return \">=\";\n    case Token.EQUALS_EQUALS: return \"==\";\n    case Token.EXCLAMATION_EQUALS: return \"!=\";\n    case Token.EQUALS_EQUALS_EQUALS: return \"===\";\n    case Token.EXCLAMATION_EQUALS_EQUALS: return \"!==\";\n    case Token.PLUS: return \"+\";\n    case Token.MINUS: return \"-\";\n    case Token.ASTERISK_ASTERISK: return \"**\";\n    case Token.ASTERISK: return \"*\";\n    case Token.SLASH: return \"/\";\n    case Token.PERCENT: return \"%\";\n    case Token.PLUS_PLUS: return \"++\";\n    case Token.MINUS_MINUS: return \"--\";\n    case Token.LESSTHAN_LESSTHAN: return \"<<\";\n    case Token.GREATERTHAN_GREATERTHAN: return \">>\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return \">>>\";\n    case Token.AMPERSAND: return \"&\";\n    case Token.BAR: return \"|\";\n    case Token.CARET: return \"^\";\n    case Token.EXCLAMATION: return \"!\";\n    case Token.TILDE: return \"~\";\n    case Token.AMPERSAND_AMPERSAND: return \"&&\";\n    case Token.BAR_BAR: return \"||\";\n    case Token.EQUALS: return \"=\";\n    case Token.PLUS_EQUALS: return \"+=\";\n    case Token.MINUS_EQUALS: return \"-=\";\n    case Token.ASTERISK_EQUALS: return \"*=\";\n    case Token.ASTERISK_ASTERISK_EQUALS: return \"**=\";\n    case Token.SLASH_EQUALS: return \"/=\";\n    case Token.PERCENT_EQUALS: return \"%=\";\n    case Token.LESSTHAN_LESSTHAN_EQUALS: return \"<<=\";\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS: return \">>=\";\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: return \">>>=\";\n    case Token.AMPERSAND_EQUALS: return \"&=\";\n    case Token.BAR_EQUALS: return \"|=\";\n    case Token.CARET_EQUALS: return \"^=\";\n    default: {\n      assert(false);\n      return \"\";\n    }\n  }\n}\n\nexport class Range {\n\n  source: Source;\n  start: i32;\n  end: i32;\n\n  // TODO: set these while tokenizing\n  // line: i32;\n  // column: i32;\n\n  constructor(source: Source, start: i32, end: i32) {\n    this.source = source;\n    this.start = start;\n    this.end = end;\n  }\n\n  static join(a: Range, b: Range): Range {\n    if (a.source != b.source) throw new Error(\"source mismatch\");\n    return new Range(a.source,\n      a.start < b.start ? a.start : b.start,\n      a.end > b.end ? a.end : b.end\n    );\n  }\n\n  get atStart(): Range {\n    return new Range(this.source, this.start, this.start);\n  }\n\n  get atEnd(): Range {\n    return new Range(this.source, this.end, this.end);\n  }\n\n  get line(): i32 {\n    var text = this.source.text;\n    var line = 1;\n    for (let pos = this.start; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) line++;\n    }\n    return line;\n  }\n\n  get column(): i32 {\n    var text = this.source.text;\n    var column = 0;\n    for (let pos = this.start - 1; pos >= 0; --pos) {\n      if (text.charCodeAt(pos) == CharCode.LINEFEED) break;\n      ++column;\n    }\n    return column;\n  }\n\n  toString(): string {\n    return this.source.text.substring(this.start, this.end);\n  }\n\n  debugInfoRef: usize = 0;\n}\n\ndeclare function parseFloat(str: string): f64;\n\n/** Handler for intercepting comments while tokenizing. */\nexport type CommentHandler = (kind: CommentKind, text: string, range: Range) => void;\n\n/** Tokenizes a source to individual {@link Token}s. */\nexport class Tokenizer extends DiagnosticEmitter {\n\n  source: Source;\n  end: i32 = 0;\n\n  pos: i32 = 0;\n  token: Token = -1;\n  tokenPos: i32 = 0;\n\n  nextToken: Token = -1;\n  nextTokenPos: i32 = 0;\n  nextTokenOnNewLine: bool = false;\n\n  onComment: CommentHandler | null = null;\n\n  /** Constructs a new tokenizer. */\n  constructor(source: Source, diagnostics: DiagnosticMessage[] | null = null) {\n    super(diagnostics);\n\n    this.source = source;\n    this.pos = 0;\n    this.end = source.text.length;\n    this.diagnostics = diagnostics || new Array();\n\n    var end = this.end;\n    var text = source.text;\n\n    // skip bom\n    if (\n      this.pos < end &&\n      text.charCodeAt(this.pos) == CharCode.BYTEORDERMARK\n    ) {\n      ++this.pos;\n    }\n\n    // skip shebang\n    if (\n      this.pos + 1 < end &&\n      text.charCodeAt(this.pos) == CharCode.HASH &&\n      text.charCodeAt(this.pos + 1) == CharCode.EXCLAMATION\n    ) {\n      this.pos += 2;\n      while (\n        this.pos < end &&\n        text.charCodeAt(this.pos) != CharCode.LINEFEED\n      ) {\n        ++this.pos;\n      }\n      // 'next' now starts at lf or eof\n    }\n  }\n\n  next(identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): Token {\n    this.nextToken = -1;\n    return this.token = this.unsafeNext(identifierHandling);\n  }\n\n  private unsafeNext(\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxTokenLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      this.tokenPos = this.pos;\n      let c = text.charCodeAt(this.pos);\n      switch (c) {\n        case CharCode.CARRIAGERETURN: {\n          if (!(\n            ++this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.LINEFEED\n          )) break;\n          // otherwise fall-through\n        }\n        case CharCode.LINEFEED:\n        case CharCode.TAB:\n        case CharCode.VERTICALTAB:\n        case CharCode.FORMFEED:\n        case CharCode.SPACE: {\n          ++this.pos;\n          break;\n        }\n        case CharCode.EXCLAMATION: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            if (\n              maxTokenLength > 2 && this.pos < end &&\n              text.charCodeAt(this.pos) == CharCode.EQUALS\n            ) {\n              ++this.pos;\n              return Token.EXCLAMATION_EQUALS_EQUALS;\n            }\n            return Token.EXCLAMATION_EQUALS;\n          }\n          return Token.EXCLAMATION;\n        }\n        case CharCode.DOUBLEQUOTE:\n        case CharCode.SINGLEQUOTE:\n        case CharCode.BACKTICK: { // TODO\n          return Token.STRINGLITERAL; // expects a call to readString\n        }\n        case CharCode.PERCENT: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.PERCENT_EQUALS;\n          }\n          return Token.PERCENT;\n        }\n        case CharCode.AMPERSAND: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.AMPERSAND) {\n              ++this.pos;\n              return Token.AMPERSAND_AMPERSAND;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.AMPERSAND_EQUALS;\n            }\n          }\n          return Token.AMPERSAND;\n        }\n        case CharCode.OPENPAREN: {\n          ++this.pos;\n          return Token.OPENPAREN;\n        }\n        case CharCode.CLOSEPAREN: {\n          ++this.pos;\n          return Token.CLOSEPAREN;\n        }\n        case CharCode.ASTERISK: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.ASTERISK_EQUALS;\n            }\n            if (chr == CharCode.ASTERISK) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 && this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.ASTERISK_ASTERISK_EQUALS;\n              }\n              return Token.ASTERISK_ASTERISK;\n            }\n          }\n          return Token.ASTERISK;\n        }\n        case CharCode.PLUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.PLUS) {\n              ++this.pos;\n              return Token.PLUS_PLUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.PLUS_EQUALS;\n            }\n          }\n          return Token.PLUS;\n        }\n        case CharCode.COMMA: {\n          ++this.pos;\n          return Token.COMMA;\n        }\n        case CharCode.MINUS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.MINUS) {\n              ++this.pos;\n              return Token.MINUS_MINUS;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.MINUS_EQUALS;\n            }\n          }\n          return Token.MINUS;\n        }\n        case CharCode.DOT: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (isDecimalDigit(chr)) {\n              --this.pos;\n              return Token.FLOATLITERAL; // expects a call to readFloat\n            }\n            if (\n              maxTokenLength > 2 && this.pos + 1 < end &&\n              chr == CharCode.DOT &&\n              text.charCodeAt(this.pos + 1) == CharCode.DOT\n            ) {\n              this.pos += 2;\n              return Token.DOT_DOT_DOT;\n            }\n          }\n          return Token.DOT;\n        }\n        case CharCode.SLASH: {\n          let commentStartPos = this.pos;\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.SLASH) { // single-line\n              let commentKind = CommentKind.LINE;\n              if (\n                this.pos + 1 < end &&\n                text.charCodeAt(this.pos + 1) == CharCode.SLASH\n              ) {\n                ++this.pos;\n                commentKind = CommentKind.TRIPLE;\n              }\n              while (++this.pos < end) {\n                if (text.charCodeAt(this.pos) == CharCode.LINEFEED) {\n                  ++this.pos;\n                  break;\n                }\n              }\n              if (this.onComment) {\n                this.onComment(\n                  commentKind,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.ASTERISK) { // multi-line\n              let closed = false;\n              while (++this.pos < end) {\n                c = text.charCodeAt(this.pos);\n                if (\n                  c == CharCode.ASTERISK &&\n                  this.pos + 1 < end &&\n                  text.charCodeAt(this.pos + 1) == CharCode.SLASH\n                ) {\n                  this.pos += 2;\n                  closed = true;\n                  break;\n                }\n              }\n              if (!closed) {\n                this.error(\n                  DiagnosticCode._0_expected,\n                  this.range(this.pos), \"*/\"\n                );\n              } else if (this.onComment) {\n                this.onComment(\n                  CommentKind.BLOCK,\n                  text.substring(commentStartPos, this.pos),\n                  this.range(commentStartPos, this.pos)\n                );\n              }\n              break;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.SLASH_EQUALS;\n            }\n          }\n          return Token.SLASH;\n        }\n        case CharCode._0:\n        case CharCode._1:\n        case CharCode._2:\n        case CharCode._3:\n        case CharCode._4:\n        case CharCode._5:\n        case CharCode._6:\n        case CharCode._7:\n        case CharCode._8:\n        case CharCode._9: {\n          return this.testInteger()\n            ? Token.INTEGERLITERAL // expects a call to readInteger\n            : Token.FLOATLITERAL;  // expects a call to readFloat\n        }\n        case CharCode.COLON: {\n          ++this.pos;\n          return Token.COLON;\n        }\n        case CharCode.SEMICOLON: {\n          ++this.pos;\n          return Token.SEMICOLON;\n        }\n        case CharCode.LESSTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.LESSTHAN) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.LESSTHAN_LESSTHAN_EQUALS;\n              }\n              return Token.LESSTHAN_LESSTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.LESSTHAN_EQUALS;\n            }\n          }\n          return Token.LESSTHAN;\n        }\n        case CharCode.EQUALS: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              if (\n                maxTokenLength > 2 &&\n                this.pos < end &&\n                text.charCodeAt(this.pos) == CharCode.EQUALS\n              ) {\n                ++this.pos;\n                return Token.EQUALS_EQUALS_EQUALS;\n              }\n              return Token.EQUALS_EQUALS;\n            }\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              return Token.EQUALS_GREATERTHAN;\n            }\n          }\n          return Token.EQUALS;\n        }\n        case CharCode.GREATERTHAN: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.GREATERTHAN) {\n              ++this.pos;\n              if (maxTokenLength > 2 && this.pos < end) {\n                chr = text.charCodeAt(this.pos);\n                if (chr == CharCode.GREATERTHAN) {\n                  ++this.pos;\n                  if (\n                    maxTokenLength > 3 && this.pos < end &&\n                    text.charCodeAt(this.pos) == CharCode.EQUALS\n                  ) {\n                    ++this.pos;\n                    return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS;\n                  }\n                  return Token.GREATERTHAN_GREATERTHAN_GREATERTHAN;\n                }\n                if (chr == CharCode.EQUALS) {\n                  ++this.pos;\n                  return Token.GREATERTHAN_GREATERTHAN_EQUALS;\n                }\n              }\n              return Token.GREATERTHAN_GREATERTHAN;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.GREATERTHAN_EQUALS;\n            }\n          }\n          return Token.GREATERTHAN;\n        }\n        case CharCode.QUESTION: {\n          ++this.pos;\n          return Token.QUESTION;\n        }\n        case CharCode.OPENBRACKET: {\n          ++this.pos;\n          return Token.OPENBRACKET;\n        }\n        case CharCode.CLOSEBRACKET: {\n          ++this.pos;\n          return Token.CLOSEBRACKET;\n        }\n        case CharCode.CARET: {\n          ++this.pos;\n          if (\n            maxTokenLength > 1 && this.pos < end &&\n            text.charCodeAt(this.pos) == CharCode.EQUALS\n          ) {\n            ++this.pos;\n            return Token.CARET_EQUALS;\n          }\n          return Token.CARET;\n        }\n        case CharCode.OPENBRACE: {\n          ++this.pos;\n          return Token.OPENBRACE;\n        }\n        case CharCode.BAR: {\n          ++this.pos;\n          if (maxTokenLength > 1 && this.pos < end) {\n            let chr = text.charCodeAt(this.pos);\n            if (chr == CharCode.BAR) {\n              ++this.pos;\n              return Token.BAR_BAR;\n            }\n            if (chr == CharCode.EQUALS) {\n              ++this.pos;\n              return Token.BAR_EQUALS;\n            }\n          }\n          return Token.BAR;\n        }\n        case CharCode.CLOSEBRACE: {\n          ++this.pos;\n          return Token.CLOSEBRACE;\n        }\n        case CharCode.TILDE: {\n          ++this.pos;\n          return Token.TILDE;\n        }\n        case CharCode.AT: {\n          ++this.pos;\n          return Token.AT;\n        }\n        default: {\n          if (isIdentifierStart(c)) {\n            if (isKeywordCharacter(c)) {\n              let posBefore = this.pos;\n              while (\n                ++this.pos < end &&\n                isIdentifierPart(c = text.charCodeAt(this.pos))\n              ) {\n                if (!isKeywordCharacter(c)) {\n                  this.pos = posBefore;\n                  return Token.IDENTIFIER;\n                }\n              }\n              let keywordText = text.substring(posBefore, this.pos);\n              let keywordToken = tokenFromKeyword(keywordText);\n              if (\n                keywordToken !== Token.INVALID &&\n                identifierHandling !== IdentifierHandling.ALWAYS &&\n                !(\n                  identifierHandling === IdentifierHandling.PREFER &&\n                  tokenIsAlsoIdentifier(keywordToken)\n                )\n              ) {\n                return keywordToken;\n              }\n              this.pos = posBefore;\n            }\n            return Token.IDENTIFIER; // expects a call to readIdentifier\n          } else if (isWhiteSpace(c)) {\n            ++this.pos;\n            break;\n          }\n          this.error(\n            DiagnosticCode.Invalid_character,\n            this.range(this.pos, this.pos + 1)\n          );\n          ++this.pos;\n          return Token.INVALID;\n        }\n      }\n    }\n    return Token.ENDOFFILE;\n  }\n\n  peek(\n    checkOnNewLine: bool = false,\n    identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT,\n    maxCompoundLength: i32 = i32.MAX_VALUE\n  ): Token {\n    var text = this.source.text;\n    if (this.nextToken < 0) {\n      let posBefore = this.pos;\n      let tokenBefore = this.token;\n      let tokenPosBefore = this.tokenPos;\n      this.nextToken = this.unsafeNext(identifierHandling, maxCompoundLength);\n      this.nextTokenPos = this.tokenPos;\n      if (checkOnNewLine) {\n        this.nextTokenOnNewLine = false;\n        for (let pos = posBefore, end = this.nextTokenPos; pos < end; ++pos) {\n          if (isLineBreak(text.charCodeAt(pos))) {\n            this.nextTokenOnNewLine = true;\n            break;\n          }\n        }\n      }\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n    }\n    return this.nextToken;\n  }\n\n  skipIdentifier(identifierHandling: IdentifierHandling = IdentifierHandling.PREFER): bool {\n    return this.skip(Token.IDENTIFIER, identifierHandling);\n  }\n\n  skip(token: Token, identifierHandling: IdentifierHandling = IdentifierHandling.DEFAULT): bool {\n    var posBefore = this.pos;\n    var tokenBefore = this.token;\n    var tokenPosBefore = this.tokenPos;\n    var maxCompoundLength = i32.MAX_VALUE;\n    switch (token) {\n      case Token.GREATERTHAN: { // where parsing type arguments\n        maxCompoundLength = 1;\n        break;\n      }\n    }\n    this.token = this.unsafeNext(identifierHandling, maxCompoundLength);\n    if (this.token == token) {\n      this.nextToken = -1;\n      return true;\n    } else {\n      this.pos = posBefore;\n      this.token = tokenBefore;\n      this.tokenPos = tokenPosBefore;\n      return false;\n    }\n  }\n\n  mark(): State {\n    var state: State;\n    if (reusableState) {\n      state = reusableState;\n      reusableState = null;\n    } else {\n      state = new State();\n    }\n    state.pos = this.pos;\n    state.token = this.token;\n    state.tokenPos = this.tokenPos;\n    return state;\n  }\n\n  discard(state: State): void {\n    reusableState = state;\n  }\n\n  reset(state: State): void {\n    this.pos = state.pos;\n    this.token = state.token;\n    this.tokenPos = state.tokenPos;\n    this.nextToken = -1;\n  }\n\n  range(start: i32 = -1, end: i32 = -1): Range {\n    if (start < 0) {\n      start = this.tokenPos;\n      end = this.pos;\n    } else if (end < 0) {\n      end = start;\n    }\n    return new Range(this.source, start, end);\n  }\n\n  readIdentifier(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    while (\n      ++this.pos < end &&\n      isIdentifierPart(text.charCodeAt(this.pos))\n    );\n    return text.substring(start, this.pos);\n  }\n\n  readString(): string {\n    var text = this.source.text;\n    var quote = text.charCodeAt(this.pos++);\n    var start = this.pos;\n    var end = this.end;\n    var result = \"\";\n    while (true) {\n      if (this.pos >= end) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, end)\n        );\n        break;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (c == quote) {\n        result += text.substring(start, this.pos++);\n        break;\n      }\n      if (c == CharCode.BACKSLASH) {\n        result += text.substring(start, this.pos);\n        result += this.readEscapeSequence();\n        start = this.pos;\n        continue;\n      }\n      if (isLineBreak(c) && quote != CharCode.BACKTICK) {\n        result += text.substring(start, this.pos);\n        this.error(\n          DiagnosticCode.Unterminated_string_literal,\n          this.range(start - 1, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n    }\n    return result;\n  }\n\n  readEscapeSequence(): string {\n    var end = this.end;\n    if (++this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(end)\n      );\n      return \"\";\n    }\n\n    var text = this.source.text;\n    var c = text.charCodeAt(this.pos++);\n    switch (c) {\n      case CharCode._0: return \"\\0\";\n      case CharCode.b: return \"\\b\";\n      case CharCode.t: return \"\\t\";\n      case CharCode.n: return \"\\n\";\n      case CharCode.v: return \"\\v\";\n      case CharCode.f: return \"\\f\";\n      case CharCode.r: return \"\\r\";\n      case CharCode.SINGLEQUOTE: return \"'\";\n      case CharCode.DOUBLEQUOTE: return \"\\\"\";\n      case CharCode.u: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.OPENBRACE\n        ) {\n          ++this.pos;\n          return this.readExtendedUnicodeEscape(); // \\u{DDDDDDDD}\n        }\n        return this.readUnicodeEscape(); // \\uDDDD\n      }\n      case CharCode.CARRIAGERETURN: {\n        if (\n          this.pos < end &&\n          text.charCodeAt(this.pos) == CharCode.LINEFEED\n        ) {\n          ++this.pos;\n        }\n        // fall through\n      }\n      case CharCode.LINEFEED:\n      case CharCode.LINESEPARATOR:\n      case CharCode.PARAGRAPHSEPARATOR: return \"\";\n      default: return String.fromCharCode(c);\n    }\n  }\n\n  readRegexpPattern(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var escaped = false;\n    while (true) {\n      if (this.pos >= end) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, end)\n        );\n        break;\n      }\n      if (text.charCodeAt(this.pos) == CharCode.BACKSLASH) {\n        ++this.pos;\n        escaped = true;\n        continue;\n      }\n      let c = text.charCodeAt(this.pos);\n      if (!escaped && c == CharCode.SLASH) break;\n      if (isLineBreak(c)) {\n        this.error(\n          DiagnosticCode.Unterminated_regular_expression_literal,\n          this.range(start, this.pos)\n        );\n        break;\n      }\n      ++this.pos;\n      escaped = false;\n    }\n    return text.substring(start, this.pos);\n  }\n\n  readRegexpFlags(): string {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var flags = 0;\n    while (this.pos < end) {\n      let c: i32 = text.charCodeAt(this.pos);\n      if (!isIdentifierPart(c)) break;\n      ++this.pos;\n\n      // make sure each supported flag is unique\n      switch (c) {\n        case CharCode.g: {\n          flags |= flags & 1 ? -1 : 1;\n          break;\n        }\n        case CharCode.i: {\n          flags |= flags & 2 ? -1 : 2;\n          break;\n        }\n        case CharCode.m: {\n          flags |= flags & 4 ? -1 : 4;\n          break;\n        }\n        default: {\n          flags = -1;\n          break;\n        }\n      }\n    }\n    if (flags == -1) {\n      this.error(\n        DiagnosticCode.Invalid_regular_expression_flags,\n        this.range(start, this.pos)\n      );\n    }\n    return text.substring(start, this.pos);\n  }\n\n  testInteger(): bool {\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos + 1 < end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 2)) {\n        case CharCode.x:\n        case CharCode.X:\n        case CharCode.b:\n        case CharCode.B:\n        case CharCode.o:\n        case CharCode.O: return true;\n      }\n    }\n    var pos = this.pos;\n    while (pos < end) {\n      let c = text.charCodeAt(pos);\n      if (c == CharCode.DOT || c == CharCode.e || c == CharCode.E) return false;\n      if ((c < CharCode._0 || c > CharCode._9) && c != CharCode._) break;\n      // does not validate separator placement (this is done in readXYInteger)\n      pos++;\n    }\n    return true;\n  }\n\n  readInteger(): I64 {\n    var text = this.source.text;\n    if (this.pos + 2 < this.end && text.charCodeAt(this.pos) == CharCode._0) {\n      switch (text.charCodeAt(this.pos + 1)) {\n        case CharCode.x:\n        case CharCode.X: {\n          this.pos += 2;\n          return this.readHexInteger();\n        }\n        case CharCode.b:\n        case CharCode.B: {\n          this.pos += 2;\n          return this.readBinaryInteger();\n        }\n        case CharCode.o:\n        case CharCode.O: {\n          this.pos += 2;\n          return this.readOctalInteger();\n        }\n      }\n      if (isOctalDigit(text.charCodeAt(this.pos + 1))) {\n        let start = this.pos;\n        ++this.pos;\n        let value = this.readOctalInteger();\n        this.error(\n          DiagnosticCode.Octal_literals_are_not_allowed_in_strict_mode,\n          this.range(start, this.pos)\n        );\n        return value;\n      }\n    }\n    return this.readDecimalInteger();\n  }\n\n  readHexInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_4 = i64_new(4);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = (value << 4) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(c - CharCode._0)\n        );\n       } else if (c >= CharCode.A && c <= CharCode.F) {\n        // value = (value << 4) + 10 + c - CharCode.A;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.A)\n        );\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        // value = (value << 4) + 10 + c - CharCode.a;\n        value = i64_add(\n          i64_shl(value, i64_4),\n          i64_new(10 + c - CharCode.a)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Hexadecimal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readDecimalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var end = this.end;\n    var value = i64_new(0);\n    var i64_10 = i64_new(10);\n    var sepEnd = start;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        // value = value * 10 + c - CharCode._0;\n        value = i64_add(\n          i64_mul(value, i64_10),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readOctalInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_3 = i64_new(3);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c >= CharCode._0 && c <= CharCode._7) {\n        // value = (value << 3) + c - CharCode._0;\n        value = i64_add(\n          i64_shl(value, i64_3),\n          i64_new(c - CharCode._0)\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      ++this.pos;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Octal_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readBinaryInteger(): I64 {\n    var text = this.source.text;\n    var start = this.pos;\n    var value = i64_new(0);\n    var i64_1 = i64_new(1);\n    var sepEnd = start;\n    var end = this.end;\n    while (this.pos < end) {\n      let pos = this.pos;\n      let c = text.charCodeAt(pos);\n      if (c == CharCode._0) {\n        // value = (value << 1);\n        value = i64_shl(value, i64_1);\n      } else if (c == CharCode._1) {\n        // value = (value << 1) + 1;\n        value = i64_add(\n          i64_shl(value, i64_1),\n          i64_1\n        );\n      } else if (c == CharCode._) {\n        if (sepEnd == pos) {\n          this.error(\n            sepEnd == start\n              ? DiagnosticCode.Numeric_separators_are_not_allowed_here\n              : DiagnosticCode.Multiple_consecutive_numeric_separators_are_not_permitted,\n            this.range(pos)\n          );\n        }\n        sepEnd = pos + 1;\n      } else {\n        break;\n      }\n      this.pos = pos + 1;\n    }\n    if (this.pos == start) {\n      this.error(\n        DiagnosticCode.Binary_digit_expected,\n        this.range(start)\n      );\n    } else if (sepEnd == this.pos) {\n      this.error(\n        DiagnosticCode.Numeric_separators_are_not_allowed_here,\n        this.range(sepEnd - 1)\n      );\n    }\n    return value;\n  }\n\n  readFloat(): f64 {\n    // var text = this.source.text;\n    // if (text.charCodeAt(this.pos) == CharCode._0 && this.pos + 2 < this.end) {\n    //   switch (text.charCodeAt(this.pos + 1)) {\n    //     case CharCode.X:\n    //     case CharCode.x: {\n    //       this.pos += 2;\n    //       return this.readHexFloat();\n    //     }\n    //   }\n    // }\n    return this.readDecimalFloat();\n  }\n\n  readDecimalFloat(): f64 {\n    // TODO: numeric separators (parseFloat can't handle these)\n    var start = this.pos;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n      ++this.pos;\n    }\n    if (this.pos < end && text.charCodeAt(this.pos) == CharCode.DOT) {\n      ++this.pos;\n      while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n        ++this.pos;\n      }\n    }\n    if (this.pos < end) {\n      let c = text.charCodeAt(this.pos);\n      if (c == CharCode.e || c == CharCode.E) {\n        if (\n          ++this.pos < end &&\n          (c = text.charCodeAt(this.pos)) == CharCode.MINUS || c == CharCode.PLUS &&\n          isDecimalDigit(text.charCodeAt(this.pos + 1))\n        ) {\n          ++this.pos;\n        }\n        while (this.pos < end && isDecimalDigit(text.charCodeAt(this.pos))) {\n          ++this.pos;\n        }\n      }\n    }\n    return parseFloat(text.substring(start, this.pos));\n  }\n\n  readHexFloat(): f64 {\n    throw new Error(\"not implemented\"); // TBD\n  }\n\n  readUnicodeEscape(): string {\n    var remain = 4;\n    var value = 0;\n    var end = this.end;\n    var text = this.source.text;\n    while (this.pos < end) {\n      let c = text.charCodeAt(this.pos++);\n      if (c >= CharCode._0 && c <= CharCode._9) {\n        value = (value << 4) + c - CharCode._0;\n      } else if (c >= CharCode.A && c <= CharCode.F) {\n        value = (value << 4) + c + (10 - CharCode.A);\n      } else if (c >= CharCode.a && c <= CharCode.f) {\n        value = (value << 4) + c + (10 - CharCode.a);\n      } else {\n        this.error(\n          DiagnosticCode.Hexadecimal_digit_expected,\n          this.range(this.pos - 1, this.pos)\n        );\n        return \"\";\n      }\n      if (--remain == 0) break;\n    }\n    if (remain) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(this.pos)\n      );\n      return \"\";\n    }\n    return String.fromCharCode(value);\n  }\n\n  private readExtendedUnicodeEscape(): string {\n    var start = this.pos;\n    var value = this.readHexInteger();\n    var value32 = i64_low(value);\n    var invalid = false;\n\n    assert(!i64_high(value));\n    if (value32 > 0x10FFFF) {\n      this.error(\n        DiagnosticCode.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    var end = this.end;\n    var text = this.source.text;\n    if (this.pos >= end) {\n      this.error(\n        DiagnosticCode.Unexpected_end_of_text,\n        this.range(start, end)\n      );\n      invalid = true;\n    } else if (text.charCodeAt(this.pos) == CharCode.CLOSEBRACE) {\n      ++this.pos;\n    } else {\n      this.error(\n        DiagnosticCode.Unterminated_Unicode_escape_sequence,\n        this.range(start, this.pos)\n      );\n      invalid = true;\n    }\n\n    if (invalid) return \"\";\n    return value32 < 65536\n      ? String.fromCharCode(value32)\n      : String.fromCharCode(\n        ((value32 - 65536) >>> 10) + 0xD800,\n        ((value32 - 65536) & 1023) + 0xDC00\n      );\n  }\n\n  finish(): void {\n  }\n}\n\n/** Tokenizer state as returned by {@link Tokenizer#mark} and consumed by {@link Tokenizer#reset}. */\nexport class State {\n  /** Current position. */\n  pos: i32;\n  /** Current token. */\n  token: Token;\n  /** Current token's position. */\n  tokenPos: i32;\n}\n\n// Reusable state object to reduce allocations\nvar reusableState: State | null = null;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","/**\n * Resolve infrastructure to obtain types and elements.\n * @module resolver\n *//***/\n\nimport {\n  DiagnosticEmitter,\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Program,\n  ElementKind,\n  OperatorKind,\n  Element,\n  Class,\n  ClassPrototype,\n  Function,\n  FunctionPrototype,\n  VariableLikeElement,\n  Property,\n  PropertyPrototype,\n  Field,\n  FieldPrototype,\n  Global,\n  TypeDefinition,\n  TypedElement,\n  FunctionTarget,\n  IndexSignature,\n  isTypedElement\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow\n} from \"./flow\";\n\nimport {\n  FunctionTypeNode,\n  ParameterKind,\n  TypeNode,\n  NodeKind,\n  NamedTypeNode,\n  TypeName,\n  TypeParameterNode,\n  Node,\n  Range,\n  IdentifierExpression,\n  CallExpression,\n  ElementAccessExpression,\n  PropertyAccessExpression,\n  LiteralExpression,\n  LiteralKind,\n  ParenthesizedExpression,\n  AssertionExpression,\n  Expression,\n  IntegerLiteralExpression,\n  UnaryPrefixExpression,\n  UnaryPostfixExpression,\n  AssertionKind,\n  BinaryExpression,\n  ThisExpression,\n  SuperExpression,\n  CommaExpression,\n  InstanceOfExpression,\n  TernaryExpression,\n  isTypeOmitted,\n  FunctionExpression,\n  NewExpression\n} from \"./ast\";\n\nimport {\n  Type,\n  Signature,\n  typesToString,\n  TypeKind,\n  TypeFlags\n} from \"./types\";\n\nimport {\n  CommonFlags,\n  CommonSymbols\n} from \"./common\";\n\nimport {\n  makeMap,\n  isPowerOf2\n} from \"./util\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  BuiltinSymbols\n} from \"./builtins\";\n\n/** Indicates whether errors are reported or not. */\nexport enum ReportMode {\n  /** Report errors. */\n  REPORT,\n  /** Swallow errors. */\n  SWALLOW\n}\n\n/** Provides tools to resolve types and expressions. */\nexport class Resolver extends DiagnosticEmitter {\n\n  /** The program this resolver belongs to. */\n  program: Program;\n\n  /** Target expression of the previously resolved property or element access. */\n  currentThisExpression: Expression | null = null;\n  /** Element expression of the previously resolved element access. */\n  currentElementExpression : Expression | null = null;\n\n  /** Constructs the resolver for the specified program. */\n  constructor(\n    /** The program to construct a resolver for. */\n    program: Program\n  ) {\n    super(program.diagnostics);\n    this.program = program;\n  }\n\n  // ====================================================== Types ======================================================\n\n  /** Resolves a {@link TypeNode} to a concrete {@link Type}. */\n  resolveType(\n    /** The type to resolve. */\n    node: TypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.NAMEDTYPE: {\n        return this.resolveNamedType(\n          <NamedTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      case NodeKind.FUNCTIONTYPE: {\n        return this.resolveFunctionType(\n          <FunctionTypeNode>node,\n          ctxElement,\n          ctxTypes,\n          reportMode\n        );\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Resolves a {@link NamedTypeNode} to a concrete {@link Type}. */\n  private resolveNamedType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var nameNode = node.name;\n    var typeArgumentNodes = node.typeArguments;\n    var isSimpleType = !nameNode.next;\n\n    // Look up in contextual types if a simple type\n    if (isSimpleType) {\n      let simpleName = nameNode.identifier.text;\n      if (ctxTypes !== null && ctxTypes.has(simpleName)) {\n        let type = ctxTypes.get(simpleName)!;\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, type.toString()\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (type.is(TypeFlags.REFERENCE)) return type.asNullable();\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, type.toString()\n            );\n          }\n        }\n        return type;\n      }\n    }\n\n    // Look up in context\n    var element = this.resolveTypeName(nameNode, ctxElement, reportMode);\n    if (!element) return null;\n\n    // Use shadow type if present (i.e. namespace sharing a type)\n    if (element.shadowType) {\n      element = element.shadowType;\n\n    } else {\n\n      // Handle enums (become i32)\n      if (element.kind == ElementKind.ENUM) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        if (node.isNullable) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              node.range, element.name + \"/i32\"\n            );\n          }\n        }\n        return Type.i32;\n      }\n\n      // Handle classes\n      if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n        let instance = this.resolveClassInclTypeArguments(\n          <ClassPrototype>element,\n          typeArgumentNodes,\n          ctxElement,\n          makeMap<string,Type>(ctxTypes), // don't inherit\n          node,\n          reportMode\n        );\n        if (!instance) return null;\n        return node.isNullable ? instance.type.asNullable() : instance.type;\n      }\n    }\n\n    // Handle type definitions\n    if (element.kind == ElementKind.TYPEDEFINITION) {\n\n      // Shortcut already resolved (mostly builtins)\n      if (element.is(CommonFlags.RESOLVED)) {\n        if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_generic,\n              node.range, element.internalName\n            );\n          }\n        }\n        let type = (<TypeDefinition>element).type;\n        if (node.isNullable) {\n          if (!type.is(TypeFlags.REFERENCE)) {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Basic_type_0_cannot_be_nullable,\n                nameNode.range, nameNode.identifier.text\n              );\n            }\n          } else {\n            return type.asNullable();\n          }\n        }\n        return type;\n      }\n\n      // Handle special built-in types\n      if (isSimpleType) {\n        switch (nameNode.identifier.symbol) {\n          case CommonSymbols.native: return this.resolveBuiltinNativeType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.indexof: return this.resolveBuiltinIndexofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.valueof: return this.resolveBuiltinValueofType(node, ctxElement, ctxTypes, reportMode);\n          case CommonSymbols.returnof: return this.resolveBuiltinReturnTypeType(node, ctxElement, ctxTypes, reportMode);\n        }\n      }\n\n      // Resolve normally\n      let typeParameterNodes = (<TypeDefinition>element).typeParameterNodes;\n      let typeArguments: Type[] | null = null;\n      if (typeParameterNodes) {\n        typeArguments = this.resolveTypeArguments(\n          typeParameterNodes,\n          typeArgumentNodes,\n          ctxElement,\n          ctxTypes = makeMap(ctxTypes), // inherit\n          node,\n          reportMode\n        );\n        if (!typeArguments) return null;\n      } else if (typeArgumentNodes && typeArgumentNodes.length) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          node.range, nameNode.identifier.text\n        );\n      }\n      let type = this.resolveType(\n        (<TypeDefinition>element).typeNode,\n        element,\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      if (node.isNullable) {\n        if (!type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Basic_type_0_cannot_be_nullable,\n              nameNode.range, nameNode.identifier.text\n            );\n          }\n        } else {\n          return type.asNullable();\n        }\n      }\n      return type;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        nameNode.range, nameNode.identifier.text\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a {@link FunctionTypeNode} to a concrete {@link Type}. */\n  private resolveFunctionType(\n    /** The type to resolve. */\n    node: FunctionTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var explicitThisType = node.explicitThisType;\n    var thisType: Type | null = null;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n    }\n    var parameterNodes = node.parameters;\n    var numParameters = parameterNodes.length;\n    var parameterTypes = new Array<Type>(numParameters);\n    var parameterNames = new Array<string>(numParameters);\n    var requiredParameters = 0;\n    var hasRest = false;\n    for (let i = 0; i < numParameters; ++i) {\n      let parameterNode = parameterNodes[i];\n      switch (parameterNode.parameterKind) {\n        case ParameterKind.DEFAULT: {\n          requiredParameters = i + 1;\n          break;\n        }\n        case ParameterKind.REST: {\n          assert(i == numParameters);\n          hasRest = true;\n          break;\n        }\n      }\n      let parameterTypeNode = parameterNode.type;\n      if (isTypeOmitted(parameterTypeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            parameterTypeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        parameterTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterNode.name.text;\n    }\n    var returnTypeNode = node.returnType;\n    var returnType: Type | null;\n    if (isTypeOmitted(returnTypeNode)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnTypeNode.range\n        );\n      }\n      returnType = Type.void;\n    } else {\n      returnType = this.resolveType(\n        returnTypeNode,\n        ctxElement,\n        ctxTypes,\n        reportMode\n      );\n      if (!returnType) return null;\n    }\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n    signature.hasRest = hasRest;\n    return node.isNullable ? signature.type.asNullable() : signature.type;\n  }\n\n  private resolveBuiltinNativeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    switch (typeArgument.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.I32: return Type.i32;\n      case TypeKind.ISIZE: if (!this.program.options.isWasm64) return Type.i32;\n      case TypeKind.I64: return Type.i64;\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.U32:\n      case TypeKind.BOOL: return Type.u32;\n      case TypeKind.USIZE: if (!this.program.options.isWasm64) return Type.u32;\n      case TypeKind.U64: return Type.u64;\n      case TypeKind.F32: return Type.f32;\n      case TypeKind.F64: return Type.f64;\n      case TypeKind.V128: return Type.v128;\n      case TypeKind.VOID: return Type.void;\n      default: assert(false);\n    }\n    return null;\n  }\n\n  private resolveBuiltinIndexofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) {\n      if (overload.is(CommonFlags.STATIC)) {\n        assert(overload.signature.parameterTypes.length == 2);\n        return overload.signature.parameterTypes[1];\n      } else {\n        assert(overload.signature.parameterTypes.length == 1);\n        return overload.signature.parameterTypes[0];\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinValueofType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var classReference = typeArgument.classReference;\n    if (!classReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Index_signature_is_missing_in_type_0,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n\n    var overload = classReference.lookupOverload(OperatorKind.INDEXED_GET);\n    if (overload) return overload.signature.returnType;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        typeArgumentNodes[0].range, typeArgument.toString()\n      );\n    }\n    return null;\n  }\n\n  private resolveBuiltinReturnTypeType(\n    /** The type to resolve. */\n    node: NamedTypeNode,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> | null = null,\n    /** How to proceed with eventualy diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var typeArgumentNodes = node.typeArguments;\n    if (!(typeArgumentNodes && typeArgumentNodes.length == 1)) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          node.range, \"1\", (typeArgumentNodes ? typeArgumentNodes.length : 1).toString(10)\n        );\n      }\n      return null;\n    }\n    var typeArgument = this.resolveType(typeArgumentNodes[0], ctxElement, ctxTypes, reportMode);\n    if (!typeArgument) return null;\n    var signatureReference = typeArgument.signatureReference;\n    if (!signatureReference) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          typeArgumentNodes[0].range, typeArgument.toString()\n        );\n      }\n      return null;\n    }\n    return signatureReference.returnType;\n  }\n\n  /** Resolves a type name to the program element it refers to. */\n  resolveTypeName(\n    /** The type name to resolve. */\n    node: TypeName,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** How to proceed with eventual diagnostics. */\n    reportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = ctxElement.lookup(node.identifier.text);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Cannot_find_name_0,\n          node.range, node.identifier.text\n        );\n      }\n      return null;\n    }\n    var prev = node;\n    var next = node.next;\n    while (next) {\n      if (!(element = element.lookupInSelf(next.identifier.text))) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Property_0_does_not_exist_on_type_1,\n            next.range, next.identifier.text, prev.identifier.text\n          );\n        }\n        return null;\n      }\n      prev = next;\n      next = next.next;\n    }\n    return element;\n  }\n\n  /** Resolves an array of type arguments to concrete types. */\n  resolveTypeArguments(\n    /** Type parameter nodes present. */\n    typeParameters: TypeParameterNode[],\n    /** Type argument nodes provided. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** Alternative report node in case of empty type arguments. */\n    alternativeReportNode: Node | null = null,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type[] | null {\n    var minParameterCount = 0;\n    var maxParameterCount = 0;\n    for (let i = 0, k = typeParameters.length; i < k; ++i) {\n      if (!typeParameters[i].defaultType) ++minParameterCount;\n      ++maxParameterCount;\n    }\n    var argumentCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n    if (argumentCount < minParameterCount || argumentCount > maxParameterCount) {\n      this.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        argumentCount\n          ? Range.join(\n              (<NamedTypeNode[]>typeArgumentNodes)[0].range,\n              (<NamedTypeNode[]>typeArgumentNodes)[argumentCount - 1].range\n            )\n          : assert(alternativeReportNode).range,\n        (argumentCount < minParameterCount ? minParameterCount : maxParameterCount).toString(10),\n        argumentCount.toString(10)\n      );\n      return null;\n    }\n    var typeArguments = new Array<Type>(maxParameterCount);\n    for (let i = 0; i < maxParameterCount; ++i) {\n      let type = i < argumentCount\n        ? this.resolveType( // reports\n            (<NamedTypeNode[]>typeArgumentNodes)[i],\n            ctxElement,\n            ctxTypes,\n            reportMode\n          )\n        : this.resolveType( // reports\n            assert(typeParameters[i].defaultType),\n            ctxElement,\n            ctxTypes,\n            reportMode\n          );\n      if (!type) return null;\n      // TODO: check extendsType\n      ctxTypes.set(typeParameters[i].name.text, type);\n      typeArguments[i] = type;\n    }\n    return typeArguments;\n  }\n\n  /** Resolves respectively infers the concrete instance of a function by call context. */\n  maybeInferCall(\n    node: CallExpression,\n    prototype: FunctionPrototype,\n    ctxFlow: Flow,\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var typeArguments = node.typeArguments;\n\n    // resolve generic call if type arguments have been provided\n    if (typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            node.expression.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n      return this.resolveFunctionInclTypeArguments(\n        prototype,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap(ctxFlow.contextualTypeArguments), // don't inherit\n        node,\n        reportMode\n      );\n    }\n\n    // infer generic call if type arguments have been omitted\n    if (prototype.is(CommonFlags.GENERIC)) {\n      let contextualTypeArguments = makeMap<string,Type>(ctxFlow.contextualTypeArguments);\n\n      // fill up contextual types with auto for each generic component\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let typeParameterNames = new Set<string>();\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        contextualTypeArguments.set(name, Type.auto);\n        typeParameterNames.add(name);\n      }\n\n      let parameterNodes = prototype.functionTypeNode.parameters;\n      let numParameters = parameterNodes.length;\n      let argumentNodes = node.arguments;\n      let numArguments = argumentNodes.length;\n\n      // infer types with generic components while updating contextual types\n      for (let i = 0; i < numParameters; ++i) {\n        let argumentExpression = i < numArguments ? argumentNodes[i] : parameterNodes[i].initializer;\n        if (!argumentExpression) { // missing initializer -> too few arguments\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              node.range, numParameters.toString(10), numArguments.toString(10)\n            );\n          }\n          return null;\n        }\n        let typeNode = parameterNodes[i].type;\n        if (typeNode.hasGenericComponent(typeParameterNodes)) {\n          let type = this.resolveExpression(argumentExpression, ctxFlow, Type.auto, ReportMode.SWALLOW);\n          if (type) this.propagateInferredGenericTypes(typeNode, type, ctxFlow, contextualTypeArguments, typeParameterNames);\n        }\n      }\n\n      // apply concrete types to the generic function signature\n      let resolvedTypeArguments = new Array<Type>(numTypeParameters);\n      for (let i = 0; i < numTypeParameters; ++i) {\n        let name = typeParameterNodes[i].name.text;\n        if (contextualTypeArguments.has(name)) {\n          let inferredType = contextualTypeArguments.get(name)!;\n          if (inferredType != Type.auto) {\n            resolvedTypeArguments[i] = inferredType;\n            continue;\n          }\n        }\n        // unused template, e.g. `function test<T>(): void {...}` called as `test()`\n        // invalid because the type is effectively unknown inside the function body\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_argument_expected,\n            node.expression.range.atEnd\n          );\n        }\n        return null;\n      }\n      return this.resolveFunction(\n        prototype,\n        resolvedTypeArguments,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        reportMode\n      );\n    }\n\n    // otherwise resolve the non-generic call as usual\n    return this.resolveFunction(prototype, null, makeMap<string,Type>(), reportMode);\n  }\n\n  /** Updates contextual types with a possibly encapsulated inferred type. */\n  private propagateInferredGenericTypes(\n    /** The inferred type node. */\n    node: TypeNode,\n    /** The inferred type. */\n    type: Type,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual types, i.e. `T`, with unknown types initialized to `auto`. */\n    ctxTypes: Map<string,Type>,\n    /** The names of the type parameters being inferred. */\n    typeParameterNames: Set<string>\n  ): void {\n    if (node.kind == NodeKind.NAMEDTYPE) {\n      let typeArgumentNodes = (<NamedTypeNode>node).typeArguments;\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) { // foo<T>(bar: Array<T>)\n        let classReference = type.classReference;\n        if (classReference) {\n          let classPrototype = this.resolveTypeName((<NamedTypeNode>node).name, ctxFlow.actualFunction);\n          if (!classPrototype || classPrototype.kind != ElementKind.CLASS_PROTOTYPE) return;\n          if (classReference.prototype == <ClassPrototype>classPrototype) {\n            let typeArguments = classReference.typeArguments;\n            if (typeArguments !== null && typeArguments.length == typeArgumentNodes.length) {\n              for (let i = 0, k = typeArguments.length; i < k; ++i) {\n                this.propagateInferredGenericTypes(typeArgumentNodes[i], typeArguments[i], ctxFlow, ctxTypes, typeParameterNames);\n              }\n              return;\n            }\n          }\n        }\n      } else { // foo<T>(bar: T)\n        let name = (<NamedTypeNode>node).name.identifier.text;\n        if (ctxTypes.has(name)) {\n          let currentType = ctxTypes.get(name)!;\n          if (currentType == Type.auto || (typeParameterNames.has(name) && currentType.isAssignableTo(type))) {\n            ctxTypes.set(name, type);\n          }\n        }\n      }\n    } else if (node.kind == NodeKind.FUNCTIONTYPE) { // foo<T>(bar: (baz: T) => i32))\n      let parameterNodes = (<FunctionTypeNode>node).parameters;\n      if (parameterNodes !== null && parameterNodes.length) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          let parameterTypes = signatureReference.parameterTypes;\n          let thisType = signatureReference.thisType;\n          if (parameterTypes.length == parameterNodes.length && !thisType == !(<FunctionTypeNode>node).explicitThisType) {\n            for (let i = 0, k = parameterTypes.length; i < k; ++i) {\n              this.propagateInferredGenericTypes(parameterNodes[i].type, parameterTypes[i], ctxFlow, ctxTypes, typeParameterNames);\n            }\n            this.propagateInferredGenericTypes((<FunctionTypeNode>node).returnType, signatureReference.returnType, ctxFlow, ctxTypes, typeParameterNames);\n            if (thisType) this.propagateInferredGenericTypes((<FunctionTypeNode>node).explicitThisType!, thisType, ctxFlow, ctxTypes, typeParameterNames);\n            return;\n          }\n        }\n      }\n    }\n  }\n\n  /** Gets the concrete type of an element. */\n  getTypeOfElement(element: Element): Type | null {\n    var kind = element.kind;\n    if (kind == ElementKind.GLOBAL) {\n      if (!this.ensureResolvedLazyGlobal(<Global>element, ReportMode.SWALLOW)) return null;\n    }\n    if (isTypedElement(kind)) {\n      let type = (<TypedElement>element).type;\n      assert(type != Type.void);\n      let classReference = type.classReference;\n      if (classReference) {\n        let wrappedType = classReference.wrappedType;\n        if (wrappedType) type = wrappedType;\n      }\n      return type;\n    }\n    if (kind == ElementKind.FUNCTION_TARGET) return (<FunctionTarget>element).type;\n    return null;\n  }\n\n  /** Gets the element of a concrete type. */\n  getElementOfType(type: Type): Element | null {\n    if (type.is(TypeFlags.REFERENCE)) {\n      let classReference = type.classReference;\n      if (classReference) return classReference;\n      let signatureReference = assert(type.signatureReference);\n      return signatureReference.asFunctionTarget(this.program);\n    } else if (type != Type.void) {\n      let wrapperClasses = this.program.wrapperClasses;\n      assert(wrapperClasses.has(type));\n      return wrapperClasses.get(type)!;\n    }\n    return null;\n  }\n\n  // =================================================== Expressions ===================================================\n\n  /** Looks up the program element the specified expression refers to. */\n  lookupExpression(\n    /** The expression to look up. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.lookupAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.lookupBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.lookupCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.lookupCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.lookupElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.lookupFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.lookupIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.lookupThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.lookupSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.lookupInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.lookupLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.lookupNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.lookupPropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.lookupTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.lookupUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.lookupUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an expression to its static type. */\n  resolveExpression(\n    /** The expression to resolve. */\n    node: Expression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    while (node.kind == NodeKind.PARENTHESIZED) { // skip\n      node = (<ParenthesizedExpression>node).expression;\n    }\n    switch (node.kind) {\n      case NodeKind.ASSERTION: {\n        return this.resolveAssertionExpression(\n          <AssertionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.BINARY: {\n        return this.resolveBinaryExpression(\n          <BinaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.CALL: {\n        return this.resolveCallExpression(\n          <CallExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.COMMA: {\n        return this.resolveCommaExpression(\n          <CommaExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.ELEMENTACCESS: {\n        return this.resolveElementAccessExpression(\n          <ElementAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.FUNCTION: {\n        return this.resolveFunctionExpression(\n          <FunctionExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.TRUE: {\n        return this.resolveIdentifierExpression(\n          <IdentifierExpression>node,\n          ctxFlow, ctxType, ctxFlow.actualFunction, reportMode\n        );\n      }\n      case NodeKind.THIS: {\n        return this.resolveThisExpression(\n          <ThisExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.SUPER: {\n        return this.resolveSuperExpression(\n          <SuperExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.INSTANCEOF: {\n        return this.resolveInstanceOfExpression(\n          <InstanceOfExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.LITERAL: {\n        return this.resolveLiteralExpression(\n          <LiteralExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.NEW: {\n        return this.resolveNewExpression(\n          <NewExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.PROPERTYACCESS: {\n        return this.resolvePropertyAccessExpression(\n          <PropertyAccessExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.TERNARY: {\n        return this.resolveTernaryExpression(\n          <TernaryExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        return this.resolveUnaryPostfixExpression(\n          <UnaryPostfixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n      case NodeKind.UNARYPREFIX: {\n        return this.resolveUnaryPrefixExpression(\n          <UnaryPrefixExpression>node,\n          ctxFlow, ctxType, reportMode\n        );\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified identifier expression refers to. */\n  lookupIdentifierExpression(\n    /** The expression to look up. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE:\n      case NodeKind.NULL: {\n        let type = this.resolveIdentifierExpression(node, ctxFlow, Type.auto, ctxElement, reportMode);\n        return type ? this.getElementOfType(type) : null;\n      }\n    }\n    var name = node.text;\n    var element: Element | null;\n    if (element = ctxFlow.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = ctxElement.lookup(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (element = this.program.lookupGlobal(name)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return element;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_find_name_0,\n        node.range, name\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an identifier to its static type. */\n  private resolveIdentifierExpression(\n    /** The expression to resolve. */\n    node: IdentifierExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** Element to search. */\n    ctxElement: Element = ctxFlow.actualFunction, // differs for enums and namespaces\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    switch (node.kind) {\n      case NodeKind.TRUE:\n      case NodeKind.FALSE: return Type.bool;\n      case NodeKind.NULL: {\n        let classReference = ctxType.classReference;\n        return ctxType.is(TypeFlags.REFERENCE) && classReference !== null\n          ? classReference.type.asNullable()\n          : this.program.options.usizeType; // TODO: anyref context?\n      }\n    }\n    var element = this.lookupIdentifierExpression(node, ctxFlow, ctxElement, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.FUNCTION_PROTOTYPE) {\n      let instance = this.resolveFunction(<FunctionPrototype>element, null, makeMap(), reportMode);\n      if (!instance) return null;\n      element = instance;\n    }\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Resolves a lazily compiled global, i.e. a static class field or annotated `@lazy`. */\n  private ensureResolvedLazyGlobal(global: Global, reportMode: ReportMode = ReportMode.REPORT): bool {\n    if (global.is(CommonFlags.RESOLVED)) return true;\n    var type: Type | null;\n    var typeNode = global.typeNode;\n    if (typeNode) {\n      type = this.resolveType(typeNode, global.parent, null, reportMode);\n    } else {\n      type = this.resolveExpression(assert(global.initializerNode), global.file.startFunction.flow, Type.auto, reportMode);\n    }\n    if (!type) return false;\n    global.setType(type); // also sets resolved\n    return true;\n  }\n\n  /** Looks up the program element the specified property access expression refers to. */\n  private lookupPropertyAccessExpression(\n    /** The expression to look up. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetNode = node.expression;\n    var target = this.lookupExpression(targetNode, ctxFlow, ctxType, reportMode); // reports\n    if (!target) return null;\n    var propertyName = node.property.text;\n\n    // Resolve variable-likes to their class type first\n    switch (target.kind) {\n      case ElementKind.GLOBAL: if (!this.ensureResolvedLazyGlobal(<Global>target, reportMode)) return null;\n      case ElementKind.ENUMVALUE:\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: { // someVar.prop\n        let type = (<VariableLikeElement>target).type; assert(type != Type.void);\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, (<VariableLikeElement>target).type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // SomeClass.prop\n        let getterInstance = this.resolveFunction( // reports\n          assert((<PropertyPrototype>target).getterPrototype), // must have a getter\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n        if (!getterInstance) return null;\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.PROPERTY: { // someInstance.prop\n        let getterInstance = assert((<Property>target).getterInstance); // must have a getter\n        let type = getterInstance.signature.returnType;\n        let classReference = type.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(type)) {\n            classReference = wrapperClasses.get(type)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, type.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: { // someInstance[x].prop\n        let elementExpression = assert(this.currentElementExpression);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET);\n        if (!indexedGet) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              elementExpression.range, parent.internalName\n            );\n          }\n          return null;\n        }\n        let returnType = indexedGet.signature.returnType;\n        let classReference = returnType.classReference;\n        if (!classReference) {\n          let wrapperClasses = this.program.wrapperClasses;\n          if (wrapperClasses.has(returnType)) {\n            classReference = wrapperClasses.get(returnType)!;\n          } else {\n            if (reportMode == ReportMode.REPORT) {\n              this.error(\n                DiagnosticCode.Property_0_does_not_exist_on_type_1,\n                node.property.range, propertyName, returnType.toString()\n              );\n            }\n            return null;\n          }\n        }\n        target = classReference;\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: { // function Symbol() + type Symbol = _Symbol\n        let shadowType = target.shadowType;\n        if (shadowType) {\n          if (!shadowType.is(CommonFlags.RESOLVED)) {\n            let resolvedType = this.resolveType(shadowType.typeNode, shadowType.parent, null, reportMode);\n            if (resolvedType) shadowType.setType(resolvedType);\n          }\n          let classReference = shadowType.type.classReference;\n          if (classReference) target = classReference.prototype;\n          break;\n        }\n      }\n    }\n\n    // Look up the member within\n    switch (target.kind) {\n      case ElementKind.CLASS_PROTOTYPE:\n      case ElementKind.CLASS: {\n        do {\n          let members = target.members;\n          if (members && members.has(propertyName)) {\n            this.currentThisExpression = targetNode;\n            this.currentElementExpression = null;\n            return members.get(propertyName)!; // instance FIELD, static GLOBAL, FUNCTION_PROTOTYPE...\n          }\n          // traverse inherited static members on the base prototype if target is a class prototype\n          if (target.kind == ElementKind.CLASS_PROTOTYPE) {\n            if ((<ClassPrototype>target).basePrototype) {\n              target = <ClassPrototype>(<ClassPrototype>target).basePrototype;\n            } else {\n              break;\n            }\n          // traverse inherited instance members on the base class if target is a class instance\n          } else if (target.kind == ElementKind.CLASS) {\n            if ((<Class>target).base) {\n              target = <Class>(<Class>target).base;\n            } else {\n              break;\n            }\n          } else {\n            break;\n          }\n        } while (true);\n        break;\n      }\n      default: { // enums or other namespace-like elements\n        let members = target.members;\n        if (members && members.has(propertyName)) {\n          this.currentThisExpression = targetNode;\n          this.currentElementExpression = null;\n          return members.get(propertyName)!; // static ENUMVALUE, static GLOBAL, static FUNCTION_PROTOTYPE...\n        }\n        break;\n      }\n    }\n\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Property_0_does_not_exist_on_type_1,\n        node.property.range, propertyName, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a property access expression to its static type. */\n  private resolvePropertyAccessExpression(\n    /** The expression to resolve. */\n    node: PropertyAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupPropertyAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified element access expression refers to. */\n  private lookupElementAccessExpression(\n    /** The expression to look up. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var targetExpression = node.expression;\n    var targetType = this.resolveExpression(targetExpression, ctxFlow, ctxType, reportMode);\n    if (!targetType) return null;\n    if (targetType.is(TypeFlags.REFERENCE)) {\n      let classReference = targetType.classReference;\n      if (classReference) {\n        let indexSignature = classReference.indexSignature;\n        if (indexSignature) {\n          this.currentThisExpression = targetExpression;\n          this.currentElementExpression = node.elementExpression;\n          return indexSignature;\n        }\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        targetExpression.range, targetType.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves an element access expression to its static type. */\n  private resolveElementAccessExpression(\n    /** The expression to resolve. */\n    node: ElementAccessExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupElementAccessExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Determines the final type of an integer literal given the specified contextual type. */\n  determineIntegerLiteralType(\n    /** Integer literal value. */\n    intValue: I64,\n    /** Contextual type. */\n    ctxType: Type\n  ): Type {\n    if (!ctxType.is(TypeFlags.REFERENCE)) {\n      // compile to contextual type if matching\n      switch (ctxType.kind) {\n        case TypeKind.I8: {\n          if (i64_is_i8(intValue)) return Type.i8;\n          break;\n        }\n        case TypeKind.U8: {\n          if (i64_is_u8(intValue)) return Type.u8;\n          break;\n        }\n        case TypeKind.I16: {\n          if (i64_is_i16(intValue)) return Type.i16;\n          break;\n        }\n        case TypeKind.U16: {\n          if (i64_is_u16(intValue)) return Type.u16;\n          break;\n        }\n        case TypeKind.I32: {\n          if (i64_is_i32(intValue)) return Type.i32;\n          break;\n        }\n        case TypeKind.U32: {\n          if (i64_is_u32(intValue)) return Type.u32;\n          break;\n        }\n        case TypeKind.BOOL: {\n          if (i64_is_bool(intValue)) return Type.bool;\n          break;\n        }\n        case TypeKind.ISIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_i32(intValue)) return Type.isize32;\n            break;\n          }\n          return Type.isize64;\n        }\n        case TypeKind.USIZE: {\n          if (!this.program.options.isWasm64) {\n            if (i64_is_u32(intValue)) return Type.usize32;\n            break;\n          }\n          return Type.usize64;\n        }\n        case TypeKind.I64: return Type.i64;\n        case TypeKind.U64: return Type.u64;\n        case TypeKind.F32: return Type.f32;\n        case TypeKind.F64: return Type.f64;\n      }\n    }\n    // otherwise compile to best fitting native type\n    if (i64_is_i32(intValue)) return Type.i32;\n    if (i64_is_u32(intValue)) return Type.u32;\n    return Type.i64; // TODO: u64 if positive and larger than i64?\n  }\n\n  /** Looks up the program element the specified assertion expression refers to. */\n  private lookupAssertionExpression(\n    /** The expression to look up. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      return this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    }\n    var type = this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element;\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    this.currentThisExpression = null;\n    this.currentElementExpression = null;\n    return null;\n  }\n\n  /** Resolves an assertion expression to its static type. */\n  private resolveAssertionExpression(\n    /** The expression to resolve. */\n    node: AssertionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    if (node.assertionKind == AssertionKind.NONNULL) {\n      let type = this.resolveExpression(node.expression, ctxFlow, ctxType, reportMode);\n      return type ? type.nonNullableType : null;\n    }\n    return this.resolveType(\n      assert(node.toType), // must be set if not NONNULL\n      ctxFlow.actualFunction,\n      ctxFlow.contextualTypeArguments,\n      reportMode\n    );\n  }\n\n  /** Looks up the program element the specified unary prefix expression refers to. */\n  private lookupUnaryPrefixExpression(\n    /** The expression to look up. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPrefixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary prefix expression to its static type. */\n  private resolveUnaryPrefixExpression(\n    /** The expression to resolve. */\n    node: UnaryPrefixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operand = node.operand;\n    var operator = node.operator;\n    switch (operator) {\n      case Token.MINUS: {\n        // implicitly negate if an integer literal to distinguish between i32/u32/i64\n        if (operand.kind == NodeKind.LITERAL && (<LiteralExpression>operand).literalKind == LiteralKind.INTEGER) {\n          return this.determineIntegerLiteralType(i64_sub(i64_zero, (<IntegerLiteralExpression>operand).value), ctxType);\n        }\n        // fall-through\n      }\n      case Token.PLUS:\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPrefixToken(operator));\n            if (overload) return overload.signature.returnType;\n            let wrappedType = classReference.wrappedType;\n            if (wrappedType) type = wrappedType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || type.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n      case Token.EXCLAMATION: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool; // incl. references\n      }\n      case Token.TILDE: {\n        let type = this.resolveExpression(operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, \"~\", type.toString()\n            );\n          }\n          return null;\n        }\n        return type.intType;\n      }\n      default: assert(false);\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified unary postfix expression refers to. */\n  private lookupUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveUnaryPostfixExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n          node.range, operatorTokenToString(node.operator), type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves an unary postfix expression to its static type. */\n  private resolveUnaryPostfixExpression(\n    /** The expression to resolve. */\n    node: UnaryPostfixExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var operator = node.operator;\n    switch (operator) {\n      case Token.PLUS_PLUS:\n      case Token.MINUS_MINUS: {\n        let type = this.resolveExpression(node.operand, ctxFlow, ctxType, reportMode);\n        if (!type) return null;\n        if (type.is(TypeFlags.REFERENCE)) {\n          let classReference = type.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromUnaryPostfixToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!type.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || !type.is(TypeFlags.VALUE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), type.toString()\n            );\n          }\n          return null;\n        }\n        return type;\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified binary expression refers to. */\n  private lookupBinaryExpression(\n    /** The expression to look up. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveBinaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (element) return element; // otherwise void\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Type_0_is_illegal_in_this_context,\n        node.range, type.toString()\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a binary expression to its static type. */\n  private resolveBinaryExpression(\n    /** The expression to resolve. */\n    node: BinaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var left = node.left;\n    var right = node.right;\n    var operator = node.operator;\n\n    switch (operator) {\n\n      // assignment: result is the target's type\n\n      case Token.EQUALS:\n      case Token.PLUS_EQUALS:\n      case Token.MINUS_EQUALS:\n      case Token.ASTERISK_EQUALS:\n      case Token.ASTERISK_ASTERISK_EQUALS:\n      case Token.SLASH_EQUALS:\n      case Token.PERCENT_EQUALS:\n      case Token.LESSTHAN_LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n      case Token.AMPERSAND_EQUALS:\n      case Token.BAR_EQUALS:\n      case Token.CARET_EQUALS: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n\n      // comparison: result is Bool, preferring overloads, integer/float only\n\n      case Token.LESSTHAN:\n      case Token.GREATERTHAN:\n      case Token.LESSTHAN_EQUALS:\n      case Token.GREATERTHAN_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.isAny(TypeFlags.INTEGER | TypeFlags.FLOAT) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return Type.bool;\n      }\n\n      // equality: result is Bool, preferring overloads, incl. references\n\n      case Token.EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return Type.bool;\n      }\n\n      // identity: result is Bool, not supporting overloads\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS_EQUALS: {\n        return Type.bool;\n      }\n\n      // arithmetics: result is common type of LHS and RHS, preferring overloads\n\n      case Token.PLUS:\n      case Token.MINUS:\n      case Token.ASTERISK:\n      case Token.SLASH:\n      case Token.PERCENT: { // mod has special logic, but also behaves like this\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, leftType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // pow: result is f32 if LHS is f32, otherwise f64, preferring overloads\n\n      case Token.ASTERISK_ASTERISK: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        return leftType == Type.f32 ? Type.f32 : Type.f64;\n      }\n\n      // shift: result is LHS (RHS is converted to LHS), preferring overloads\n\n      case Token.LESSTHAN_LESSTHAN:\n      case Token.GREATERTHAN_GREATERTHAN:\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        if (!leftType.is(TypeFlags.INTEGER) || leftType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              node.range, operatorTokenToString(operator), leftType.toString()\n            );\n          }\n          return null;\n        }\n        return leftType;\n      }\n\n      // bitwise: result is common type of LHS and RHS with floats not being supported, preferring overloads\n\n      case Token.AMPERSAND:\n      case Token.BAR:\n      case Token.CARET: {\n        let leftType = this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n        if (!leftType) return null;\n        if (leftType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.fromBinaryToken(operator));\n            if (overload) return overload.signature.returnType;\n          }\n        }\n        let rightType = this.resolveExpression(right, ctxFlow, ctxType, reportMode);\n        if (!rightType) return null;\n        let commonType = Type.commonDenominator(leftType, rightType, false);\n        if (!commonType || !commonType.is(TypeFlags.INTEGER) || commonType.is(TypeFlags.REFERENCE)) {\n          if (reportMode == ReportMode.REPORT) {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              node.range, operatorTokenToString(operator), leftType.toString(), rightType.toString()\n            );\n          }\n        }\n        return commonType;\n      }\n\n      // logical: result is LHS (RHS is converted to LHS), not supporting overloads\n\n      case Token.AMPERSAND_AMPERSAND:\n      case Token.BAR_BAR: {\n        return this.resolveExpression(left, ctxFlow, ctxType, reportMode);\n      }\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified this expression refers to. */\n  private lookupThisExpression(\n    /** The expression to look up. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let thisLocal = ctxFlow.lookupLocal(CommonSymbols.this_);\n      if (thisLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return thisLocal;\n      }\n    }\n    var parent = ctxFlow.actualFunction.parent;\n    if (parent) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._this_cannot_be_referenced_in_current_location,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a this expression to its static type. */\n  private resolveThisExpression(\n    /** The expression to resolve. */\n    node: ThisExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupThisExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified super expression refers to. */\n  private lookupSuperExpression(\n    /** The expression to look up. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    if (ctxFlow.is(FlowFlags.INLINE_CONTEXT)) {\n      let superLocal = ctxFlow.lookupLocal(CommonSymbols.super_);\n      if (superLocal) {\n        this.currentThisExpression = null;\n        this.currentElementExpression = null;\n        return superLocal;\n      }\n    }\n    var parent: Element | null = ctxFlow.actualFunction.parent;\n    if (parent && parent.kind == ElementKind.CLASS && (parent = (<Class>parent).base)) {\n      this.currentThisExpression = null;\n      this.currentElementExpression = null;\n      return parent;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a super expression to its static type. */\n  private resolveSuperExpression(\n    /** The expression to resolve. */\n    node: SuperExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupSuperExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified literal expression refers to. */\n  private lookupLiteralExpression(\n    /** The expression to look up. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    switch (node.literalKind) {\n      case LiteralKind.INTEGER: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let intType = this.determineIntegerLiteralType(\n          (<IntegerLiteralExpression>node).value,\n          ctxType\n        );\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(intType));\n        return wrapperClasses.get(intType)!;\n      }\n      case LiteralKind.FLOAT: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        let fltType = ctxType == Type.f32 ? Type.f32 : Type.f64;\n        let wrapperClasses = this.program.wrapperClasses;\n        assert(wrapperClasses.has(fltType));\n        return wrapperClasses.get(fltType)!;\n      }\n      case LiteralKind.STRING: {\n        this.currentThisExpression = node;\n        this.currentElementExpression = null;\n        return this.program.stringInstance;\n      }\n      // TODO\n      // case LiteralKind.ARRAY:\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a literal expression to its static type. */\n  private resolveLiteralExpression(\n    /** The expression to resolve. */\n    node: LiteralExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupLiteralExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified call expression refers to. */\n  private lookupCallExpression(\n    /** The expression to look up. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveCallExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a call expression to its static type. */\n  private resolveCallExpression(\n    /** The expression to resolve. */\n    node: CallExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.void,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var targetExpression = node.expression;\n    var target = this.lookupExpression( // reports\n      targetExpression,\n      ctxFlow,\n      ctxType,\n      reportMode\n    );\n    if (!target) return null;\n    switch (target.kind) {\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        // `unchecked` behaves like parenthesized\n        if (\n          (<FunctionPrototype>target).internalName == BuiltinSymbols.unchecked &&\n          node.arguments.length > 0\n        ) {\n          return this.resolveExpression(node.arguments[0], ctxFlow, ctxType, reportMode);\n        }\n        let instance = this.maybeInferCall(node, <FunctionPrototype>target, ctxFlow, reportMode);\n        if (!instance) return null;\n        return instance.signature.returnType;\n      }\n      case ElementKind.FUNCTION_TARGET: return (<FunctionTarget>target).signature.returnType;\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n        targetExpression.range, target.internalName\n      );\n    }\n    return null;\n  }\n\n  /** Looks up the program element the specified comma expression refers to. */\n  private lookupCommaExpression(\n    /** The expression to look up. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var expressions = node.expressions;\n    return this.lookupExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Resolves a comma expression to its static type. */\n  private resolveCommaExpression(\n    /** The expression to resolve. */\n    node: CommaExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var expressions = node.expressions;\n    return this.resolveExpression(expressions[assert(expressions.length) - 1], ctxFlow, ctxType, reportMode);\n  }\n\n  /** Looks up the program element the specified instanceof expression refers to. */\n  private lookupInstanceOfExpression(\n    /** The expression to look up. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var wrapperClasses = this.program.wrapperClasses;\n    assert(wrapperClasses.has(Type.bool));\n    return wrapperClasses.get(Type.bool)!;\n  }\n\n  /** Resolves an instanceof expression to its static type. */\n  private resolveInstanceOfExpression(\n    /** The expression to resolve. */\n    node: InstanceOfExpression,\n    /** Flow to search for scoped locals. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type = Type.auto,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return Type.bool;\n  }\n\n  /** Looks up the program element the specified ternary expression refers to. */\n  private lookupTernaryExpression(\n    /** The expression to look up. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveTernaryExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a ternary expression to its static type. */\n  private resolveTernaryExpression(\n    /** The expression to resolve. */\n    node: TernaryExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var thenType = this.resolveExpression(node.ifThen, ctxFlow, ctxType, reportMode);\n    if (!thenType) return null;\n    var elseType = this.resolveExpression(node.ifElse, ctxFlow, thenType, reportMode);\n    if (!elseType) return null;\n    var commonType = Type.commonDenominator(thenType, elseType, false);\n    if (!commonType) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n          node.range, \"?:\", thenType.toString(), elseType.toString()\n        );\n      }\n    }\n    return commonType;\n  }\n\n  /** Looks up the program element the specified new expression refers to. */\n  private lookupNewExpression(\n    /** The expression to look up. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var element = this.lookupExpression(node.expression, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    if (element.kind == ElementKind.CLASS_PROTOTYPE) {\n      return this.resolveClassInclTypeArguments(\n        <ClassPrototype>element,\n        node.typeArguments,\n        ctxFlow.actualFunction,\n        makeMap<string,Type>(ctxFlow.contextualTypeArguments),\n        node,\n        reportMode\n      );\n    }\n    if (reportMode == ReportMode.REPORT) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        node.range\n      );\n    }\n    return null;\n  }\n\n  /** Resolves a new expression to its static type. */\n  private resolveNewExpression(\n    /** The expression to resolve. */\n    node: NewExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    var element = this.lookupNewExpression(node, ctxFlow, ctxType, reportMode);\n    if (!element) return null;\n    var type = this.getTypeOfElement(element);\n    if (!type) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n          node.range\n        );\n      }\n    }\n    return type;\n  }\n\n  /** Looks up the program element the specified function expression refers to. */\n  private lookupFunctionExpression(\n    /** The expression to look up. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Element | null {\n    var type = this.resolveFunctionExpression(node, ctxFlow, ctxType, reportMode);\n    if (!type) return null;\n    var element = this.getElementOfType(type);\n    if (!element) {\n      if (reportMode == ReportMode.REPORT) {\n        this.error(\n          DiagnosticCode.Type_0_is_illegal_in_this_context,\n          node.range, type.toString()\n        );\n      }\n    }\n    return element;\n  }\n\n  /** Resolves a function expression to its static type. */\n  private resolveFunctionExpression(\n    /** The expression to resolve. */\n    node: FunctionExpression,\n    /** Contextual flow. */\n    ctxFlow: Flow,\n    /** Contextual type. */\n    ctxType: Type,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Type | null {\n    return this.resolveFunctionType(node.declaration.signature, ctxFlow.actualFunction, ctxFlow.contextualTypeArguments, reportMode);\n  }\n\n  // ==================================================== Elements =====================================================\n\n  /** Resolves a function prototype using the specified concrete type arguments. */\n  resolveFunction(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var classInstance: Class | null = null; // if an instance method\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Instance method prototypes are pre-bound to their concrete class as their parent\n    if (prototype.is(CommonFlags.INSTANCE)) {\n      assert(actualParent.kind == ElementKind.CLASS);\n      classInstance = <Class>actualParent;\n\n      // check if this exact concrete class and function combination is known already\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n\n      // inherit class specific type arguments\n      let classTypeArguments = classInstance.typeArguments;\n      if (classTypeArguments) {\n        let classTypeParameters = assert(classInstance.prototype.typeParameterNodes);\n        let numClassTypeArguments = classTypeParameters.length;\n        assert(numClassTypeArguments == classTypeParameters.length);\n        for (let i = 0; i < numClassTypeArguments; ++i) {\n          let classTypeParameterName = classTypeParameters[i].name.text;\n          if (!ctxTypes.has(classTypeParameterName)) {\n            ctxTypes.set(\n              classTypeParameterName,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n    } else {\n      assert(actualParent.kind != ElementKind.CLASS); // must not be pre-bound\n      let resolvedInstance = prototype.getResolvedInstance(instanceKey);\n      if (resolvedInstance) return resolvedInstance;\n    }\n\n    // override whatever is contextual with actual function type arguments\n    var signatureNode = prototype.functionTypeNode;\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var numFunctionTypeArguments: i32;\n    if (typeArguments && (numFunctionTypeArguments = typeArguments.length)) {\n      assert(typeParameterNodes && numFunctionTypeArguments == typeParameterNodes.length);\n      for (let i = 0; i < numFunctionTypeArguments; ++i) {\n        ctxTypes.set(\n          (<TypeParameterNode[]>typeParameterNodes)[i].name.text,\n          typeArguments[i]\n        );\n      }\n    } else {\n      assert(!typeParameterNodes || typeParameterNodes.length == 0);\n    }\n\n    // resolve `this` type if applicable\n    var thisType: Type | null = null;\n    var explicitThisType = signatureNode.explicitThisType;\n    if (explicitThisType) {\n      thisType = this.resolveType(\n        explicitThisType,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!thisType) return null;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    } else if (classInstance) {\n      thisType = classInstance.type;\n      ctxTypes.set(CommonSymbols.this_, thisType);\n    }\n\n    // resolve parameter types\n    var signatureParameters = signatureNode.parameters;\n    var numSignatureParameters = signatureParameters.length;\n    var parameterTypes = new Array<Type>(numSignatureParameters);\n    var parameterNames = new Array<string>(numSignatureParameters);\n    var requiredParameters = 0;\n    for (let i = 0; i < numSignatureParameters; ++i) {\n      let parameterDeclaration = signatureParameters[i];\n      if (parameterDeclaration.parameterKind == ParameterKind.DEFAULT) {\n        requiredParameters = i + 1;\n      }\n      let typeNode = parameterDeclaration.type;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let parameterType = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!parameterType) return null;\n      parameterTypes[i] = parameterType;\n      parameterNames[i] = parameterDeclaration.name.text;\n    }\n\n    // resolve return type\n    var returnType: Type;\n    if (prototype.is(CommonFlags.SET)) {\n      returnType = Type.void; // not annotated\n    } else if (prototype.is(CommonFlags.CONSTRUCTOR)) {\n      returnType = assert(classInstance).type; // not annotated\n    } else {\n      let typeNode = signatureNode.returnType;\n      if (isTypeOmitted(typeNode)) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n        }\n        return null;\n      }\n      let type = this.resolveType(\n        typeNode,\n        prototype.parent, // relative to function\n        ctxTypes,\n        reportMode\n      );\n      if (!type) return null;\n      returnType = type;\n    }\n\n    var signature = new Signature(this.program, parameterTypes, returnType, thisType);\n    signature.parameterNames = parameterNames;\n    signature.requiredParameters = requiredParameters;\n\n    var nameInclTypeParameters = prototype.name;\n    if (instanceKey.length) nameInclTypeParameters += \"<\" + instanceKey + \">\";\n    var instance = new Function(\n      nameInclTypeParameters,\n      prototype,\n      signature,\n      ctxTypes\n    );\n    prototype.setResolvedInstance(instanceKey, instance);\n    return instance;\n  }\n\n  /** Resolves a function prototypeby first resolving the specified type arguments. */\n  resolveFunctionInclTypeArguments(\n    /** The prototype of the function. */\n    prototype: FunctionPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Function | null {\n    var actualParent = prototype.parent.kind == ElementKind.PROPERTY_PROTOTYPE\n      ? prototype.parent.parent\n      : prototype.parent;\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n\n      // If this is an instance method, first apply the class's type arguments\n      if (prototype.is(CommonFlags.INSTANCE)) {\n        assert(actualParent.kind == ElementKind.CLASS);\n        let classTypeArguments = (<Class>actualParent).typeArguments;\n        if (classTypeArguments) {\n          let typeParameterNodes = assert((<Class>actualParent).prototype.typeParameterNodes);\n          let numClassTypeArguments = classTypeArguments.length;\n          assert(numClassTypeArguments == typeParameterNodes.length);\n          for (let i = 0; i < numClassTypeArguments; ++i) {\n            ctxTypes.set(\n              typeParameterNodes[i].name.text,\n              classTypeArguments[i]\n            );\n          }\n        }\n      }\n\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes),\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveFunction(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n\n  /** Resolves a class prototype using the specified concrete type arguments. */\n  resolveClass(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided. */\n    typeArguments: Type[] | null,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type> = makeMap<string,Type>(),\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var instanceKey = typeArguments ? typesToString(typeArguments) : \"\";\n\n    // Check if this exact instance has already been resolved\n    var instance = prototype.getResolvedInstance(instanceKey);\n    if (instance) return instance;\n\n    // Insert contextual type arguments for this operation. Internally, this method is always\n    // called with matching type parameter / argument counts.\n    if (typeArguments) {\n      let typeParameterNodes = assert(prototype.typeParameterNodes);\n      let numTypeParameters = typeParameterNodes.length;\n      let numTypeArguments = typeArguments.length;\n      assert(numTypeArguments == numTypeParameters);\n      for (let i = 0; i < numTypeArguments; ++i) {\n        ctxTypes.set(typeParameterNodes[i].name.text, typeArguments[i]);\n      }\n    } else {\n      let typeParameterNodes = prototype.typeParameterNodes;\n      assert(!(typeParameterNodes && typeParameterNodes.length));\n    }\n\n    // Resolve base class if applicable\n    var basePrototype = prototype.basePrototype;\n    var baseClass: Class | null = null;\n    if (basePrototype) {\n      let extendsNode = assert(prototype.extendsNode); // must be present if it has a base prototype\n      baseClass = this.resolveClassInclTypeArguments(\n        basePrototype,\n        extendsNode.typeArguments,\n        prototype.parent, // relative to derived class\n        makeMap(ctxTypes), // don't inherit\n        extendsNode,\n        reportMode\n      );\n      if (!baseClass) return null;\n    }\n\n    // Construct the instance and remember that it has been resolved already\n    var nameInclTypeParamters = prototype.name;\n    if (instanceKey.length) nameInclTypeParamters += \"<\" + instanceKey + \">\";\n    instance = new Class(nameInclTypeParamters, prototype, typeArguments, baseClass);\n    instance.contextualTypeArguments = ctxTypes;\n    prototype.setResolvedInstance(instanceKey, instance);\n\n    // Inherit base class members and set up the initial memory offset for own fields\n    var memoryOffset: u32 = 0;\n    if (baseClass) {\n      let baseMembers = baseClass.members;\n      if (baseMembers) {\n        let instanceMembers = instance.members;\n        if (!instanceMembers) instance.members = instanceMembers = new Map();\n        for (let [baseMemberName, baseMember] of baseMembers) {\n          instanceMembers.set(baseMemberName, baseMember);\n        }\n      }\n      memoryOffset = baseClass.currentMemoryOffset;\n    }\n\n    // Resolve instance members\n    var instanceMemberPrototypes = prototype.instanceMembers;\n    if (instanceMemberPrototypes) {\n      for (let member of instanceMemberPrototypes.values()) {\n        switch (member.kind) {\n\n          // Lay out fields in advance\n          case ElementKind.FIELD_PROTOTYPE: {\n            let instanceMembers = instance.members;\n            if (!instanceMembers) instance.members = instanceMembers = new Map();\n            else if (instanceMembers.has(member.name)) {\n              let existing = instanceMembers.get(member.name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                (<FieldPrototype>member).identifierNode.range,\n                existing.declaration.name.range,\n                member.name\n              );\n              break;\n            }\n            let fieldTypeNode = (<FieldPrototype>member).typeNode;\n            let fieldType: Type | null = null;\n            // TODO: handle duplicate non-private fields specifically?\n            if (!fieldTypeNode) {\n              if (baseClass) {\n                let baseMembers = baseClass.members;\n                if (baseMembers && baseMembers.has((<FieldPrototype>member).name)) {\n                  let baseField = baseMembers.get((<FieldPrototype>member).name)!;\n                  if (!baseField.is(CommonFlags.PRIVATE)) {\n                    assert(baseField.kind == ElementKind.FIELD);\n                    fieldType = (<Field>baseField).type;\n                  }\n                }\n              }\n              if (!fieldType) {\n                if (reportMode == ReportMode.REPORT) {\n                  this.error(\n                    DiagnosticCode.Type_expected,\n                    (<FieldPrototype>member).identifierNode.range.atEnd\n                  );\n                }\n              }\n            } else {\n              fieldType = this.resolveType(\n                fieldTypeNode,\n                prototype.parent, // relative to class\n                instance.contextualTypeArguments,\n                reportMode\n              );\n            }\n            if (!fieldType) break; // did report above\n            let fieldInstance = new Field(<FieldPrototype>member, instance, fieldType);\n            assert(isPowerOf2(fieldType.byteSize));\n            let mask = fieldType.byteSize - 1;\n            if (memoryOffset & mask) memoryOffset = (memoryOffset | mask) + 1;\n            fieldInstance.memoryOffset = memoryOffset;\n            memoryOffset += fieldType.byteSize;\n            instance.add(member.name, fieldInstance); // reports\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            let boundPrototype = (<FunctionPrototype>member).toBound(instance);\n            instance.add(boundPrototype.name, boundPrototype); // reports\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let propertyInstance = new Property(<PropertyPrototype>member, instance);\n            let getterPrototype = (<PropertyPrototype>member).getterPrototype;\n            if (getterPrototype) {\n              let getterInstance = this.resolveFunction(\n                getterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (getterInstance) {\n                propertyInstance.getterInstance = getterInstance;\n                propertyInstance.setType(getterInstance.signature.returnType);\n              }\n            }\n            let setterPrototype = (<PropertyPrototype>member).setterPrototype;\n            if (setterPrototype) {\n              let setterInstance = this.resolveFunction(\n                setterPrototype.toBound(instance),\n                null,\n                makeMap(instance.contextualTypeArguments),\n                reportMode\n              );\n              if (setterInstance) {\n                propertyInstance.setterInstance = setterInstance;\n                if (!propertyInstance.is(CommonFlags.RESOLVED)) {\n                  assert(setterInstance.signature.parameterTypes.length == 1);\n                  propertyInstance.setType(setterInstance.signature.parameterTypes[0]);\n                }\n              }\n            }\n            instance.add(propertyInstance.name, propertyInstance); // reports\n            break;\n          }\n          default: assert(false);\n        }\n      }\n    }\n\n    // Finalize memory offset\n    instance.currentMemoryOffset = memoryOffset;\n\n    // Link _own_ constructor if present\n    {\n      let ctorPrototype = instance.lookupInSelf(CommonSymbols.constructor);\n      if (ctorPrototype && ctorPrototype.parent === instance) {\n        assert(ctorPrototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n        let ctorInstance = this.resolveFunction(\n          <FunctionPrototype>ctorPrototype,\n          null,\n          instance.contextualTypeArguments,\n          reportMode\n        );\n        if (ctorInstance) instance.constructorInstance = <Function>ctorInstance;\n      }\n    }\n\n    // Fully resolve operator overloads (don't have type parameters on their own)\n    for (let [kind, overloadPrototype] of prototype.overloadPrototypes) {\n      assert(kind != OperatorKind.INVALID);\n      let operatorInstance: Function | null;\n      if (overloadPrototype.is(CommonFlags.INSTANCE)) {\n        let boundPrototype = overloadPrototype.toBound(instance);\n        operatorInstance = this.resolveFunction(\n          boundPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      } else {\n        operatorInstance = this.resolveFunction(\n          overloadPrototype,\n          null,\n          makeMap<string,Type>(),\n          reportMode\n        );\n      }\n      if (!operatorInstance) continue;\n      let overloads = instance.overloads;\n      if (!overloads) instance.overloads = overloads = new Map();\n      // inc/dec are special in that an instance overload attempts to re-assign\n      // the corresponding value, thus requiring a matching return type, while a\n      // static overload works like any other overload.\n      if (operatorInstance.is(CommonFlags.INSTANCE)) {\n        switch (kind) {\n          case OperatorKind.PREFIX_INC:\n          case OperatorKind.PREFIX_DEC:\n          case OperatorKind.POSTFIX_INC:\n          case OperatorKind.POSTFIX_DEC: {\n            let returnType = operatorInstance.signature.returnType;\n            if (!returnType.isAssignableTo(instance.type)) {\n              if (reportMode == ReportMode.REPORT) {\n                this.error(\n                  DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n                  overloadPrototype.functionTypeNode.returnType.range, returnType.toString(), instance.type.toString()\n                );\n              }\n            }\n          }\n        }\n      }\n      if (!overloads.has(kind)) {\n        overloads.set(kind, operatorInstance);\n        if (kind == OperatorKind.INDEXED_GET || kind == OperatorKind.INDEXED_SET) {\n          let index = instance.indexSignature;\n          if (!index) instance.indexSignature = index = new IndexSignature(instance);\n          if (kind == OperatorKind.INDEXED_GET) {\n            index.setType(operatorInstance.signature.returnType);\n          }\n        }\n      } else {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Duplicate_decorator,\n            operatorInstance.declaration.range\n          );\n        }\n      }\n    }\n    return instance;\n  }\n\n  /** Resolves a class prototype by first resolving the specified type arguments. */\n  resolveClassInclTypeArguments(\n    /** The prototype of the class. */\n    prototype: ClassPrototype,\n    /** Type arguments provided to be resolved. */\n    typeArgumentNodes: TypeNode[] | null,\n    /** Contextual element. */\n    ctxElement: Element,\n    /** Contextual types, i.e. `T`. */\n    ctxTypes: Map<string,Type>,\n    /** The node to use when reporting intermediate errors. */\n    reportNode: Node,\n    /** How to proceed with eventual diagnostics. */\n    reportMode: ReportMode = ReportMode.REPORT\n  ): Class | null {\n    var resolvedTypeArguments: Type[] | null = null;\n\n    // Resolve type arguments if generic\n    if (prototype.is(CommonFlags.GENERIC)) {\n      resolvedTypeArguments = this.resolveTypeArguments( // reports\n        assert(prototype.typeParameterNodes), // must be present if generic\n        typeArgumentNodes,\n        ctxElement,\n        ctxTypes,\n        reportNode,\n        reportMode\n      );\n      if (!resolvedTypeArguments) return null;\n\n    // Otherwise make sure that no type arguments have been specified\n    } else {\n      if (typeArgumentNodes !== null && typeArgumentNodes.length) {\n        if (reportMode == ReportMode.REPORT) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_generic,\n            reportNode.range, prototype.internalName\n          );\n        }\n        return null;\n      }\n    }\n\n    // Continue with concrete types\n    return this.resolveClass(\n      prototype,\n      resolvedTypeArguments,\n      ctxTypes,\n      reportMode\n    );\n  }\n}\n","/**\n * A control flow analyzer.\n * @module flow\n *//***/\n\nimport {\n  Type,\n  TypeFlags,\n  TypeKind\n} from \"./types\";\n\nimport {\n  Local,\n  Function,\n  Element,\n  ElementKind,\n  Global\n} from \"./program\";\n\nimport {\n  NativeType,\n  ExpressionId,\n  ExpressionRef,\n\n  getExpressionId,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetValue,\n  getGlobalGetName,\n  getBinaryOp,\n  BinaryOp,\n  getBinaryLeft,\n  getConstValueI32,\n  getBinaryRight,\n  getUnaryOp,\n  UnaryOp,\n  getExpressionType,\n  getConstValueI64Low,\n  getConstValueF32,\n  getConstValueF64,\n  getLoadBytes,\n  isLoadSigned,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfTrue,\n  getIfFalse,\n  getSelectThen,\n  getSelectElse,\n  getCallTarget,\n  getLocalSetIndex,\n  getIfCondition,\n  getConstValueI64High,\n  getUnaryValue,\n  getCallOperand,\n  traverse\n} from \"./module\";\n\nimport {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node\n} from \"./ast\";\n\n/** Control flow flags indicating specific conditions. */\nexport const enum FlowFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  // categorical\n\n  /** This flow returns. */\n  RETURNS = 1 << 0,\n  /** This flow returns a wrapped value. */\n  RETURNS_WRAPPED = 1 << 1,\n  /** This flow returns a non-null value. */\n  RETURNS_NONNULL = 1 << 2,\n  /** This flow throws. */\n  THROWS = 1 << 3,\n  /** This flow breaks. */\n  BREAKS = 1 << 4,\n  /** This flow continues. */\n  CONTINUES = 1 << 5,\n  /** This flow allocates. Constructors only. */\n  ALLOCATES = 1 << 6,\n  /** This flow calls super. Constructors only. */\n  CALLS_SUPER = 1 << 7,\n  /** This flow terminates (returns, throws or continues). */\n  TERMINATES = 1 << 8,\n\n  // conditional\n\n  /** This flow conditionally returns in a child flow. */\n  CONDITIONALLY_RETURNS = 1 << 9,\n  /** This flow conditionally throws in a child flow. */\n  CONDITIONALLY_THROWS = 1 << 10,\n  /** This flow conditionally terminates in a child flow. */\n  CONDITIONALLY_TERMINATES = 1 << 11,\n  /** This flow conditionally breaks in a child flow. */\n  CONDITIONALLY_BREAKS = 1 << 12,\n  /** This flow conditionally continues in a child flow. */\n  CONDITIONALLY_CONTINUES = 1 << 13,\n  /** This flow conditionally allocates in a child flow. Constructors only. */\n  CONDITIONALLY_ALLOCATES = 1 << 14,\n\n  // special\n\n  /** This is an inlining flow. */\n  INLINE_CONTEXT = 1 << 15,\n  /** This is a flow with explicitly disabled bounds checking. */\n  UNCHECKED_CONTEXT = 1 << 16,\n\n  // masks\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = FlowFlags.RETURNS\n                  | FlowFlags.RETURNS_WRAPPED\n                  | FlowFlags.RETURNS_NONNULL\n                  | FlowFlags.THROWS\n                  | FlowFlags.BREAKS\n                  | FlowFlags.CONTINUES\n                  | FlowFlags.ALLOCATES\n                  | FlowFlags.CALLS_SUPER\n                  | FlowFlags.TERMINATES,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = FlowFlags.CONDITIONALLY_RETURNS\n                  | FlowFlags.CONDITIONALLY_THROWS\n                  | FlowFlags.CONDITIONALLY_BREAKS\n                  | FlowFlags.CONDITIONALLY_CONTINUES\n                  | FlowFlags.CONDITIONALLY_ALLOCATES\n}\n\n/** Flags indicating the current state of a local. */\nexport enum LocalFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Local is constant. */\n  CONSTANT = 1 << 0,\n  /** Local is a function parameter. */\n  PARAMETER = 1 << 1,\n  /** Local is properly wrapped. Relevant for small integers. */\n  WRAPPED = 1 << 2,\n  /** Local is non-null. */\n  NONNULL = 1 << 3,\n  /** Local is read from. */\n  READFROM = 1 << 4,\n  /** Local is written to. */\n  WRITTENTO = 1 << 5,\n  /** Local is retained. */\n  RETAINED = 1 << 6,\n  /** Local is returned. */\n  RETURNED = 1 << 7,\n\n  /** Local is conditionally read from. */\n  CONDITIONALLY_READFROM = 1 << 8,\n  /** Local is conditionally written to. */\n  CONDITIONALLY_WRITTENTO = 1 << 9,\n  /** Local must be conditionally retained. */\n  CONDITIONALLY_RETAINED = 1 << 10,\n  /** Local is conditionally returned. */\n  CONDITIONALLY_RETURNED = 1 << 11,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = CONSTANT\n                  | PARAMETER\n                  | WRAPPED\n                  | NONNULL\n                  | READFROM\n                  | WRITTENTO\n                  | RETAINED\n                  | RETURNED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = RETAINED\n                  | CONDITIONALLY_READFROM\n                  | CONDITIONALLY_WRITTENTO\n                  | CONDITIONALLY_RETAINED\n                  | CONDITIONALLY_RETURNED,\n\n  /** Any written to flag. */\n  ANY_WRITTENTO = WRITTENTO\n                | CONDITIONALLY_WRITTENTO,\n\n  /** Any retained flag. */\n  ANY_RETAINED = RETAINED\n               | CONDITIONALLY_RETAINED,\n\n  /** Any returned flag. */\n  ANY_RETURNED = RETURNED\n               | CONDITIONALLY_RETURNED\n}\nexport namespace LocalFlags {\n  export function join(left: LocalFlags, right: LocalFlags): LocalFlags {\n    return ((left & LocalFlags.ANY_CATEGORICAL) & (right & LocalFlags.ANY_CATEGORICAL))\n         |  (left & LocalFlags.ANY_CONDITIONAL) | (right & LocalFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** Flags indicating the current state of a field. */\nexport enum FieldFlags {\n  /** No specific conditions. */\n  NONE = 0,\n\n  /** Field is initialized. Relevant in constructors. */\n  INITIALIZED = 1 << 0,\n  /** Field is conditionally initialized. Relevant in constructors. */\n  CONDITIONALLY_INITIALIZED = 1 << 1,\n\n  /** Any categorical flag. */\n  ANY_CATEGORICAL = INITIALIZED,\n\n  /** Any conditional flag. */\n  ANY_CONDITIONAL = CONDITIONALLY_INITIALIZED\n}\nexport namespace FieldFlags {\n  export function join(left: FieldFlags, right: FieldFlags): FieldFlags {\n    return ((left & FieldFlags.ANY_CATEGORICAL) & (right & FieldFlags.ANY_CATEGORICAL))\n         |  (left & FieldFlags.ANY_CONDITIONAL) | (right & FieldFlags.ANY_CONDITIONAL);\n  }\n}\n\n/** A control flow evaluator. */\nexport class Flow {\n\n  /** Parent flow. */\n  parent: Flow | null;\n  /** Flow flags indicating specific conditions. */\n  flags: FlowFlags;\n  /** Function this flow belongs to. */\n  parentFunction: Function;\n  /** The label we break to when encountering a continue statement. */\n  continueLabel: string | null;\n  /** The label we break to when encountering a break statement. */\n  breakLabel: string | null;\n  /** The current return type. */\n  returnType: Type;\n  /** The current contextual type arguments. */\n  contextualTypeArguments: Map<string,Type> | null;\n  /** Scoped local variables. */\n  scopedLocals: Map<string,Local> | null = null;\n  /** Local flags. */\n  localFlags: LocalFlags[];\n  /** Field flags. Relevant in constructors. */\n  fieldFlags: Map<string,FieldFlags> | null = null;\n  /** Function being inlined, when inlining. */\n  inlineFunction: Function | null;\n  /** The label we break to when encountering a return statement, when inlining. */\n  inlineReturnLabel: string | null;\n\n  /** Creates the parent flow of the specified function. */\n  static create(parentFunction: Function): Flow {\n    var flow = new Flow();\n    flow.parent = null;\n    flow.flags = FlowFlags.NONE;\n    flow.parentFunction = parentFunction;\n    flow.continueLabel = null;\n    flow.breakLabel = null;\n    flow.returnType = parentFunction.signature.returnType;\n    flow.contextualTypeArguments = parentFunction.contextualTypeArguments;\n    flow.localFlags = [];\n    flow.inlineFunction = null;\n    flow.inlineReturnLabel = null;\n    return flow;\n  }\n\n  /** Creates an inline flow within `parentFunction`. */\n  static createInline(parentFunction: Function, inlineFunction: Function): Flow {\n    var flow = Flow.create(parentFunction);\n    flow.set(FlowFlags.INLINE_CONTEXT);\n    flow.inlineFunction = inlineFunction;\n    flow.inlineReturnLabel = inlineFunction.internalName + \"|inlined.\" + (inlineFunction.nextInlineId++).toString(10);\n    flow.returnType = inlineFunction.signature.returnType;\n    flow.contextualTypeArguments = inlineFunction.contextualTypeArguments;\n    return flow;\n  }\n\n  private constructor() { }\n\n  /** Gets the actual function being compiled, The inlined function when inlining, otherwise the parent function. */\n  get actualFunction(): Function {\n    return this.inlineFunction || this.parentFunction;\n  }\n\n  /** Tests if this flow has the specified flag or flags. */\n  is(flag: FlowFlags): bool { return (this.flags & flag) == flag; }\n  /** Tests if this flow has one of the specified flags. */\n  isAny(flag: FlowFlags): bool { return (this.flags & flag) != 0; }\n  /** Sets the specified flag or flags. */\n  set(flag: FlowFlags): void { this.flags |= flag; }\n  /** Unsets the specified flag or flags. */\n  unset(flag: FlowFlags): void { this.flags &= ~flag; }\n\n  /** Forks this flow to a child flow. */\n  fork(): Flow {\n    var branch = new Flow();\n    branch.parent = this;\n    branch.flags = this.flags;\n    branch.parentFunction = this.parentFunction;\n    branch.continueLabel = this.continueLabel;\n    branch.breakLabel = this.breakLabel;\n    branch.returnType = this.returnType;\n    branch.contextualTypeArguments = this.contextualTypeArguments;\n    branch.localFlags = this.localFlags.slice();\n    branch.inlineFunction = this.inlineFunction;\n    branch.inlineReturnLabel = this.inlineReturnLabel;\n    return branch;\n  }\n\n  /** Gets a free temporary local of the specified type. */\n  getTempLocal(type: Type, except: Set<i32> | null = null): Local {\n    var parentFunction = this.parentFunction;\n    var temps: Local[] | null;\n    switch (type.toNativeType()) {\n      case NativeType.I32: { temps = parentFunction.tempI32s; break; }\n      case NativeType.I64: { temps = parentFunction.tempI64s; break; }\n      case NativeType.F32: { temps = parentFunction.tempF32s; break; }\n      case NativeType.F64: { temps = parentFunction.tempF64s; break; }\n      case NativeType.V128: { temps = parentFunction.tempV128s; break; }\n      case NativeType.Anyref: { temps = parentFunction.tempAnyrefs; break; }\n      default: throw new Error(\"concrete type expected\");\n    }\n    var local: Local;\n    if (except) {\n      if (temps && temps.length) {\n        for (let i = 0, k = temps.length; i < k; ++i) {\n          if (!except.has(temps[i].index)) {\n            local = temps[i];\n            let k = temps.length - 1;\n            while (i < k) unchecked(temps[i] = temps[i++ + 1]);\n            temps.length = k;\n            local.type = type;\n            local.flags = CommonFlags.NONE;\n            this.unsetLocalFlag(local.index, ~0);\n            return local;\n          }\n        }\n      }\n      local = parentFunction.addLocal(type);\n    } else {\n      if (temps && temps.length) {\n        local = temps.pop()!;\n        local.type = type;\n        local.flags = CommonFlags.NONE;\n      } else {\n        local = parentFunction.addLocal(type);\n      }\n    }\n    this.unsetLocalFlag(local.index, ~0);\n    return local;\n  }\n\n  /** Gets a local that sticks around until this flow is exited, and then released. */\n  getAutoreleaseLocal(type: Type, except: Set<i32> | null = null): Local {\n    var local = this.getTempLocal(type, except);\n    local.set(CommonFlags.SCOPED);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    scopedLocals.set(\"~auto\" + (this.parentFunction.nextAutoreleaseId++), local);\n    this.setLocalFlag(local.index, LocalFlags.RETAINED);\n    return local;\n  }\n\n  /** Frees the temporary local for reuse. */\n  freeTempLocal(local: Local): void {\n    if (local.is(CommonFlags.INLINED)) return;\n    assert(local.index >= 0);\n    var parentFunction = this.parentFunction;\n    var temps: Local[];\n    assert(local.type != null); // internal error\n    switch ((<Type>local.type).toNativeType()) {\n      case NativeType.I32: {\n        temps = parentFunction.tempI32s || (parentFunction.tempI32s = []);\n        break;\n      }\n      case NativeType.I64: {\n        temps = parentFunction.tempI64s || (parentFunction.tempI64s = []);\n        break;\n      }\n      case NativeType.F32: {\n        temps = parentFunction.tempF32s || (parentFunction.tempF32s = []);\n        break;\n      }\n      case NativeType.F64: {\n        temps = parentFunction.tempF64s || (parentFunction.tempF64s = []);\n        break;\n      }\n      case NativeType.V128: {\n        temps = parentFunction.tempV128s || (parentFunction.tempV128s = []);\n        break;\n      }\n      case NativeType.Anyref: {\n        temps = parentFunction.tempAnyrefs || (parentFunction.tempAnyrefs = []);\n        break;\n      }\n      default: throw new Error(\"concrete type expected\");\n    }\n    assert(local.index >= 0);\n    temps.push(local);\n  }\n\n  /** Gets the scoped local of the specified name. */\n  getScopedLocal(name: string): Local | null {\n    var scopedLocals = this.scopedLocals;\n    if (scopedLocals && scopedLocals.has(name)) return scopedLocals.get(name)!;\n    return null;\n  }\n\n  /** Adds a new scoped local of the specified name. */\n  addScopedLocal(name: string, type: Type, except: Set<i32> | null = null): Local {\n    var scopedLocal = this.getTempLocal(type, except);\n    var scopedLocals = this.scopedLocals;\n    if (!scopedLocals) this.scopedLocals = scopedLocals = new Map();\n    else assert(!scopedLocals.has(name));\n    scopedLocal.set(CommonFlags.SCOPED);\n    scopedLocals.set(name, scopedLocal);\n    return scopedLocal;\n  }\n\n  /** Adds a new scoped alias for the specified local. For example `super` aliased to the `this` local. */\n  addScopedAlias(name: string, type: Type, index: i32, reportNode: Node | null = null): Local {\n    if (!this.scopedLocals) this.scopedLocals = new Map();\n    else {\n      let existingLocal = this.scopedLocals.get(name);\n      if (existingLocal) {\n        if (reportNode) {\n          if (!existingLocal.declaration.range.source.isNative) {\n            this.parentFunction.program.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range,\n              existingLocal.declaration.name.range,\n              name\n            );\n          } else {\n            this.parentFunction.program.error(\n              DiagnosticCode.Duplicate_identifier_0,\n              reportNode.range, name\n            );\n          }\n        }\n        return existingLocal;\n      }\n    }\n    assert(index < this.parentFunction.localsByIndex.length);\n    var scopedAlias = new Local(name, index, type, this.parentFunction);\n    // not flagged as SCOPED as it must not be free'd when the flow is finalized\n    this.scopedLocals.set(name, scopedAlias);\n    return scopedAlias;\n  }\n\n  /** Tests if this flow has any scoped locals that must be free'd. */\n  get hasScopedLocals(): bool {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  /** Frees this flow's scoped variables and returns its parent flow. */\n  freeScopedLocals(): void {\n    if (this.scopedLocals) {\n      for (let scopedLocal of this.scopedLocals.values()) {\n        if (scopedLocal.is(CommonFlags.SCOPED)) { // otherwise an alias\n          this.freeTempLocal(scopedLocal);\n        }\n      }\n      this.scopedLocals = null;\n    }\n  }\n\n  /** Looks up the local of the specified name in the current scope. */\n  lookupLocal(name: string): Local | null {\n    var current: Flow | null = this;\n    var scope: Map<String,Local> | null;\n    do if ((scope = current.scopedLocals) && (scope.has(name))) return scope.get(name)!;\n    while (current = current.parent);\n    return this.parentFunction.localsByName.get(name)!;\n  }\n\n  /** Looks up the element with the specified name relative to the scope of this flow. */\n  lookup(name: string): Element | null {\n    var element = this.lookupLocal(name);\n    if (element) return element;\n    return this.actualFunction.lookup(name);\n  }\n\n  /** Tests if the local at the specified index has the specified flag or flags. */\n  isLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) == flag;\n  }\n\n  /** Tests if the local at the specified index has any of the specified flags. */\n  isAnyLocalFlag(index: i32, flag: LocalFlags, defaultIfInlined: bool = true): bool {\n    if (index < 0) return defaultIfInlined;\n    var localFlags = this.localFlags;\n    return index < localFlags.length && (unchecked(this.localFlags[index]) & flag) != 0;\n  }\n\n  /** Sets the specified flag or flags on the local at the specified index. */\n  setLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags | flag;\n  }\n\n  /** Unsets the specified flag or flags on the local at the specified index. */\n  unsetLocalFlag(index: i32, flag: LocalFlags): void {\n    if (index < 0) return;\n    var localFlags = this.localFlags;\n    var flags = index < localFlags.length ? unchecked(localFlags[index]) : 0;\n    this.localFlags[index] = flags & ~flag;\n  }\n\n  /** Pushes a new break label to the stack, for example when entering a loop that one can `break` from. */\n  pushBreakLabel(): string {\n    var parentFunction = this.parentFunction;\n    var id = parentFunction.nextBreakId++;\n    var stack = parentFunction.breakStack;\n    if (!stack) parentFunction.breakStack = [ id ];\n    else stack.push(id);\n    return parentFunction.breakLabel = id.toString(10);\n  }\n\n  /** Pops the most recent break label from the stack. */\n  popBreakLabel(): void {\n    var parentFunction = this.parentFunction;\n    var stack = assert(parentFunction.breakStack);\n    var length = assert(stack.length);\n    stack.pop();\n    if (length > 1) {\n      parentFunction.breakLabel = stack[length - 2].toString(10);\n    } else {\n      parentFunction.breakLabel = null;\n      parentFunction.breakStack = null;\n    }\n  }\n\n  /** Inherits flags and local wrap states from the specified flow (e.g. blocks). */\n  inherit(other: Flow): void {\n    this.flags |= other.flags & (FlowFlags.ANY_CATEGORICAL | FlowFlags.ANY_CONDITIONAL);\n    this.localFlags = other.localFlags; // no need to slice because other flow is finished\n  }\n\n  /** Inherits categorical flags as conditional flags from the specified flow (e.g. then without else). */\n  inheritConditional(other: Flow): void {\n    this.set(other.flags & FlowFlags.ANY_CONDITIONAL);\n    if (other.is(FlowFlags.RETURNS)) {\n      this.set(FlowFlags.CONDITIONALLY_RETURNS);\n    }\n    if (other.is(FlowFlags.THROWS)) {\n      this.set(FlowFlags.CONDITIONALLY_THROWS);\n    }\n    if (other.is(FlowFlags.BREAKS) && other.breakLabel == this.breakLabel) {\n      this.set(FlowFlags.CONDITIONALLY_BREAKS);\n    }\n    if (other.is(FlowFlags.CONTINUES) && other.continueLabel == this.continueLabel) {\n      this.set(FlowFlags.CONDITIONALLY_CONTINUES);\n    }\n    if (other.is(FlowFlags.ALLOCATES)) {\n      this.set(FlowFlags.CONDITIONALLY_ALLOCATES);\n    }\n    var localFlags = other.localFlags;\n    for (let i = 0, k = localFlags.length; i < k; ++i) {\n      let flags = localFlags[i];\n      this.setLocalFlag(i, flags & LocalFlags.ANY_CONDITIONAL);\n      if (flags & LocalFlags.RETAINED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETAINED);\n      if (flags & LocalFlags.READFROM) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_READFROM);\n      if (flags & LocalFlags.WRITTENTO) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_WRITTENTO);\n      if (flags & LocalFlags.RETURNED) this.setLocalFlag(i, LocalFlags.CONDITIONALLY_RETURNED);\n    }\n  }\n\n  /** Inherits mutual flags and local wrap states from the specified flows (e.g. then with else). */\n  inheritMutual(left: Flow, right: Flow): void {\n    // categorical flags set in both arms\n    this.set(left.flags & right.flags & FlowFlags.ANY_CATEGORICAL);\n\n    // conditional flags set in any arm\n    this.set(left.flags & FlowFlags.ANY_CONDITIONAL);\n    this.set(right.flags & FlowFlags.ANY_CONDITIONAL);\n\n    // categorical flags in either arm as conditional\n    this.inheritConditional(left);\n    this.inheritConditional(right);\n\n    // categorical local flags set in both arms / conditional local flags set in at least one arm\n    var leftLocalFlags = left.localFlags;\n    var numLeftLocalFlags = leftLocalFlags.length;\n    var rightLocalFlags = right.localFlags;\n    var numRightLocalFlags = rightLocalFlags.length;\n    var combinedFlags = new Array<LocalFlags>(max<i32>(numLeftLocalFlags, numRightLocalFlags));\n    for (let i = 0; i < numLeftLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        unchecked(leftLocalFlags[i]),\n        i < numRightLocalFlags\n          ? unchecked(rightLocalFlags[i])\n          : 0\n      );\n    }\n    for (let i = numLeftLocalFlags; i < numRightLocalFlags; ++i) {\n      combinedFlags[i] = LocalFlags.join(\n        0,\n        unchecked(rightLocalFlags[i])\n      );\n    }\n    this.localFlags = combinedFlags;\n  }\n\n  /** Unifies local flags between this and the other flow. */\n  unifyLocalFlags(other: Flow): void {\n    var numThisLocalFlags = this.localFlags.length;\n    var numOtherLocalFlags = other.localFlags.length;\n    for (let i = 0, k = min<i32>(numThisLocalFlags, numOtherLocalFlags); i < k; ++i) {\n      if (this.isLocalFlag(i, LocalFlags.WRAPPED) != other.isLocalFlag(i, LocalFlags.WRAPPED)) {\n        this.unsetLocalFlag(i, LocalFlags.WRAPPED); // assume not wrapped\n      }\n      if (this.isLocalFlag(i, LocalFlags.NONNULL) != other.isLocalFlag(i, LocalFlags.NONNULL)) {\n        this.unsetLocalFlag(i, LocalFlags.NONNULL); // assume possibly null\n      }\n      assert(\n        // having different retain states would be a problem because the compiler\n        // either can't release a retained local or would release a non-retained local\n        this.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED) == other.isAnyLocalFlag(i, LocalFlags.ANY_RETAINED)\n      );\n    }\n  }\n\n  /** Checks if an expression of the specified type is known to be non-null, even if the type might be nullable. */\n  isNonnull(expr: ExpressionRef, type: Type): bool {\n    if (!type.is(TypeFlags.NULLABLE)) return true;\n    // below, only teeLocal/getLocal are relevant because these are the only expressions that\n    // depend on a dynamic nullable state (flag = LocalFlags.NONNULL), while everything else\n    // has already been handled by the nullable type check above.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !local.type.is(TypeFlags.NULLABLE) || this.isLocalFlag(local.index, LocalFlags.NONNULL, false);\n      }\n    }\n    return false;\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is true-ish. */\n  inheritNonnullIfTrue(expr: ExpressionRef): void {\n    // A: `expr` is true-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: {\n        if (!isLocalTee(expr)) break;\n        let local = this.parentFunction.localsByIndex[getLocalSetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        this.inheritNonnullIfTrue(getLocalSetValue(expr)); // must have been true-ish as well\n        break;\n      }\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        this.setLocalFlag(local.index, LocalFlags.NONNULL);\n        break;\n      }\n      case ExpressionId.If: {\n        let ifFalse = getIfFalse(expr);\n        if (!ifFalse) break;\n        if (getExpressionId(ifFalse) == ExpressionId.Const) {\n          // Logical AND: (if (condition ifTrue 0))\n          // the only way this had become true is if condition and ifTrue are true\n          if (\n            (getExpressionType(ifFalse) == NativeType.I32 && getConstValueI32(ifFalse) == 0) ||\n            (getExpressionType(ifFalse) == NativeType.I64 && getConstValueI64Low(ifFalse) == 0 && getConstValueI64High(ifFalse) == 0)\n          ) {\n            this.inheritNonnullIfTrue(getIfCondition(expr));\n            this.inheritNonnullIfTrue(getIfTrue(expr));\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfFalse(getUnaryValue(expr)); // !value -> value must have been false\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 && getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left == TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left != FALSE -> left must have been true\n            }\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Call: {\n        let name = getCallTarget(expr);\n        let program = this.parentFunction.program;\n        switch (name) {\n          case program.retainInstance.internalName: {\n            this.inheritNonnullIfTrue(getCallOperand(expr, 0));\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /** Updates local states to reflect that this branch is only taken when `expr` is false-ish. */\n  inheritNonnullIfFalse(expr: ExpressionRef): void {\n    // A: `expr` is false-ish -> Q: how did that happen?\n    switch (getExpressionId(expr)) {\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.inheritNonnullIfTrue(getUnaryValue(expr)); // !value -> value must have been true\n            break;\n          }\n        }\n        break;\n      }\n      case ExpressionId.If: {\n        let ifTrue = getIfTrue(expr);\n        if (getExpressionId(ifTrue) == ExpressionId.Const) {\n          let ifFalse = getIfFalse(expr);\n          if (!ifFalse) break;\n          // Logical OR: (if (condition 1 ifFalse))\n          // the only way this had become false is if condition and ifFalse are false\n          if (\n            (getExpressionType(ifTrue) == NativeType.I32 && getConstValueI32(ifTrue) != 0) ||\n            (getExpressionType(ifTrue) == NativeType.I64 && (getConstValueI64Low(ifTrue) != 0 || getConstValueI64High(ifTrue) != 0))\n          ) {\n            this.inheritNonnullIfFalse(getIfCondition(expr));\n            this.inheritNonnullIfFalse(getIfFalse(expr));\n          }\n\n        }\n        break;\n      }\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n          // remember: we want to know how the _entire_ expression became FALSE (!)\n          case BinaryOp.EqI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.EqI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI64Low(left) == 0 && getConstValueI64High(left) == 0) {\n              this.inheritNonnullIfTrue(right); // FALSE == right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI64Low(right) == 0 && getConstValueI64High(right) == 0) {\n              this.inheritNonnullIfTrue(left); // left == FALSE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI32: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && getConstValueI32(left) != 0) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true\n            } else if (getExpressionId(right) == ExpressionId.Const && getConstValueI32(right) != 0) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true\n            }\n            break;\n          }\n          case BinaryOp.NeI64: {\n            let left = getBinaryLeft(expr);\n            let right = getBinaryRight(expr);\n            if (getExpressionId(left) == ExpressionId.Const && (getConstValueI64Low(left) != 0 || getConstValueI64High(left) != 0)) {\n              this.inheritNonnullIfTrue(right); // TRUE != right -> right must have been true for this to become false\n            } else if (getExpressionId(right) == ExpressionId.Const && (getConstValueI64Low(right) != 0 || getConstValueI64High(right) != 0)) {\n              this.inheritNonnullIfTrue(left); // left != TRUE -> left must have been true for this to become false\n            }\n            break;\n          }\n        }\n        break;\n      }\n    }\n  }\n\n  /**\n   * Tests if an expression can possibly overflow in the context of this flow. Assumes that the\n   * expression might already have overflown and returns `false` only if the operation neglects\n   * any possible combination of garbage bits being present.\n   */\n  canOverflow(expr: ExpressionRef, type: Type): bool {\n    // TODO: the following catches most common and a few uncommon cases, but there are additional\n    // opportunities here, obviously.\n    assert(type != Type.void);\n\n    // types other than i8, u8, i16, u16 and bool do not overflow\n    if (!type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) return false;\n\n    var operand: ExpressionRef;\n    switch (getExpressionId(expr)) {\n\n      // overflows if the local isn't wrapped or the conversion does\n      case ExpressionId.LocalGet: {\n        let local = this.parentFunction.localsByIndex[getLocalGetIndex(expr)];\n        return !this.isLocalFlag(local.index, LocalFlags.WRAPPED, true)\n            || canConversionOverflow(local.type, type);\n      }\n\n      // overflows if the value does\n      case ExpressionId.LocalSet: { // tee\n        assert(isLocalTee(expr));\n        return this.canOverflow(getLocalSetValue(expr), type);\n      }\n\n      // overflows if the conversion does (globals are wrapped on set)\n      case ExpressionId.GlobalGet: {\n        // TODO: this is inefficient because it has to read a string\n        let global = assert(this.parentFunction.program.elementsByName.get(assert(getGlobalGetName(expr)))!);\n        assert(global.kind == ElementKind.GLOBAL);\n        return canConversionOverflow(assert((<Global>global).type), type);\n      }\n\n      case ExpressionId.Binary: {\n        switch (getBinaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64:\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64:\n          case BinaryOp.LtI32:\n          case BinaryOp.LtU32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtU64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64:\n          case BinaryOp.LeI32:\n          case BinaryOp.LeU32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeU64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64:\n          case BinaryOp.GtI32:\n          case BinaryOp.GtU32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtU64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64:\n          case BinaryOp.GeI32:\n          case BinaryOp.GeU32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeU64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: return false;\n\n          // result won't overflow if one side is 0 or if one side is 1 and the other wrapped\n          case BinaryOp.MulI32: {\n            return !(\n              (\n                getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryRight(expr), type)\n                  )\n                )\n              ) || (\n                getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                (\n                  getConstValueI32(operand) == 0 ||\n                  (\n                    getConstValueI32(operand) == 1 &&\n                    !this.canOverflow(getBinaryLeft(expr), type)\n                  )\n                )\n              )\n            );\n          }\n\n          // result won't overflow if one side is a constant less than this type's mask or one side\n          // is wrapped\n          case BinaryOp.AndI32: {\n            // note that computeSmallIntegerMask returns the mask minus the MSB for signed types\n            // because signed value garbage bits must be guaranteed to be equal to the MSB.\n            return !(\n              (\n                (\n                  getExpressionId(operand = getBinaryLeft(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              ) || (\n                (\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) <= type.computeSmallIntegerMask(Type.i32)\n                ) || !this.canOverflow(operand, type)\n              )\n            );\n          }\n\n          // overflows if the shift doesn't clear potential garbage bits\n          case BinaryOp.ShlI32: {\n            let shift = 32 - type.size;\n            return getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const\n                || getConstValueI32(operand) < shift;\n          }\n\n          // overflows if the value does and the shift doesn't clear potential garbage bits\n          case BinaryOp.ShrI32: {\n            let shift = 32 - type.size;\n            return this.canOverflow(getBinaryLeft(expr), type) && (\n              getExpressionId(operand = getBinaryRight(expr)) != ExpressionId.Const ||\n              getConstValueI32(operand) < shift\n            );\n          }\n\n          // overflows if the shift does not clear potential garbage bits. if an unsigned value is\n          // wrapped, it can't overflow.\n          case BinaryOp.ShrU32: {\n            let shift = 32 - type.size;\n            return type.is(TypeFlags.SIGNED)\n              ? !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) > shift // must clear MSB\n                )\n              : this.canOverflow(getBinaryLeft(expr), type) && !(\n                  getExpressionId(operand = getBinaryRight(expr)) == ExpressionId.Const &&\n                  getConstValueI32(operand) >= shift // can leave MSB\n                );\n          }\n\n          // overflows if any side does\n          case BinaryOp.DivU32:\n          case BinaryOp.RemI32:\n          case BinaryOp.RemU32: {\n            return this.canOverflow(getBinaryLeft(expr), type)\n                || this.canOverflow(getBinaryRight(expr), type);\n          }\n        }\n        break;\n      }\n\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n\n          // comparisons do not overflow (result is 0 or 1)\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: return false;\n\n          // overflow if the maximum result (32) cannot be represented in the target type\n          case UnaryOp.ClzI32:\n          case UnaryOp.CtzI32:\n          case UnaryOp.PopcntI32: return type.size < 7;\n        }\n        break;\n      }\n\n      // overflows if the value cannot be represented in the target type\n      case ExpressionId.Const: {\n        let value: i32 = 0;\n        switch (getExpressionType(expr)) {\n          case NativeType.I32: { value = getConstValueI32(expr); break; }\n          case NativeType.I64: { value = getConstValueI64Low(expr); break; } // discards upper bits\n          case NativeType.F32: { value = i32(getConstValueF32(expr)); break; }\n          case NativeType.F64: { value = i32(getConstValueF64(expr)); break; }\n          default: assert(false);\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return value < i8.MIN_VALUE || value > i8.MAX_VALUE;\n          case TypeKind.I16: return value < i16.MIN_VALUE || value > i16.MAX_VALUE;\n          case TypeKind.U8: return value < 0 || value > u8.MAX_VALUE;\n          case TypeKind.U16: return value < 0 || value > u16.MAX_VALUE;\n          case TypeKind.BOOL: return (value & ~1) != 0;\n        }\n        break;\n      }\n\n      // overflows if the conversion does\n      case ExpressionId.Load: {\n        let fromType: Type;\n        let signed = isLoadSigned(expr);\n        switch (getLoadBytes(expr)) {\n          case 1:  { fromType = signed ? Type.i8  : Type.u8;  break; }\n          case 2:  { fromType = signed ? Type.i16 : Type.u16; break; }\n          default: { fromType = signed ? Type.i32 : Type.u32; break; }\n        }\n        return canConversionOverflow(fromType, type);\n      }\n\n      // overflows if the result does, which is either\n      // - the last expression of the block, by contract, if the block doesn't have a label\n      // - the last expression or the value of an inner br if the block has a label (TODO)\n      case ExpressionId.Block: {\n        if (!getBlockName(expr)) {\n          let size = assert(getBlockChildCount(expr));\n          let last = getBlockChild(expr, size - 1);\n          return this.canOverflow(last, type);\n        }\n        break;\n      }\n\n      // overflows if either side does\n      case ExpressionId.If: {\n        return this.canOverflow(getIfTrue(expr), type)\n            || this.canOverflow(assert(getIfFalse(expr)), type);\n      }\n\n      // overflows if either side does\n      case ExpressionId.Select: {\n        return this.canOverflow(getSelectThen(expr), type)\n            || this.canOverflow(getSelectElse(expr), type);\n      }\n\n      // overflows if the call does not return a wrapped value or the conversion does\n      case ExpressionId.Call: {\n        let program = this.parentFunction.program;\n        let instancesByName = program.instancesByName;\n        let instanceName = assert(getCallTarget(expr));\n        if (instancesByName.has(instanceName)) {\n          let instance = instancesByName.get(instanceName)!;\n          assert(instance.kind == ElementKind.FUNCTION);\n          let returnType = (<Function>instance).signature.returnType;\n          return !(<Function>instance).flow.is(FlowFlags.RETURNS_WRAPPED)\n              || canConversionOverflow(returnType, type);\n        }\n        return false; // assume no overflow for builtins\n      }\n\n      // doesn't technically overflow\n      case ExpressionId.Unreachable: return false;\n    }\n    return true;\n  }\n\n  toString(): string {\n    var levels = 0;\n    var parent = this.parent;\n    while (parent) {\n      parent = parent.parent;\n      ++levels;\n    }\n    return \"Flow(\" + this.actualFunction + \")[\" + levels.toString() + \"]\";\n  }\n}\n\n/** Tests if a conversion from one type to another can technically overflow. */\nfunction canConversionOverflow(fromType: Type, toType: Type): bool {\n  return !fromType.is(TypeFlags.INTEGER) // non-i32 locals or returns\n      || fromType.size > toType.size\n      || fromType.is(TypeFlags.SIGNED) != toType.is(TypeFlags.SIGNED);\n}\n\n/** Finds all indexes of locals used in the specified expression. */\nexport function findUsedLocals(expr: ExpressionRef, used: Set<i32> = new Set()): Set<i32> {\n  traverse(expr, used, findUsedLocalsVisit);\n  return used;\n}\n\n/** A visitor function for use with `traverse` that finds all indexes of used locals. */\nfunction findUsedLocalsVisit(expr: ExpressionRef, used: Set<i32>): void {\n  switch (getExpressionId(expr)) {\n    case ExpressionId.LocalGet: {\n      used.add(getLocalGetIndex(expr));\n      break;\n    }\n    case ExpressionId.LocalSet: {\n      used.add(getLocalSetIndex(expr));\n      // fall-through for value\n    }\n    default: traverse(expr, used, findUsedLocalsVisit);\n  }\n}\n","/**\n * The AssemblyScript compiler.\n * @module compiler\n *//***/\n\nimport {\n  BuiltinSymbols,\n  compileCall as compileBuiltinCall,\n  compileAbort,\n  compileVisitGlobals,\n  compileVisitMembers,\n  compileRTTI,\n} from \"./builtins\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  Module,\n  MemorySegment,\n  ExpressionRef,\n  UnaryOp,\n  BinaryOp,\n  NativeType,\n  FunctionRef,\n  ExpressionId,\n  FunctionTypeRef,\n  GlobalRef,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getBlockChildCount,\n  getBlockChild,\n  getBlockName,\n  getLocalGetIndex,\n  isLocalTee,\n  getLocalSetIndex,\n  FeatureFlags,\n  needsExplicitUnreachable,\n  getLocalSetValue\n} from \"./module\";\n\nimport {\n  CommonFlags,\n  INSTANCE_DELIMITER,\n  STATIC_DELIMITER,\n  GETTER_PREFIX,\n  SETTER_PREFIX,\n  CommonSymbols,\n  INDEX_SUFFIX,\n  Feature,\n  Target\n} from \"./common\";\n\nimport {\n  Program,\n  ClassPrototype,\n  Class,\n  Element,\n  ElementKind,\n  Enum,\n  Field,\n  FunctionPrototype,\n  Function,\n  FunctionTarget,\n  Global,\n  Local,\n  EnumValue,\n  Property,\n  VariableLikeElement,\n  ConstantValueKind,\n  OperatorKind,\n  DecoratorFlags,\n  PropertyPrototype,\n  IndexSignature,\n  File,\n  mangleInternalName\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  Flow,\n  LocalFlags,\n  findUsedLocals\n} from \"./flow\";\n\nimport {\n  Resolver, ReportMode\n} from \"./resolver\";\n\nimport {\n  Token,\n  operatorTokenToString\n} from \"./tokenizer\";\n\nimport {\n  Node,\n  NodeKind,\n  NamedTypeNode,\n  Range,\n  DecoratorKind,\n  AssertionKind,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DoStatement,\n  EmptyStatement,\n  EnumDeclaration,\n  ExportStatement,\n  ExpressionStatement,\n  FieldDeclaration,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportStatement,\n  InstanceOfExpression,\n  InterfaceDeclaration,\n  NamespaceDeclaration,\n  ReturnStatement,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  VariableStatement,\n  VoidStatement,\n  WhileStatement,\n\n  Expression,\n  AssertionExpression,\n  BinaryExpression,\n  CallExpression,\n  CommaExpression,\n  ElementAccessExpression,\n  FloatLiteralExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  IntegerLiteralExpression,\n  LiteralExpression,\n  LiteralKind,\n  NewExpression,\n  ObjectLiteralExpression,\n  ParenthesizedExpression,\n  PropertyAccessExpression,\n  TernaryExpression,\n  ArrayLiteralExpression,\n  StringLiteralExpression,\n  UnaryPostfixExpression,\n  UnaryPrefixExpression,\n\n  nodeIsConstantValue,\n  findDecorator,\n  isTypeOmitted,\n  ExportDefaultStatement,\n  SourceKind\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature,\n  typesToNativeTypes\n} from \"./types\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeI64,\n  writeF32,\n  writeF64,\n  makeMap\n} from \"./util\";\n\n/** Compiler options. */\nexport class Options {\n\n  /** WebAssembly target. Defaults to {@link Target.WASM32}. */\n  target: Target = Target.WASM32;\n  /** If true, replaces assertions with nops. */\n  noAssert: bool = false;\n  /** If true, imports the memory provided by the embedder. */\n  importMemory: bool = false;\n  /** If greater than zero, declare memory as shared by setting max memory to sharedMemory. */\n  sharedMemory: i32 = 0;\n  /** If true, imports the function table provided by the embedder. */\n  importTable: bool = false;\n  /** If true, generates information necessary for source maps. */\n  sourceMap: bool = false;\n  /** If true, generates an explicit start function. */\n  explicitStart: bool = false;\n  /** Static memory start offset. */\n  memoryBase: i32 = 0;\n  /** Global aliases, mapping alias names as the key to internal names to be aliased as the value. */\n  globalAliases: Map<string,string> | null = null;\n  /** Features to activate by default. These are the finished proposals. */\n  features: Feature = Feature.MUTABLE_GLOBALS;\n  /** If true, disallows unsafe features in user code. */\n  noUnsafe: bool = false;\n\n  /** Hinted optimize level. Not applied by the compiler itself. */\n  optimizeLevelHint: i32 = 0;\n  /** Hinted shrink level. Not applied by the compiler itself. */\n  shrinkLevelHint: i32 = 0;\n\n  /** Tests if the target is WASM64 or, otherwise, WASM32. */\n  get isWasm64(): bool {\n    return this.target == Target.WASM64;\n  }\n\n  /** Gets the unsigned size type matching the target. */\n  get usizeType(): Type {\n    return this.target == Target.WASM64 ? Type.usize64 : Type.usize32;\n  }\n\n  /** Gets the signed size type matching the target. */\n  get isizeType(): Type {\n    return this.target == Target.WASM64 ? Type.isize64 : Type.isize32;\n  }\n\n  /** Gets the native size type matching the target. */\n  get nativeSizeType(): NativeType {\n    return this.target == Target.WASM64 ? NativeType.I64 : NativeType.I32;\n  }\n\n  /** Tests if a specific feature is activated. */\n  hasFeature(feature: Feature): bool {\n    return (this.features & feature) != 0;\n  }\n}\n\n/** Various constraints in expression compilation. */\nexport const enum Constraints {\n  NONE = 0,\n\n  /** Must implicitly convert to the target type. */\n  CONV_IMPLICIT = 1 << 0,\n  /** Must explicitly convert to the target type. */\n  CONV_EXPLICIT = 1 << 1,\n  /** Must wrap small integer values to match the target type. */\n  MUST_WRAP = 1 << 2,\n\n  /** Indicates that the value will be dropped immediately. */\n  WILL_DROP = 1 << 3,\n  /** Indicates that the value will be retained immediately. */\n  WILL_RETAIN = 1 << 4,\n  /** Indicates that static data is preferred. */\n  PREFER_STATIC = 1 << 5\n}\n\n/** Runtime features to be activated by the compiler. */\nexport const enum RuntimeFeatures {\n  NONE = 0,\n  /** Requires heap setup. */\n  HEAP = 1 << 0,\n  /** Requires runtime type information setup. */\n  RTTI = 1 << 1,\n  /** Requires the built-in globals visitor. */\n  visitGlobals = 1 << 2,\n  /** Requires the built-in members visitor. */\n  visitMembers = 1 << 3\n}\n\n/** Compiler interface. */\nexport class Compiler extends DiagnosticEmitter {\n\n  /** Program reference. */\n  program: Program;\n  /** Resolver reference. */\n  get resolver(): Resolver { return this.program.resolver; }\n  /** Provided options. */\n  options: Options;\n  /** Module instance being compiled. */\n  module: Module;\n  /** Current control flow. */\n  currentFlow: Flow;\n  /** Current inline functions stack. */\n  currentInlineFunctions: Function[] = [];\n  /** Current parent element if not a function, i.e. an enum or namespace. */\n  currentParent: Element | null = null;\n  /** Current type in compilation. */\n  currentType: Type = Type.void;\n  /** Start function statements. */\n  currentBody: ExpressionRef[];\n  /** Counting memory offset. */\n  memoryOffset: I64;\n  /** Memory segments being compiled. */\n  memorySegments: MemorySegment[] = [];\n  /** Map of already compiled static string segments. */\n  stringSegments: Map<string,MemorySegment> = new Map();\n  /** Function table being compiled. */\n  functionTable: string[] = [ \"null\" ];\n  /** Argument count helper global. */\n  argcVar: GlobalRef = 0;\n  /** Argument count helper setter. */\n  argcSet: FunctionRef = 0;\n  /** Requires runtime features. */\n  runtimeFeatures: RuntimeFeatures = RuntimeFeatures.NONE;\n  /** Expressions known to have skipped an autorelease. Usually function returns. */\n  skippedAutoreleases: Set<ExpressionRef> = new Set();\n\n  /** Compiles a {@link Program} to a {@link Module} using the specified options. */\n  static compile(program: Program, options: Options | null = null): Module {\n    return new Compiler(program, options).compile();\n  }\n\n  /** Constructs a new compiler for a {@link Program} using the specified options. */\n  constructor(program: Program, options: Options | null = null) {\n    super(program.diagnostics);\n    this.program = program;\n    if (!options) options = new Options();\n    this.options = options;\n    this.memoryOffset = i64_new(\n      // leave space for `null`. also functions as a sentinel for erroneous stores at offset 0.\n      // note that Binaryen's asm.js output utilizes the first 8 bytes for reinterpretations (#1547)\n      max(options.memoryBase, 8)\n    );\n    this.module = Module.create();\n    var featureFlags: BinaryenFeatureFlags = 0;\n    if (this.options.hasFeature(Feature.SIGN_EXTENSION)) featureFlags |= FeatureFlags.SignExt;\n    if (this.options.hasFeature(Feature.MUTABLE_GLOBALS)) featureFlags |= FeatureFlags.MutableGloabls;\n    if (this.options.hasFeature(Feature.NONTRAPPING_F2I)) featureFlags |= FeatureFlags.NontrappingFPToInt;\n    if (this.options.hasFeature(Feature.BULK_MEMORY)) featureFlags |= FeatureFlags.BulkMemory;\n    if (this.options.hasFeature(Feature.SIMD)) featureFlags |= FeatureFlags.SIMD128;\n    if (this.options.hasFeature(Feature.THREADS)) featureFlags |= FeatureFlags.Atomics;\n    if (this.options.hasFeature(Feature.EXCEPTION_HANDLING)) featureFlags |= FeatureFlags.ExceptionHandling;\n    if (this.options.hasFeature(Feature.TAIL_CALLS)) featureFlags |= FeatureFlags.TailCall;\n    if (this.options.hasFeature(Feature.REFERENCE_TYPES)) featureFlags |= FeatureFlags.ReferenceTypes;\n    this.module.setFeatures(featureFlags);\n  }\n\n  /** Performs compilation of the underlying {@link Program} to a {@link Module}. */\n  compile(): Module {\n    var options = this.options;\n    var module = this.module;\n    var program = this.program;\n\n    // initialize lookup maps, built-ins, imports, exports, etc.\n    program.initialize(options);\n\n    // set up the main start function\n    var startFunctionInstance = program.makeNativeFunction(\"start\", new Signature(program, [], Type.void));\n    startFunctionInstance.internalName = \"start\";\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentFlow = startFunctionInstance.flow;\n    this.currentBody = startFunctionBody;\n\n    // add a mutable heap and rtti base dummies\n    if (options.isWasm64) {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I64, true, module.i64(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, true, module.i64(0));\n    } else {\n      module.addGlobal(BuiltinSymbols.heap_base, NativeType.I32, true, module.i32(0));\n      module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, true, module.i32(0));\n    }\n\n    // compile entry file(s) while traversing reachable elements\n    var files = program.filesByName;\n    for (let file of files.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) {\n        this.compileFile(file);\n        this.compileExports(file);\n      }\n    }\n\n    // compile the start function if not empty or explicitly requested\n    var startIsEmpty = !startFunctionBody.length;\n    var explicitStart = options.explicitStart;\n    if (!startIsEmpty || explicitStart) {\n      let signature = startFunctionInstance.signature;\n      if (!startIsEmpty && explicitStart) {\n        module.addGlobal(BuiltinSymbols.started, NativeType.I32, true, module.i32(0));\n        startFunctionBody.unshift(\n          module.if(\n            module.global_get(BuiltinSymbols.started, NativeType.I32),\n            module.return(),\n            module.global_set(BuiltinSymbols.started, module.i32(1))\n          )\n        );\n      }\n      let funcRef = module.addFunction(\n        startFunctionInstance.internalName,\n        this.ensureFunctionType(\n          signature.parameterTypes,\n          signature.returnType,\n          signature.thisType\n        ),\n        typesToNativeTypes(startFunctionInstance.additionalLocals),\n        module.block(null, startFunctionBody)\n      );\n      startFunctionInstance.finalize(module, funcRef);\n      if (!explicitStart) module.setStart(funcRef);\n      else module.addFunctionExport(startFunctionInstance.internalName, \"__start\");\n    }\n\n    // compile runtime features\n    if (this.runtimeFeatures & RuntimeFeatures.visitGlobals) compileVisitGlobals(this);\n    if (this.runtimeFeatures & RuntimeFeatures.visitMembers) compileVisitMembers(this);\n    module.removeGlobal(BuiltinSymbols.rtti_base);\n    if (this.runtimeFeatures & RuntimeFeatures.RTTI) compileRTTI(this);\n\n    // update the heap base pointer\n    var memoryOffset = this.memoryOffset;\n    memoryOffset = i64_align(memoryOffset, options.usizeType.byteSize);\n    this.memoryOffset = memoryOffset;\n    module.removeGlobal(BuiltinSymbols.heap_base);\n    if (this.runtimeFeatures & RuntimeFeatures.HEAP) {\n      if (options.isWasm64) {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I64,\n          false,\n          module.i64(i64_low(memoryOffset), i64_high(memoryOffset))\n        );\n      } else {\n        module.addGlobal(\n          BuiltinSymbols.heap_base,\n          NativeType.I32,\n          false,\n          module.i32(i64_low(memoryOffset))\n        );\n      }\n    }\n\n    // set up memory\n    var isSharedMemory = options.hasFeature(Feature.THREADS) && options.sharedMemory > 0;\n    module.setMemory(\n      this.options.memoryBase /* is specified */ || this.memorySegments.length\n        ? i64_low(i64_shr_u(i64_align(memoryOffset, 0x10000), i64_new(16, 0)))\n        : 0,\n      isSharedMemory ? options.sharedMemory : Module.UNLIMITED_MEMORY,\n      this.memorySegments,\n      options.target,\n      \"memory\",\n      isSharedMemory\n    );\n\n    // import memory if requested (default memory is named '0' by Binaryen)\n    if (options.importMemory) module.addMemoryImport(\"0\", \"env\", \"memory\", isSharedMemory);\n\n    // set up function table\n    var functionTable = this.functionTable;\n    module.setFunctionTable(functionTable.length, 0xffffffff, functionTable, module.i32(0));\n    module.addFunction(\"null\", this.ensureFunctionType(null, Type.void), null, module.block(null, []));\n\n    // import table if requested (default table is named '0' by Binaryen)\n    if (options.importTable) module.addTableImport(\"0\", \"env\", \"table\");\n\n    // set up module exports\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.ensureModuleExports(file);\n    }\n    return module;\n  }\n\n  // === Exports ==================================================================================\n\n  /** Applies the respective module exports for the specified file. */\n  private ensureModuleExports(file: File): void {\n    var members = file.exports;\n    if (members) for (let [name, member] of members) this.ensureModuleExport(name, member);\n    var exportsStar = file.exportsStar;\n    if (exportsStar)  {\n      for (let i = 0, k = exportsStar.length; i < k; ++i) this.ensureModuleExports(exportsStar[i]);\n    }\n  }\n\n  /** Applies the respective module export(s) for the specified element. */\n  private ensureModuleExport(name: string, element: Element, prefix: string = \"\"): void {\n    switch (element.kind) {\n\n      // traverse instances\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instances = (<FunctionPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        let instances = (<ClassPrototype>element).instances;\n        if (instances) {\n          for (let instance of instances.values()) {\n            let instanceName = name;\n            if (instance.is(CommonFlags.GENERIC)) {\n              let fullName = instance.internalName;\n              instanceName += fullName.substring(fullName.lastIndexOf(\"<\"));\n            }\n            this.ensureModuleExport(instanceName, instance, prefix);\n          }\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getter = (<PropertyPrototype>element).getterPrototype;\n        let setter = (<PropertyPrototype>element).setterPrototype;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n\n      // export concrete elements\n      case ElementKind.GLOBAL: {\n        let isConst = element.is(CommonFlags.CONST) || element.is(CommonFlags.STATIC | CommonFlags.READONLY);\n        if (!isConst && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<Global>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.ENUMVALUE: {\n        if (!(<EnumValue>element).isImmutable && !this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n          this.error(\n            DiagnosticCode.Cannot_export_a_mutable_global,\n            (<EnumValue>element).identifierNode.range\n          );\n        } else {\n          this.module.addGlobalExport(element.internalName, prefix + name);\n        }\n        break;\n      }\n      case ElementKind.FUNCTION: {\n        let instance = <Function>element;\n        let signature = instance.signature;\n        if (signature.requiredParameters < signature.parameterTypes.length) {\n          // utilize trampoline to fill in omitted arguments\n          instance = this.ensureTrampoline(instance);\n          this.ensureArgcSet();\n        }\n        if (instance.is(CommonFlags.COMPILED)) this.module.addFunctionExport(instance.internalName, prefix + name);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let getter = (<Property>element).getterInstance;\n        if (getter) this.ensureModuleExport(GETTER_PREFIX + name, getter, prefix);\n        let setter = (<Property>element).setterInstance;\n        if (setter) this.ensureModuleExport(SETTER_PREFIX + name, setter, prefix);\n        break;\n      }\n      case ElementKind.FIELD: {\n        this.ensureModuleFieldGetter(prefix + GETTER_PREFIX + name, <Field>element);\n        if (!element.is(CommonFlags.READONLY)) {\n          this.ensureModuleFieldSetter(prefix + SETTER_PREFIX + name, <Field>element);\n        }\n        break;\n      }\n      case ElementKind.CLASS: {\n        // make the class name itself represent its runtime id\n        if (!(<Class>element).type.isUnmanaged) {\n          let module = this.module;\n          let internalName = (<Class>element).internalName;\n          module.addGlobal(internalName, NativeType.I32, false, module.i32((<Class>element).id));\n          module.addGlobalExport(internalName, prefix + name);\n        }\n        break;\n      }\n\n      // just traverse members below\n      case ElementKind.ENUM:\n      case ElementKind.NAMESPACE:\n      case ElementKind.FILE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.INDEXSIGNATURE: break;\n\n      default: assert(false); // unexpected module export\n    }\n\n    // traverse members\n    var members = element.members;\n    if (members) {\n      let subPrefix = prefix + name + (element.kind == ElementKind.CLASS\n        ? INSTANCE_DELIMITER\n        : STATIC_DELIMITER\n      );\n      if (\n        element.kind == ElementKind.NAMESPACE ||\n        element.kind == ElementKind.FILE\n      ) {\n        for (let member of members.values()) {\n          if (!member.is(CommonFlags.EXPORT)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      } else {\n        for (let member of members.values()) {\n          if (member.is(CommonFlags.PRIVATE)) continue;\n          this.ensureModuleExport(member.name, member, subPrefix);\n        }\n      }\n    }\n  }\n\n  /** Makes a function to get the value of a field of an exported class. */\n  private ensureModuleFieldGetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var usizeType = this.options.usizeType;\n    var loadExpr = module.load(type.byteSize, type.is(TypeFlags.SIGNED),\n      module.local_get(0, usizeType.toNativeType()),\n      type.toNativeType(), field.memoryOffset\n    );\n    // a user-defined getter would return a retained value, so:\n    if (type.isManaged) loadExpr = this.makeRetain(loadExpr);\n    module.addFunction(\n      name,\n      this.ensureFunctionType(null, type, usizeType),\n      null,\n      loadExpr\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  /** Makes a function to set the value of a field of an exported class. */\n  private ensureModuleFieldSetter(name: string, field: Field): void {\n    var type = field.type;\n    var module = this.module;\n    var nativeType = type.toNativeType();\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = usizeType.toNativeType();\n    var valueExpr = module.local_get(1, nativeType);\n    if (type.isManaged) {\n      valueExpr = this.makeRetainRelease(\n        module.load(type.byteSize, false, // oldRef\n          module.local_get(0, nativeSizeType),\n          nativeType, field.memoryOffset\n        ),\n        valueExpr // newRef\n      );\n    }\n    module.addFunction(\n      name,\n      this.ensureFunctionType([ type ], Type.void, usizeType),\n      null,\n      module.store(\n        type.byteSize,\n        module.local_get(0, nativeSizeType),\n        valueExpr,\n        nativeType,\n        field.memoryOffset\n      )\n    );\n    module.addFunctionExport(name, name);\n  }\n\n  // === Elements =================================================================================\n\n  /** Compiles any element. */\n  compileElement(element: Element, compileMembers: bool = true): void {\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        this.compileGlobal(<Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        this.compileEnum(<Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileFunctionUsingTypeArguments(<FunctionPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        if (!element.is(CommonFlags.GENERIC)) {\n          this.compileClassUsingTypeArguments(<ClassPrototype>element, []);\n        }\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        let getterPrototype = (<PropertyPrototype>element).getterPrototype;\n        if (getterPrototype) {\n          this.compileFunctionUsingTypeArguments(getterPrototype, []);\n        }\n        let setterPrototype = (<PropertyPrototype>element).setterPrototype;\n        if (setterPrototype) {\n          this.compileFunctionUsingTypeArguments(setterPrototype, []);\n        }\n        break;\n      }\n      case ElementKind.NAMESPACE:\n      case ElementKind.TYPEDEFINITION:\n      case ElementKind.ENUMVALUE:\n      case ElementKind.INDEXSIGNATURE: break;\n      default: assert(false, ElementKind[element.kind]);\n    }\n    if (compileMembers) this.compileMembers(element);\n  }\n\n  /** Compiles an element's members. */\n  compileMembers(element: Element): void {\n    var members = element.members;\n    if (members) for (let element of members.values()) this.compileElement(element);\n  }\n\n  /** Compiles a file's exports. */\n  compileExports(file: File): void {\n    var exports = file.exports;\n    if (exports) for (let element of exports.values()) this.compileElement(element);\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) {\n        this.compileFile(exportStar);\n        this.compileExports(exportStar);\n      }\n    }\n  }\n\n  // files\n\n  /** Compiles the file matching the specified path. */\n  compileFileByPath(normalizedPathWithoutExtension: string, reportNode: Node): void {\n    var file: File;\n    var filesByName = this.program.filesByName;\n    var pathWithIndex: string;\n    if (filesByName.has(normalizedPathWithoutExtension)) {\n      file = filesByName.get(normalizedPathWithoutExtension)!;\n    } else if (filesByName.has(pathWithIndex = normalizedPathWithoutExtension + INDEX_SUFFIX)) {\n      file = filesByName.get(pathWithIndex)!;\n    } else {\n      this.error(\n        DiagnosticCode.File_0_not_found,\n        reportNode.range, normalizedPathWithoutExtension\n      );\n      return;\n    }\n    this.compileFile(file);\n  }\n\n  /** Compiles the specified file. */\n  compileFile(file: File): void {\n    if (file.is(CommonFlags.COMPILED)) return;\n    file.set(CommonFlags.COMPILED);\n\n    // compile top-level statements within the file's start function\n    var startFunction = file.startFunction;\n    var previousBody = this.currentBody;\n    var startFunctionBody = new Array<ExpressionRef>();\n    this.currentBody = startFunctionBody;\n\n    // compile top-level statements\n    var previousFlow = this.currentFlow;\n    var flow = startFunction.flow;\n    this.currentFlow = flow;\n    for (let statements = file.source.statements, i = 0, k = statements.length; i < k; ++i) {\n      this.compileTopLevelStatement(statements[i], startFunctionBody);\n    }\n    this.finishAutoreleases(flow, startFunctionBody);\n    this.currentFlow = previousFlow;\n    this.currentBody = previousBody;\n\n    // if top-level statements are present, make the per-file start function and call it in start\n    if (startFunctionBody.length) {\n      let module = this.module;\n      let locals = startFunction.localsByIndex;\n      let numLocals = locals.length;\n      let varTypes = new Array<NativeType>(numLocals);\n      for (let i = 0; i < numLocals; ++i) varTypes[i] = locals[i].type.toNativeType();\n      module.addFunction(\n        startFunction.internalName,\n        this.ensureFunctionType(startFunction.signature.parameterTypes, startFunction.signature.returnType),\n        varTypes,\n        startFunctionBody.length > 1\n          ? module.block(null, startFunctionBody)\n          : startFunctionBody[0]\n      );\n      previousBody.push(\n        module.call(startFunction.internalName, null, NativeType.None)\n      );\n    }\n  }\n\n  // === Globals ==================================================================================\n\n  compileGlobal(global: Global): bool {\n    if (global.is(CommonFlags.COMPILED)) return true;\n    global.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var initExpr: ExpressionRef = 0;\n    var initAutoreleaseSkipped: bool = false;\n    var typeNode = global.typeNode;\n    var initializerNode = global.initializerNode;\n\n    if (!global.is(CommonFlags.RESOLVED)) {\n\n      // Resolve type if annotated\n      if (typeNode) {\n        let resolvedType = this.resolver.resolveType(typeNode, global.parent); // reports\n        if (!resolvedType) return false;\n        if (resolvedType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            typeNode.range\n          );\n          return false;\n        }\n        global.setType(resolvedType);\n\n      // Otherwise infer type from initializer\n      } else if (initializerNode) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, Type.auto, // reports\n          Constraints.MUST_WRAP | Constraints.WILL_RETAIN\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            initializerNode.range, this.currentType.toString(), \"<auto>\"\n          );\n          return false;\n        }\n        global.setType(this.currentType);\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          global.identifierNode.range.atEnd\n        );\n        return false;\n      }\n    }\n\n    // Handle ambient builtins like '__heap_base' that need to be resolved but are added explicitly\n    if (global.is(CommonFlags.AMBIENT) && global.hasDecorator(DecoratorFlags.BUILTIN)) {\n      if (global.internalName == BuiltinSymbols.heap_base) this.runtimeFeatures |= RuntimeFeatures.HEAP;\n      else if (global.internalName == BuiltinSymbols.rtti_base) this.runtimeFeatures |= RuntimeFeatures.RTTI;\n      return true;\n    }\n\n    var type = global.type;\n    var nativeType = type.toNativeType();\n    var isDeclaredConstant = global.is(CommonFlags.CONST) || global.is(CommonFlags.STATIC | CommonFlags.READONLY);\n    var isDeclaredInline = global.hasDecorator(DecoratorFlags.INLINE);\n\n    // Handle imports\n    if (global.is(CommonFlags.AMBIENT)) {\n\n      // Constant global or mutable globals enabled\n      if (isDeclaredConstant || this.options.hasFeature(Feature.MUTABLE_GLOBALS)) {\n        global.set(CommonFlags.MODULE_IMPORT);\n        mangleImportName(global, global.declaration);\n        module.addGlobalImport(\n          global.internalName,\n          mangleImportName_moduleName,\n          mangleImportName_elementName,\n          nativeType,\n          !isDeclaredConstant\n        );\n        global.set(CommonFlags.COMPILED);\n        return true;\n\n      // Importing mutable globals is not supported in the MVP\n      } else {\n        this.error(\n          DiagnosticCode.Feature_0_is_not_enabled,\n          global.declaration.range, \"mutable-globals\"\n        );\n      }\n      return false;\n    }\n\n    // The MVP does not yet support initializer expressions other than constant values (and constant\n    // get_globals), hence such initializations must be performed in the start function for now.\n    var initializeInStart = false;\n\n    // Evaluate initializer if present\n    if (initializerNode) {\n      if (!initExpr) {\n        let previousFlow = this.currentFlow;\n        if (global.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = global.file.startFunction.flow;\n        }\n        initExpr = this.compileExpression(initializerNode, type,\n          Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP | Constraints.WILL_RETAIN | Constraints.PREFER_STATIC\n        );\n        if (this.skippedAutoreleases.has(initExpr)) initAutoreleaseSkipped = true;\n        this.currentFlow = previousFlow;\n      }\n\n      if (getExpressionId(initExpr) != ExpressionId.Const) {\n        if (isDeclaredConstant) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) initializeInStart = true;\n        } else {\n          initializeInStart = true;\n        }\n      }\n\n      // Explicitly inline if annotated\n      if (isDeclaredInline) {\n        if (initializeInStart) {\n          this.warning(\n            DiagnosticCode.Mutable_value_cannot_be_inlined,\n            initializerNode.range\n          );\n        } else {\n          assert(getExpressionId(initExpr) == ExpressionId.Const);\n          let exprType = getExpressionType(initExpr);\n          switch (exprType) {\n            case NativeType.I32: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(getConstValueI32(initExpr), 0);\n              break;\n            }\n            case NativeType.I64: {\n              global.constantValueKind = ConstantValueKind.INTEGER;\n              global.constantIntegerValue = i64_new(\n                getConstValueI64Low(initExpr),\n                getConstValueI64High(initExpr)\n              );\n              break;\n            }\n            case NativeType.F32: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF32(initExpr);\n              break;\n            }\n            case NativeType.F64: {\n              global.constantValueKind = ConstantValueKind.FLOAT;\n              global.constantFloatValue = getConstValueF64(initExpr);\n              break;\n            }\n            default: {\n              assert(false);\n              return false;\n            }\n          }\n          global.set(CommonFlags.INLINED); // inline the value from now on\n        }\n      }\n\n    // Initialize to zero if there's no initializer\n    } else {\n      initExpr = type.toNativeZero(module);\n    }\n\n    var internalName = global.internalName;\n\n    if (initializeInStart) { // initialize to mutable zero and set the actual value in start\n      if (isDeclaredInline) {\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          assert(findDecorator(DecoratorKind.INLINE, global.decoratorNodes)).range, \"inline\"\n        );\n      }\n      module.addGlobal(internalName, nativeType, true, type.toNativeZero(module));\n      if (type.isManaged && !initAutoreleaseSkipped) initExpr = this.makeRetain(initExpr);\n      this.currentBody.push(\n        module.global_set(internalName, initExpr)\n      );\n    } else if (!isDeclaredInline) { // compile normally\n      module.addGlobal(internalName, nativeType, !isDeclaredConstant, initExpr);\n    }\n    return true;\n  }\n\n  // === Enums ====================================================================================\n\n  compileEnum(element: Enum): bool {\n    if (element.is(CommonFlags.COMPILED)) return true;\n    element.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var previousParent = this.currentParent;\n    this.currentParent = element;\n    var previousValue: EnumValue | null = null;\n    var previousValueIsMut = false;\n    var isInline = element.is(CommonFlags.CONST) || element.hasDecorator(DecoratorFlags.INLINE);\n\n    if (element.members) {\n      for (let member of element.members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) continue; // happens if an enum is also a namespace\n        let initInStart = false;\n        let val = <EnumValue>member;\n        let valueNode = val.valueNode;\n        val.set(CommonFlags.COMPILED);\n        let previousFlow = this.currentFlow;\n        if (element.hasDecorator(DecoratorFlags.LAZY)) {\n          this.currentFlow = element.file.startFunction.flow;\n        }\n        let initExpr: ExpressionRef;\n        if (valueNode) {\n          initExpr = this.compileExpression(valueNode, Type.i32,\n            Constraints.CONV_IMPLICIT // autorelease is not applicable in i32 context\n          );\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            initExpr = module.precomputeExpression(initExpr);\n            if (getExpressionId(initExpr) != ExpressionId.Const) {\n              if (element.is(CommonFlags.CONST)) {\n                this.error(\n                  DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                  valueNode.range\n                );\n              }\n              initInStart = true;\n            }\n          }\n        } else if (previousValue == null) {\n          initExpr = module.i32(0);\n        } else {\n          if (previousValueIsMut) {\n            this.error(\n              DiagnosticCode.Enum_member_must_have_initializer,\n              (<EnumValue>member).identifierNode.range.atEnd\n            );\n          }\n          initExpr = module.binary(BinaryOp.AddI32,\n            module.global_get(previousValue.internalName, NativeType.I32),\n            module.i32(1)\n          );\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) != ExpressionId.Const) {\n            if (element.is(CommonFlags.CONST)) {\n              this.error(\n                DiagnosticCode.In_const_enum_declarations_member_initializer_must_be_constant_expression,\n                member.declaration.range\n              );\n            }\n            initInStart = true;\n          }\n        }\n        this.currentFlow = previousFlow;\n        if (initInStart) {\n          module.addGlobal(val.internalName, NativeType.I32, true, module.i32(0));\n          this.currentBody.push(\n            this.makeGlobalAssignment(val, initExpr, false)\n          );\n          previousValueIsMut = true;\n        } else {\n          if (isInline) {\n            val.setConstantIntegerValue(i64_new(getConstValueI32(initExpr)), Type.i32);\n            if (val.is(CommonFlags.MODULE_EXPORT)) {\n              module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n            }\n          } else {\n            module.addGlobal(val.internalName, NativeType.I32, false, initExpr);\n          }\n          val.isImmutable = true;\n          previousValueIsMut = false;\n        }\n        previousValue = <EnumValue>val;\n      }\n    }\n    this.currentParent = previousParent;\n    return true;\n  }\n\n  // === Functions ================================================================================\n\n  /** Resolves the specified type arguments prior to compiling the resulting function instance. */\n  compileFunctionUsingTypeArguments(\n    prototype: FunctionPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): Function | null {\n    if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) return null;\n    var instance = this.resolver.resolveFunctionInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return null;\n    if (!this.compileFunction(instance)) return null; // reports\n    return instance;\n  }\n\n  /** Either reuses or creates the function type matching the specified signature. */\n  ensureFunctionType(\n    parameterTypes: Type[] | null,\n    returnType: Type,\n    thisType: Type | null = null\n  ): FunctionTypeRef {\n    var numParameters = parameterTypes ? parameterTypes.length : 0;\n    var paramTypes: NativeType[];\n    var index = 0;\n    if (thisType) {\n      paramTypes = new Array(1 + numParameters);\n      paramTypes[0] = thisType.toNativeType();\n      index = 1;\n    } else {\n      paramTypes = new Array(numParameters);\n    }\n    if (parameterTypes) {\n      for (let i = 0; i < numParameters; ++i, ++index) {\n        paramTypes[index] = parameterTypes[i].toNativeType();\n      }\n    }\n    var resultType = returnType.toNativeType();\n    var module = this.module;\n    var typeRef = module.getFunctionTypeBySignature(resultType, paramTypes);\n    if (!typeRef) {\n      let name = Signature.makeSignatureString(parameterTypes, returnType, thisType);\n      typeRef = module.addFunctionType(name, resultType, paramTypes);\n    }\n    return typeRef;\n  }\n\n  /** Compiles the body of a function within the specified flow. */\n  compileFunctionBody(\n    /** Function to compile. */\n    instance: Function,\n    /** Target array of statements. */\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var module = this.module;\n    var bodyNode = assert(instance.prototype.bodyNode);\n    var returnType = instance.signature.returnType;\n    var flow = this.currentFlow;\n\n    // compile statements\n    if (bodyNode.kind == NodeKind.BLOCK) {\n      stmts = this.compileStatements((<BlockStatement>bodyNode).statements, true, stmts);\n    } else {\n      // must be an expression statement if not a block\n      assert(bodyNode.kind == NodeKind.EXPRESSION);\n\n      // must be an arrow function\n      assert(instance.prototype.arrowKind);\n\n      // none of the following can be an arrow function\n      assert(!instance.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.GET | CommonFlags.SET | CommonFlags.MAIN));\n\n      let expr = this.compileExpression((<ExpressionStatement>bodyNode).expression, returnType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (!stmts) stmts = [ expr ];\n      else stmts.push(expr);\n      if (!flow.is(FlowFlags.TERMINATES)) { // TODO: detect if returning an autorelease local?\n        let indexBefore = stmts.length;\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n        let canOverflow = flow.canOverflow(expr, returnType);\n        let nonNull = flow.isNonnull(expr, returnType);\n        if (stmts.length > indexBefore) {\n          let temp = flow.getTempLocal(returnType);\n          if (!canOverflow) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          if (nonNull) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          stmts[indexBefore - 1] = module.local_set(temp.index, expr);\n          stmts.push(module.local_get(temp.index, returnType.toNativeType()));\n          flow.freeTempLocal(temp);\n        }\n        if (!canOverflow) flow.set(FlowFlags.RETURNS_WRAPPED);\n        if (nonNull) flow.set(FlowFlags.RETURNS_NONNULL);\n        flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n      }\n    }\n\n    // make constructors return their instance pointer\n    if (instance.is(CommonFlags.CONSTRUCTOR)) {\n      let nativeSizeType = this.options.nativeSizeType;\n      assert(instance.is(CommonFlags.INSTANCE));\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n\n        // if `this` wasn't accessed before, allocate if necessary and initialize `this`\n        if (!flow.is(FlowFlags.ALLOCATES)) {\n          // {\n          //   if (!this) this = <ALLOC>\n          //   this.a = X\n          //   this.b = Y\n          // }\n          stmts.push(\n            module.if(\n              module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                module.local_get(thisLocal.index, nativeSizeType)\n              ),\n              module.local_set(thisLocal.index,\n                this.makeRetain(\n                  this.makeAllocation(<Class>classInstance)\n                ),\n              )\n            )\n          );\n          this.makeFieldInitialization(<Class>classInstance, stmts);\n        }\n        this.performAutoreleases(flow, stmts); // `this` is excluded anyway\n        this.finishAutoreleases(flow, stmts);\n        stmts.push(module.local_get(thisLocal.index, this.options.nativeSizeType));\n        flow.set(FlowFlags.RETURNS | FlowFlags.RETURNS_NONNULL | FlowFlags.TERMINATES);\n      }\n\n      // check that super has been called if this is a derived class\n      if ((<Class>classInstance).base && !flow.is(FlowFlags.CALLS_SUPER)) {\n        this.error(\n          DiagnosticCode.Constructors_for_derived_classes_must_contain_a_super_call,\n          instance.prototype.declaration.range\n        );\n      }\n\n    // if this is a normal function, make sure that all branches terminate\n    } else if (returnType != Type.void && !flow.is(FlowFlags.TERMINATES)) {\n      this.error(\n        DiagnosticCode.A_function_whose_declared_type_is_not_void_must_return_a_value,\n        instance.prototype.functionTypeNode.returnType.range\n      );\n    }\n\n    return stmts;\n  }\n\n  /** Compiles a readily resolved function instance. */\n  compileFunction(instance: Function): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    assert(!(instance.is(CommonFlags.AMBIENT) && instance.hasDecorator(DecoratorFlags.BUILTIN)));\n\n    var previousType = this.currentType; // remember to retain it if compiling a function lazily\n    instance.set(CommonFlags.COMPILED);\n\n    var module = this.module;\n    var signature = instance.signature;\n    var bodyNode = instance.prototype.bodyNode;\n\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var funcRef: FunctionRef;\n\n    // concrete function\n    if (bodyNode) {\n\n      // must not be ambient\n      if (instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          instance.identifierNode.range\n        );\n      }\n\n      // cannot have an annotated external name\n      if (instance.hasDecorator(DecoratorFlags.EXTERNAL)) {\n        let decoratorNodes = instance.decoratorNodes;\n        let decorator = assert(findDecorator(DecoratorKind.EXTERNAL, decoratorNodes));\n        this.error(\n          DiagnosticCode.Decorator_0_is_not_valid_here,\n          decorator.range, \"external\"\n        );\n      }\n\n      // compile body in this function's context\n      let previousFlow = this.currentFlow;\n      let flow = instance.flow;\n      this.currentFlow = flow;\n      let stmts = new Array<ExpressionRef>();\n\n      // retain each argument for as long as the function lives\n      let index = 0;\n      let thisType = signature.thisType;\n      if (thisType) {\n        // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n        ++index;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = 0, k = parameterTypes.length; i < k; ++i, ++index) {\n        let type = parameterTypes[i];\n        if (type.isManaged) {\n          stmts.push(\n            module.drop(\n              this.makeRetain(\n                module.local_get(index, type.toNativeType())\n              )\n            )\n          );\n          flow.setLocalFlag(index, LocalFlags.RETAINED | LocalFlags.PARAMETER);\n        }\n      }\n\n      this.compileFunctionBody(instance, stmts);\n      if (!flow.is(FlowFlags.TERMINATES)) {\n        this.performAutoreleases(flow, stmts);\n        this.finishAutoreleases(flow, stmts);\n      }\n      this.currentFlow = previousFlow;\n\n      // create the function\n      funcRef = module.addFunction(\n        instance.internalName,\n        typeRef,\n        typesToNativeTypes(instance.additionalLocals),\n        flatten(module, stmts, instance.signature.returnType.toNativeType())\n      );\n\n    // imported function\n    } else {\n      if (!instance.is(CommonFlags.AMBIENT)) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          instance.identifierNode.range\n        );\n      }\n\n      instance.set(CommonFlags.MODULE_IMPORT);\n      mangleImportName(instance, instance.declaration); // TODO: check for duplicates\n\n      // create the import\n      module.addFunctionImport(\n        instance.internalName,\n        mangleImportName_moduleName,\n        mangleImportName_elementName,\n        typeRef\n      );\n      funcRef = module.getFunction(instance.internalName);\n    }\n\n    instance.finalize(module, funcRef);\n    this.currentType = previousType;\n    return true;\n  }\n\n  // === Classes ==================================================================================\n\n  compileClassUsingTypeArguments(\n    prototype: ClassPrototype,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> = makeMap(),\n    alternativeReportNode: Node | null = null\n  ): void {\n    var instance = this.resolver.resolveClassInclTypeArguments(\n      prototype,\n      typeArguments,\n      prototype.parent, // relative to itself\n      contextualTypeArguments,\n      alternativeReportNode || prototype.declaration\n    );\n    if (!instance) return;\n    this.compileClass(instance);\n  }\n\n  compileClass(instance: Class): bool {\n    if (instance.is(CommonFlags.COMPILED)) return true;\n    instance.set(CommonFlags.COMPILED);\n    var prototype = instance.prototype;\n    var staticMembers = (<ClassPrototype>prototype).members;\n    if (staticMembers) {\n      for (let element of staticMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.GLOBAL: {\n            this.compileGlobal(<Global>element);\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(),\n                (<FunctionPrototype>element).identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY_PROTOTYPE: {\n            let getter = (<PropertyPrototype>element).getterPrototype;\n            if (getter) {\n              this.compileFunctionUsingTypeArguments(\n                getter,\n                [],\n                makeMap<string,Type>(),\n                getter.identifierNode\n              );\n            }\n            let setter = (<PropertyPrototype>element).setterPrototype;\n            if (setter) {\n              this.compileFunctionUsingTypeArguments(\n                setter,\n                [],\n                makeMap<string,Type>(),\n                setter.identifierNode\n              );\n            }\n            break;\n          }\n          case ElementKind.PROPERTY: {\n          }\n        }\n      }\n    }\n    var ctorInstance = instance.constructorInstance;\n    if (ctorInstance) this.compileFunction(ctorInstance);\n    var instanceMembers = instance.members;\n    if (instanceMembers) {\n      for (let element of instanceMembers.values()) {\n        switch (element.kind) {\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            if (\n              !(<FunctionPrototype>element).is(CommonFlags.GENERIC)\n            ) {\n              this.compileFunctionUsingTypeArguments(\n                <FunctionPrototype>element,\n                [],\n                makeMap<string,Type>(instance.contextualTypeArguments),\n                (<FunctionPrototype>element).declaration.name\n              );\n            }\n            break;\n          }\n          case ElementKind.FIELD_PROTOTYPE: {\n            element.set(CommonFlags.COMPILED);\n            break;\n          }\n          case ElementKind.PROPERTY: {\n            let getter = (<Property>element).getterInstance;\n            if (getter) this.compileFunction(getter);\n            let setter = (<Property>element).setterInstance;\n            if (setter) this.compileFunction(setter);\n            break;\n          }\n        }\n      }\n    }\n    return true;\n  }\n\n  compileInterfaceDeclaration(\n    declaration: InterfaceDeclaration,\n    typeArguments: NamedTypeNode[],\n    contextualTypeArguments: Map<string,Type> | null = null,\n    alternativeReportNode: Node | null = null\n  ): void {\n    // TODO\n    this.error(\n      DiagnosticCode.Not_implemented,\n      declaration.range\n    );\n  }\n\n  // === Memory ===================================================================================\n\n  /** Adds a static memory segment with the specified data. */\n  addMemorySegment(buffer: Uint8Array, alignment: i32 = 8): MemorySegment {\n    var memoryOffset = i64_align(this.memoryOffset, alignment);\n    var segment = MemorySegment.create(buffer, memoryOffset);\n    this.memorySegments.push(segment);\n    this.memoryOffset = i64_add(memoryOffset, i64_new(buffer.length, 0));\n    return segment;\n  }\n\n  /** Ensures that the specified string exists in static memory and returns a pointer to it. */\n  ensureStaticString(stringValue: string): ExpressionRef {\n    var program = this.program;\n    var rtHeaderSize = program.runtimeHeaderSize;\n    var stringInstance = assert(program.stringInstance);\n    var stringSegment: MemorySegment;\n    var segments = this.stringSegments;\n    if (segments.has(stringValue)) {\n      stringSegment = segments.get(stringValue)!; // reuse\n    } else {\n      let length = stringValue.length;\n      let buffer = new Uint8Array(rtHeaderSize + (length << 1));\n      program.writeRuntimeHeader(buffer, 0, stringInstance, length << 1);\n      for (let i = 0; i < length; ++i) {\n        writeI16(stringValue.charCodeAt(i), buffer, rtHeaderSize + (i << 1));\n      }\n      stringSegment = this.addMemorySegment(buffer);\n      segments.set(stringValue, stringSegment);\n    }\n    var ref = i64_add(stringSegment.offset, i64_new(rtHeaderSize));\n    this.currentType = stringInstance.type;\n    if (this.options.isWasm64) {\n      return this.module.i64(i64_low(ref), i64_high(ref));\n    } else {\n      assert(i64_is_u32(ref));\n      return this.module.i32(i64_low(ref));\n    }\n  }\n\n  ensureStaticArrayBuffer(elementType: Type, values: ExpressionRef[]): MemorySegment {\n    var program = this.program;\n    var length = values.length;\n    var byteSize = elementType.byteSize;\n    var byteLength = length * byteSize;\n    var bufferInstance = assert(program.arrayBufferInstance);\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n\n    var buf = new Uint8Array(runtimeHeaderSize + byteLength);\n    program.writeRuntimeHeader(buf, 0, bufferInstance, byteLength);\n    var pos = runtimeHeaderSize;\n    var nativeType = elementType.toNativeType();\n    switch (nativeType) {\n      case NativeType.I32: {\n        switch (byteSize) {\n          case 1: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI8(getConstValueI32(value), buf, pos);\n              pos += 1;\n            }\n            break;\n          }\n          case 2: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI16(getConstValueI32(value), buf, pos);\n              pos += 2;\n            }\n            break;\n          }\n          case 4: {\n            for (let i = 0; i < length; ++i) {\n              let value = values[i];\n              assert(getExpressionType(value) == nativeType);\n              assert(getExpressionId(value) == ExpressionId.Const);\n              writeI32(getConstValueI32(value), buf, pos);\n              pos += 4;\n            }\n            break;\n          }\n          default: assert(false);\n        }\n        break;\n      }\n      case NativeType.I64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeI64(i64_new(getConstValueI64Low(value), getConstValueI64High(value)), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      case NativeType.F32: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF32(getConstValueF32(value), buf, pos);\n          pos += 4;\n        }\n        break;\n      }\n      case NativeType.F64: {\n        for (let i = 0; i < length; ++i) {\n          let value = values[i];\n          assert(getExpressionType(value) == nativeType);\n          assert(getExpressionId(value) == ExpressionId.Const);\n          writeF64(getConstValueF64(value), buf, pos);\n          pos += 8;\n        }\n        break;\n      }\n      default: assert(false);\n    }\n    assert(pos == buf.length);\n\n    return this.addMemorySegment(buf);\n  }\n\n  ensureStaticArrayHeader(elementType: Type, bufferSegment: MemorySegment): MemorySegment {\n    var program = this.program;\n    var runtimeHeaderSize = program.runtimeHeaderSize;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayInstanceSize = arrayInstance.currentMemoryOffset;\n    var bufferLength = bufferSegment.buffer.length - runtimeHeaderSize;\n    var arrayLength = i32(bufferLength / elementType.byteSize);\n\n    var buf = new Uint8Array(runtimeHeaderSize + arrayInstanceSize);\n    program.writeRuntimeHeader(buf, 0, arrayInstance, arrayInstanceSize);\n\n    var bufferAddress32 = i64_low(bufferSegment.offset) + runtimeHeaderSize;\n    assert(!program.options.isWasm64); // TODO\n    assert(arrayInstance.writeField(\"buffer\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"dataStart\", bufferAddress32, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"byteLength\", bufferLength, buf, runtimeHeaderSize));\n    assert(arrayInstance.writeField(\"length_\", arrayLength, buf, runtimeHeaderSize));\n\n    return this.addMemorySegment(buf);\n  }\n\n  // === Table ====================================================================================\n\n  /** Ensures that a table entry exists for the specified function and returns its index. */\n  ensureFunctionTableEntry(func: Function): i32 {\n    assert(func.is(CommonFlags.COMPILED));\n    if (func.functionTableIndex >= 0) {\n      return func.functionTableIndex;\n    }\n    var functionTable = this.functionTable;\n    var index = functionTable.length;\n    if (!func.is(CommonFlags.TRAMPOLINE) && func.signature.requiredParameters < func.signature.parameterTypes.length) {\n      // insert the trampoline if the function has optional parameters\n      func = this.ensureTrampoline(func);\n    }\n    functionTable.push(func.internalName);\n    func.functionTableIndex = index;\n    return index;\n  }\n\n  // === Statements ===============================================================================\n\n  compileTopLevelStatement(statement: Statement, body: ExpressionRef[]): void {\n    switch (statement.kind) {\n      case NodeKind.CLASSDECLARATION: {\n        let memberStatements = (<ClassDeclaration>statement).members;\n        for (let i = 0, k = memberStatements.length; i < k; ++i) {\n          this.compileTopLevelStatement(memberStatements[i], body);\n        }\n        break;\n      }\n      case NodeKind.ENUMDECLARATION: {\n        let element = this.program.getElementByDeclaration(<EnumDeclaration>statement);\n        if (element) {\n          assert(element.kind == ElementKind.ENUM);\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileEnum(<Enum>element);\n        }\n        break;\n      }\n      case NodeKind.NAMESPACEDECLARATION: {\n        let element = this.program.getElementByDeclaration(<NamespaceDeclaration>statement);\n        if (element) {\n          // any potentiall merged element\n          let previousParent = this.currentParent;\n          this.currentParent = element;\n          let memberStatements = (<NamespaceDeclaration>statement).members;\n          for (let i = 0, k = memberStatements.length; i < k; ++i) {\n            this.compileTopLevelStatement(memberStatements[i], body);\n          }\n          this.currentParent = previousParent;\n        }\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        let declarations = (<VariableStatement>statement).declarations;\n        for (let i = 0, k = declarations.length; i < k; ++i) {\n          let element = this.program.getElementByDeclaration(declarations[i]);\n          if (element) {\n            assert(element.kind == ElementKind.GLOBAL);\n            if (\n              !element.is(CommonFlags.AMBIENT) && // delay imports\n              !element.hasDecorator(DecoratorFlags.LAZY)\n            ) this.compileGlobal(<Global>element);\n          }\n        }\n        break;\n      }\n      case NodeKind.FIELDDECLARATION: {\n        let element = this.program.getElementByDeclaration(<FieldDeclaration>statement);\n        if (element !== null && element.kind == ElementKind.GLOBAL) { // static\n          if (!element.hasDecorator(DecoratorFlags.LAZY)) this.compileGlobal(<Global>element);\n        }\n        break;\n      }\n      case NodeKind.EXPORT: {\n        if ((<ExportStatement>statement).internalPath != null) {\n          this.compileFileByPath(\n            <string>(<ExportStatement>statement).internalPath,\n            <StringLiteralExpression>(<ExportStatement>statement).path\n          );\n        }\n        break;\n      }\n      case NodeKind.EXPORTDEFAULT: {\n        this.compileTopLevelStatement((<ExportDefaultStatement>statement).declaration, body);\n        break;\n      }\n      case NodeKind.IMPORT: {\n        this.compileFileByPath(\n          (<ImportStatement>statement).internalPath,\n          (<ImportStatement>statement).path\n        );\n        break;\n      }\n      case NodeKind.FUNCTIONDECLARATION:\n      case NodeKind.METHODDECLARATION:\n      case NodeKind.INTERFACEDECLARATION:\n      case NodeKind.INDEXSIGNATUREDECLARATION:\n      case NodeKind.TYPEDECLARATION: break;\n      default: { // otherwise a top-level statement that is part of the start function's body\n        let stmt = this.compileStatement(statement);\n        if (getExpressionId(stmt) != ExpressionId.Nop) body.push(stmt);\n        break;\n      }\n    }\n  }\n\n  compileStatement(\n    statement: Statement,\n    isLastInBody: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var stmt: ExpressionRef;\n    switch (statement.kind) {\n      case NodeKind.BLOCK: {\n        stmt = this.compileBlockStatement(<BlockStatement>statement);\n        break;\n      }\n      case NodeKind.BREAK: {\n        stmt = this.compileBreakStatement(<BreakStatement>statement);\n        break;\n      }\n      case NodeKind.CONTINUE: {\n        stmt = this.compileContinueStatement(<ContinueStatement>statement);\n        break;\n      }\n      case NodeKind.DO: {\n        stmt = this.compileDoStatement(<DoStatement>statement);\n        break;\n      }\n      case NodeKind.EMPTY: {\n        stmt = this.compileEmptyStatement(<EmptyStatement>statement);\n        break;\n      }\n      case NodeKind.EXPRESSION: {\n        stmt = this.compileExpressionStatement(<ExpressionStatement>statement);\n        break;\n      }\n      case NodeKind.FOR: {\n        stmt = this.compileForStatement(<ForStatement>statement);\n        break;\n      }\n      case NodeKind.IF: {\n        stmt = this.compileIfStatement(<IfStatement>statement);\n        break;\n      }\n      case NodeKind.RETURN: {\n        stmt = this.compileReturnStatement(<ReturnStatement>statement, isLastInBody);\n        break;\n      }\n      case NodeKind.SWITCH: {\n        stmt = this.compileSwitchStatement(<SwitchStatement>statement);\n        break;\n      }\n      case NodeKind.THROW: {\n        stmt = this.compileThrowStatement(<ThrowStatement>statement);\n        break;\n      }\n      case NodeKind.TRY: {\n        stmt = this.compileTryStatement(<TryStatement>statement);\n        break;\n      }\n      case NodeKind.VARIABLE: {\n        stmt = this.compileVariableStatement(<VariableStatement>statement);\n        if (!stmt) stmt = module.nop();\n        break;\n      }\n      case NodeKind.VOID: {\n        stmt = this.compileVoidStatement(<VoidStatement>statement);\n        break;\n      }\n      case NodeKind.WHILE: {\n        stmt = this.compileWhileStatement(<WhileStatement>statement);\n        break;\n      }\n      case NodeKind.TYPEDECLARATION: {\n        // TODO: integrate inner type declaration into flow\n        this.error(\n          DiagnosticCode.Not_implemented,\n          statement.range\n        );\n        stmt = module.unreachable();\n        break;\n      }\n      default: {\n        assert(false);\n        stmt = module.unreachable();\n      }\n    }\n    if (this.options.sourceMap) this.addDebugLocation(stmt, statement.range);\n    return stmt;\n  }\n\n  compileStatements(\n    statements: Statement[],\n    isBody: bool = false,\n    stmts: ExpressionRef[] | null = null\n  ): ExpressionRef[] {\n    var numStatements = statements.length;\n    if (!stmts) {\n      stmts = new Array<ExpressionRef>(numStatements);\n      stmts.length = 0;\n    }\n    var module = this.module;\n    var flow = this.currentFlow;\n    for (let i = 0; i < numStatements; ++i) {\n      let stmt = this.compileStatement(statements[i], isBody && i == numStatements - 1);\n      switch (getExpressionId(stmt)) {\n        case ExpressionId.Block: {\n          if (!getBlockName(stmt)) {\n            for (let j = 0, k = getBlockChildCount(stmt); j < k; ++j) stmts.push(getBlockChild(stmt, j));\n            break;\n          }\n          // fall-through\n        }\n        default: stmts.push(stmt);\n        case ExpressionId.Nop:\n      }\n      if (flow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n        if (needsExplicitUnreachable(stmt)) stmts.push(module.unreachable());\n        break;\n      }\n    }\n    return stmts;\n  }\n\n  compileBlockStatement(\n    statement: BlockStatement\n  ): ExpressionRef {\n    var statements = statement.statements;\n    var outerFlow = this.currentFlow;\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    var stmts = this.compileStatements(statements);\n    if (!innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(innerFlow, stmts);\n    innerFlow.freeScopedLocals();\n    outerFlow.inherit(innerFlow); // TODO: only if not terminated?\n    this.currentFlow = outerFlow;\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileBreakStatement(\n    statement: BreakStatement\n  ): ExpressionRef {\n    var module = this.module;\n    if (statement.label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        statement.label.range\n      );\n      return module.unreachable();\n    }\n    var flow = this.currentFlow;\n    var breakLabel = flow.breakLabel;\n    if (breakLabel == null) {\n      this.error(\n        DiagnosticCode.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var parent = flow.parent;\n    while (parent !== null && parent.breakLabel == breakLabel) {\n      this.performAutoreleases(parent, stmts, /* clearFlags */ false);\n      parent = parent.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(breakLabel));\n    flow.set(FlowFlags.BREAKS);\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileContinueStatement(\n    statement: ContinueStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var label = statement.label;\n    if (label) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        label.range\n      );\n      return module.unreachable();\n    }\n    // Check if 'continue' is allowed here\n    var flow = this.currentFlow;\n    var continueLabel = flow.continueLabel;\n    if (continueLabel == null) {\n      this.error(\n        DiagnosticCode.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement,\n        statement.range\n      );\n      return module.unreachable();\n    }\n    flow.set(FlowFlags.CONTINUES | FlowFlags.TERMINATES);\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    var current: Flow | null = flow.parent;\n    while (current && current.continueLabel === continueLabel) {\n      this.performAutoreleases(current, stmts, /* clearFlags */ false);\n      current = current.parent;\n    }\n    flow.freeScopedLocals();\n    stmts.push(module.br(continueLabel));\n    return flatten(module, stmts, NativeType.None);\n  }\n\n  compileDoStatement(\n    statement: DoStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n\n    // Compile the condition before the body in order to...\n    var condFlow = outerFlow.fork();\n    this.currentFlow = condFlow;\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.i32),\n        this.currentType\n      )\n    );\n    assert(!condFlow.hasScopedLocals);\n    // ...unify local states before and after the condition has been executed the first time\n    innerFlow.unifyLocalFlags(condFlow);\n    this.currentFlow = innerFlow;\n\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(\n        this.compileStatement(statement.statement)\n      );\n    }\n    var alwaysFalse = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) alwaysFalse = true;\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n    var continues = innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n\n    // (block $break            ;; (1) skip if no breaks\n    //  (loop $continue         ;; (2) skip if skipping (4) + no continues\n    //   (...)                  ;; (3)\n    //   (br_if cond $continue) ;; (4) skip if (3) does not fall through or always false\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) {\n      this.performAutoreleases(innerFlow, stmts);\n      if (!alwaysFalse) { // (4)\n        stmts.push(module.br(continueLabel, condExpr));\n      }\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough && !alwaysFalse || continues) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (breaks) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    outerFlow.inherit(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileEmptyStatement(\n    statement: EmptyStatement\n  ): ExpressionRef {\n    return this.module.nop();\n  }\n\n  compileExpressionStatement(\n    statement: ExpressionStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void, Constraints.CONV_IMPLICIT);\n  }\n\n  compileForStatement(\n    statement: ForStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    // Set up and use the inner flow\n    var outerFlow = this.currentFlow;\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n\n    // Compile the initializer\n    var initializer = statement.initializer;\n    var initExpr: ExpressionRef = 0;\n    if (initializer) initExpr = this.compileStatement(initializer);\n\n    // Compile the condition\n    var condExpr: ExpressionRef = 0;\n    var alwaysTrue = false;\n    if (statement.condition) {\n      condExpr = module.precomputeExpression(\n        this.makeIsTrueish(\n          this.compileExpression(<Expression>statement.condition, Type.bool),\n          this.currentType\n        )\n      );\n      // Simplify if the condition is constant\n      if (getExpressionId(condExpr) == ExpressionId.Const) {\n        assert(getExpressionType(condExpr) == NativeType.I32);\n        if (getConstValueI32(condExpr) == /* false */ 0) {\n          let stmts = new Array<ExpressionRef>();\n          if (initExpr) stmts.push(initExpr);\n          this.performAutoreleases(innerFlow, stmts);\n          innerFlow.freeScopedLocals();\n          outerFlow.popBreakLabel();\n          this.currentFlow = outerFlow;\n          return flatten(module, stmts, NativeType.None);\n        }\n        alwaysTrue = true;\n      }\n    } else { // Omitted condition is always true\n      condExpr = module.i32(1);\n      alwaysTrue = true;\n    }\n    innerFlow.inheritNonnullIfTrue(condExpr);\n\n    // Compile the incrementor before the body in order to...\n    var incrementor = statement.incrementor;\n    var incrExpr: ExpressionRef = 0;\n    if (incrementor) {\n      let incrFlow = innerFlow.fork();\n      this.currentFlow = incrFlow;\n      incrExpr = this.compileExpression(incrementor, Type.void, Constraints.CONV_IMPLICIT | Constraints.WILL_DROP);\n      assert(!incrFlow.hasScopedLocals);\n      this.currentFlow = innerFlow;\n      // ...unify local states before and after the incrementor has been executed the first time\n      innerFlow.unifyLocalFlags(incrFlow);\n    }\n\n    // Compile body (break: drop out, continue: fall through to incrementor, + loop)\n    var bodyFlow = innerFlow.fork();\n    this.currentFlow = bodyFlow;\n    var breakLabel = innerFlow.breakLabel = \"break|\" + label; bodyFlow.breakLabel = breakLabel;\n    bodyFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    bodyFlow.continueLabel = continueLabel;\n    var loopLabel = \"loop|\" + label;\n    var bodyStatement = statement.statement;\n    var stmts = new Array<ExpressionRef>();\n    if (bodyStatement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>bodyStatement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(bodyStatement));\n    }\n    var terminates = bodyFlow.is(FlowFlags.TERMINATES);\n    var continues = bodyFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES);\n    var breaks = bodyFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS);\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    // Finalize body flow\n    if (fallsThrough) this.performAutoreleases(bodyFlow, stmts);\n    bodyFlow.freeScopedLocals();\n    innerFlow.inherit(bodyFlow);\n    this.currentFlow = innerFlow;\n\n    // (block $break          ;; (1) skip label (needed anyway) if skipping (4) + no breaks\n    //  (initializer)         ;; (2) [may be empty]\n    //  (loop $loop           ;; (3) skip if (6) does not fall through + no continues\n    //   (br_if !cond $break) ;; (4) skip if always true\n    //   (block $continue     ;; (5) skip if no continues or nothing else than continue\n    //    (...)               ;; (6)\n    //   )\n    //   (incrementor)        ;; (7) skip if skipping (3) [may be empty]\n    //   (br $loop)           ;; (8) skip if skipping (3)\n    //  )\n    // )\n    var needsLabel = !alwaysTrue || breaks;\n\n    var loop = new Array<ExpressionRef>();\n    if (!alwaysTrue) { // (4)\n      loop.push(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    if (continues) { // (5)\n      if (stmts.length > 1 || getExpressionId(stmts[0]) != ExpressionId.Break) { // otherwise lonely continue\n        loop.push(module.block(continueLabel, stmts));\n      }\n    } else {\n      for (let i = 0, k = stmts.length; i < k; ++i) loop.push(stmts[i]);\n    }\n    var expr: ExpressionRef;\n    if (fallsThrough || continues) { // (3)\n      if (incrExpr) loop.push(incrExpr); // (7)\n      this.performAutoreleases(innerFlow, loop);\n      loop.push(module.br(loopLabel)); // (8)\n      if (initExpr) { // (2)\n        expr = module.block(needsLabel ? breakLabel : null, [\n          initExpr,\n          module.loop(loopLabel, module.block(null, loop))\n        ]);\n      } else {\n        expr = module.block(needsLabel ? breakLabel : null, [\n          module.loop(loopLabel, flatten(module, loop, NativeType.None))\n        ]);\n      }\n    } else {\n      if (initExpr) loop.unshift(initExpr); // (2)\n      this.performAutoreleases(innerFlow, loop);\n      expr = module.block(needsLabel ? breakLabel : null, loop);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  compileIfStatement(\n    statement: IfStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var ifTrue = statement.ifTrue;\n    var ifFalse = statement.ifFalse;\n    var outerFlow = this.currentFlow;\n\n    // The condition doesn't initiate a branch yet\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileStatement(ifTrue)\n        : ifFalse\n          ? this.compileStatement(ifFalse)\n          : module.nop();\n    }\n\n    // Each arm initiates a branch\n    var ifTrueStmts = new Array<ExpressionRef>();\n    var ifTrueFlow = outerFlow.fork();\n    this.currentFlow = ifTrueFlow;\n    ifTrueFlow.inheritNonnullIfTrue(condExpr);\n    if (ifTrue.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>ifTrue).statements, false, ifTrueStmts);\n    } else {\n      ifTrueStmts.push(this.compileStatement(ifTrue));\n    }\n    if (!ifTrueFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifTrueFlow, ifTrueStmts);\n    ifTrueFlow.freeScopedLocals();\n    this.currentFlow = outerFlow;\n\n    if (ifFalse) {\n      let ifFalseFlow = outerFlow.fork();\n      this.currentFlow = ifFalseFlow;\n      ifFalseFlow.inheritNonnullIfFalse(condExpr);\n      let ifFalseStmts = new Array<ExpressionRef>();\n      if (ifFalse.kind == NodeKind.BLOCK) {\n        this.compileStatements((<BlockStatement>ifFalse).statements, false, ifFalseStmts);\n      } else {\n        ifFalseStmts.push(this.compileStatement(ifFalse));\n      }\n      if (!ifFalseFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) this.performAutoreleases(ifFalseFlow, ifFalseStmts);\n      ifFalseFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      outerFlow.inheritMutual(ifTrueFlow, ifFalseFlow);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None),\n        flatten(module, ifFalseStmts, NativeType.None)\n      );\n    } else {\n      outerFlow.inheritConditional(ifTrueFlow);\n      if (ifTrueFlow.is(FlowFlags.TERMINATES)) outerFlow.inheritNonnullIfFalse(condExpr);\n      return module.if(condExpr,\n        flatten(module, ifTrueStmts, NativeType.None)\n      );\n    }\n    // TODO: Detect neglected condition\n    // if (!foo) {\n    //   foo = [notNull]\n    // }\n    // foo // is possibly null\n  }\n\n  compileReturnStatement(\n    statement: ReturnStatement,\n    isLastInBody: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var expr: ExpressionRef = 0;\n    var flow = this.currentFlow;\n    var returnType = flow.returnType;\n\n    // Remember that this flow returns\n    flow.set(FlowFlags.RETURNS | FlowFlags.TERMINATES);\n\n    var valueExpression = statement.value;\n    if (valueExpression) {\n      if (returnType == Type.void) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n          valueExpression.range, this.currentType.toString(), returnType.toString()\n        );\n        this.currentType = Type.void;\n        return module.unreachable();\n      }\n      let constraints = Constraints.CONV_IMPLICIT;\n      if (flow.actualFunction.is(CommonFlags.MODULE_EXPORT)) constraints |= Constraints.MUST_WRAP;\n      expr = this.compileExpression(valueExpression, returnType, constraints | Constraints.WILL_RETAIN);\n\n      // when returning a local, and it is already retained, skip the final set\n      // of retaining it as the return value and releasing it as a variable\n      if (!this.skippedAutoreleases.has(expr)) {\n        if (returnType.isManaged) {\n          if (getExpressionId(expr) == ExpressionId.LocalGet) {\n            let index = getLocalGetIndex(expr);\n            if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n              flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n              flow.setLocalFlag(index, LocalFlags.RETURNED);\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n        }\n      }\n\n      // remember return states\n      if (!flow.canOverflow(expr, returnType)) flow.set(FlowFlags.RETURNS_WRAPPED);\n      if (flow.isNonnull(expr, returnType)) flow.set(FlowFlags.RETURNS_NONNULL);\n\n    } else if (returnType != Type.void) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        statement.range, \"void\", returnType.toString()\n      );\n      expr = module.unreachable();\n    }\n\n    var stmts = new Array<ExpressionRef>();\n    this.performAutoreleases(flow, stmts);\n    this.finishAutoreleases(flow, stmts);\n\n    // Make sure that the return value is retained for the caller\n    if (returnType.isManaged && !this.skippedAutoreleases.has(expr)) expr = this.makeRetain(expr);\n\n    if (returnType != Type.void && stmts.length) {\n      let temp = flow.getTempLocal(returnType);\n      if (flow.isNonnull(expr, returnType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      stmts.unshift(\n        module.local_set(temp.index, expr)\n      );\n      expr = module.local_get(temp.index, returnType.toNativeType());\n      flow.freeTempLocal(temp);\n    }\n    flow.freeScopedLocals();\n\n    // If the last statement anyway, make it the block's return value\n    if (isLastInBody && expr && returnType != Type.void) {\n      if (!stmts.length) return expr;\n      stmts.push(expr);\n      return module.block(null, stmts, returnType.toNativeType());\n    }\n\n    // When inlining, break to the end of the inlined function's block (no need to wrap)\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      if (!stmts.length) return module.br(assert(flow.inlineReturnLabel), 0, expr);\n      stmts.push(module.br(assert(flow.inlineReturnLabel), 0, expr));\n      // stmts.push(module.createUnreachable());\n      return module.block(null, stmts);\n    }\n\n    // Otherwise emit a normal return\n    if (!stmts.length) return module.return(expr);\n    stmts.push(module.return(expr));\n    return module.block(null, stmts);\n  }\n\n  compileSwitchStatement(\n    statement: SwitchStatement\n  ): ExpressionRef {\n    var module = this.module;\n\n    var cases = statement.cases;\n    var numCases = cases.length;\n    if (!numCases) {\n      return this.compileExpression(statement.condition, Type.void,\n        Constraints.CONV_IMPLICIT\n      );\n    }\n\n    // Everything within a switch uses the same break context\n    var outerFlow = this.currentFlow;\n    var context = outerFlow.pushBreakLabel();\n\n    // introduce a local for evaluating the condition (exactly once)\n    var tempLocal = outerFlow.getTempLocal(Type.u32);\n    var tempLocalIndex = tempLocal.index;\n\n    // Prepend initializer to inner block. Does not initiate a new branch, yet.\n    var breaks = new Array<ExpressionRef>(1 + numCases);\n    breaks[0] = module.local_set( // initializer\n      tempLocalIndex,\n      this.compileExpression(statement.condition, Type.u32,\n        Constraints.CONV_IMPLICIT\n      )\n    );\n\n    // make one br_if per (possibly dynamic) labeled case (binaryen optimizes to br_table where possible)\n    var breakIndex = 1;\n    var defaultIndex = -1;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let label = case_.label;\n      if (label) {\n        breaks[breakIndex++] = module.br(\"case\" + i.toString(10) + \"|\" + context,\n          module.binary(BinaryOp.EqI32,\n            module.local_get(tempLocalIndex, NativeType.I32),\n            this.compileExpression(label, Type.u32,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        );\n      } else {\n        defaultIndex = i;\n      }\n    }\n\n    outerFlow.freeTempLocal(tempLocal);\n\n    // otherwise br to default respectively out of the switch if there is no default case\n    breaks[breakIndex] = module.br((defaultIndex >= 0\n        ? \"case\" + defaultIndex.toString(10)\n        : \"break\"\n      ) + \"|\" + context);\n\n    // nest blocks in order\n    var currentBlock = module.block(\"case0|\" + context, breaks, NativeType.None);\n    var commonCategorical = FlowFlags.ANY_CATEGORICAL;\n    var commonConditional = 0;\n    for (let i = 0; i < numCases; ++i) {\n      let case_ = cases[i];\n      let statements = case_.statements;\n      let numStatements = statements.length;\n\n      // Each switch case initiates a new branch\n      let innerFlow = outerFlow.fork();\n      this.currentFlow = innerFlow;\n      let breakLabel = \"break|\" + context;\n      innerFlow.breakLabel = breakLabel;\n\n      let isLast = i == numCases - 1;\n      let nextLabel = isLast ? breakLabel : \"case\" + (i + 1).toString(10) + \"|\" + context;\n      let stmts = new Array<ExpressionRef>(1 + numStatements);\n      stmts[0] = currentBlock;\n      let count = 1;\n      let terminates = false;\n      for (let j = 0; j < numStatements; ++j) {\n        let stmt = this.compileStatement(statements[j]);\n        if (getExpressionId(stmt) != ExpressionId.Nop) {\n          stmts[count++] = stmt;\n        }\n        if (innerFlow.isAny(FlowFlags.TERMINATES | FlowFlags.BREAKS)) {\n          if (innerFlow.is(FlowFlags.TERMINATES)) terminates = true;\n          break;\n        }\n      }\n      stmts.length = count;\n      if (terminates || isLast || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) {\n        commonCategorical &= innerFlow.flags;\n      }\n      commonConditional |= innerFlow.flags & FlowFlags.ANY_CONDITIONAL;\n\n      // Switch back to the parent flow\n      if (!terminates) this.performAutoreleases(innerFlow, stmts);\n      innerFlow.unset(\n        FlowFlags.BREAKS |\n        FlowFlags.CONDITIONALLY_BREAKS\n      );\n      innerFlow.freeScopedLocals();\n      this.currentFlow = outerFlow;\n      currentBlock = module.block(nextLabel, stmts, NativeType.None); // must be a labeled block\n    }\n    outerFlow.popBreakLabel();\n\n    // If the switch has a default (guaranteed to handle any value), propagate common flags\n    if (defaultIndex >= 0) outerFlow.flags |= commonCategorical & ~FlowFlags.BREAKS;\n    outerFlow.flags |= commonConditional & ~FlowFlags.CONDITIONALLY_BREAKS;\n    // TODO: what about local states?\n    return currentBlock;\n  }\n\n  compileThrowStatement(\n    statement: ThrowStatement\n  ): ExpressionRef {\n    var flow = this.currentFlow;\n\n    // Remember that this branch throws\n    flow.set(FlowFlags.THROWS | FlowFlags.TERMINATES);\n\n    var stmts = new Array<ExpressionRef>();\n    this.finishAutoreleases(flow, stmts);\n\n    // TODO: requires exception-handling spec.\n    var value = statement.value;\n    var message: Expression | null = null;\n    if (value.kind == NodeKind.NEW) {\n      let newArgs = (<NewExpression>value).arguments;\n      if (newArgs.length) message = newArgs[0]; // FIXME: naively assumes type string\n    }\n    stmts.push(compileAbort(this, message, statement));\n\n    return flatten(this.module, stmts, NativeType.None);\n  }\n\n  compileTryStatement(\n    statement: TryStatement\n  ): ExpressionRef {\n    // TODO: can't yet support something like: try { return ... } finally { ... }\n    // worthwhile to investigate lowering returns to block results (here)?\n    this.error(\n      DiagnosticCode.Not_implemented,\n      statement.range\n    );\n    return this.module.unreachable();\n  }\n\n  /** Compiles a variable statement. Returns `0` if an initializer is not necessary. */\n  compileVariableStatement(\n    statement: VariableStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var declarations = statement.declarations;\n    var numDeclarations = declarations.length;\n    var flow = this.currentFlow;\n    var initializers = new Array<ExpressionRef>();\n    var resolver = this.resolver;\n\n    for (let i = 0; i < numDeclarations; ++i) {\n      let declaration = declarations[i];\n      let name = declaration.name.text;\n      let type: Type | null = null;\n      let initExpr: ExpressionRef = 0;\n      let initAutoreleaseSkipped = false;\n\n      // Resolve type if annotated\n      if (declaration.type) {\n        type = resolver.resolveType( // reports\n          declaration.type,\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!type) continue;\n        if (declaration.initializer) {\n          initExpr = this.compileExpression(declaration.initializer, type, // reports\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n          initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        }\n\n      // Otherwise infer type from initializer\n      } else if (declaration.initializer) {\n        initExpr = this.compileExpression(declaration.initializer, Type.auto,\n          Constraints.WILL_RETAIN\n        ); // reports\n        initAutoreleaseSkipped = this.skippedAutoreleases.has(initExpr);\n        if (this.currentType == Type.void) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            declaration.range, this.currentType.toString(), \"<auto>\"\n          );\n          continue;\n        }\n        type = this.currentType;\n\n      // Error if there's neither a type nor an initializer\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          declaration.name.range.atEnd\n        );\n        continue;\n      }\n\n      // Handle constants, and try to inline if value is static\n      let isConst = declaration.is(CommonFlags.CONST);\n      let isStatic = false;\n      if (isConst) {\n        if (initExpr) {\n          initExpr = module.precomputeExpression(initExpr);\n          if (getExpressionId(initExpr) == ExpressionId.Const) {\n            let local = new Local(name, -1, type, flow.parentFunction);\n            switch (getExpressionType(initExpr)) {\n              case NativeType.I32: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI32(initExpr),\n                    0\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.I64: {\n                local.setConstantIntegerValue(\n                  i64_new(\n                    getConstValueI64Low(initExpr),\n                    getConstValueI64High(initExpr)\n                  ),\n                  type\n                );\n                break;\n              }\n              case NativeType.F32: {\n                local.setConstantFloatValue(<f64>getConstValueF32(initExpr), type);\n                break;\n              }\n              case NativeType.F64: {\n                local.setConstantFloatValue(getConstValueF64(initExpr), type);\n                break;\n              }\n              default: {\n                assert(false);\n                return module.unreachable();\n              }\n            }\n            // Create a virtual local that doesn't actually exist in WebAssembly\n            let scopedLocals = flow.scopedLocals;\n            if (!scopedLocals) flow.scopedLocals = scopedLocals = new Map();\n            else if (scopedLocals.has(name)) {\n              let existing = scopedLocals.get(name)!;\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existing.declaration.name.range,\n                name\n              );\n              return this.module.unreachable();\n            }\n            scopedLocals.set(name, local);\n            isStatic = true;\n          }\n        } else {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            declaration.range\n          );\n        }\n      }\n\n      // Otherwise compile as mutable\n      if (!isStatic) {\n        let local: Local;\n        if (\n          declaration.isAny(CommonFlags.LET | CommonFlags.CONST) ||\n          flow.is(FlowFlags.INLINE_CONTEXT)\n        ) { // here: not top-level\n          let existingLocal = flow.getScopedLocal(name);\n          if (existingLocal) {\n            if (!existingLocal.declaration.range.source.isNative) {\n              this.errorRelated(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range,\n                existingLocal.declaration.name.range,\n                name\n              );\n            } else { // scoped locals are shared temps that don't track declarations\n              this.error(\n                DiagnosticCode.Duplicate_identifier_0,\n                declaration.name.range, name\n              );\n            }\n            local = existingLocal;\n          } else {\n            local = flow.addScopedLocal(name, type);\n          }\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        } else {\n          let existing = flow.lookupLocal(name);\n          if (existing) {\n            this.errorRelated(\n              DiagnosticCode.Duplicate_identifier_0,\n              declaration.name.range,\n              existing.declaration.name.range,\n              name\n            );\n            continue;\n          }\n          local = flow.parentFunction.addLocal(type, name, declaration);\n          if (isConst) flow.setLocalFlag(local.index, LocalFlags.CONSTANT);\n        }\n        let isManaged = type.isManaged;\n        if (initExpr) {\n          if (flow.isNonnull(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.NONNULL);\n          if (isManaged) {\n            flow.setLocalFlag(local.index, LocalFlags.RETAINED);\n            initializers.push(\n              module.local_set(local.index,\n                initAutoreleaseSkipped\n                  ? initExpr\n                  : this.makeRetain(initExpr)\n              )\n            );\n          } else {\n            initializers.push(\n              module.local_set(local.index, initExpr)\n            );\n            if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n              if (!flow.canOverflow(initExpr, type)) flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n              else flow.unsetLocalFlag(local.index, LocalFlags.WRAPPED);\n            }\n          }\n        } else {\n          if (isManaged) {\n            // This is necessary because the first use (and assign) of the local could be taking place\n            // in a loop, subsequently marking it retained, but the second iteration of the loop\n            // still wouldn't release whatever is assigned in the first. Likewise, if the variable wasn't\n            // initialized but becomes released later on, whatever was stored before would be released.\n            // TODO: Detect this condition inside of a loop instead?\n            initializers.push(\n              module.local_set(local.index,\n                type.toNativeZero(module)\n              )\n            );\n            flow.setLocalFlag(local.index, LocalFlags.CONDITIONALLY_RETAINED);\n          } else if (local.type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n            flow.setLocalFlag(local.index, LocalFlags.WRAPPED);\n          }\n        }\n      }\n    }\n    return initializers.length == 0\n      ? 0\n      : flatten(module, initializers, NativeType.None);\n  }\n\n  compileVoidStatement(\n    statement: VoidStatement\n  ): ExpressionRef {\n    return this.compileExpression(statement.expression, Type.void,\n      Constraints.CONV_EXPLICIT | Constraints.WILL_DROP\n    );\n  }\n\n  compileWhileStatement(\n    statement: WhileStatement\n  ): ExpressionRef {\n    var module = this.module;\n    var outerFlow = this.currentFlow;\n\n    // Compile condition\n    var condExpr = module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(statement.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Simplify if the condition is constant\n    var alwaysTrue = false;\n    if (getExpressionId(condExpr) == ExpressionId.Const) {\n      assert(getExpressionType(condExpr) == NativeType.I32);\n      if (!getConstValueI32(condExpr)) return module.nop(); // simplify\n      alwaysTrue = true;\n    }\n\n    // Compile body\n    var label = outerFlow.pushBreakLabel();\n    var innerFlow = outerFlow.fork();\n    this.currentFlow = innerFlow;\n    var breakLabel = \"break|\" + label;\n    innerFlow.breakLabel = breakLabel;\n    var continueLabel = \"continue|\" + label;\n    innerFlow.continueLabel = continueLabel;\n    innerFlow.inheritNonnullIfTrue(condExpr);\n    var stmts = new Array<ExpressionRef>();\n    if (statement.statement.kind == NodeKind.BLOCK) {\n      this.compileStatements((<BlockStatement>statement.statement).statements, false, stmts);\n    } else {\n      stmts.push(this.compileStatement(statement.statement));\n    }\n    var terminates = innerFlow.is(FlowFlags.TERMINATES);\n\n    // (block $break          ;; (1) skip if skipping (3) + no breaks\n    //  (loop $continue       ;; (2) skip if skipping (5) + no continues\n    //   (br_if !cond $break) ;; (3) skip if always true\n    //   (...)                ;; (4)\n    //   (br $continue)       ;; (5) skip if (4) does not fall through\n    //  )\n    // )\n    var fallsThrough = !terminates && !innerFlow.is(FlowFlags.BREAKS);\n\n    if (fallsThrough) { // (5)\n      this.performAutoreleases(innerFlow, stmts);\n      stmts.push(module.br(continueLabel));\n    }\n    if (!alwaysTrue) { // (3)\n      stmts.unshift(module.br(breakLabel, module.unary(UnaryOp.EqzI32, condExpr)));\n    }\n    var expr = flatten(module, stmts, NativeType.None);\n    if (fallsThrough || innerFlow.isAny(FlowFlags.CONTINUES | FlowFlags.CONDITIONALLY_CONTINUES)) { // (2)\n      expr = module.loop(continueLabel, expr);\n    }\n    if (!alwaysTrue || innerFlow.isAny(FlowFlags.BREAKS | FlowFlags.CONDITIONALLY_BREAKS)) { // (1)\n      expr = module.block(breakLabel, [ expr ]);\n    }\n\n    // Switch back to the parent flow\n    innerFlow.freeScopedLocals();\n    outerFlow.popBreakLabel();\n    innerFlow.unset(\n      FlowFlags.BREAKS |\n      FlowFlags.CONDITIONALLY_BREAKS |\n      FlowFlags.CONTINUES |\n      FlowFlags.CONDITIONALLY_CONTINUES\n    );\n    if (alwaysTrue) outerFlow.inherit(innerFlow);\n    else outerFlow.inheritConditional(innerFlow);\n    this.currentFlow = outerFlow;\n    return expr;\n  }\n\n  // === Expressions ==============================================================================\n\n  /** Compiles the value of an inlined constant element. */\n  compileInlineConstant(\n    element: VariableLikeElement,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    assert(element.is(CommonFlags.INLINED));\n    var type = element.type;\n    switch (\n      !(constraints & (Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT)) &&\n      type.is(TypeFlags.INTEGER) &&\n      contextualType.is(TypeFlags.INTEGER) &&\n      type.size < contextualType.size\n        ? (this.currentType = contextualType).kind // essentially precomputes a (sign-)extension\n        : (this.currentType = type).kind\n    ) {\n      case TypeKind.I8:\n      case TypeKind.I16: {\n        let shift = type.computeSmallIntegerShift(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) << shift >> shift\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.U8:\n      case TypeKind.U16:\n      case TypeKind.BOOL: {\n        let mask = element.type.computeSmallIntegerMask(Type.i32);\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue) & mask\n            : 0\n        ); // recognized by canOverflow\n      }\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return this.module.i32(\n          element.constantValueKind == ConstantValueKind.INTEGER\n            ? i64_low(element.constantIntegerValue)\n            : 0\n        );\n      }\n      case TypeKind.ISIZE:\n      case TypeKind.USIZE: {\n        if (!element.program.options.isWasm64) {\n          return this.module.i32(\n            element.constantValueKind == ConstantValueKind.INTEGER\n              ? i64_low(element.constantIntegerValue)\n              : 0\n          );\n        }\n        // fall-through\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return element.constantValueKind == ConstantValueKind.INTEGER\n          ? this.module.i64(\n              i64_low(element.constantIntegerValue),\n              i64_high(element.constantIntegerValue)\n            )\n          : this.module.i64(0);\n      }\n      case TypeKind.F64: {\n        // monkey-patch for converting built-in floats to f32 implicitly\n        if (!(element.hasDecorator(DecoratorFlags.BUILTIN) && contextualType == Type.f32)) {\n          return this.module.f64((<VariableLikeElement>element).constantFloatValue);\n        }\n        // otherwise fall-through: basically precomputes f32.demote/f64 of NaN / Infinity\n        this.currentType = Type.f32;\n      }\n      case TypeKind.F32: {\n        return this.module.f32((<VariableLikeElement>element).constantFloatValue);\n      }\n      default: {\n        assert(false);\n        return this.module.unreachable();\n      }\n    }\n  }\n\n  compileExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    while (expression.kind == NodeKind.PARENTHESIZED) { // skip\n      expression = (<ParenthesizedExpression>expression).expression;\n    }\n    this.currentType = contextualType;\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    var expr: ExpressionRef;\n    switch (expression.kind) {\n      case NodeKind.ASSERTION: {\n        expr = this.compileAssertionExpression(<AssertionExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.BINARY: {\n        expr = this.compileBinaryExpression(<BinaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.CALL: {\n        expr = this.compileCallExpression(<CallExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.COMMA: {\n        expr = this.compileCommaExpression(<CommaExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.ELEMENTACCESS: {\n        expr = this.compileElementAccessExpression(<ElementAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.FUNCTION: {\n        expr = this.compileFunctionExpression(<FunctionExpression>expression, contextualType.signatureReference, constraints);\n        break;\n      }\n      case NodeKind.IDENTIFIER:\n      case NodeKind.FALSE:\n      case NodeKind.NULL:\n      case NodeKind.THIS:\n      case NodeKind.SUPER:\n      case NodeKind.TRUE: {\n        expr = this.compileIdentifierExpression(<IdentifierExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.INSTANCEOF: {\n        expr = this.compileInstanceOfExpression(<InstanceOfExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.LITERAL: {\n        expr = this.compileLiteralExpression(<LiteralExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.NEW: {\n        expr = this.compileNewExpression(<NewExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.PROPERTYACCESS: {\n        expr = this.compilePropertyAccessExpression(<PropertyAccessExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.TERNARY: {\n        expr = this.compileTernaryExpression(<TernaryExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPOSTFIX: {\n        expr = this.compileUnaryPostfixExpression(<UnaryPostfixExpression>expression, contextualType, constraints);\n        break;\n      }\n      case NodeKind.UNARYPREFIX: {\n        expr = this.compileUnaryPrefixExpression(<UnaryPrefixExpression>expression, contextualType, constraints);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        expr = this.module.unreachable();\n      }\n    }\n    // ensure conversion and wrapping in case the respective function doesn't on its own\n    var currentType = this.currentType;\n    var wrap = (constraints & Constraints.MUST_WRAP) != 0;\n    if (currentType != contextualType) {\n      if (constraints & Constraints.CONV_EXPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, true, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      } else if (constraints & Constraints.CONV_IMPLICIT) {\n        expr = this.convertExpression(expr, currentType, contextualType, false, wrap, expression);\n        wrap = false;\n        this.currentType = contextualType;\n      }\n    }\n    if (wrap) expr = this.ensureSmallIntegerWrap(expr, currentType);\n    // debug location is added here so the caller doesn't have to. means: compilation of an expression\n    // must go through this function, with the respective per-kind functions not being used directly.\n    if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n    return expr;\n  }\n\n  /** Compiles and precomputes an expression, possibly yielding a costant value. */\n  precomputeExpression(\n    expression: Expression,\n    contextualType: Type,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    return this.module.precomputeExpression(\n      this.compileExpression(expression, contextualType, constraints)\n    );\n  }\n\n  convertExpression(\n    expr: ExpressionRef,\n    /** Original type. */\n    fromType: Type,\n    /** New type. */\n    toType: Type,\n    /** Whether the conversion is explicit.*/\n    explicit: bool,\n    /** Whether the result should be wrapped, if a small integer. */\n    wrap: bool,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n\n    // void to any\n    if (fromType.kind == TypeKind.VOID) {\n      assert(toType.kind != TypeKind.VOID); // convertExpression should not be called with void -> void\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        reportNode.range, fromType.toString(), toType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // any to void\n    if (toType.kind == TypeKind.VOID) return module.drop(expr);\n\n    if (this.currentFlow.isNonnull(expr, fromType)) fromType = fromType.nonNullableType;\n\n    if (!fromType.isAssignableTo(toType)) {\n      if (!explicit) {\n        if (fromType.nonNullableType == toType) {\n          this.error(\n            DiagnosticCode.Object_is_possibly_null,\n            reportNode.range\n          ); // recoverable\n        } else {\n          this.error(\n            DiagnosticCode.Conversion_from_type_0_to_1_requires_an_explicit_cast,\n            reportNode.range, fromType.toString(), toType.toString()\n          ); // recoverable\n        }\n      }\n    }\n\n    if (fromType.is(TypeFlags.FLOAT)) {\n\n      // float to float\n      if (toType.is(TypeFlags.FLOAT)) {\n        if (fromType.kind == TypeKind.F32) {\n\n          // f32 to f64\n          if (toType.kind == TypeKind.F64) {\n            expr = module.unary(UnaryOp.PromoteF32, expr);\n          }\n\n          // otherwise f32 to f32\n\n        // f64 to f32\n        } else if (toType.kind == TypeKind.F32) {\n          expr = module.unary(UnaryOp.DemoteF64, expr);\n        }\n\n        // otherwise f64 to f64\n\n      // float to int\n      } else if (toType.is(TypeFlags.INTEGER)) {\n\n        // f32 to int\n        if (fromType.kind == TypeKind.F32) {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF32, expr, module.f32(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF32ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF32ToU32, expr);\n            }\n          }\n\n        // f64 to int\n        } else {\n          if (toType == Type.bool) {\n            expr = module.binary(BinaryOp.NeF64, expr, module.f64(0));\n            wrap = false;\n          } else if (toType.is(TypeFlags.SIGNED)) {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToI64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToI32, expr);\n            }\n          } else {\n            if (toType.is(TypeFlags.LONG)) {\n              expr = module.unary(UnaryOp.TruncF64ToU64, expr);\n            } else {\n              expr = module.unary(UnaryOp.TruncF64ToU32, expr);\n            }\n          }\n        }\n\n      // float to void\n      } else {\n        assert(toType.flags == TypeFlags.NONE, \"void type expected\");\n        expr = module.drop(expr);\n      }\n\n    // int to float\n    } else if (fromType.is(TypeFlags.INTEGER) && toType.is(TypeFlags.FLOAT)) {\n\n      // int to f32\n      if (toType.kind == TypeKind.F32) {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF32\n              : UnaryOp.ConvertU64ToF32,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF32\n              : UnaryOp.ConvertU32ToF32,\n            expr\n          );\n        }\n\n      // int to f64\n      } else {\n        if (fromType.is(TypeFlags.LONG)) {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI64ToF64\n              : UnaryOp.ConvertU64ToF64,\n            expr\n          );\n        } else {\n          expr = module.unary(\n            fromType.is(TypeFlags.SIGNED)\n              ? UnaryOp.ConvertI32ToF64\n              : UnaryOp.ConvertU32ToF64,\n            expr\n          );\n        }\n      }\n\n    // int to int\n    } else {\n      // i64 to ...\n      if (fromType.is(TypeFlags.LONG)) {\n\n        // i64 to i32 or smaller\n        if (toType == Type.bool) {\n          expr = module.binary(BinaryOp.NeI64, expr, module.i64(0));\n          wrap = false;\n        } else if (!toType.is(TypeFlags.LONG)) {\n          expr = module.unary(UnaryOp.WrapI64, expr); // discards upper bits\n        }\n\n      // i32 or smaller to i64\n      } else if (toType.is(TypeFlags.LONG)) {\n        expr = module.unary(\n          fromType.is(TypeFlags.SIGNED) ? UnaryOp.ExtendI32 : UnaryOp.ExtendU32,\n          this.ensureSmallIntegerWrap(expr, fromType) // must clear garbage bits\n        );\n        wrap = false;\n\n      // i32 to i32\n      } else {\n        // small i32 to ...\n        if (fromType.is(TypeFlags.SHORT)) {\n          // small i32 to larger i32\n          if (fromType.size < toType.size) {\n            expr = this.ensureSmallIntegerWrap(expr, fromType); // must clear garbage bits\n            wrap = false;\n          }\n        }\n      }\n    }\n\n    this.currentType = toType;\n    return wrap\n      ? this.ensureSmallIntegerWrap(expr, toType)\n      : expr;\n  }\n\n  compileAssertionExpression(\n    expression: AssertionExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var inheritedConstraints = constraints & ~(Constraints.CONV_IMPLICIT | Constraints.CONV_EXPLICIT);\n    switch (expression.assertionKind) {\n      case AssertionKind.PREFIX:\n      case AssertionKind.AS: {\n        let flow = this.currentFlow;\n        let toType = this.resolver.resolveType( // reports\n          assert(expression.toType),\n          flow.actualFunction,\n          flow.contextualTypeArguments\n        );\n        if (!toType) return this.module.unreachable();\n        return this.compileExpression(expression.expression, toType, inheritedConstraints | Constraints.CONV_EXPLICIT);\n      }\n      case AssertionKind.NONNULL: {\n        assert(!expression.toType);\n        let expr = this.compileExpression(expression.expression, contextualType.exceptVoid, inheritedConstraints);\n        let type = this.currentType;\n        if (this.currentFlow.isNonnull(expr, type)) {\n          this.info(\n            DiagnosticCode.Expression_is_never_null,\n            expression.expression.range\n          );\n        } else if (!this.options.noAssert) {\n          let module = this.module;\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(type);\n          if (!flow.canOverflow(expr, type)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n          flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n          expr = module.if(\n            module.local_tee(temp.index, expr),\n            module.local_get(temp.index, type.toNativeType()),\n            module.unreachable()\n          );\n          flow.freeTempLocal(temp);\n        }\n        this.currentType = this.currentType.nonNullableType;\n        return expr;\n      }\n      default: assert(false);\n    }\n    return this.module.unreachable();\n  }\n\n  private f32ModInstance: Function | null = null;\n  private f64ModInstance: Function | null = null;\n  private f32PowInstance: Function | null = null;\n  private f64PowInstance: Function | null = null;\n\n  compileBinaryExpression(\n    expression: BinaryExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var left = expression.left;\n    var right = expression.right;\n\n    var leftExpr: ExpressionRef;\n    var leftType: Type;\n    var rightExpr: ExpressionRef;\n    var rightType: Type;\n    var commonType: Type | null;\n\n    var expr: ExpressionRef;\n    var compound = false;\n\n    var operator = expression.operator;\n    switch (operator) {\n      case Token.LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtI64\n                : BinaryOp.LtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LtU64\n                : BinaryOp.LtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GT);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GtI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtI64\n                : BinaryOp.GtI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GtI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GtU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GtU64\n                : BinaryOp.GtU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GtU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GtF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GtF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.LESSTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.LE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"<=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.LeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeI64\n                : BinaryOp.LeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.LeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.LeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.LeU64\n                : BinaryOp.LeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.LeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.LeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.LeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.GREATERTHAN_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.GE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">=\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, true)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \">=\", leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.GeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeI64\n                : BinaryOp.GeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.GeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.GeU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.GeU64\n                : BinaryOp.GeU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.GeU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.GeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.GeF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n\n      case Token.EQUALS_EQUALS_EQUALS:\n      case Token.EQUALS_EQUALS: {\n\n        // NOTE that this favors correctness, in terms of emitting a binary expression, over\n        // checking for a possible use of unary EQZ. while the most classic of all optimizations,\n        // that's not what the source told us to do. for reference, `!left` emits unary EQZ.\n\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EQUALS_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.EQ);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '==' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.EqI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.EqI64\n                : BinaryOp.EqI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.EqI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.EqF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.EqF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AllTrueI8x16,\n              module.binary(BinaryOp.EqI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EXCLAMATION_EQUALS_EQUALS:\n      case Token.EXCLAMATION_EQUALS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n         // check operator overload\n        if (operator == Token.EXCLAMATION_EQUALS && this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NE);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          // still allow '!=' with references\n        }\n\n        rightExpr = this.compileExpression(right, leftType);\n        rightType = this.currentType;\n        if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n          leftExpr = this.convertExpression(leftExpr,\n            leftType, leftType = commonType,\n            false, true, // !\n            left\n          );\n          rightExpr = this.convertExpression(rightExpr,\n            rightType, rightType = commonType,\n            false, true, // !\n            right\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, operatorTokenToString(expression.operator), leftType.toString(), rightType.toString()\n          );\n          this.currentType = contextualType;\n          return module.unreachable();\n        }\n        switch (commonType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.NeI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.NeI64\n                : BinaryOp.NeI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.NeI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.NeF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.NeF64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.V128: {\n            expr = module.unary(UnaryOp.AnyTrueI8x16,\n              module.binary(BinaryOp.NeI8x16, leftExpr, rightExpr)\n            );\n            break;\n          }\n          case TypeKind.ANYREF: {\n            // TODO: !ref.eq\n            this.error(\n              DiagnosticCode.Not_implemented,\n              expression.range\n            );\n            expr = module.unreachable();\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.EQUALS: {\n        return this.compileAssignment(left, right, contextualType);\n      }\n      case Token.PLUS_EQUALS: compound = true;\n      case Token.PLUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.ADD);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"+\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // addition might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AddI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_EQUALS: compound = true;\n      case Token.MINUS: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.SUB);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"-\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:   // subtraction might overflow\n          case TypeKind.I16:  // ^\n          case TypeKind.U8:   // ^\n          case TypeKind.U16:  // ^\n          case TypeKind.BOOL: // ^\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.SubI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MUL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"*\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"*\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.MulI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.MulI64\n                : BinaryOp.MulI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.MulI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.MulF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.MulF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.ASTERISK_ASTERISK_EQUALS: compound = true;\n      case Token.ASTERISK_ASTERISK: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POW);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"**\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        let targetType = leftType;\n        let instance: Function | null;\n\n        // Mathf.pow if lhs is f32 (result is f32)\n        if (this.currentType.kind == TypeKind.F32) {\n          rightExpr = this.compileExpression(right, Type.f32, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f32PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Mathf.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f32PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n\n        // Math.pow otherwise (result is f64)\n        // TODO: should the result be converted back?\n        } else {\n          leftExpr = this.convertExpression(leftExpr,\n            this.currentType, Type.f64,\n            false, false,\n            left\n          );\n          leftType = this.currentType;\n          rightExpr = this.compileExpression(right, Type.f64, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n          if (!(instance = this.f64PowInstance)) {\n            let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n            if (!namespace) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            let prototype = namespace.members ? namespace.members.get(CommonSymbols.pow) : null;\n            if (!prototype) {\n              this.error(\n                DiagnosticCode.Cannot_find_name_0,\n                expression.range, \"Math.pow\"\n              );\n              expr = module.unreachable();\n              break;\n            }\n            assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n            this.f64PowInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n          }\n        }\n        if (!(instance && this.compileFunction(instance))) {\n          expr = module.unreachable();\n        } else {\n          expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n          if (compound && targetType != this.currentType) {\n            // this yields a proper error if target is i32 for example\n            expr = this.convertExpression(expr, this.currentType, targetType, false, false, expression);\n          }\n        }\n        break;\n      }\n      case Token.SLASH_EQUALS: compound = true;\n      case Token.SLASH: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.DIV);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"/\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"/\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:  // signed div on signed small integers might overflow, e.g. -128/-1\n          case TypeKind.I16: // ^\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.DivI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivI64\n                : BinaryOp.DivI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.DivI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.DivU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.DivU64\n                : BinaryOp.DivU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.DivU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.DivF32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.DivF64, leftExpr, rightExpr);\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PERCENT_EQUALS: compound = true;\n      case Token.PERCENT: {\n        leftExpr = this.compileExpression(left, contextualType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.REM);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"%\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType);\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, true, // !\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, true, // !\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"%\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.RemI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemI64\n                : BinaryOp.RemI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.RemI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.RemU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.RemU64\n                : BinaryOp.RemU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.RemU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.F32: {\n            let instance = this.f32ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Mathf);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Mathf.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f32ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          case TypeKind.F64: {\n            let instance = this.f64ModInstance;\n            if (!instance) {\n              let namespace = this.program.lookupGlobal(CommonSymbols.Math);\n              if (!namespace) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              let prototype = namespace.members ? namespace.members.get(CommonSymbols.mod) : null;\n              if (!prototype) {\n                this.error(\n                  DiagnosticCode.Cannot_find_name_0,\n                  expression.range, \"Math.mod\"\n                );\n                expr = module.unreachable();\n                break;\n              }\n              assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n              this.f64ModInstance = instance = this.resolver.resolveFunction(<FunctionPrototype>prototype, null);\n            }\n            if (!(instance && this.compileFunction(instance))) {\n              expr = module.unreachable();\n            } else {\n              expr = this.makeCallDirect(instance, [ leftExpr, rightExpr ], expression);\n            }\n            break;\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.LESSTHAN_LESSTHAN_EQUALS: compound = true;\n      case Token.LESSTHAN_LESSTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHL);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"<<\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShlI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShlI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShlI64\n                : BinaryOp.ShlI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"<<\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32: {\n            expr = module.binary(BinaryOp.ShrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64: {\n            expr = module.binary(BinaryOp.ShrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrI64\n                : BinaryOp.ShrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS: compound = true;\n      case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_SHR_U);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \">>>\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        leftExpr = this.ensureSmallIntegerWrap(leftExpr, leftType); // must clear garbage bits\n        rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n        rightType = this.currentType;\n        switch (this.currentType.kind) {\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: { // assumes that unsigned shr on unsigned small integers does not overflow\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n          }\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.ShrU32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.ShrU64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.ShrU64\n                : BinaryOp.ShrU32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \">>>\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.AMPERSAND_EQUALS: compound = true;\n      case Token.AMPERSAND: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overloadd\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_AND);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"&\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"&\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.AndI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AndI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AndI64\n                : BinaryOp.AndI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"&\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.BAR_EQUALS: compound = true;\n      case Token.BAR: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_OR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"|\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"|\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.OrI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.OrI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.OrI64\n                : BinaryOp.OrI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"|\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.CARET_EQUALS: compound = true;\n      case Token.CARET: {\n        leftExpr = this.compileExpression(left, contextualType.intType);\n        leftType = this.currentType;\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = leftType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_XOR);\n            if (overload) {\n              expr = this.compileBinaryOverload(overload, left, leftExpr, right, expression);\n              break;\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"^\", leftType.toString()\n          );\n          return this.module.unreachable();\n        }\n\n        if (compound) {\n          rightExpr = this.compileExpression(right, leftType, Constraints.CONV_IMPLICIT);\n          rightType = this.currentType;\n        } else {\n          rightExpr = this.compileExpression(right, leftType);\n          rightType = this.currentType;\n          if (commonType = Type.commonDenominator(leftType, rightType, false)) {\n            leftExpr = this.convertExpression(leftExpr,\n              leftType, leftType = commonType,\n              false, false,\n              left\n            );\n            rightExpr = this.convertExpression(rightExpr,\n              rightType, rightType = commonType,\n              false, false,\n              right\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n              expression.range, \"^\", leftType.toString(), rightType.toString()\n            );\n            this.currentType = contextualType;\n            return module.unreachable();\n          }\n        }\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            expr = module.binary(BinaryOp.XorI32, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, leftExpr, rightExpr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              leftExpr,\n              rightExpr\n            );\n            break;\n          }\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"^\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n          default: {\n            assert(false);\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n\n      // logical (no overloading)\n\n      case Token.AMPERSAND_AMPERSAND: { // left && right -> (t = left) ? right : t\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfTrue(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            this.makeIsTrueish(rightExpr, rightType),\n            module.i32(0)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInElse = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInElse = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be true'ish and is dropped\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            rightExpr,\n            retainLeftInElse\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType())\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, this.currentType),\n              rightExpr,\n              expr\n            );\n\n          // if not possible, tee left to a temp\n          } else {\n            let tempLocal = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(tempLocal.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(tempLocal.index, leftExpr), leftType),\n              rightExpr,\n              module.local_get(tempLocal.index, leftType.toNativeType())\n            );\n            flow.freeTempLocal(tempLocal);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      case Token.BAR_BAR: { // left || right -> ((t = left) ? t : right)\n        let flow = this.currentFlow;\n        let inheritedConstraints = constraints & (Constraints.WILL_RETAIN | Constraints.MUST_WRAP);\n        leftExpr = this.compileExpression(left, contextualType.exceptVoid, inheritedConstraints);\n        leftType = this.currentType;\n\n        let rightFlow = flow.fork();\n        this.currentFlow = rightFlow;\n        rightFlow.inheritNonnullIfFalse(leftExpr);\n        rightExpr = this.compileExpression(right, leftType, inheritedConstraints | Constraints.CONV_IMPLICIT);\n        rightType = leftType;\n\n        // simplify if only interested in true or false\n        if (contextualType == Type.bool || contextualType == Type.void) {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, leftType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n          this.currentType = Type.bool;\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            module.i32(1),\n            this.makeIsTrueish(rightExpr, rightType)\n          );\n\n        // references must properly retain and release, with the same outcome independent of the branch taken\n        } else if (leftType.isManaged) {\n          let leftAutoreleaseSkipped = this.skippedAutoreleases.has(leftExpr);\n          let rightAutoreleaseSkipped = this.skippedAutoreleases.has(rightExpr);\n          let temp = flow.getTempLocal(leftType);\n          leftExpr = module.local_tee(temp.index, leftExpr);\n\n          // instead of retaining left and releasing it again in right when right\n          // is taken, we can also just retain left if right is not taken\n          let retainLeftInThen = false;\n          if (leftAutoreleaseSkipped != rightAutoreleaseSkipped) { // xor\n            if (!leftAutoreleaseSkipped) {\n              retainLeftInThen = true;\n            } else {\n              rightExpr = this.makeRetain(rightExpr);\n              rightAutoreleaseSkipped = true;\n            }\n          } else if (!(constraints & Constraints.WILL_RETAIN)) { // otherwise keep right alive a little longer\n            rightExpr = this.moveAutorelease(rightExpr, rightFlow, flow);\n          }\n\n          let rightStmts = new Array<ExpressionRef>();\n          if (leftAutoreleaseSkipped) { // left turned out to be false'ish and is dropped\n            // TODO: usually, false'ish means left is null, but this might not hold\n            // once implicit conversion with strings is performed and left is \"\", so:\n            rightStmts.unshift(\n              this.makeRelease(\n                module.local_get(temp.index, leftType.toNativeType())\n              )\n            );\n          }\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType, rightStmts);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          expr = module.if(\n            this.makeIsTrueish(leftExpr, leftType),\n            retainLeftInThen\n              ? this.makeRetain(\n                  module.local_get(temp.index, leftType.toNativeType())\n                )\n              : module.local_get(temp.index, leftType.toNativeType()),\n            rightExpr\n          );\n          if (leftAutoreleaseSkipped || rightAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n          if (temp) flow.freeTempLocal(temp);\n\n        // basic values can use more aggressive optimizations\n        } else {\n          rightExpr = this.performAutoreleasesWithValue(rightFlow, rightExpr, rightType);\n          rightFlow.freeScopedLocals();\n          this.currentFlow = flow;\n\n          // simplify if cloning left without side effects is possible\n          if (expr = module.cloneExpression(leftExpr, true, 0)) {\n            expr = module.if(\n              this.makeIsTrueish(leftExpr, leftType),\n              expr,\n              rightExpr\n            );\n\n          // if not possible, tee left to a temp. local\n          } else {\n            let temp = flow.getTempLocal(leftType);\n            if (!flow.canOverflow(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n            if (flow.isNonnull(leftExpr, leftType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n            expr = module.if(\n              this.makeIsTrueish(module.local_tee(temp.index, leftExpr), leftType),\n              module.local_get(temp.index, leftType.toNativeType()),\n              rightExpr\n            );\n            flow.freeTempLocal(temp);\n          }\n        }\n        this.currentType = leftType;\n        break;\n      }\n      default: {\n        assert(false);\n        expr = this.module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(left, this.currentFlow);\n    if (!target) return module.unreachable();\n    var targetType = resolver.getTypeOfElement(target) || Type.void;\n    if (!this.currentType.isStrictlyAssignableTo(targetType)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, this.currentType.toString(), targetType.toString()\n      );\n      return module.unreachable();\n    }\n    return this.makeAssignment(\n      target,\n      expr, // TODO: delay release above if possible?\n      left,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileUnaryOverload(\n    operatorInstance: Function,\n    value: Expression,\n    valueExpr: ExpressionRef,\n    reportNode: Node\n  ): ExpressionRef {\n    // FIXME: see comment in compileBinaryOverload below why recompiling on type mismatch\n    // is a bad idea currently. so this assumes that the type matches.\n    return this.makeCallDirect(operatorInstance, [ valueExpr ], reportNode, false);\n  }\n\n  compileBinaryOverload(\n    operatorInstance: Function,\n    left: Expression,\n    leftExpr: ExpressionRef,\n    right: Expression,\n    reportNode: Node\n  ): ExpressionRef {\n    var rightType: Type;\n    if (operatorInstance.is(CommonFlags.INSTANCE)) {\n      let classInstance = assert(operatorInstance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      rightType = operatorInstance.signature.parameterTypes[0];\n    } else {\n      // FIXME: if LHS type differs we can't recompile left because that'd completely confuse\n      // local states, like having retained locals that actually do not even exist, possibly\n      // releasing something random in that local before and evil things like that. Hence this\n      // assumes that LHS type matches, which in turn means that static overloads must be\n      // guaranteed to never mismatch LHS type, which in turn means that we can't have shiny\n      // things like multiple static overloads for different combinations of LHS/RHS types.\n      // We might want that at some point of course, but requires to complete the resolver so\n      // it can actually resolve every kind of expression without ever having to recompile.\n      rightType = operatorInstance.signature.parameterTypes[1];\n    }\n    var rightExpr = this.compileExpression(right, rightType, Constraints.CONV_IMPLICIT);\n    return this.makeCallDirect(operatorInstance, [ leftExpr, rightExpr ], reportNode);\n  }\n\n  compileAssignment(expression: Expression, valueExpression: Expression, contextualType: Type): ExpressionRef {\n    var program = this.program;\n    var resolver = program.resolver;\n    var flow = this.currentFlow;\n    var target = resolver.lookupExpression(expression, flow); // reports\n    if (!target) return this.module.unreachable();\n    var thisExpression = resolver.currentThisExpression;\n    var elementExpression = resolver.currentElementExpression;\n\n    // to compile just the value, we need to know the target's type\n    var targetType: Type;\n    switch (target.kind) {\n      case ElementKind.GLOBAL: {\n        // not yet compiled if a static field compiled as a global\n        if (!this.compileGlobal(<Global>target)) return this.module.unreachable(); // reports\n        // fall-through\n      }\n      case ElementKind.LOCAL:\n      case ElementKind.FIELD: {\n        targetType = (<VariableLikeElement>target).type;\n        if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return this.module.unreachable();\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterPrototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            expression.range, (<Property>target).internalName\n          );\n          return this.module.unreachable();\n        }\n        assert(setterInstance.signature.parameterTypes.length == 1); // parser must guarantee this\n        targetType = setterInstance.signature.parameterTypes[0];\n        if (setterInstance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n          if (!indexedGet) {\n            this.error(\n              DiagnosticCode.Index_signature_is_missing_in_type_0,\n              expression.range, (<Class>parent).internalName\n            );\n          } else {\n            this.error(\n              DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n              expression.range, (<Class>parent).internalName\n            );\n          }\n          return this.module.unreachable();\n        }\n        assert(indexedSet.signature.parameterTypes.length == 2); // parser must guarantee this\n        targetType = indexedSet.signature.parameterTypes[1];     // 2nd parameter is the element\n        if (indexedSet.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Not_implemented,\n          expression.range\n        );\n        return this.module.unreachable();\n      }\n    }\n\n    // compile the value and do the assignment\n    assert(targetType != Type.void);\n    return this.makeAssignment(\n      target,\n      this.compileExpression(valueExpression, targetType, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN),\n      expression,\n      thisExpression,\n      elementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  /** Makes an assignment expression or block, assigning a value to a target. */\n  makeAssignment(\n    /** Target element, e.g. a Local. */\n    target: Element,\n    /** Value expression that has been compiled in a previous step already. */\n    valueExpr: ExpressionRef,\n    /** Expression reference. Has already been compiled to `valueExpr`. */\n    valueExpression: Expression,\n    /** `this` expression reference if a field or property set. */\n    thisExpression: Expression | null,\n    /** Index expression reference if an indexed set. */\n    indexExpression: Expression | null,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // NOTE: Only locals, globals and fields can make use of skipped autoreleases while\n    // everything else must insert the skipped autorelease now. See (*)\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        if (flow.isLocalFlag((<Local>target).index, LocalFlags.CONSTANT, true)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          this.currentType = tee ? (<Local>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeLocalAssignment(<Local>target, valueExpr, tee);\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) return module.unreachable();\n        if (target.isAny(CommonFlags.CONST | CommonFlags.READONLY)) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range,\n            target.internalName\n          );\n          this.currentType = tee ? (<Global>target).type : Type.void;\n          return module.unreachable();\n        }\n        return this.makeGlobalAssignment(<Global>target, valueExpr, tee);\n      }\n      case ElementKind.FIELD: {\n        let initializerNode = (<Field>target).initializerNode;\n        if (\n          (<Field>target).is(CommonFlags.READONLY) &&\n          !(\n            flow.actualFunction.is(CommonFlags.CONSTRUCTOR) ||\n            initializerNode\n          )\n        ) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, (<Field>target).internalName\n          );\n          return module.unreachable();\n        }\n        return this.makeFieldAssignment(<Field>target,\n          valueExpr,\n          // FIXME: explicit type (currently fails due to missing null checking)\n          this.compileExpression(assert(thisExpression), this.options.usizeType),\n          tee\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterPrototype = (<PropertyPrototype>target).setterPrototype;\n        if (!setterPrototype) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        let setterInstance = this.resolver.resolveFunction(setterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!setterInstance) return module.unreachable();\n        // call just the setter if the return value isn't of interest\n        if (!tee) return this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression);\n        // otherwise call the setter first, then the getter\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype); // must be present\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null, makeMap(), ReportMode.REPORT);\n        if (!getterInstance) return module.unreachable();\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        return module.block(null, [\n          this.makeCallDirect(setterInstance, [ valueExpr ], valueExpression),\n          this.makeCallDirect(getterInstance, null, valueExpression) // sets currentType\n        ], nativeReturnType);\n      }\n      case ElementKind.PROPERTY: { // instance property\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let setterInstance = (<Property>target).setterInstance;\n        if (!setterInstance) {\n          this.error(\n            DiagnosticCode.Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property,\n            valueExpression.range, target.internalName\n          );\n          return module.unreachable();\n        }\n        // call just the setter if the return value isn't of interest\n        if (!tee) {\n          let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n          return this.makeCallDirect(setterInstance, [ thisExpr, valueExpr ], valueExpression);\n        }\n        // otherwise call the setter first, then the getter\n        let getterInstance = assert((<Property>target).getterInstance); // must be present\n        let returnType = getterInstance.signature.returnType;\n        let nativeReturnType = returnType.toNativeType();\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let temp = flow.getTempLocal(returnType);\n        let ret = module.block(null, [\n          this.makeCallDirect(setterInstance, [ // set and remember the target\n            module.local_tee(temp.index, thisExpr),\n            valueExpr\n          ], valueExpression),\n          this.makeCallDirect(getterInstance, [ // get from remembered target\n            module.local_get(temp.index, nativeReturnType)\n          ], valueExpression)\n        ], nativeReturnType);\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case ElementKind.INDEXSIGNATURE: {\n        if (this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeAutorelease(valueExpr, flow); // (*)\n        let isUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n        let parent = (<IndexSignature>target).parent;\n        assert(parent.kind == ElementKind.CLASS);\n        let indexedGet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_GET, isUnchecked);\n        if (!indexedGet) {\n          this.error(\n            DiagnosticCode.Index_signature_is_missing_in_type_0,\n            valueExpression.range, parent.internalName\n          );\n          return module.unreachable();\n        }\n        let indexedSet = (<Class>parent).lookupOverload(OperatorKind.INDEXED_SET, isUnchecked);\n        if (!indexedSet) {\n          this.error(\n            DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n            valueExpression.range, parent.internalName\n          );\n          this.currentType = tee ? indexedGet.signature.returnType : Type.void;\n          return module.unreachable();\n        }\n        let targetType = (<Class>parent).type;\n        let thisExpr = this.compileExpression(assert(thisExpression), this.options.usizeType);\n        let elementExpr = this.compileExpression(assert(indexExpression), Type.i32, Constraints.CONV_IMPLICIT);\n        if (tee) {\n          let tempTarget = flow.getTempLocal(targetType);\n          let tempElement = flow.getTempLocal(this.currentType);\n          let returnType = indexedGet.signature.returnType;\n          flow.freeTempLocal(tempTarget);\n          let ret = module.block(null, [\n            this.makeCallDirect(indexedSet, [\n              module.local_tee(tempTarget.index, thisExpr),\n              module.local_tee(tempElement.index, elementExpr),\n              valueExpr\n            ], valueExpression),\n            this.makeCallDirect(indexedGet, [\n              module.local_get(tempTarget.index, tempTarget.type.toNativeType()),\n              module.local_get(tempElement.index, tempElement.type.toNativeType())\n            ], valueExpression)\n          ], returnType.toNativeType());\n          flow.freeTempLocal(tempElement);\n          flow.freeTempLocal(tempTarget);\n          return ret;\n        } else {\n          return this.makeCallDirect(indexedSet, [\n            thisExpr,\n            elementExpr,\n            valueExpr\n          ], valueExpression);\n        }\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      valueExpression.range\n    );\n    return module.unreachable();\n  }\n\n  /** Makes an assignment to a local, possibly retaining and releasing affected references and keeping track of wrap and null states. */\n  private makeLocalAssignment(\n    /** The local to assign to. */\n    local: Local,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var type = local.type;\n    assert(type != Type.void);\n    var flow = this.currentFlow;\n    var localIndex = local.index;\n\n    if (type.is(TypeFlags.NULLABLE)) {\n      if (flow.isNonnull(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.NONNULL);\n      else flow.unsetLocalFlag(localIndex, LocalFlags.NONNULL);\n    }\n    flow.setLocalFlag(localIndex, LocalFlags.WRITTENTO);\n\n    if (type.isManaged) {\n      let module = this.module;\n      let nativeType = type.toNativeType();\n\n      if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n        if (this.skippedAutoreleases.has(valueExpr)) {\n          valueExpr = this.makeSkippedRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __skippedRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __skippedRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        } else {\n          valueExpr = this.makeRetainRelease(\n            module.local_get(localIndex, nativeType), // oldRef\n            valueExpr // newRef\n          );\n          if (tee) { // TEE(local = __retainRelease(local, value))\n            this.currentType = type;\n            return module.local_tee(localIndex, valueExpr);\n          } else { // local = __retainRelease(local, value)\n            this.currentType = Type.void;\n            return module.local_set(localIndex, valueExpr);\n          }\n        }\n      } else {\n        flow.unsetLocalFlag(localIndex, LocalFlags.CONDITIONALLY_RETAINED);\n        flow.setLocalFlag(localIndex, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(valueExpr)) valueExpr = this.makeRetain(valueExpr);\n        if (tee) { // TEE(local = __retain(value, local))\n          this.currentType = type;\n          return module.local_tee(localIndex, valueExpr);\n        } else { // local = __retain(value, local)\n          this.currentType = Type.void;\n          return module.local_set(localIndex, valueExpr);\n        }\n      }\n    } else {\n      if (type.is(TypeFlags.SHORT | TypeFlags.INTEGER)) {\n        if (!flow.canOverflow(valueExpr, type)) flow.setLocalFlag(localIndex, LocalFlags.WRAPPED);\n        else flow.unsetLocalFlag(localIndex, LocalFlags.WRAPPED);\n      }\n      if (tee) { // TEE(local = value)\n        this.currentType = type;\n        return this.module.local_tee(localIndex, valueExpr);\n      } else { // local = value\n        this.currentType = Type.void;\n        return this.module.local_set(localIndex, valueExpr);\n      }\n    }\n  }\n\n  /** Makes an assignment to a global, possibly retaining and releasing affected references. */\n  private makeGlobalAssignment(\n    /** The global to assign to. */\n    global: Global,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var type = global.type;\n    assert(type != Type.void);\n    var nativeType = type.toNativeType();\n\n    if (type.isManaged) {\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // (global = __skippedRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeSkippedRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __skippedRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeSkippedRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      } else {\n        if (tee) { // (global = __retainRelease(global, value)), global\n          this.currentType = type;\n          return module.block(null, [\n            module.global_set(global.internalName,\n              this.makeRetainRelease(\n                module.global_get(global.internalName, nativeType), // oldRef\n                valueExpr // newRef\n              )\n            ),\n            module.global_get(global.internalName, nativeType)\n          ], nativeType);\n        } else { // global = __retainRelease(global, value)\n          this.currentType = Type.void;\n          return module.global_set(global.internalName,\n            this.makeRetainRelease(\n              module.global_get(global.internalName, nativeType), // oldRef\n              valueExpr // newRef\n            )\n          );\n        }\n      }\n    } else {\n      valueExpr = this.ensureSmallIntegerWrap(valueExpr, type); // globals must be wrapped\n      if (tee) { // (global = value), global\n        this.currentType = type;\n        return module.block(null, [\n          module.global_set(global.internalName, valueExpr),\n          module.global_get(global.internalName, nativeType)\n        ], nativeType);\n      } else { // global = value\n        this.currentType = Type.void;\n        return module.global_set(global.internalName,\n          valueExpr\n        );\n      }\n    }\n  }\n\n  /** Makes an assignment to a field, possibly retaining and releasing affected references. */\n  makeFieldAssignment(\n    /** The field to assign to. */\n    field: Field,\n    /** The value to assign. */\n    valueExpr: ExpressionRef,\n    /** The value of `this`. */\n    thisExpr: ExpressionRef,\n    /** Whether to tee the value. */\n    tee: bool\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var fieldType = field.type;\n    var nativeFieldType = fieldType.toNativeType();\n    assert(field.parent.kind == ElementKind.CLASS);\n    var thisType = (<Class>field.parent).type;\n    var nativeThisType = thisType.toNativeType();\n\n    if (fieldType.isManaged && thisType.isManaged) {\n      let tempThis = flow.getTempLocal(thisType);\n      if (this.skippedAutoreleases.has(valueExpr)) {\n        if (tee) { // ((t1 = this).field = __skippedRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          let ret = module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeSkippedRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr), // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n          flow.freeTempLocal(tempValue);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return ret;\n        } else { // (t1 = this).field = __skippedRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeSkippedRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr, // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      } else {\n        if (tee) { // ((t1 = this).field = __retainRelease(t1.field, t2 = value)), t2\n          let tempValue = flow.getTempLocal(fieldType);\n          if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n          if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n          let ret = module.block(null, [\n            module.store(fieldType.byteSize,\n              module.local_tee(tempThis.index, thisExpr),\n              this.makeRetainRelease(\n                module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                  module.local_get(tempThis.index, nativeThisType),\n                  nativeFieldType, field.memoryOffset\n                ),\n                module.local_tee(tempValue.index, valueExpr) // newRef\n              ),\n              nativeFieldType, field.memoryOffset\n            ),\n            module.local_get(tempValue.index, nativeFieldType)\n          ], nativeFieldType);\n          flow.freeTempLocal(tempValue);\n          flow.freeTempLocal(tempThis);\n          this.currentType = fieldType;\n          return ret;\n        } else { // (t1 = this).field = __retainRelease(t1.field, value)\n          flow.freeTempLocal(tempThis);\n          this.currentType = Type.void;\n          return module.store(fieldType.byteSize,\n            module.local_tee(tempThis.index, thisExpr),\n            this.makeRetainRelease(\n              module.load(fieldType.byteSize, fieldType.is(TypeFlags.SIGNED), // oldRef\n                module.local_get(tempThis.index, nativeThisType),\n                nativeFieldType, field.memoryOffset\n              ),\n              valueExpr // newRef\n            ),\n            nativeFieldType, field.memoryOffset\n          );\n        }\n      }\n    } else {\n      if (tee) { // (this.field = (t1 = value)), t1\n        let tempValue = flow.getTempLocal(fieldType);\n        if (!flow.canOverflow(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.WRAPPED);\n        if (flow.isNonnull(valueExpr, fieldType)) flow.setLocalFlag(tempValue.index, LocalFlags.NONNULL);\n        let ret = module.block(null, [\n          module.store(fieldType.byteSize,\n            thisExpr,\n            module.local_tee(tempValue.index, valueExpr),\n            nativeFieldType, field.memoryOffset\n          ),\n          module.local_get(tempValue.index, nativeFieldType)\n        ], nativeFieldType);\n        flow.freeTempLocal(tempValue);\n        this.currentType = fieldType;\n        return ret;\n      } else { // this.field = value\n        this.currentType = Type.void;\n        return module.store(fieldType.byteSize,\n          thisExpr,\n          valueExpr,\n          nativeFieldType, field.memoryOffset\n        );\n      }\n    }\n  }\n\n  /** Compiles a call expression according to the specified context. */\n  compileCallExpression(\n    /** Call expression to compile. */\n    expression: CallExpression,\n    /** Contextual type indicating the return type the caller expects, if any. */\n    contextualType: Type,\n    /** Constraints indicating contextual conditions. */\n    constraints: Constraints\n  ): ExpressionRef {\n\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // handle call to super\n    if (expression.expression.kind == NodeKind.SUPER) {\n      let flow = this.currentFlow;\n      let actualFunction = flow.actualFunction;\n      if (!actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n        this.error(\n          DiagnosticCode.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors,\n          expression.range\n        );\n        return module.unreachable();\n      }\n\n      let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let baseClassInstance = assert((<Class>classInstance).base);\n      let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n      let nativeSizeType = this.options.nativeSizeType;\n\n      // {\n      //   this = super(this || <ALLOC>, ...args)\n      //   this.a = X\n      //   this.b = Y\n      // }\n      let theCall = this.compileCallDirect(\n        this.ensureConstructor(baseClassInstance, expression),\n        expression.arguments,\n        expression,\n        module.if(\n          module.local_get(thisLocal.index, nativeSizeType),\n          module.local_get(thisLocal.index, nativeSizeType),\n          this.makeRetain(\n            this.makeAllocation(<Class>classInstance)\n          )\n        ),\n        Constraints.WILL_RETAIN\n      );\n      assert(this.skippedAutoreleases.has(theCall)); // guaranteed\n      let stmts: ExpressionRef[] = [\n        module.local_set(thisLocal.index, theCall)\n      ];\n      this.makeFieldInitialization(<Class>classInstance, stmts);\n\n      // check that super had been called before accessing `this`\n      if (flow.isAny(\n        FlowFlags.ALLOCATES |\n        FlowFlags.CONDITIONALLY_ALLOCATES\n      )) {\n        this.error(\n          DiagnosticCode._super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class,\n          expression.range\n        );\n        return module.unreachable();\n      }\n      flow.set(FlowFlags.ALLOCATES | FlowFlags.CALLS_SUPER);\n      this.currentType = Type.void;\n      return module.block(null, stmts);\n    }\n\n    // otherwise resolve normally\n    var target = this.resolver.lookupExpression(expression.expression, flow); // reports\n    if (!target) return module.unreachable();\n\n    var signature: Signature | null;\n    var indexArg: ExpressionRef;\n    switch (target.kind) {\n\n      // direct call: concrete function\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        // builtins handle present respectively omitted type arguments on their own\n        if (prototype.hasDecorator(DecoratorFlags.BUILTIN)) {\n          return this.compileCallExpressionBuiltin(prototype, expression, contextualType);\n        }\n\n        let thisExpression = this.resolver.currentThisExpression;\n        let instance = this.resolver.maybeInferCall(expression, prototype, flow);\n        if (!instance) return this.module.unreachable();\n        return this.compileCallDirect(\n          instance,\n          expression.arguments,\n          expression,\n          instance.is(CommonFlags.INSTANCE)\n            ? this.compileExpression(assert(thisExpression), this.options.usizeType)\n            : 0,\n          constraints\n        );\n      }\n\n      // indirect call: index argument with signature (non-generic, can't be inlined)\n      case ElementKind.LOCAL: {\n        if (signature = (<Local>target).type.signatureReference) {\n          if ((<Local>target).is(CommonFlags.INLINED)) {\n            indexArg = module.i32(i64_low((<Local>target).constantIntegerValue));\n          } else {\n            indexArg = module.local_get((<Local>target).index, NativeType.I32);\n          }\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Local>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.GLOBAL: {\n        if (signature = (<Global>target).type.signatureReference) {\n          indexArg = module.global_get((<Global>target).internalName, (<Global>target).type.toNativeType());\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, (<Global>target).type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FIELD: {\n        let type = (<Field>target).type;\n        if (signature = type.signatureReference) {\n          let thisExpression = assert(this.resolver.currentThisExpression);\n          let thisExpr = this.compileExpression(thisExpression, this.options.usizeType);\n          indexArg = module.load(\n            4,\n            false,\n            thisExpr,\n            NativeType.I32,\n            (<Field>target).memoryOffset\n          );\n          break;\n        } else {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, type.toString()\n          );\n          return module.unreachable();\n        }\n      }\n      case ElementKind.FUNCTION_TARGET: {\n        signature = (<FunctionTarget>target).signature;\n        indexArg = this.compileExpression(expression.expression, (<FunctionTarget>target).type, Constraints.CONV_IMPLICIT);\n        break;\n      }\n\n      case ElementKind.PROPERTY_PROTOTYPE: { // static property\n        let getterPrototype = assert((<PropertyPrototype>target).getterPrototype);\n        let getterInstance = this.resolver.resolveFunction(getterPrototype, null);\n        if (!getterInstance) return module.unreachable();\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression);\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        indexArg = this.compileCallDirect(getterInstance, [], expression.expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n        signature = this.currentType.signatureReference;\n        if (!signature) {\n          this.error(\n            DiagnosticCode.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures,\n            expression.range, this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n        break;\n      }\n\n      // not supported\n      default: {\n        let type = this.resolver.getTypeOfElement(target);\n        if (type) {\n          this.error(\n            DiagnosticCode.Type_0_has_no_call_signatures,\n            expression.range, type.toString()\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_cannot_be_represented_by_a_type,\n            expression.range\n          );\n        }\n        return module.unreachable();\n      }\n    }\n    return this.compileCallIndirect(\n      signature,\n      indexArg,\n      expression.arguments,\n      expression,\n      0,\n      contextualType == Type.void\n    );\n  }\n\n  private compileCallExpressionBuiltin(\n    prototype: FunctionPrototype,\n    expression: CallExpression,\n    contextualType: Type\n  ): ExpressionRef {\n    if (prototype.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    var typeArguments: Type[] | null = null;\n\n    // builtins handle omitted type arguments on their own. if present, however, resolve them here\n    // and pass them to the builtin, even if it's still up to the builtin how to handle them.\n    var typeParameterNodes = prototype.typeParameterNodes;\n    var typeArgumentNodes = expression.typeArguments;\n    if (expression.typeArguments) {\n      if (!prototype.is(CommonFlags.GENERIC)) {\n        this.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          expression.range, prototype.internalName\n        );\n      }\n      typeArguments = this.resolver.resolveTypeArguments(\n        assert(typeParameterNodes),\n        typeArgumentNodes,\n        this.currentFlow.actualFunction.parent,\n        makeMap<string,Type>(this.currentFlow.contextualTypeArguments),\n        expression\n      );\n    }\n\n    // now compile the builtin, which usually returns a block of code that replaces the call.\n    return compileBuiltinCall(\n      this,\n      prototype,\n      typeArguments,\n      expression.arguments,\n      contextualType,\n      expression\n    );\n  }\n\n  /**\n   * Checks that a call with the given number as arguments can be performed according to the\n   * specified signature.\n   */\n  checkCallSignature(\n    signature: Signature,\n    numArguments: i32,\n    hasThis: bool,\n    reportNode: Node\n  ): bool {\n\n    // cannot call an instance method without a `this` argument (TODO: `.call`?)\n    var thisType = signature.thisType;\n    if (hasThis != (thisType != null)) {\n      this.error(\n        DiagnosticCode.The_this_types_of_each_signature_are_incompatible,\n        reportNode.range\n      );\n      return false;\n    }\n\n    // not yet implemented (TODO: maybe some sort of an unmanaged/lightweight array?)\n    var hasRest = signature.hasRest;\n    if (hasRest) {\n      this.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.range\n      );\n      return false;\n    }\n\n    var minimum = signature.requiredParameters;\n    var maximum = signature.parameterTypes.length;\n\n    // must at least be called with required arguments\n    if (numArguments < minimum) {\n      this.error(\n        minimum < maximum\n          ? DiagnosticCode.Expected_at_least_0_arguments_but_got_1\n          : DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, minimum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    // must not be called with more than the maximum arguments\n    if (numArguments > maximum && !hasRest) {\n      this.error(\n        DiagnosticCode.Expected_0_arguments_but_got_1,\n        reportNode.range, maximum.toString(), numArguments.toString()\n      );\n      return false;\n    }\n\n    return true;\n  }\n\n  /** Checks that an unsafe expression is allowed. */\n  private checkUnsafe(reportNode: Node): void {\n    // Library files may always use unsafe features\n    if (this.options.noUnsafe && !reportNode.range.source.isLibrary) {\n      this.error(\n        DiagnosticCode.Operation_is_unsafe,\n        reportNode.range\n      );\n    }\n  }\n\n  /** Compiles a direct call to a concrete function. */\n  compileCallDirect(\n    instance: Function,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    constraints: Constraints = Constraints.NONE\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n    var signature = instance.signature;\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      this.currentType = signature.returnType;\n      return this.module.unreachable();\n    }\n    if (instance.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n\n    // Inline if explicitly requested\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let parameterTypes = signature.parameterTypes;\n        assert(numArguments <= parameterTypes.length);\n        // compile argument expressions\n        let args = new Array<ExpressionRef>(numArguments);\n        for (let i = 0; i < numArguments; ++i) {\n          args[i] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n            Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n          );\n        }\n        // make the inlined call (is aware of autoreleases)\n        let expr = this.makeCallInline(instance, args, thisArg, (constraints & Constraints.WILL_DROP) != 0);\n        if (this.currentType.isManaged) {\n          if (!(constraints & Constraints.WILL_RETAIN)) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n\n    // Otherwise compile to just a call\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    if (signature.returnType.isManaged) {\n      if (constraints & Constraints.WILL_DROP) {\n        // Skip autorelease and simply release\n        return this.makeCallDirect(instance, operands, reportNode, true);\n      } else if (constraints & Constraints.WILL_RETAIN) {\n        // Skip autorelease and remember\n        let expr = this.makeCallDirect(instance, operands, reportNode, false, true);\n        this.skippedAutoreleases.add(expr);\n        return expr;\n      } else {\n        return this.makeCallDirect(instance, operands, reportNode, false, false);\n      }\n    }\n    return this.makeCallDirect(instance, operands, reportNode,\n      (constraints & Constraints.WILL_DROP) != 0\n    );\n  }\n\n  makeCallInline(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    var numArguments = operands ? operands.length : 0;\n    var signature = instance.signature;\n    var parameterTypes = signature.parameterTypes;\n    var numParameters = parameterTypes.length;\n\n    // Create a new inline flow and use it to compile the function as a block\n    var previousFlow = this.currentFlow;\n    var flow = Flow.createInline(previousFlow.parentFunction, instance);\n    var body = [];\n    var usedLocals = new Set<i32>();\n\n    // Prepare compiled arguments right to left, keeping track of used locals.\n    for (let i = numArguments - 1; i >= 0; --i) {\n      // This is necessary because a later expression must not set an earlier argument local, which\n      // is also just a temporary, when being executed. Take for example `t1=1, t2=(t1 = 2)`, where\n      // the right expression would reassign the foregoing argument local. So, we iterate from right\n      // to left, remembering what's used later, and don't use these for earlier arguments, making\n      // the example above essentially `t2=1, t1=(t1 = 2)`.\n      let paramExpr = operands![i];\n      let paramType = parameterTypes[i];\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), paramType, usedLocals);\n      findUsedLocals(paramExpr, usedLocals);\n      // inlining is aware of wrap/nonnull states:\n      if (!previousFlow.canOverflow(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(paramExpr, paramType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      // inlining is aware of skipped autoreleases:\n      if (paramType.isManaged) {\n        if (!this.skippedAutoreleases.has(paramExpr)) paramExpr = this.makeRetain(paramExpr);\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n      }\n      body.unshift(\n        module.local_set(argumentLocal.index, paramExpr)\n      );\n    }\n    if (thisArg) {\n      let classInstance = assert(instance.parent); assert(classInstance.kind == ElementKind.CLASS);\n      let thisType = assert(instance.signature.thisType);\n      let thisLocal = flow.addScopedLocal(CommonSymbols.this_, thisType, usedLocals);\n      // No need to retain `this` as it can't be reassigned and thus can't become prematurely released\n      body.unshift(\n        module.local_set(thisLocal.index, thisArg)\n      );\n      let baseInstance = (<Class>classInstance).base;\n      if (baseInstance) flow.addScopedAlias(CommonSymbols.super_, baseInstance.type, thisLocal.index);\n    } else {\n      assert(!instance.signature.thisType);\n    }\n\n    // Compile omitted arguments with final argument locals blocked. Doesn't need to take care of\n    // side-effects within earlier expressions because these already happened on set.\n    this.currentFlow = flow;\n    for (let i = numArguments; i < numParameters; ++i) {\n      let initType = parameterTypes[i];\n      let initExpr = this.compileExpression(\n        assert(instance.prototype.functionTypeNode.parameters[i].initializer),\n        initType,\n        Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n      );\n      let argumentLocal = flow.addScopedLocal(signature.getParameterName(i), initType);\n      if (!flow.canOverflow(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(initExpr, initType)) flow.setLocalFlag(argumentLocal.index, LocalFlags.NONNULL);\n      if (initType.isManaged) {\n        flow.setLocalFlag(argumentLocal.index, LocalFlags.RETAINED);\n        if (!this.skippedAutoreleases.has(initExpr)) initExpr = this.makeRetain(initExpr);\n      }\n      body.push(\n        module.local_set(argumentLocal.index, initExpr)\n      );\n    }\n\n    // Compile the called function's body in the scope of the inlined flow\n    this.compileFunctionBody(instance, body);\n\n    // Free any new scoped locals and reset to the original flow\n    if (!flow.is(FlowFlags.TERMINATES)) {\n      this.performAutoreleases(flow, body);\n      this.finishAutoreleases(flow, body);\n    }\n    flow.freeScopedLocals();\n    var returnType = flow.returnType;\n    this.currentFlow = previousFlow;\n\n    // Create an outer block that we can break to when returning a value out of order\n    var expr = module.block(flow.inlineReturnLabel, body, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      }\n    }\n    return expr;\n  }\n\n  /** Gets the trampoline for the specified function. */\n  ensureTrampoline(original: Function): Function {\n    // A trampoline is a function that takes a fixed amount of operands with some of them possibly\n    // being zeroed. It takes one additional argument denoting the number of actual operands\n    // provided to the call, and takes appropriate steps to initialize zeroed operands to their\n    // default values using the optional parameter initializers of the original function. Doing so\n    // allows calls to functions with optional parameters to circumvent the trampoline when all\n    // parameters are provided as a fast route, respectively setting up omitted operands in a proper\n    // context otherwise.\n    var trampoline = original.trampoline;\n    if (trampoline) return trampoline;\n\n    var originalSignature = original.signature;\n    var originalName = original.internalName;\n    var originalParameterTypes = originalSignature.parameterTypes;\n    var originalParameterDeclarations = original.prototype.functionTypeNode.parameters;\n    var returnType = originalSignature.returnType;\n    var thisType = originalSignature.thisType;\n    var isInstance = original.is(CommonFlags.INSTANCE);\n\n    // arguments excl. `this`, operands incl. `this`\n    var minArguments = originalSignature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = originalParameterTypes.length;\n    var maxOperands = maxArguments;\n    if (isInstance) {\n      ++minOperands;\n      ++maxOperands;\n    }\n    var numOptional = assert(maxOperands - minOperands);\n\n    var forwardedOperands = new Array<ExpressionRef>(minOperands);\n    var operandIndex = 0;\n\n    // forward `this` if applicable\n    var module = this.module;\n    if (isInstance) {\n      forwardedOperands[0] = module.local_get(0, this.options.nativeSizeType);\n      operandIndex = 1;\n    }\n\n    // forward required arguments\n    for (let i = 0; i < minArguments; ++i, ++operandIndex) {\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, originalParameterTypes[i].toNativeType());\n    }\n    assert(operandIndex == minOperands);\n\n    // create the trampoline element\n    var trampolineSignature = new Signature(this.program, originalParameterTypes, returnType, thisType);\n    trampolineSignature.requiredParameters = maxArguments;\n    trampolineSignature.parameterNames = originalSignature.parameterNames;\n    trampoline = new Function(\n      original.name + \"|trampoline\",\n      original.prototype,\n      trampolineSignature,\n      original.contextualTypeArguments\n    );\n    trampoline.set(original.flags | CommonFlags.TRAMPOLINE | CommonFlags.COMPILED);\n    original.trampoline = trampoline;\n\n    // compile initializers of omitted arguments in scope of the trampoline function\n    // this is necessary because initializers might need additional locals and a proper this context\n    var previousFlow = this.currentFlow;\n    var flow = trampoline.flow;\n    this.currentFlow = flow;\n\n    // create a br_table switching over the number of optional parameters provided\n    var numNames = numOptional + 1; // incl. outer block\n    var names = new Array<string>(numNames);\n    var ofN = \"of\" + numOptional.toString(10);\n    for (let i = 0; i < numNames; ++i) {\n      let label = i.toString(10) + ofN;\n      names[i] = label;\n    }\n    var body = module.block(names[0], [\n      module.block(\"outOfRange\", [\n        module.switch(names, \"outOfRange\",\n          // condition is number of provided optional arguments, so subtract required arguments\n          minArguments\n            ? module.binary(\n                BinaryOp.SubI32,\n                module.global_get(BuiltinSymbols.argc, NativeType.I32),\n                module.i32(minArguments)\n              )\n            : module.global_get(BuiltinSymbols.argc, NativeType.I32)\n        )\n      ]),\n      module.unreachable()\n    ]);\n    for (let i = 0; i < numOptional; ++i, ++operandIndex) {\n      let type = originalParameterTypes[minArguments + i];\n      let declaration = originalParameterDeclarations[minArguments + i];\n      let initializer = declaration.initializer;\n      let initExpr: ExpressionRef;\n      if (initializer) {\n        initExpr = module.local_set(operandIndex,\n          this.compileExpression(\n            initializer,\n            type,\n            Constraints.CONV_IMPLICIT\n          )\n        );\n      } else {\n        this.error(\n          DiagnosticCode.Optional_parameter_must_have_an_initializer,\n          declaration.range\n        );\n        initExpr = module.unreachable();\n      }\n      body = module.block(names[i + 1], [\n        body,\n        initExpr,\n      ]);\n      forwardedOperands[operandIndex] = module.local_get(operandIndex, type.toNativeType());\n    }\n    assert(operandIndex == maxOperands);\n\n    var stmts: ExpressionRef[] = [ body ];\n    var theCall = module.call(originalName, forwardedOperands, returnType.toNativeType());\n    if (returnType != Type.void) {\n      this.performAutoreleasesWithValue(flow, theCall, returnType, stmts);\n    } else {\n      stmts.push(theCall);\n      this.performAutoreleases(flow, stmts);\n    }\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    var funcRef = module.addFunction(\n      trampoline.internalName,\n      this.ensureFunctionType(\n        trampolineSignature.parameterTypes,\n        returnType,\n        thisType\n      ),\n      typesToNativeTypes(trampoline.additionalLocals),\n      module.block(null, stmts, returnType.toNativeType())\n    );\n    trampoline.finalize(module, funcRef);\n    return trampoline;\n  }\n\n  /** Makes sure that the argument count helper global is present and returns its name. */\n  private ensureArgcVar(): string {\n    if (!this.argcVar) {\n      let module = this.module;\n      this.argcVar = module.addGlobal(\n        BuiltinSymbols.argc,\n        NativeType.I32,\n        true,\n        module.i32(0)\n      );\n    }\n    return BuiltinSymbols.argc;\n  }\n\n  /** Makes sure that the argument count helper setter is present and returns its name. */\n  private ensureArgcSet(): string {\n    if (!this.argcSet) {\n      let module = this.module;\n      this.argcSet = module.addFunction(BuiltinSymbols.setargc,\n        this.ensureFunctionType([ Type.u32 ], Type.void),\n        null,\n        module.global_set(this.ensureArgcVar(),\n          module.local_get(0, NativeType.I32)\n        )\n      );\n      module.addFunctionExport(BuiltinSymbols.setargc, \"__setargc\");\n    }\n    return BuiltinSymbols.setargc;\n  }\n\n  // <reference-counting>\n\n  /** Makes retain call, retaining the expression's value. */\n  makeRetain(expr: ExpressionRef): ExpressionRef {\n    var retainInstance = this.program.retainInstance;\n    this.compileFunction(retainInstance);\n    return this.module.call(retainInstance.internalName, [ expr ], this.options.nativeSizeType);\n  }\n\n  /** Makes a retainRelease call, retaining the new expression's value and releasing the old expression's value, in this order. */\n  makeRetainRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // if ((t1=newExpr) != (t2=oldExpr)) {\n    //   __retain(t1);\n    //   __release(t2);\n    // }, t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp1 = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var temp2 = flow.getTempLocal(usizeType);\n    var ret = module.block(null, [\n      module.if(\n        module.binary(nativeSizeType == NativeType.I64 ? BinaryOp.NeI64 : BinaryOp.NeI32,\n          module.local_tee(temp1.index, newExpr),\n          module.local_tee(temp2.index, oldExpr)\n        ),\n        module.block(null, [\n          module.drop(\n            this.makeRetain(module.local_get(temp1.index, nativeSizeType))\n          ),\n          this.makeRelease(module.local_get(temp2.index, nativeSizeType))\n        ])\n      ),\n      module.local_get(temp1.index, nativeSizeType)\n    ], nativeSizeType);\n    flow.freeTempLocal(temp2);\n    flow.freeTempLocal(temp1);\n    return ret;\n  }\n\n  /** Makes a skippedRelease call, ignoring the new expression's value and releasing the old expression's value, in this order. */\n  makeSkippedRelease(oldExpr: ExpressionRef, newExpr: ExpressionRef): ExpressionRef {\n    // TODO: this helper can be eliminated altogether if the current logic holds\n    // (t1=newExpr), __release(oldExpr), t1\n    var module = this.module;\n    var flow = this.currentFlow;\n    var usizeType = this.options.usizeType;\n    var nativeSizeType = this.options.nativeSizeType;\n    var temp = flow.getTempLocal(usizeType, findUsedLocals(oldExpr));\n    var ret = module.block(null, [\n      module.local_set(temp.index, newExpr),\n      this.makeRelease(oldExpr),\n      module.local_get(temp.index, nativeSizeType)\n    ], nativeSizeType);\n    flow.freeTempLocal(temp);\n    return ret;\n  }\n\n  /** Makes a release call, releasing the expression's value. Changes the current type to void.*/\n  makeRelease(expr: ExpressionRef): ExpressionRef {\n    var releaseInstance = this.program.releaseInstance;\n    this.compileFunction(releaseInstance);\n    return this.module.call(releaseInstance.internalName, [ expr ], NativeType.None);\n  }\n\n  /** Makes an automatic release call at the end of the current flow. */\n  makeAutorelease(expr: ExpressionRef, flow: Flow = this.currentFlow): ExpressionRef {\n    // FIXME: loses track of nonNull state?\n    return this.module.local_tee(flow.getAutoreleaseLocal(this.options.usizeType).index, expr);\n  }\n\n  /** Attempts to undo a final autorelease, returning the index of the previously retaining variable or -1 if not possible. */\n  undoAutorelease(expr: ExpressionRef, flow: Flow): i32 {\n    // NOTE: Can't remove the local.tee completely because it's already compiled\n    // and a child of something else. Preventing the final release however should\n    // make it optimize away.\n    switch (getExpressionId(expr)) {\n      case ExpressionId.LocalSet: { // local.tee(__retain(expr))\n        if (isLocalTee(expr)) {\n          let index = getLocalSetIndex(expr);\n          if (flow.isAnyLocalFlag(index, LocalFlags.ANY_RETAINED)) {\n            // Assumes that the expression actually belongs to the flow and that\n            // top-level autoreleases are never undone. While that's true, it's\n            // not necessary to check presence in scopedLocals.\n            flow.unsetLocalFlag(index, LocalFlags.ANY_RETAINED);\n            return index;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Block: { // { ..., local.tee(__retain(expr)) }\n        if (getBlockName(expr) === null) { // must not be a break target\n          let count = getBlockChildCount(expr);\n          if (count) {\n            return this.undoAutorelease(getBlockChild(expr, count - 1), flow);\n          }\n        }\n        break;\n      }\n    }\n    return -1;\n  }\n\n  /**\n   * Attemps to move a final autorelease from one flow to a parent.\n   * It is crucial that from flow hasn't processed autoreleases yet because otherwise the final\n   * retain would have been written already.\n   */\n  moveAutorelease(expr: ExpressionRef, fromInnerFlow: Flow, toOuterFlow: Flow): ExpressionRef {\n    // NOTE: While this avoids an unnecessary set of retain and release, it cannot\n    // eliminate the now unnecessary temporary local.tee because it is already part of\n    // another expression in the tree. But optimizing should collapse locals again.\n    var index = this.undoAutorelease(expr, fromInnerFlow);\n    return ~index\n      ? this.makeAutorelease(expr, toOuterFlow) // undone, can skip the retain\n      : this.makeAutorelease(this.makeRetain(expr), toOuterFlow);\n  }\n\n  /** Performs any queued autoreleases in the specified flow. */\n  performAutoreleases(flow: Flow, stmts: ExpressionRef[], clearFlags: bool = true): void {\n    var scopedLocals = flow.scopedLocals;\n    if (scopedLocals) {\n      let module = this.module;\n      for (let local of scopedLocals.values()) {\n        if (local.is(CommonFlags.SCOPED)) { // otherwise an alias\n          let localIndex = local.index;\n          if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n            if (clearFlags) flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n            stmts.push(\n              this.makeRelease(\n                module.local_get(localIndex, local.type.toNativeType())\n              )\n            );\n          }\n        }\n      }\n    }\n  }\n\n  /** Performs any queued autoreleases in the specified flow and returns the value. */\n  performAutoreleasesWithValue(\n    flow: Flow,\n    valueExpr: ExpressionRef,\n    valueType: Type,\n    stmts: ExpressionRef[] | null = null,\n    clearFlags: bool = true\n  ): ExpressionRef {\n    if (!stmts) stmts = new Array<ExpressionRef>();\n    stmts.push(\n      this.module.nop()\n    );\n    var lengthBefore = stmts.length;\n    this.performAutoreleases(flow, stmts, clearFlags);\n    if (stmts.length > lengthBefore) {\n      let nativeType = valueType.toNativeType();\n      let temp = flow.getTempLocal(valueType);\n      if (!flow.canOverflow(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.WRAPPED);\n      if (flow.isNonnull(valueExpr, valueType)) flow.setLocalFlag(temp.index, LocalFlags.NONNULL);\n      let module = this.module;\n      stmts[lengthBefore - 1] = module.local_set(temp.index, valueExpr); // nop -> set\n      stmts.push(\n        module.local_get(temp.index, nativeType) // append get\n      );\n      let ret = module.block(null, stmts, nativeType);\n      flow.freeTempLocal(temp);\n      return ret;\n    } else if (stmts.length > 1) {\n      stmts[lengthBefore - 1] = valueExpr; // nop -> value\n      return this.module.block(null, stmts, valueType.toNativeType());\n    }\n    return valueExpr;\n  }\n\n  /** Finishes any queued top-level autoreleases in the actual function of the specified flow. */\n  finishAutoreleases(flow: Flow, stmts: ExpressionRef[]): void {\n    var module = this.module;\n    if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n      // traverse to the top-most flow containing the inlined function's\n      // locals as scoped locals and release these instead.\n      let parent: Flow | null;\n      while (parent = flow.parent) flow = parent;\n      this.performAutoreleases(flow, stmts, false);\n    } else {\n      for (let local of flow.parentFunction.localsByIndex) {\n        let localIndex = local.index;\n        if (flow.isAnyLocalFlag(localIndex, LocalFlags.ANY_RETAINED)) {\n          flow.unsetLocalFlag(localIndex, LocalFlags.ANY_RETAINED);\n          stmts.push(\n            this.makeRelease(\n              module.local_get(localIndex, local.type.toNativeType())\n            )\n          );\n        }\n      }\n    }\n  }\n\n  // </reference-counting>\n\n  /** Creates a direct call to the specified function. */\n  makeCallDirect(\n    instance: Function,\n    operands: ExpressionRef[] | null,\n    reportNode: Node,\n    immediatelyDropped: bool = false,\n    /** Skip the usual autorelease and manage this at the callsite instead. */\n    skipAutorelease: bool = false\n  ): ExpressionRef {\n    if (instance.hasDecorator(DecoratorFlags.INLINE)) {\n      assert(!instance.is(CommonFlags.TRAMPOLINE)); // doesn't make sense\n      if (this.currentInlineFunctions.includes(instance)) {\n        this.warning(\n          DiagnosticCode.Function_0_cannot_be_inlined_into_itself,\n          reportNode.range, instance.internalName\n        );\n      } else {\n        this.currentInlineFunctions.push(instance);\n        let expr: ExpressionRef;\n        if (instance.is(CommonFlags.INSTANCE)) {\n          let theOperands = assert(operands);\n          assert(theOperands.length);\n          expr = this.makeCallInline(instance, theOperands.slice(1), theOperands[0], immediatelyDropped);\n        } else {\n          expr = this.makeCallInline(instance, operands, 0, immediatelyDropped);\n        }\n        if (this.currentType.isManaged) {\n          if (!skipAutorelease) {\n            expr = this.makeAutorelease(expr, this.currentFlow);\n          } else {\n            this.skippedAutoreleases.add(expr);\n          }\n        }\n        this.currentInlineFunctions.pop();\n        return expr;\n      }\n    }\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = instance.signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = instance.signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (instance.is(CommonFlags.INSTANCE)) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    var module = this.module;\n    if (!this.compileFunction(instance)) return module.unreachable();\n    var returnType = instance.signature.returnType;\n    var isCallImport = instance.is(CommonFlags.MODULE_IMPORT);\n\n    // fill up omitted arguments with their initializers, if constant, otherwise with zeroes.\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = instance.signature.parameterTypes;\n      let parameterNodes = instance.prototype.functionTypeNode.parameters;\n      assert(parameterNodes.length == parameterTypes.length);\n      let allOptionalsAreConstant = true;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        let initializer = parameterNodes[i].initializer;\n        if (initializer) {\n          if (nodeIsConstantValue(initializer.kind)) {\n            operands.push(this.compileExpression(\n              <Expression>parameterNodes[i].initializer,\n              parameterTypes[i],\n              Constraints.CONV_IMPLICIT\n            ));\n            continue;\n          }\n          let resolved = this.resolver.lookupExpression(initializer, instance.flow, parameterTypes[i]);\n          if (resolved) {\n            if (resolved.kind == ElementKind.GLOBAL) {\n              let global = <Global>resolved;\n              if (this.compileGlobal(global)) {\n                if (global.is(CommonFlags.INLINED)) {\n                  operands.push(\n                    this.compileInlineConstant(global, parameterTypes[i], Constraints.CONV_IMPLICIT)\n                  );\n                } else {\n                  operands.push(\n                    this.convertExpression(\n                      module.global_get(global.internalName, global.type.toNativeType()),\n                      global.type, parameterTypes[i], false, false, initializer\n                    )\n                  );\n                }\n                continue;\n              }\n            }\n          }\n        }\n        operands.push(parameterTypes[i].toNativeZero(module));\n        allOptionalsAreConstant = false;\n      }\n      if (!allOptionalsAreConstant) {\n        if (!isCallImport) {\n          let original = instance;\n          instance = this.ensureTrampoline(instance);\n          if (!this.compileFunction(instance)) return module.unreachable();\n          instance.flow.flags = original.flow.flags;\n          let nativeReturnType = returnType.toNativeType();\n          let expr = module.call(instance.internalName, operands, nativeReturnType);\n          this.currentType = returnType;\n          if (returnType.isManaged) {\n            if (immediatelyDropped) {\n              expr = this.makeRelease(expr);\n              this.currentType = Type.void;\n            } else if (!skipAutorelease) {\n              expr = this.makeAutorelease(expr);\n            } else {\n              this.skippedAutoreleases.add(expr);\n            }\n          }\n          return module.block(null, [\n            module.global_set(this.ensureArgcVar(), module.i32(numArguments)),\n            expr\n          ], this.currentType.toNativeType());\n        }\n      }\n    }\n\n    // If the return value is of a reference type it has not yet been released but is in flight\n    // which is equivalent to a skipped autorelease. Hence, insert either a release if it is\n    // dropped anyway, preserve the skipped autorelease if explicitly requested or autorelease now.\n    var expr = module.call(instance.internalName, operands, returnType.toNativeType());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else if (!skipAutorelease) {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return expr;\n  }\n\n  /** Compiles an indirect call using an index argument and a signature. */\n  compileCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    argumentExpressions: Expression[],\n    reportNode: Node,\n    thisArg: ExpressionRef = 0,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numArguments = argumentExpressions.length;\n\n    if (!this.checkCallSignature( // reports\n      signature,\n      numArguments,\n      thisArg != 0,\n      reportNode\n    )) {\n      return this.module.unreachable();\n    }\n\n    var numArgumentsInclThis = thisArg ? numArguments + 1 : numArguments;\n    var operands = new Array<ExpressionRef>(numArgumentsInclThis);\n    var index = 0;\n    if (thisArg) {\n      operands[0] = thisArg;\n      index = 1;\n    }\n    var parameterTypes = signature.parameterTypes;\n    for (let i = 0; i < numArguments; ++i, ++index) {\n      operands[index] = this.compileExpression(argumentExpressions[i], parameterTypes[i],\n        Constraints.CONV_IMPLICIT\n      );\n    }\n    assert(index == numArgumentsInclThis);\n    return this.makeCallIndirect(signature, indexArg, operands, immediatelyDropped);\n  }\n\n  /** Creates an indirect call to the function at `indexArg` in the function table. */\n  makeCallIndirect(\n    signature: Signature,\n    indexArg: ExpressionRef,\n    operands: ExpressionRef[] | null = null,\n    immediatelyDropped: bool = false\n  ): ExpressionRef {\n    var numOperands = operands ? operands.length : 0;\n    var numArguments = numOperands;\n    var minArguments = signature.requiredParameters;\n    var minOperands = minArguments;\n    var maxArguments = signature.parameterTypes.length;\n    var maxOperands = maxArguments;\n    if (signature.thisType) {\n      ++minOperands;\n      ++maxOperands;\n      --numArguments;\n    }\n    assert(numOperands >= minOperands);\n\n    this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var module = this.module;\n\n    // fill up omitted arguments with zeroes\n    if (numOperands < maxOperands) {\n      if (!operands) {\n        operands = new Array(maxOperands);\n        operands.length = 0;\n      }\n      let parameterTypes = signature.parameterTypes;\n      for (let i = numArguments; i < maxArguments; ++i) {\n        operands.push(parameterTypes[i].toNativeZero(module));\n      }\n    }\n\n    var returnType = signature.returnType;\n    var expr = module.call_indirect(indexArg, operands, signature.toSignatureString());\n    this.currentType = returnType;\n    if (returnType.isManaged) {\n      if (immediatelyDropped) {\n        expr = this.makeRelease(expr);\n        this.currentType = Type.void;\n      } else {\n        expr = this.makeAutorelease(expr);\n      }\n    }\n    return module.block(null, [\n      module.global_set(this.ensureArgcVar(), // might be calling a trampoline\n        module.i32(numArguments)\n      ),\n      expr\n    ], this.currentType.toNativeType()); // not necessarily wrapped\n  }\n\n  compileCommaExpression(\n    expression: CommaExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var expressions = expression.expressions;\n    var numExpressions = expressions.length;\n    var exprs = new Array<ExpressionRef>(numExpressions--);\n    for (let i = 0; i < numExpressions; ++i) {\n      exprs[i] = this.compileExpression(expressions[i], Type.void, // drop all except last\n        Constraints.CONV_IMPLICIT | Constraints.WILL_DROP\n      );\n    }\n    exprs[numExpressions] = this.compileExpression(expressions[numExpressions], contextualType, constraints);\n    return this.module.block(null, exprs, this.currentType.toNativeType());\n  }\n\n  compileElementAccessExpression(\n    expression: ElementAccessExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var targetExpression = expression.expression;\n    var targetType = this.resolver.resolveExpression(targetExpression, this.currentFlow); // reports\n    if (targetType) {\n      if (targetType.is(TypeFlags.REFERENCE)) {\n        let classReference = targetType.classReference;\n        if (classReference) {\n          let indexedGet = classReference.lookupOverload(OperatorKind.INDEXED_GET, this.currentFlow.is(FlowFlags.UNCHECKED_CONTEXT));\n          if (indexedGet) {\n            let thisArg = this.compileExpression(targetExpression, classReference.type,\n              Constraints.CONV_IMPLICIT\n            );\n            return this.compileCallDirect(indexedGet, [\n              expression.elementExpression\n            ], expression, thisArg, constraints);\n          }\n        }\n      }\n      this.error(\n        DiagnosticCode.Index_signature_is_missing_in_type_0,\n        expression.expression.range, targetType.toString()\n      );\n    }\n    return module.unreachable();\n  }\n\n  compileFunctionExpression(\n    expression: FunctionExpression,\n    contextualSignature: Signature | null,\n    constraints: Constraints\n  ): ExpressionRef {\n    var declaration = expression.declaration.clone(); // generic contexts can have multiple\n    assert(!declaration.typeParameters); // function expression cannot be generic\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n    var prototype = new FunctionPrototype(\n      declaration.name.text.length\n        ? declaration.name.text\n        : \"anonymous|\" + (actualFunction.nextAnonymousId++).toString(10),\n      actualFunction,\n      declaration,\n      DecoratorFlags.NONE\n    );\n    var instance: Function | null;\n    var contextualTypeArguments = makeMap(flow.contextualTypeArguments);\n\n    // compile according to context. this differs from a normal function in that omitted parameter\n    // and return types can be inferred and omitted arguments can be replaced with dummies.\n    if (contextualSignature) {\n      let signatureNode = prototype.functionTypeNode;\n      let parameterNodes = signatureNode.parameters;\n      let numPresentParameters = parameterNodes.length;\n\n      // must not require more than the maximum number of parameters\n      let parameterTypes = contextualSignature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      if (numPresentParameters > numParameters) {\n        this.error(\n          DiagnosticCode.Expected_0_arguments_but_got_1,\n          expression.range, numParameters.toString(), numPresentParameters.toString()\n        );\n        return this.module.unreachable();\n      }\n\n      // check non-omitted parameter types\n      let parameterNames = new Array<string>(numPresentParameters);\n      for (let i = 0; i < numPresentParameters; ++i) {\n        let parameterNode = parameterNodes[i];\n        parameterNames[i] = parameterNode.name.text; // use actual name\n        if (!isTypeOmitted(parameterNode.type)) {\n          let resolvedType = this.resolver.resolveType(\n            parameterNode.type,\n            actualFunction.parent,\n            contextualTypeArguments\n          );\n          if (!resolvedType) return this.module.unreachable();\n          if (!parameterTypes[i].isStrictlyAssignableTo(resolvedType)) {\n            this.error(\n              DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n              parameterNode.range, parameterTypes[i].toString(), resolvedType.toString()\n            );\n            return this.module.unreachable();\n          }\n        }\n        // any unused parameters are inherited but ignored\n      }\n\n      // check non-omitted return type\n      let returnType = contextualSignature.returnType;\n      if (!isTypeOmitted(signatureNode.returnType)) {\n        let resolvedType = this.resolver.resolveType(\n          signatureNode.returnType,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (\n          returnType == Type.void\n            ? resolvedType != Type.void\n            : !resolvedType.isStrictlyAssignableTo(returnType)\n        ) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            signatureNode.returnType.range, resolvedType.toString(), returnType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      // check explicit this type\n      let thisType = contextualSignature.thisType;\n      let thisTypeNode = signatureNode.explicitThisType;\n      if (thisTypeNode) {\n        if (!thisType) {\n          this.error(\n            DiagnosticCode._this_cannot_be_referenced_in_current_location,\n            thisTypeNode.range\n          );\n          return this.module.unreachable();\n        }\n        let resolvedType = this.resolver.resolveType(\n          thisTypeNode,\n          actualFunction.parent,\n          contextualTypeArguments\n        );\n        if (!resolvedType) return this.module.unreachable();\n        if (!thisType.isStrictlyAssignableTo(resolvedType)) {\n          this.error(\n            DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n            thisTypeNode.range, thisType.toString(), resolvedType.toString()\n          );\n          return this.module.unreachable();\n        }\n      }\n\n      let signature = new Signature(this.program, parameterTypes, returnType, thisType);\n      signature.requiredParameters = numParameters; // !\n      signature.parameterNames = parameterNames;\n      instance = new Function(\n        prototype.name,\n        prototype,\n        signature,\n        contextualTypeArguments\n      );\n      if (!this.compileFunction(instance)) return this.module.unreachable();\n      this.currentType = contextualSignature.type;\n\n    // otherwise compile like a normal function\n    } else {\n      instance = this.compileFunctionUsingTypeArguments(\n        prototype,\n        [],\n        contextualTypeArguments\n      );\n      if (!instance) return this.module.unreachable();\n      this.currentType = instance.signature.type;\n    }\n\n    var index = this.ensureFunctionTableEntry(instance); // reports\n    return index < 0\n      ? this.module.unreachable()\n      : this.module.i32(index);\n  }\n\n  /** Makes sure the enclosing source file of the specified expression has been compiled. */\n  private maybeCompileEnclosingSource(expression: Expression): void {\n    var internalPath = expression.range.source.internalPath;\n    var filesByName = this.program.filesByName;\n    assert(filesByName.has(internalPath));\n    var enclosingFile = filesByName.get(internalPath)!;\n    if (!enclosingFile.is(CommonFlags.COMPILED)) {\n      this.compileFileByPath(internalPath, expression);\n    }\n  }\n\n  /**\n   * Compiles an identifier in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compileIdentifierExpression(\n    expression: IdentifierExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var actualFunction = flow.actualFunction;\n\n    // check special keywords first\n    switch (expression.kind) {\n      case NodeKind.NULL: {\n        let options = this.options;\n        if (contextualType.is(TypeFlags.REFERENCE)) {\n          let classReference = contextualType.classReference;\n          if (classReference) {\n            this.currentType = classReference.type.asNullable();\n            return options.isWasm64 ? module.i64(0) : module.i32(0);\n          }\n          let signatureReference = contextualType.signatureReference;\n          if (signatureReference) {\n            this.currentType = signatureReference.type.asNullable();\n            return module.i32(0);\n          }\n          // TODO: anyref context yields <usize>0\n        }\n        this.currentType = options.usizeType;\n        return options.isWasm64\n          ? module.i64(0)\n          : module.i32(0);\n      }\n      case NodeKind.TRUE: {\n        this.currentType = Type.bool;\n        return module.i32(1);\n      }\n      case NodeKind.FALSE: {\n        this.currentType = Type.bool;\n        return module.i32(0);\n      }\n      case NodeKind.THIS: {\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let thisLocal = assert(flow.lookupLocal(CommonSymbols.this_));\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let nativeSizeType = this.options.nativeSizeType;\n          if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n            if (!flow.is(FlowFlags.ALLOCATES)) {\n              flow.set(FlowFlags.ALLOCATES);\n              // {\n              //   if (!this) this = <ALLOC>\n              //   this.a = X\n              //   this.b = Y\n              //   return this\n              // }\n              let stmts: ExpressionRef[] = [\n                module.if(\n                  module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n                    module.local_get(thisLocal.index, nativeSizeType)\n                  ),\n                  module.local_set(thisLocal.index,\n                    this.makeRetain(\n                      this.makeAllocation(<Class>classInstance)\n                    )\n                  )\n                )\n              ];\n              this.makeFieldInitialization(<Class>classInstance, stmts);\n              stmts.push(\n                module.local_get(thisLocal.index, nativeSizeType)\n              );\n              this.currentType = thisLocal.type;\n              return module.block(null, stmts, nativeSizeType);\n            }\n          }\n          // if not a constructor, `this` type can differ\n          let thisType = assert(actualFunction.signature.thisType);\n          this.currentType = thisType;\n          return module.local_get(thisLocal.index, thisType.toNativeType());\n        }\n        this.error(\n          DiagnosticCode._this_cannot_be_referenced_in_current_location,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n      case NodeKind.SUPER: {\n        let flow = this.currentFlow;\n        let actualFunction = flow.actualFunction;\n        if (actualFunction.is(CommonFlags.CONSTRUCTOR)) {\n          if (!flow.is(FlowFlags.CALLS_SUPER)) {\n            // TS1034 in the parser effectively limits this to property accesses\n            this.error(\n              DiagnosticCode._super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class,\n              expression.range\n            );\n          }\n        }\n        if (flow.is(FlowFlags.INLINE_CONTEXT)) {\n          let scopedThis = flow.lookupLocal(CommonSymbols.this_);\n          if (scopedThis) {\n            let scopedThisClass = assert(scopedThis.type.classReference);\n            let base = scopedThisClass.base;\n            if (base) {\n              this.currentType = base.type;\n              return module.local_get(scopedThis.index, base.type.toNativeType());\n            }\n          }\n        }\n        if (actualFunction.is(CommonFlags.INSTANCE)) {\n          let classInstance = assert(actualFunction.parent); assert(classInstance.kind == ElementKind.CLASS);\n          let baseClassInstance = (<Class>classInstance).base;\n          if (baseClassInstance) {\n            let superType = baseClassInstance.type;\n            this.currentType = superType;\n            return module.local_get(0, superType.toNativeType());\n          }\n        }\n        this.error(\n          DiagnosticCode._super_can_only_be_referenced_in_a_derived_class,\n          expression.range\n        );\n        this.currentType = this.options.usizeType;\n        return module.unreachable();\n      }\n    }\n\n    this.maybeCompileEnclosingSource(expression);\n\n    // otherwise resolve\n    var target = this.resolver.lookupIdentifierExpression( // reports\n      expression,\n      flow,\n      this.currentParent || actualFunction\n    );\n    if (!target) return module.unreachable();\n\n    switch (target.kind) {\n      case ElementKind.LOCAL: {\n        let type = (<Local>target).type;\n        if (target.parent != flow.parentFunction) {\n          // Closures are not yet supported\n          this.error(\n            DiagnosticCode.Not_implemented,\n            expression.range\n          );\n          this.currentType = type;\n          return module.unreachable();\n        }\n        assert(type != Type.void);\n        if ((<Local>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Local>target, contextualType, constraints);\n        }\n        let localIndex = (<Local>target).index;\n        assert(localIndex >= 0);\n        if (type.is(TypeFlags.NULLABLE) && flow.isLocalFlag(localIndex, LocalFlags.NONNULL, false)) {\n          type = type.nonNullableType;\n        }\n        this.currentType = type;\n        return this.module.local_get(localIndex, type.toNativeType());\n      }\n      case ElementKind.GLOBAL: {\n        if (!this.compileGlobal(<Global>target)) { // reports; not yet compiled if a static field\n          return this.module.unreachable();\n        }\n        let type = (<Global>target).type;\n        assert(type != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, contextualType, constraints);\n        }\n        this.currentType = type;\n        return this.module.global_get((<Global>target).internalName, type.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // here: if referenced from within the same enum\n        if (!target.is(CommonFlags.COMPILED)) {\n          this.error(\n            DiagnosticCode.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums,\n            expression.range\n          );\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.module.i32(i64_low((<EnumValue>target).constantIntegerValue));\n        }\n        return this.module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let instance = this.resolver.resolveFunction(\n          <FunctionPrototype>target,\n          null,\n          makeMap<string,Type>(flow.contextualTypeArguments)\n        );\n        if (!(instance && this.compileFunction(instance))) return module.unreachable();\n        let index = this.ensureFunctionTableEntry(instance);\n        this.currentType = instance.signature.type;\n        return this.module.i32(index);\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return this.module.unreachable();\n  }\n\n  compileInstanceOfExpression(\n    expression: InstanceOfExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    // NOTE that this differs from TypeScript in that the rhs is a type, not an expression. at the\n    // time of implementation, this seemed more useful because dynamic rhs expressions are not\n    // possible in AS anyway. also note that the code generated below must preserve side-effects of\n    // the LHS expression even when the result is a constant, i.e. return a block dropping `expr`.\n    var expr = this.compileExpression(expression.expression, this.options.usizeType);\n    var actualType = this.currentType;\n    var expectedType = this.resolver.resolveType(expression.isType, this.currentFlow.actualFunction);\n    this.currentType = Type.bool;\n    if (!expectedType) return module.unreachable();\n\n    // instanceof <basic> - must be exact\n    if (!expectedType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(actualType == expectedType ? 1 : 0)\n      ], NativeType.I32);\n    }\n\n    // <basic> instanceof <reference> - always false\n    if (!actualType.is(TypeFlags.REFERENCE)) {\n      return module.block(null, [\n        module.drop(expr),\n        module.i32(0)\n      ], NativeType.I32);\n    }\n\n    // both LHS and RHS are references now\n    var nativeSizeType = actualType.toNativeType();\n\n    // <nullable> instanceof <nonNullable> - LHS must be != 0\n    if (actualType.is(TypeFlags.NULLABLE) && !expectedType.is(TypeFlags.NULLABLE)) {\n\n      // downcast - check statically\n      if (actualType.nonNullableType.isAssignableTo(expectedType)) {\n        return module.binary(\n          nativeSizeType == NativeType.I64\n            ? BinaryOp.NeI64\n            : BinaryOp.NeI32,\n          expr,\n          actualType.toNativeZero(module)\n        );\n      }\n\n      // upcast - check dynamically\n      if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n\n    // either none or both nullable\n    } else {\n\n      // downcast - check statically\n      if (actualType.isAssignableTo(expectedType)) {\n        return module.block(null, [\n          this.convertExpression(expr, actualType, Type.void, false, false, expression.expression),\n          module.i32(1)\n        ], NativeType.I32);\n\n      // upcast - check dynamically\n      } else if (expectedType.isAssignableTo(actualType)) {\n        let program = this.program;\n        if (!(actualType.isUnmanaged || expectedType.isUnmanaged)) {\n          // FIXME: the temp local and the if can be removed here once flows\n          // perform null checking, which would error earlier when checking\n          // uninitialized (thus zero) `var a: A` to be an instance of something.\n          let flow = this.currentFlow;\n          let temp = flow.getTempLocal(actualType);\n          let instanceofInstance = assert(program.instanceofInstance);\n          this.compileFunction(instanceofInstance);\n          let ret = module.if(\n            module.unary(\n              nativeSizeType == NativeType.I64\n                ? UnaryOp.EqzI64\n                : UnaryOp.EqzI32,\n              module.local_tee(temp.index, expr),\n            ),\n            module.i32(0),\n            this.makeCallDirect(instanceofInstance, [\n              module.local_get(temp.index, nativeSizeType),\n              module.i32(expectedType.classReference!.id)\n            ], expression)\n          );\n          flow.freeTempLocal(temp);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Operator_0_cannot_be_applied_to_types_1_and_2,\n            expression.range, \"instanceof\", actualType.toString(), expectedType.toString()\n          );\n        }\n      }\n    }\n\n    // false\n    return module.block(null, [\n      module.drop(expr),\n      module.i32(0)\n    ], NativeType.I32);\n  }\n\n  compileLiteralExpression(\n    expression: LiteralExpression,\n    contextualType: Type,\n    constraints: Constraints,\n    implicitlyNegate: bool = false\n  ): ExpressionRef {\n    var module = this.module;\n    switch (expression.literalKind) {\n      case LiteralKind.ARRAY: {\n        assert(!implicitlyNegate);\n        let classType = contextualType.classReference;\n        if (classType) {\n          if (classType.prototype == this.program.arrayPrototype) {\n            return this.compileArrayLiteral(\n              assert(classType.typeArguments)[0],\n              (<ArrayLiteralExpression>expression).elementExpressions,\n              constraints,\n              expression\n            );\n          }\n        }\n        this.error(\n          DiagnosticCode.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly,\n          expression.range, \"T\"\n        );\n        return module.unreachable();\n      }\n      case LiteralKind.FLOAT: {\n        let floatValue = (<FloatLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          floatValue = -floatValue;\n        }\n        if (contextualType == Type.f32) {\n          return module.f32(<f32>floatValue);\n        }\n        this.currentType = Type.f64;\n        return module.f64(floatValue);\n      }\n      case LiteralKind.INTEGER: {\n        let intValue = (<IntegerLiteralExpression>expression).value;\n        if (implicitlyNegate) {\n          intValue = i64_sub(\n            i64_new(0),\n            intValue\n          );\n        }\n        let type = this.resolver.determineIntegerLiteralType(intValue, contextualType);\n        this.currentType = type;\n        switch (type.kind) {\n          case TypeKind.ISIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.I64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.USIZE: if (!this.options.isWasm64) return module.i32(i64_low(intValue));\n          case TypeKind.U64: return module.i64(i64_low(intValue), i64_high(intValue));\n          case TypeKind.F32: return module.f32(i64_to_f32(intValue));\n          case TypeKind.F64: return module.f64(i64_to_f64(intValue));\n          default: return module.i32(i64_low(intValue));\n        }\n      }\n      case LiteralKind.STRING: {\n        assert(!implicitlyNegate);\n        return this.compileStringLiteral(<StringLiteralExpression>expression);\n      }\n      case LiteralKind.OBJECT: {\n        assert(!implicitlyNegate);\n        return this.compileObjectLiteral(<ObjectLiteralExpression>expression, contextualType);\n      }\n      // case LiteralKind.REGEXP:\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    this.currentType = contextualType;\n    return module.unreachable();\n  }\n\n  compileStringLiteral(expression: StringLiteralExpression): ExpressionRef {\n    return this.ensureStaticString(expression.value);\n  }\n\n  compileArrayLiteral(\n    elementType: Type,\n    expressions: (Expression | null)[],\n    constraints: Constraints,\n    reportNode: Node\n  ): ExpressionRef {\n    var module = this.module;\n    var program = this.program;\n    var arrayPrototype = assert(program.arrayPrototype);\n    var arrayInstance = assert(this.resolver.resolveClass(arrayPrototype, [ elementType ]));\n    var arrayBufferInstance = assert(program.arrayBufferInstance);\n    var arrayType = arrayInstance.type;\n    var flow = this.currentFlow;\n\n    // block those here so compiling expressions doesn't conflict\n    var tempThis = flow.getTempLocal(arrayType);\n    var tempDataStart = flow.getTempLocal(arrayBufferInstance.type);\n\n    // compile value expressions and find out whether all are constant\n    var length = expressions.length;\n    var values = new Array<ExpressionRef>(length);\n    var isStatic = true;\n    var nativeElementType = elementType.toNativeType();\n    for (let i = 0; i < length; ++i) {\n      let expression = expressions[i];\n      let expr = expression\n        ? module.precomputeExpression(\n            this.compileExpression(<Expression>expression, elementType,\n              Constraints.CONV_IMPLICIT\n            )\n          )\n        : elementType.toNativeZero(module);\n      if (getExpressionId(expr) == ExpressionId.Const) {\n        assert(getExpressionType(expr) == nativeElementType);\n      } else {\n        isStatic = false;\n      }\n      values[i] = expr;\n    }\n\n    // if the array is static, make a static arraybuffer segment\n    if (isStatic) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n\n      let runtimeHeaderSize = program.runtimeHeaderSize;\n      let bufferSegment = this.ensureStaticArrayBuffer(elementType, values);\n      let bufferAddress = i64_add(bufferSegment.offset, i64_new(runtimeHeaderSize));\n\n      // make both the buffer and array header static if assigned to a global. this can't be done\n      // if inside of a function because each invocation must create a new array reference then.\n      if (constraints & Constraints.PREFER_STATIC) {\n        let arraySegment = this.ensureStaticArrayHeader(elementType, bufferSegment);\n        let arrayAddress = i64_add(arraySegment.offset, i64_new(runtimeHeaderSize));\n        this.currentType = arrayType;\n        return program.options.isWasm64\n          ? this.module.i64(i64_low(arrayAddress), i64_high(arrayAddress))\n          : this.module.i32(i64_low(arrayAddress));\n\n      // otherwise allocate a new array header and make it wrap a copy of the static buffer\n      } else {\n        // makeArray(length, alignLog2, classId, staticBuffer)\n        let expr = this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(i64_low(bufferAddress), i64_high(bufferAddress))\n            : module.i32(i64_low(bufferAddress))\n        ], reportNode);\n        this.currentType = arrayType;\n        return this.makeAutorelease(this.makeRetain(expr));\n      }\n    }\n\n    // otherwise compile an explicit instantiation with indexed sets\n    var setter = arrayInstance.lookupOverload(OperatorKind.INDEXED_SET, true);\n    if (!setter) {\n      flow.freeTempLocal(tempThis);\n      flow.freeTempLocal(tempDataStart);\n      this.error(\n        DiagnosticCode.Index_signature_in_type_0_only_permits_reading,\n        reportNode.range, arrayInstance.internalName\n      );\n      this.currentType = arrayType;\n      return module.unreachable();\n    }\n    var nativeArrayType = arrayType.toNativeType();\n\n    var stmts = new Array<ExpressionRef>();\n    // tempThis = makeArray(length, alignLog2, classId, source = 0)\n    stmts.push(\n      module.local_set(tempThis.index,\n        this.makeCallDirect(program.allocArrayInstance, [\n          module.i32(length),\n          program.options.isWasm64\n            ? module.i64(elementType.alignLog2)\n            : module.i32(elementType.alignLog2),\n          module.i32(arrayInstance.id),\n          program.options.isWasm64\n            ? module.i64(0)\n            : module.i32(0)\n        ], reportNode),\n      )\n    );\n    // tempData = tempThis.dataStart\n    var dataStart = assert(arrayInstance.lookupInSelf(\"dataStart\"));\n    assert(dataStart.kind == ElementKind.FIELD);\n    stmts.push(\n      module.local_set(tempDataStart.index,\n        module.load(arrayType.byteSize, false,\n          module.local_get(tempThis.index, nativeArrayType),\n          nativeArrayType,\n          (<Field>dataStart).memoryOffset\n        )\n      )\n    );\n    var isManaged = elementType.isManaged;\n    for (let i = 0, alignLog2 = elementType.alignLog2; i < length; ++i) {\n      let valueExpr = values[i];\n      if (isManaged) {\n        // value = __retain(value)\n        valueExpr = this.makeRetain(valueExpr);\n      }\n      // store<T>(tempData, value, immOffset)\n      stmts.push(\n        module.store(elementType.byteSize,\n          module.local_get(tempDataStart.index, nativeArrayType),\n          valueExpr,\n          nativeElementType,\n          i << alignLog2\n        )\n      );\n    }\n    // -> tempThis\n    stmts.push(\n      module.local_get(tempThis.index, nativeArrayType)\n    );\n    flow.freeTempLocal(tempThis);\n    flow.freeTempLocal(tempDataStart);\n    this.currentType = arrayType;\n    return module.block(null, stmts, nativeArrayType);\n  }\n\n  compileObjectLiteral(expression: ObjectLiteralExpression, contextualType: Type): ExpressionRef {\n    var module = this.module;\n\n    // contextual type must be a class\n    var classReference = contextualType.classReference;\n    if (!classReference || classReference.is(CommonFlags.ABSTRACT)) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        expression.range, \"<object>\", contextualType.toString()\n      );\n      return module.unreachable();\n    }\n\n    // if present, check that the constructor is compatible with object literals\n    var ctor = classReference.constructorInstance;\n    if (ctor) {\n      // TODO: if the constructor requires parameters, check whether these are given as part of the\n      // object literal and use them to call the ctor while not generating a store.\n      if (ctor.signature.requiredParameters) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_must_not_require_any_arguments,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PRIVATE)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.is(CommonFlags.PROTECTED)) {\n        this.error(\n          DiagnosticCode.Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration,\n          expression.range, classReference.toString()\n        );\n        return module.unreachable();\n      }\n      if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n    }\n\n    // check and compile field values\n    var names = expression.names;\n    var numNames = names.length;\n    var values = expression.values;\n    var members = classReference.members;\n    var hasErrors = false;\n    var exprs = new Array<ExpressionRef>(numNames + 2);\n    var flow = this.currentFlow;\n    var tempLocal = flow.getAutoreleaseLocal(this.options.usizeType);\n    assert(numNames == values.length);\n    for (let i = 0, k = numNames; i < k; ++i) {\n      let member = members ? members.get(names[i].text) : null;\n      if (!member || member.kind != ElementKind.FIELD) {\n        this.error(\n          DiagnosticCode.Property_0_does_not_exist_on_type_1,\n          names[i].range, names[i].text, classReference.toString()\n        );\n        hasErrors = true;\n        continue;\n      }\n      let type = (<Field>member).type;\n      exprs[i + 1] = this.module.store( // TODO: handle setters as well\n        type.byteSize,\n        this.module.local_get(tempLocal.index, this.options.nativeSizeType),\n        this.compileExpression(values[i], (<Field>member).type, Constraints.CONV_IMPLICIT),\n        type.toNativeType(),\n        (<Field>member).memoryOffset\n      );\n    }\n    this.currentType = classReference.type.nonNullableType;\n    if (hasErrors) return module.unreachable();\n\n    // allocate a new instance first and assign 'this' to the temp. local\n    exprs[0] = module.local_set(\n      tempLocal.index,\n      this.makeRetain(\n        this.makeAllocation(classReference)\n      )\n    );\n\n    // once all field values have been set, return 'this'\n    exprs[exprs.length - 1] = module.local_get(tempLocal.index, this.options.nativeSizeType);\n\n    this.currentType = classReference.type;\n    return module.block(null, exprs, this.options.nativeSizeType);\n  }\n\n  compileNewExpression(\n    expression: NewExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // obtain the class being instantiated\n    var target = this.resolver.lookupExpression( // reports\n      expression.expression,\n      flow\n    );\n    if (!target) return module.unreachable();\n    if (target.kind != ElementKind.CLASS_PROTOTYPE) {\n      this.error(\n        DiagnosticCode.This_expression_is_not_constructable,\n        expression.expression.range\n      );\n      return this.module.unreachable();\n    }\n    var classPrototype = <ClassPrototype>target;\n    var classInstance: Class | null = null;\n    var typeArguments = expression.typeArguments;\n    var classReference: Class | null;\n    if (\n      !typeArguments &&\n      (classReference = contextualType.classReference) !== null &&\n      classReference.is(CommonFlags.GENERIC)\n    ) {\n      classInstance = this.resolver.resolveClass(\n        classPrototype,\n        classReference.typeArguments,\n        makeMap<string,Type>(flow.contextualTypeArguments)\n      );\n    } else {\n      classInstance = this.resolver.resolveClassInclTypeArguments(\n        classPrototype,\n        typeArguments,\n        flow.actualFunction.parent, // relative to caller\n        makeMap<string,Type>(flow.contextualTypeArguments),\n        expression\n      );\n    }\n    if (!classInstance) return module.unreachable();\n    if (contextualType == Type.void) constraints |= Constraints.WILL_DROP;\n    return this.compileInstantiate(classInstance, expression.arguments, constraints, expression);\n  }\n\n  /** Gets the compiled constructor of the specified class or generates one if none is present. */\n  ensureConstructor(classInstance: Class, reportNode: Node): Function {\n    var instance = classInstance.constructorInstance;\n    if (instance) {\n      // do not attempt to compile it if inlined anyway\n      if (!instance.hasDecorator(DecoratorFlags.INLINE)) this.compileFunction(instance);\n      return instance;\n    }\n\n    // clone base constructor if a derived class\n    var baseClass = classInstance.base;\n    if (baseClass) {\n      let baseCtor = this.ensureConstructor(baseClass, reportNode);\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          // declaration is important, i.e. to access optional parameter initializers\n          (<FunctionDeclaration>baseCtor.declaration).clone()\n        ),\n        baseCtor.signature,\n        null\n      );\n\n    // otherwise make a default constructor\n    } else {\n      instance = new Function(\n        CommonSymbols.constructor,\n        new FunctionPrototype(\n          CommonSymbols.constructor,\n          classInstance,\n          this.program.makeNativeFunctionDeclaration(CommonSymbols.constructor,\n            CommonFlags.INSTANCE | CommonFlags.CONSTRUCTOR\n          )\n        ),\n        new Signature(this.program, null, classInstance.type, classInstance.type),\n        null\n      );\n    }\n\n    instance.internalName = classInstance.internalName + INSTANCE_DELIMITER + \"constructor\";\n    instance.set(CommonFlags.COMPILED);\n    instance.prototype.setResolvedInstance(\"\", instance);\n    classInstance.constructorInstance = instance;\n    var previousFlow = this.currentFlow;\n    var flow = instance.flow;\n    this.currentFlow = flow;\n\n    // generate body\n    var signature = instance.signature;\n    var module = this.module;\n    var nativeSizeType = this.options.nativeSizeType;\n    var stmts = new Array<ExpressionRef>();\n\n    // {\n    //   if (!this) this = <ALLOC>\n    //   IF_DERIVED: this = super(this, ...args)\n    //   this.a = X\n    //   this.b = Y\n    //   return this\n    // }\n    var allocExpr = this.makeAllocation(classInstance);\n    if (classInstance.type.isManaged) allocExpr = this.makeRetain(allocExpr);\n    stmts.push(\n      module.if(\n        module.unary(nativeSizeType == NativeType.I64 ? UnaryOp.EqzI64 : UnaryOp.EqzI32,\n          module.local_get(0, nativeSizeType)\n        ),\n        module.local_set(0, allocExpr)\n      )\n    );\n    if (baseClass) {\n      let parameterTypes = signature.parameterTypes;\n      let numParameters = parameterTypes.length;\n      let operands = new Array<ExpressionRef>(1 + numParameters);\n      operands[0] = module.local_get(0, nativeSizeType);\n      for (let i = 0; i < numParameters; ++i) {\n        operands[i + 1] = module.local_get(i + 1, parameterTypes[i].toNativeType());\n      }\n      // TODO: base constructor might be inlined, but makeCallDirect can't do this\n      stmts.push(\n        module.local_set(0,\n          this.makeCallDirect(assert(baseClass.constructorInstance), operands, reportNode, false, true)\n        )\n      );\n    }\n    this.makeFieldInitialization(classInstance, stmts);\n    var body = this.performAutoreleasesWithValue(flow, module.local_get(0, nativeSizeType), classInstance.type, stmts);\n    flow.freeScopedLocals();\n    this.currentFlow = previousFlow;\n\n    // make the function\n    var typeRef = this.ensureFunctionType(signature.parameterTypes, signature.returnType, signature.thisType);\n    var locals = instance.localsByIndex;\n    var varTypes = new Array<NativeType>(); // of temp. vars added while compiling initializers\n    var numOperands = 1 + signature.parameterTypes.length;\n    var numLocals = locals.length;\n    if (numLocals > numOperands) {\n      for (let i = numOperands; i < numLocals; ++i) varTypes.push(locals[i].type.toNativeType());\n    }\n    var funcRef = module.addFunction(instance.internalName, typeRef, varTypes, body);\n    instance.finalize(module, funcRef);\n    return instance;\n  }\n\n  compileInstantiate(\n    /** Class to instantiate. */\n    classInstance: Class,\n    /** Constructor arguments. */\n    argumentExpressions: Expression[],\n    /** Contextual flags. */\n    constraints: Constraints,\n    /** Node to report on. */\n    reportNode: Node\n  ): ExpressionRef {\n    var ctor = this.ensureConstructor(classInstance, reportNode);\n    if (ctor.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(reportNode);\n    var expr = this.compileCallDirect( // no need for another autoreleased local\n      ctor,\n      argumentExpressions,\n      reportNode,\n      this.options.usizeType.toNativeZero(this.module),\n      constraints\n    );\n    if (getExpressionType(expr) != NativeType.None) { // possibly IMM_DROPPED\n      this.currentType = classInstance.type; // important because a super ctor could be called\n    }\n    return expr;\n  }\n\n  /**\n   * Compiles a property access in the specified context.\n   * @param retainConstantType Retains the type of inlined constants if `true`, otherwise\n   *  precomputes them according to context.\n   */\n  compilePropertyAccessExpression(\n    expression: PropertyAccessExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    this.maybeCompileEnclosingSource(expression);\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression, flow, ctxType); // reports\n    if (!target) return module.unreachable();\n    if (target.hasDecorator(DecoratorFlags.UNSAFE)) this.checkUnsafe(expression);\n\n    switch (target.kind) {\n      case ElementKind.GLOBAL: { // static field\n        if (!this.compileGlobal(<Global>target)) return module.unreachable(); // reports\n        let globalType = (<Global>target).type;\n        assert(globalType != Type.void);\n        if ((<Global>target).is(CommonFlags.INLINED)) {\n          return this.compileInlineConstant(<Global>target, ctxType, constraints);\n        }\n        this.currentType = globalType;\n        return module.global_get((<Global>target).internalName, globalType.toNativeType());\n      }\n      case ElementKind.ENUMVALUE: { // enum value\n        let theEnum = assert((<EnumValue>target).parent); assert(theEnum.kind == ElementKind.ENUM);\n        if (!this.compileEnum(<Enum>theEnum)) {\n          this.currentType = Type.i32;\n          return this.module.unreachable();\n        }\n        this.currentType = Type.i32;\n        if ((<EnumValue>target).is(CommonFlags.INLINED)) {\n          assert((<EnumValue>target).constantValueKind == ConstantValueKind.INTEGER);\n          return this.compileInlineConstant(<EnumValue>target, ctxType, constraints);\n        }\n        assert((<EnumValue>target).type == Type.i32);\n        return module.global_get((<EnumValue>target).internalName, NativeType.I32);\n      }\n      case ElementKind.FIELD: { // instance field\n        assert((<Field>target).memoryOffset >= 0);\n        let thisExpr = this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType);\n        this.currentType = (<Field>target).type;\n        return module.load(\n          (<Field>target).type.byteSize,\n          (<Field>target).type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n          thisExpr,\n          (<Field>target).type.toNativeType(),\n          (<Field>target).memoryOffset\n        );\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {// static property\n        let getterPrototype = (<PropertyPrototype>target).getterPrototype;\n        if (getterPrototype) {\n          let getter = this.resolver.resolveFunction(getterPrototype, null);\n          if (getter) return this.compileCallDirect(getter, [], expression, 0);\n        }\n        return module.unreachable();\n      }\n      case ElementKind.PROPERTY: { // instance property\n        let getterInstance = assert((<Property>target).getterInstance);\n        return this.compileCallDirect(getterInstance, [], expression,\n          this.compileExpression(assert(this.resolver.currentThisExpression), this.options.usizeType)\n        );\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        let prototype = <FunctionPrototype>target;\n\n        if (prototype.is(CommonFlags.STATIC)) {\n          let instance = this.compileFunctionUsingTypeArguments(\n            prototype,\n            [],\n            makeMap<string,Type>(),\n            expression,\n          );\n          if (instance == null) {\n            return module.unreachable();\n          } else {\n            this.currentType = instance.type;\n            return module.i32(this.ensureFunctionTableEntry(instance));\n          }\n        }\n\n        this.error(\n          DiagnosticCode.Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set,\n          expression.range, prototype.name\n        );\n        return module.unreachable();\n      }\n    }\n    this.error(\n      DiagnosticCode.Not_implemented,\n      expression.range\n    );\n    return module.unreachable();\n  }\n\n  compileTernaryExpression(\n    expression: TernaryExpression,\n    ctxType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var ifThen = expression.ifThen;\n    var ifElse = expression.ifElse;\n    var outerFlow = this.currentFlow;\n\n    var condExpr = this.module.precomputeExpression(\n      this.makeIsTrueish(\n        this.compileExpression(expression.condition, Type.bool),\n        this.currentType\n      )\n    );\n\n    // Try to eliminate unnecesssary branches if the condition is constant\n    // FIXME: skips common denominator, inconsistently picking left type\n    if (\n      getExpressionId(condExpr) == ExpressionId.Const &&\n      getExpressionType(condExpr) == NativeType.I32\n    ) {\n      return getConstValueI32(condExpr)\n        ? this.compileExpression(ifThen, ctxType)\n        : this.compileExpression(ifElse, ctxType);\n    }\n\n    var inheritedConstraints = constraints & Constraints.WILL_RETAIN;\n\n    var ifThenFlow = outerFlow.fork();\n    this.currentFlow = ifThenFlow;\n    var ifThenExpr = this.compileExpression(ifThen, ctxType, inheritedConstraints);\n    var ifThenType = this.currentType;\n    var IfThenAutoreleaseSkipped = this.skippedAutoreleases.has(ifThenExpr);\n\n    var ifElseFlow = outerFlow.fork();\n    this.currentFlow = ifElseFlow;\n    var ifElseExpr = this.compileExpression(ifElse, ctxType, inheritedConstraints);\n    var ifElseType = this.currentType;\n    var ifElseAutoreleaseSkipped = this.skippedAutoreleases.has(ifElseExpr);\n\n    var commonType = Type.commonDenominator(ifThenType, ifElseType, false);\n    if (!commonType) {\n      this.error(\n        DiagnosticCode.Type_0_is_not_assignable_to_type_1,\n        ifElse.range, ifElseType.toString(), ifThenType.toString()\n      );\n      this.currentType = ctxType;\n      return this.module.unreachable();\n    }\n    ifThenExpr = this.convertExpression(\n      ifThenExpr,\n      ifThenType, commonType,\n      false, false,\n      ifThen\n    );\n    ifElseExpr = this.convertExpression(\n      ifElseExpr,\n      ifElseType, commonType,\n      false, false,\n      ifElse\n    );\n    this.currentType = commonType;\n\n    if (IfThenAutoreleaseSkipped != ifElseAutoreleaseSkipped) { // unify to both skipped\n      if (!IfThenAutoreleaseSkipped) {\n        ifThenExpr = this.makeRetain(ifThenExpr);\n        IfThenAutoreleaseSkipped = true;\n      } else {\n        ifElseExpr = this.makeRetain(ifElseExpr);\n        ifElseAutoreleaseSkipped = true;\n      }\n    } else if (!IfThenAutoreleaseSkipped && commonType.isManaged) { // keep alive a little longer\n      // if (!(constraints & Constraints.WILL_RETAIN)) {\n        ifThenExpr = this.moveAutorelease(ifThenExpr, ifThenFlow, outerFlow);\n        ifElseExpr = this.moveAutorelease(ifElseExpr, ifElseFlow, outerFlow);\n      // }\n    }\n\n    ifThenExpr = this.performAutoreleasesWithValue(ifThenFlow, ifThenExpr, commonType);\n    ifThenFlow.freeScopedLocals();\n\n    ifElseExpr = this.performAutoreleasesWithValue(ifElseFlow, ifElseExpr, commonType);\n    ifElseFlow.freeScopedLocals();\n\n    this.currentFlow = outerFlow;\n    outerFlow.inheritMutual(ifThenFlow, ifElseFlow);\n\n    var expr = this.module.if(condExpr, ifThenExpr, ifElseExpr);\n    assert(IfThenAutoreleaseSkipped == ifElseAutoreleaseSkipped);\n    if (IfThenAutoreleaseSkipped) this.skippedAutoreleases.add(expr);\n    return expr;\n  }\n\n  compileUnaryPostfixExpression(\n    expression: UnaryPostfixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n\n    // make a getter for the expression (also obtains the type)\n    var getValue = this.compileExpression( // reports\n      expression.operand,\n      contextualType.exceptVoid,\n      Constraints.NONE\n    );\n\n    // shortcut if compiling the getter already failed\n    if (getExpressionId(getValue) == ExpressionId.Unreachable) return getValue;\n\n    // if the value isn't dropped, a temp. local is required to remember the original value,\n    // except if a static overload is found, which reverses the use of a temp. (see below)\n    var tempLocal: Local | null = null;\n    if (contextualType != Type.void) {\n      tempLocal = flow.getTempLocal(this.currentType);\n      getValue = module.local_tee(\n        tempLocal.index,\n        getValue\n      );\n    }\n\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS_PLUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_INC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (isInstance) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.AddI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.AddI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.AddF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.AddF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.POSTFIX_DEC);\n            if (overload) {\n              let isInstance = overload.is(CommonFlags.INSTANCE);\n              if (tempLocal !== null && !isInstance) { // revert: static overload simply returns\n                getValue = getLocalSetValue(getValue);\n                flow.freeTempLocal(tempLocal);\n                tempLocal = null;\n              }\n              expr = this.compileUnaryOverload(overload, expression.operand, getValue, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break;\n              return expr; // here\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          if (tempLocal) flow.freeTempLocal(tempLocal);\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(\n              BinaryOp.SubI32,\n              getValue,\n              module.i32(1)\n            );\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            let options = this.options;\n            expr = module.binary(\n              options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              getValue,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(\n              BinaryOp.SubI64,\n              getValue,\n              module.i64(1)\n            );\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(\n              BinaryOp.SubF32,\n              getValue,\n              module.f32(1)\n            );\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(\n              BinaryOp.SubF64,\n              getValue,\n              module.f64(1)\n            );\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            return module.unreachable();\n          }\n        }\n        break;\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, flow); // reports\n    if (!target) {\n      if (tempLocal) flow.freeTempLocal(tempLocal);\n      return module.unreachable();\n    }\n\n    // simplify if dropped anyway\n    if (!tempLocal) {\n      return this.makeAssignment(\n        target,\n        expr,\n        expression.operand,\n        resolver.currentThisExpression,\n        resolver.currentElementExpression,\n        false\n      );\n    }\n\n    // otherwise use the temp. local for the intermediate value (always possibly overflows)\n    var setValue = this.makeAssignment(\n      target,\n      expr, // includes a tee of getValue to tempLocal\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      false\n    );\n\n    this.currentType = tempLocal.type;\n    flow.freeTempLocal(tempLocal);\n    var nativeType = tempLocal.type.toNativeType();\n\n    return module.block(null, [\n      setValue,\n      module.local_get(tempLocal.index, nativeType)\n    ], nativeType); // result of 'x++' / 'x--' might overflow\n  }\n\n  compileUnaryPrefixExpression(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var module = this.module;\n    var compound = false;\n    var expr: ExpressionRef;\n\n    switch (expression.operator) {\n      case Token.PLUS: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PLUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"+\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        // nop\n        break;\n      }\n      case Token.MINUS: {\n        if (expression.operand.kind == NodeKind.LITERAL && (\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.INTEGER ||\n          (<LiteralExpression>expression.operand).literalKind == LiteralKind.FLOAT\n        )) {\n          // implicitly negate integer and float literals. also enables proper checking of literal ranges.\n          expr = this.compileLiteralExpression(<LiteralExpression>expression.operand, contextualType, Constraints.NONE, true);\n          // compileExpression normally does this:\n          if (this.options.sourceMap) this.addDebugLocation(expr, expression.range);\n          break;\n        }\n\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.MINUS);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"-\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, module.i32(0), expr);\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              this.currentType.toNativeZero(module),\n              expr\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, module.i64(0), expr);\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.unary(UnaryOp.NegF32, expr);\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.unary(UnaryOp.NegF64, expr);\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"-\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.PLUS_PLUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_INC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"++\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.AddI32, expr, this.module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.AddI64\n                : BinaryOp.AddI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.AddI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.AddF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.AddF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"++\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.MINUS_MINUS: {\n        compound = true;\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.PREFIX_DEC);\n            if (overload) {\n              expr = this.compileUnaryOverload(overload, expression.operand, expr, expression);\n              if (overload.is(CommonFlags.INSTANCE)) break; // re-assign\n              return expr; // skip re-assign\n            }\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"--\", this.currentType.toString()\n          );\n          return module.unreachable();\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.SubI32, expr, module.i32(1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.SubI64\n                : BinaryOp.SubI32,\n              expr,\n              this.currentType.toNativeOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.SubI64, expr, module.i64(1));\n            break;\n          }\n          case TypeKind.F32: {\n            expr = module.binary(BinaryOp.SubF32, expr, module.f32(1));\n            break;\n          }\n          case TypeKind.F64: {\n            expr = module.binary(BinaryOp.SubF64, expr, module.f64(1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"--\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.EXCLAMATION: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType.exceptVoid,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          // allow '!' for references even without an overload\n        }\n\n        expr = module.unary(UnaryOp.EqzI32, this.makeIsTrueish(expr, this.currentType));\n        this.currentType = Type.bool;\n        break;\n      }\n      case Token.TILDE: {\n        expr = this.compileExpression(\n          expression.operand,\n          contextualType == Type.void\n            ? Type.i32\n            : contextualType.is(TypeFlags.FLOAT)\n              ? Type.i64\n              : contextualType,\n          Constraints.NONE\n        );\n\n        // check operator overload\n        if (this.currentType.is(TypeFlags.REFERENCE)) {\n          let classReference = this.currentType.classReference;\n          if (classReference) {\n            let overload = classReference.lookupOverload(OperatorKind.BITWISE_NOT);\n            if (overload) return this.compileUnaryOverload(overload, expression.operand, expr, expression);\n          }\n          this.error(\n            DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n            expression.range, \"~\", this.currentType.toString()\n          );\n          return module.unreachable();\n        } else {\n          expr = this.convertExpression(expr,\n            this.currentType, this.currentType.intType,\n            false, false,\n            expression.operand\n          );\n        }\n\n        switch (this.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            expr = module.binary(BinaryOp.XorI32, expr, module.i32(-1));\n            break;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            expr = module.binary(\n              this.options.isWasm64\n                ? BinaryOp.XorI64\n                : BinaryOp.XorI32,\n              expr,\n              this.currentType.toNativeNegOne(module)\n            );\n            break;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            expr = module.binary(BinaryOp.XorI64, expr, module.i64(-1, -1));\n            break;\n          }\n          default: {\n            this.error(\n              DiagnosticCode.The_0_operator_cannot_be_applied_to_type_1,\n              expression.range, \"~\", this.currentType.toString()\n            );\n            expr = module.unreachable();\n          }\n        }\n        break;\n      }\n      case Token.TYPEOF: {\n        return this.compileTypeof(expression, contextualType, constraints);\n      }\n      default: {\n        assert(false);\n        return module.unreachable();\n      }\n    }\n    if (!compound) return expr;\n    var resolver = this.resolver;\n    var target = resolver.lookupExpression(expression.operand, this.currentFlow);\n    if (!target) return module.unreachable();\n    return this.makeAssignment(\n      target,\n      expr,\n      expression.operand,\n      resolver.currentThisExpression,\n      resolver.currentElementExpression,\n      contextualType != Type.void\n    );\n  }\n\n  compileTypeof(\n    expression: UnaryPrefixExpression,\n    contextualType: Type,\n    constraints: Constraints\n  ): ExpressionRef {\n    var operand = expression.operand;\n    var expr: ExpressionRef = 0;\n    var stringInstance = this.program.stringInstance;\n    var typeString: string;\n    if (operand.kind == NodeKind.NULL) {\n      typeString = \"object\"; // special since `null` without type context is usize\n    } else {\n      let element = this.resolver.lookupExpression(operand, this.currentFlow, Type.auto, ReportMode.SWALLOW);\n      if (!element) {\n        switch (operand.kind) {\n          case NodeKind.PROPERTYACCESS:\n          case NodeKind.ELEMENTACCESS: {\n            operand = operand.kind == NodeKind.PROPERTYACCESS\n              ? (<PropertyAccessExpression>operand).expression\n              : (<ElementAccessExpression>operand).expression;\n            let targetType = this.resolver.resolveExpression(operand, this.currentFlow, Type.auto, ReportMode.REPORT);\n            if (!targetType) {\n              this.currentType = stringInstance.type;\n              return this.module.unreachable();\n            }\n            expr = this.compileExpression(operand, Type.auto); // might have side-effects\n            break;\n          }\n          case NodeKind.IDENTIFIER: break; // ignore error\n          default: expr = this.compileExpression(operand, Type.auto); // trigger error\n        }\n        typeString = \"undefined\";\n      } else {\n        switch (element.kind) {\n          case ElementKind.CLASS_PROTOTYPE:\n          case ElementKind.NAMESPACE:\n          case ElementKind.ENUM: {\n            typeString = \"object\";\n            break;\n          }\n          case ElementKind.FUNCTION_PROTOTYPE: {\n            typeString = \"function\";\n            break;\n          }\n          default: {\n            expr = this.compileExpression(operand, Type.auto);\n            let type = this.currentType;\n            expr = this.convertExpression(expr, type, Type.void, true, false, operand);\n            if (type.is(TypeFlags.REFERENCE)) {\n              let signatureReference = type.signatureReference;\n              if (signatureReference) {\n                typeString = \"function\";\n              } else {\n                let classReference = type.classReference;\n                if (classReference) {\n                  if (classReference.prototype === stringInstance.prototype) {\n                    typeString = \"string\";\n                  } else {\n                    typeString = \"object\";\n                  }\n                } else {\n                  typeString = \"anyref\"; // TODO?\n                }\n              }\n            } else if (type == Type.bool) {\n              typeString = \"boolean\";\n            } else if (type.isAny(TypeFlags.FLOAT | TypeFlags.INTEGER)) {\n              typeString = \"number\";\n            } else {\n              typeString = \"undefined\"; // failed to compile?\n            }\n            break;\n          }\n        }\n      }\n    }\n    this.currentType = stringInstance.type;\n    return expr\n      ? this.module.block(null, [ expr, this.ensureStaticString(typeString) ], this.options.nativeSizeType)\n      : this.ensureStaticString(typeString);\n  }\n\n  /** Makes sure that a 32-bit integer value is wrapped to a valid value of the specified type. */\n  ensureSmallIntegerWrap(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    switch (type.kind) {\n      case TypeKind.I8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI8ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(24)\n                ),\n                module.i32(24)\n              );\n        }\n        break;\n      }\n      case TypeKind.I16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = this.options.hasFeature(Feature.SIGN_EXTENSION)\n            ? module.unary(UnaryOp.ExtendI16ToI32, expr)\n            : module.binary(BinaryOp.ShrI32,\n                module.binary(BinaryOp.ShlI32,\n                  expr,\n                  module.i32(16)\n                ),\n                module.i32(16)\n              );\n        }\n        break;\n      }\n      case TypeKind.U8: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xff)\n          );\n        }\n        break;\n      }\n      case TypeKind.U16: {\n        if (flow.canOverflow(expr, type)) {\n          expr = module.binary(BinaryOp.AndI32,\n            expr,\n            module.i32(0xffff)\n          );\n        }\n        break;\n      }\n      case TypeKind.BOOL: {\n        if (flow.canOverflow(expr, type)) {\n          // bool is special in that it compares to 0 instead of masking with 0x1\n          expr = module.binary(BinaryOp.NeI32,\n            expr,\n            module.i32(0)\n          );\n        }\n        break;\n      }\n    }\n    return expr;\n  }\n\n  /** Adds the debug location of the specified expression at the specified range to the source map. */\n  addDebugLocation(expr: ExpressionRef, range: Range): void {\n    var parentFunction = this.currentFlow.parentFunction;\n    var source = range.source;\n    if (source.debugInfoIndex < 0) source.debugInfoIndex = this.module.addDebugInfoFile(source.normalizedPath);\n    range.debugInfoRef = expr;\n    parentFunction.debugLocations.push(range);\n  }\n\n  // === Specialized code generation ==============================================================\n\n  /** Creates a comparison whether an expression is 'true' in a broader sense. */\n  makeIsTrueish(expr: ExpressionRef, type: Type): ExpressionRef {\n    var module = this.module;\n    switch (type.kind) {\n      case TypeKind.I8:\n      case TypeKind.I16:\n      case TypeKind.U8:\n      case TypeKind.U16: {\n        expr = this.ensureSmallIntegerWrap(expr, type);\n        // fall-through\n      }\n      case TypeKind.BOOL: // not a mask, just != 0\n      case TypeKind.I32:\n      case TypeKind.U32: {\n        return expr;\n      }\n      case TypeKind.I64:\n      case TypeKind.U64: {\n        return module.binary(BinaryOp.NeI64, expr, module.i64(0));\n      }\n      case TypeKind.USIZE: if (this.skippedAutoreleases.has(expr)) expr = this.makeAutorelease(expr);\n      case TypeKind.ISIZE: {\n        return type.size == 64\n          ? module.binary(BinaryOp.NeI64, expr, module.i64(0))\n          : expr;\n      }\n      case TypeKind.F32: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f32);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF32, module.local_tee(temp.index, expr), module.f32(0)),\n          module.binary(BinaryOp.EqF32,\n            module.local_get(temp.index, NativeType.F32),\n            module.local_get(temp.index, NativeType.F32)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      case TypeKind.F64: {\n        // (x != 0.0) & (x == x)\n        let flow = this.currentFlow;\n        let temp = flow.getTempLocal(Type.f64);\n        let ret = module.binary(BinaryOp.AndI32,\n          module.binary(BinaryOp.NeF64, module.local_tee(temp.index, expr), module.f64(0)),\n          module.binary(BinaryOp.EqF64,\n            module.local_get(temp.index, NativeType.F64),\n            module.local_get(temp.index, NativeType.F64)\n          )\n        );\n        flow.freeTempLocal(temp);\n        return ret;\n      }\n      // case TypeKind.ANYREF: {\n      //   TODO: !ref.is_null\n      // }\n      default: {\n        assert(false);\n        return module.i32(0);\n      }\n    }\n  }\n\n  /** Makes an allocation suitable to hold the data of an instance of the given class. */\n  makeAllocation(\n    classInstance: Class\n  ): ExpressionRef {\n    // TODO: investigate if it's possible to allocate with RC=1 immediately\n    var program = this.program;\n    assert(classInstance.program == program);\n    var module = this.module;\n    var options = this.options;\n    this.currentType = classInstance.type;\n    var allocInstance = program.allocInstance;\n    this.compileFunction(allocInstance);\n    return module.call(allocInstance.internalName, [\n      options.isWasm64\n        ? module.i64(classInstance.currentMemoryOffset)\n        : module.i32(classInstance.currentMemoryOffset),\n      module.i32(\n        classInstance.hasDecorator(DecoratorFlags.UNMANAGED)\n          ? 0\n          : classInstance.id\n      )\n    ], options.nativeSizeType);\n  }\n\n  /** Makes the initializers for a class's fields. */\n  makeFieldInitialization(\n    classInstance: Class,\n    stmts: ExpressionRef[] = []\n  ): ExpressionRef[] {\n    var members = classInstance.members;\n    if (!members) return [];\n\n    var module = this.module;\n    var flow = this.currentFlow;\n    var isInline = flow.is(FlowFlags.INLINE_CONTEXT);\n    var thisLocalIndex = isInline\n      ? assert(flow.lookupLocal(CommonSymbols.this_)).index\n      : 0;\n    var nativeSizeType = this.options.nativeSizeType;\n\n    for (let member of members.values()) {\n      if (\n        member.kind != ElementKind.FIELD || // not a field\n        member.parent != classInstance      // inherited field\n      ) continue;\n\n      let field = <Field>member; assert(!field.isAny(CommonFlags.CONST));\n      let fieldType = field.type;\n      let nativeFieldType = fieldType.toNativeType();\n      let fieldPrototype = field.prototype;\n      let initializerNode = fieldPrototype.initializerNode;\n      let parameterIndex = fieldPrototype.parameterIndex;\n      let initExpr: ExpressionRef;\n      if (initializerNode) { // use initializer\n        initExpr = this.compileExpression(initializerNode, fieldType, // reports\n          Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN\n        );\n        if (fieldType.isManaged && !this.skippedAutoreleases.has(initExpr)) {\n          initExpr = this.makeRetain(initExpr);\n        }\n      } else if (parameterIndex >= 0) { // initialized via parameter (here: a local)\n        initExpr = module.local_get(\n          isInline\n            ? assert(flow.lookupLocal(field.name)).index\n            : 1 + parameterIndex, // this is local 0\n          nativeFieldType\n        );\n        if (fieldType.isManaged) initExpr = this.makeRetain(initExpr);\n      } else { // initialize with zero\n        initExpr = fieldType.toNativeZero(module);\n      }\n      stmts.push(\n        module.store(fieldType.byteSize,\n          module.local_get(thisLocalIndex, nativeSizeType),\n          initExpr,\n          nativeFieldType,\n          field.memoryOffset\n        )\n      );\n    }\n    return stmts;\n  }\n\n  makeInstanceOfClass(\n    expr: ExpressionRef,\n    classInstance: Class\n  ): ExpressionRef {\n    var module = this.module;\n    var flow = this.currentFlow;\n    var idTemp = flow.getTempLocal(Type.i32);\n    var idExpr = module.load(4, false,\n      module.binary(BinaryOp.SubI32,\n        expr,\n        module.i32(this.program.runtimeHeaderSize)\n      ),\n      NativeType.I32\n    );\n    var label = \"instanceof_\" + classInstance.name + \"|\" + flow.pushBreakLabel();\n    var conditions: ExpressionRef[] = [];\n    conditions.push(\n      module.drop( // br_if returns the value too\n        module.br(label,\n          module.binary(BinaryOp.EqI32, // classId == class.id\n            module.local_tee(idTemp.index, idExpr),\n            module.i32(classInstance.id)\n          ),\n          module.i32(1) // ? true\n        )\n      )\n    );\n    // TODO: insert conditions for all possible subclasses (i.e. cat is also animal)\n    // TODO: simplify if there are none\n    conditions.push(\n      module.i32(0) // : false\n    );\n    flow.freeTempLocal(idTemp);\n    flow.popBreakLabel();\n    return module.block(label, conditions, NativeType.I32);\n  }\n\n}\n\n// helpers\n\nfunction mangleImportName(\n  element: Element,\n  declaration: DeclarationStatement\n): void {\n  // by default, use the file name as the module name\n  mangleImportName_moduleName = declaration.range.source.simplePath;\n  // and the internal name of the element within that file as the element name\n  mangleImportName_elementName = mangleInternalName(\n    element.name, element.parent, element.is(CommonFlags.INSTANCE), true\n  );\n  if (!element.hasDecorator(DecoratorFlags.EXTERNAL)) return;\n\n  var program = element.program;\n  var decorator = assert(findDecorator(DecoratorKind.EXTERNAL, declaration.decorators));\n  var args = decorator.arguments;\n  if (args && args.length) {\n    let arg = args[0];\n    // if one argument is given, override just the element name\n    // if two arguments are given, override both module and element name\n    if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n      mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n      if (args.length >= 2) {\n        arg = args[1];\n        if (arg.kind == NodeKind.LITERAL && (<LiteralExpression>arg).literalKind == LiteralKind.STRING) {\n          mangleImportName_moduleName = mangleImportName_elementName;\n          mangleImportName_elementName = (<StringLiteralExpression>arg).value;\n          if (args.length > 2) {\n            program.error(\n              DiagnosticCode.Expected_0_arguments_but_got_1,\n              decorator.range, \"2\", args.length.toString()\n            );\n          }\n        } else {\n          program.error(\n            DiagnosticCode.String_literal_expected,\n            arg.range\n          );\n        }\n      }\n    } else {\n      program.error(\n        DiagnosticCode.String_literal_expected,\n        arg.range\n      );\n    }\n  } else {\n    program.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      decorator.range, \"1\", \"0\"\n    );\n  }\n}\n\nvar mangleImportName_moduleName: string;\nvar mangleImportName_elementName: string;\n\n/** Flattens a series of expressions to a nop, a single statement or a block depending on statement count. */\nexport function flatten(module: Module, stmts: ExpressionRef[], type: NativeType): ExpressionRef {\n  var length = stmts.length;\n  if (length == 0) return module.nop(); // usually filtered out again\n  if (length == 1) {\n    let single = stmts[0];\n    if (getExpressionType(single) == type) return single;\n    if (getExpressionId(single) == ExpressionId.Block) {\n      let count = getBlockChildCount(single);\n      let children = new Array<ExpressionRef>(count);\n      for (let i = 0; i < count; ++i) children[i] = getBlockChild(single, i);\n      return module.block(getBlockName(single), children, type);\n    }\n  }\n  return module.block(null, stmts,\n    type == NativeType.Auto\n      ? getExpressionType(stmts[length - 1])\n      : type\n  );\n}\n","/**\n * Generated from diagnosticsMessages.json. Do not edit.\n * @module diagnostics\n *//***/\n\n/* tslint:disable:max-line-length */\n\n/** Enum of available diagnostic codes. */\nexport enum DiagnosticCode {\n  Not_implemented = 100,\n  Operation_is_unsafe = 101,\n  User_defined_0 = 102,\n  Feature_0_is_not_enabled = 103,\n  Conversion_from_type_0_to_1_requires_an_explicit_cast = 200,\n  Conversion_from_type_0_to_1_will_require_an_explicit_cast_when_switching_between_32_64_bit = 201,\n  Type_0_cannot_be_changed_to_type_1 = 202,\n  Operation_0_cannot_be_applied_to_type_1 = 203,\n  Basic_type_0_cannot_be_nullable = 204,\n  Cannot_export_a_mutable_global = 205,\n  Mutable_value_cannot_be_inlined = 206,\n  Unmanaged_classes_cannot_extend_managed_classes_and_vice_versa = 207,\n  Unmanaged_classes_cannot_implement_interfaces = 208,\n  Invalid_regular_expression_flags = 209,\n  Expression_is_never_null = 210,\n  Class_0_is_sealed_and_cannot_be_extended = 211,\n  Decorator_0_is_not_valid_here = 212,\n  Duplicate_decorator = 213,\n  Type_0_is_illegal_in_this_context = 214,\n  Optional_parameter_must_have_an_initializer = 215,\n  Constructor_of_class_0_must_not_require_any_arguments = 216,\n  Function_0_cannot_be_inlined_into_itself = 217,\n  Cannot_access_method_0_without_calling_it_as_it_requires_this_to_be_set = 218,\n  Optional_properties_are_not_supported = 219,\n  Expression_must_be_a_compile_time_constant = 220,\n  Type_0_is_not_a_function_index_or_function_reference = 221,\n  _0_must_be_a_value_between_1_and_2_inclusive = 222,\n  _0_must_be_a_power_of_two = 223,\n  _0_is_not_a_valid_operator = 224,\n  Expression_cannot_be_represented_by_a_type = 225,\n  Unterminated_string_literal = 1002,\n  Identifier_expected = 1003,\n  _0_expected = 1005,\n  A_file_cannot_have_a_reference_to_itself = 1006,\n  Trailing_comma_not_allowed = 1009,\n  Unexpected_token = 1012,\n  A_rest_parameter_must_be_last_in_a_parameter_list = 1014,\n  Parameter_cannot_have_question_mark_and_initializer = 1015,\n  A_required_parameter_cannot_follow_an_optional_parameter = 1016,\n  Statements_are_not_allowed_in_ambient_contexts = 1036,\n  Initializers_are_not_allowed_in_ambient_contexts = 1039,\n  _0_modifier_cannot_be_used_here = 1042,\n  A_rest_parameter_cannot_be_optional = 1047,\n  A_rest_parameter_cannot_have_an_initializer = 1048,\n  A_set_accessor_must_have_exactly_one_parameter = 1049,\n  A_set_accessor_parameter_cannot_have_an_initializer = 1052,\n  A_get_accessor_cannot_have_parameters = 1054,\n  Enum_member_must_have_initializer = 1061,\n  Type_parameters_cannot_appear_on_a_constructor_declaration = 1092,\n  Type_annotation_cannot_appear_on_a_constructor_declaration = 1093,\n  An_accessor_cannot_have_type_parameters = 1094,\n  A_set_accessor_cannot_have_a_return_type_annotation = 1095,\n  Type_parameter_list_cannot_be_empty = 1098,\n  A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement = 1104,\n  A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement = 1105,\n  A_return_statement_can_only_be_used_within_a_function_body = 1108,\n  Expression_expected = 1109,\n  Type_expected = 1110,\n  A_default_clause_cannot_appear_more_than_once_in_a_switch_statement = 1113,\n  Duplicate_label_0 = 1114,\n  An_export_assignment_cannot_have_modifiers = 1120,\n  Octal_literals_are_not_allowed_in_strict_mode = 1121,\n  Digit_expected = 1124,\n  Hexadecimal_digit_expected = 1125,\n  Unexpected_end_of_text = 1126,\n  Invalid_character = 1127,\n  _case_or_default_expected = 1130,\n  _super_must_be_followed_by_an_argument_list_or_member_access = 1034,\n  A_declare_modifier_cannot_be_used_in_an_already_ambient_context = 1038,\n  Type_argument_expected = 1140,\n  String_literal_expected = 1141,\n  Line_break_not_permitted_here = 1142,\n  Declaration_expected = 1146,\n  _const_declarations_must_be_initialized = 1155,\n  Unterminated_regular_expression_literal = 1161,\n  Interface_declaration_cannot_have_implements_clause = 1176,\n  Binary_digit_expected = 1177,\n  Octal_digit_expected = 1178,\n  An_implementation_cannot_be_declared_in_ambient_contexts = 1183,\n  An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive = 1198,\n  Unterminated_Unicode_escape_sequence = 1199,\n  Decorators_are_not_valid_here = 1206,\n  _abstract_modifier_can_only_appear_on_a_class_method_or_property_declaration = 1242,\n  Method_0_cannot_have_an_implementation_because_it_is_marked_abstract = 1245,\n  A_definite_assignment_assertion_is_not_permitted_in_this_context = 1255,\n  A_class_may_only_extend_another_class = 1311,\n  A_parameter_property_cannot_be_declared_using_a_rest_parameter = 1317,\n  Duplicate_identifier_0 = 2300,\n  Cannot_find_name_0 = 2304,\n  Module_0_has_no_exported_member_1 = 2305,\n  Generic_type_0_requires_1_type_argument_s = 2314,\n  Type_0_is_not_generic = 2315,\n  Type_0_is_not_assignable_to_type_1 = 2322,\n  Index_signature_is_missing_in_type_0 = 2329,\n  _this_cannot_be_referenced_in_current_location = 2332,\n  _super_can_only_be_referenced_in_a_derived_class = 2335,\n  Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors = 2337,\n  Property_0_does_not_exist_on_type_1 = 2339,\n  Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_Type_0_has_no_compatible_call_signatures = 2349,\n  This_expression_is_not_constructable = 2351,\n  A_function_whose_declared_type_is_not_void_must_return_a_value = 2355,\n  The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access = 2357,\n  The_left_hand_side_of_an_assignment_expression_must_be_a_variable_or_a_property_access = 2364,\n  Operator_0_cannot_be_applied_to_types_1_and_2 = 2365,\n  A_super_call_must_be_the_first_statement_in_the_constructor = 2376,\n  Constructors_for_derived_classes_must_contain_a_super_call = 2377,\n  _get_and_set_accessor_must_have_the_same_type = 2380,\n  Constructor_implementation_is_missing = 2390,\n  Function_implementation_is_missing_or_not_immediately_following_the_declaration = 2391,\n  Multiple_constructor_implementations_are_not_allowed = 2392,\n  Duplicate_function_implementation = 2393,\n  Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local = 2395,\n  A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged = 2434,\n  The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly = 2453,\n  Type_0_has_no_property_1 = 2460,\n  The_0_operator_cannot_be_applied_to_type_1 = 2469,\n  In_const_enum_declarations_member_initializer_must_be_constant_expression = 2474,\n  Export_declaration_conflicts_with_exported_declaration_of_0 = 2484,\n  Object_is_possibly_null = 2531,\n  Cannot_assign_to_0_because_it_is_a_constant_or_a_read_only_property = 2540,\n  The_target_of_an_assignment_must_be_a_variable_or_a_property_access = 2541,\n  Index_signature_in_type_0_only_permits_reading = 2542,\n  Expected_0_arguments_but_got_1 = 2554,\n  Expected_at_least_0_arguments_but_got_1 = 2555,\n  Expected_0_type_arguments_but_got_1 = 2558,\n  A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums = 2651,\n  Constructor_of_class_0_is_private_and_only_accessible_within_the_class_declaration = 2673,\n  Constructor_of_class_0_is_protected_and_only_accessible_within_the_class_declaration = 2674,\n  The_this_types_of_each_signature_are_incompatible = 2685,\n  Namespace_0_has_no_exported_member_1 = 2694,\n  Required_type_parameters_may_not_follow_optional_type_parameters = 2706,\n  Duplicate_property_0 = 2718,\n  Type_0_has_no_call_signatures = 2757,\n  File_0_not_found = 6054,\n  Numeric_separators_are_not_allowed_here = 6188,\n  Multiple_consecutive_numeric_separators_are_not_permitted = 6189,\n  _super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class = 17009,\n  _super_must_be_called_before_accessing_a_property_of_super_in_the_constructor_of_a_derived_class = 17011\n}\n\n/** Translates a diagnostic code to its respective string. */\nexport function diagnosticCodeToString(code: DiagnosticCode): string {\n  switch (code) {\n    case 100: return \"Not implemented.\";\n    case 101: return \"Operation is unsafe.\";\n    case 102: return \"User-defined: {0}\";\n    case 103: return \"Feature '{0}' is not enabled.\";\n    case 200: return \"Conversion from type '{0}' to '{1}' requires an explicit cast.\";\n    case 201: return \"Conversion from type '{0}' to '{1}' will require an explicit cast when switching between 32/64-bit.\";\n    case 202: return \"Type '{0}' cannot be changed to type '{1}'.\";\n    case 203: return \"Operation '{0}' cannot be applied to type '{1}'.\";\n    case 204: return \"Basic type '{0}' cannot be nullable.\";\n    case 205: return \"Cannot export a mutable global.\";\n    case 206: return \"Mutable value cannot be inlined.\";\n    case 207: return \"Unmanaged classes cannot extend managed classes and vice-versa.\";\n    case 208: return \"Unmanaged classes cannot implement interfaces.\";\n    case 209: return \"Invalid regular expression flags.\";\n    case 210: return \"Expression is never 'null'.\";\n    case 211: return \"Class '{0}' is sealed and cannot be extended.\";\n    case 212: return \"Decorator '{0}' is not valid here.\";\n    case 213: return \"Duplicate decorator.\";\n    case 214: return \"Type '{0}' is illegal in this context.\";\n    case 215: return \"Optional parameter must have an initializer.\";\n    case 216: return \"Constructor of class '{0}' must not require any arguments.\";\n    case 217: return \"Function '{0}' cannot be inlined into itself.\";\n    case 218: return \"Cannot access method '{0}' without calling it as it requires 'this' to be set.\";\n    case 219: return \"Optional properties are not supported.\";\n    case 220: return \"Expression must be a compile-time constant.\";\n    case 221: return \"Type '{0}' is not a function index or function reference.\";\n    case 222: return \"'{0}' must be a value between '{1}' and '{2}' inclusive.\";\n    case 223: return \"'{0}' must be a power of two.\";\n    case 224: return \"'{0}' is not a valid operator.\";\n    case 225: return \"Expression cannot be represented by a type.\";\n    case 1002: return \"Unterminated string literal.\";\n    case 1003: return \"Identifier expected.\";\n    case 1005: return \"'{0}' expected.\";\n    case 1006: return \"A file cannot have a reference to itself.\";\n    case 1009: return \"Trailing comma not allowed.\";\n    case 1012: return \"Unexpected token.\";\n    case 1014: return \"A rest parameter must be last in a parameter list.\";\n    case 1015: return \"Parameter cannot have question mark and initializer.\";\n    case 1016: return \"A required parameter cannot follow an optional parameter.\";\n    case 1036: return \"Statements are not allowed in ambient contexts.\";\n    case 1039: return \"Initializers are not allowed in ambient contexts.\";\n    case 1042: return \"'{0}' modifier cannot be used here.\";\n    case 1047: return \"A rest parameter cannot be optional.\";\n    case 1048: return \"A rest parameter cannot have an initializer.\";\n    case 1049: return \"A 'set' accessor must have exactly one parameter.\";\n    case 1052: return \"A 'set' accessor parameter cannot have an initializer.\";\n    case 1054: return \"A 'get' accessor cannot have parameters.\";\n    case 1061: return \"Enum member must have initializer.\";\n    case 1092: return \"Type parameters cannot appear on a constructor declaration.\";\n    case 1093: return \"Type annotation cannot appear on a constructor declaration.\";\n    case 1094: return \"An accessor cannot have type parameters.\";\n    case 1095: return \"A 'set' accessor cannot have a return type annotation.\";\n    case 1098: return \"Type parameter list cannot be empty.\";\n    case 1104: return \"A 'continue' statement can only be used within an enclosing iteration statement.\";\n    case 1105: return \"A 'break' statement can only be used within an enclosing iteration or switch statement.\";\n    case 1108: return \"A 'return' statement can only be used within a function body.\";\n    case 1109: return \"Expression expected.\";\n    case 1110: return \"Type expected.\";\n    case 1113: return \"A 'default' clause cannot appear more than once in a 'switch' statement.\";\n    case 1114: return \"Duplicate label '{0}'.\";\n    case 1120: return \"An export assignment cannot have modifiers.\";\n    case 1121: return \"Octal literals are not allowed in strict mode.\";\n    case 1124: return \"Digit expected.\";\n    case 1125: return \"Hexadecimal digit expected.\";\n    case 1126: return \"Unexpected end of text.\";\n    case 1127: return \"Invalid character.\";\n    case 1130: return \"'case' or 'default' expected.\";\n    case 1034: return \"'super' must be followed by an argument list or member access.\";\n    case 1038: return \"A 'declare' modifier cannot be used in an already ambient context.\";\n    case 1140: return \"Type argument expected.\";\n    case 1141: return \"String literal expected.\";\n    case 1142: return \"Line break not permitted here.\";\n    case 1146: return \"Declaration expected.\";\n    case 1155: return \"'const' declarations must be initialized.\";\n    case 1161: return \"Unterminated regular expression literal.\";\n    case 1176: return \"Interface declaration cannot have 'implements' clause.\";\n    case 1177: return \"Binary digit expected.\";\n    case 1178: return \"Octal digit expected.\";\n    case 1183: return \"An implementation cannot be declared in ambient contexts.\";\n    case 1198: return \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\";\n    case 1199: return \"Unterminated Unicode escape sequence.\";\n    case 1206: return \"Decorators are not valid here.\";\n    case 1242: return \"'abstract' modifier can only appear on a class, method, or property declaration.\";\n    case 1245: return \"Method '{0}' cannot have an implementation because it is marked abstract.\";\n    case 1255: return \"A definite assignment assertion '!' is not permitted in this context.\";\n    case 1311: return \"A class may only extend another class.\";\n    case 1317: return \"A parameter property cannot be declared using a rest parameter.\";\n    case 2300: return \"Duplicate identifier '{0}'.\";\n    case 2304: return \"Cannot find name '{0}'.\";\n    case 2305: return \"Module '{0}' has no exported member '{1}'.\";\n    case 2314: return \"Generic type '{0}' requires {1} type argument(s).\";\n    case 2315: return \"Type '{0}' is not generic.\";\n    case 2322: return \"Type '{0}' is not assignable to type '{1}'.\";\n    case 2329: return \"Index signature is missing in type '{0}'.\";\n    case 2332: return \"'this' cannot be referenced in current location.\";\n    case 2335: return \"'super' can only be referenced in a derived class.\";\n    case 2337: return \"Super calls are not permitted outside constructors or in nested functions inside constructors.\";\n    case 2339: return \"Property '{0}' does not exist on type '{1}'.\";\n    case 2349: return \"Cannot invoke an expression whose type lacks a call signature. Type '{0}' has no compatible call signatures.\";\n    case 2351: return \"This expression is not constructable.\";\n    case 2355: return \"A function whose declared type is not 'void' must return a value.\";\n    case 2357: return \"The operand of an increment or decrement operator must be a variable or a property access.\";\n    case 2364: return \"The left-hand side of an assignment expression must be a variable or a property access.\";\n    case 2365: return \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\";\n    case 2376: return \"A 'super' call must be the first statement in the constructor.\";\n    case 2377: return \"Constructors for derived classes must contain a 'super' call.\";\n    case 2380: return \"'get' and 'set' accessor must have the same type.\";\n    case 2390: return \"Constructor implementation is missing.\";\n    case 2391: return \"Function implementation is missing or not immediately following the declaration.\";\n    case 2392: return \"Multiple constructor implementations are not allowed.\";\n    case 2393: return \"Duplicate function implementation.\";\n    case 2395: return \"Individual declarations in merged declaration '{0}' must be all exported or all local.\";\n    case 2434: return \"A namespace declaration cannot be located prior to a class or function with which it is merged.\";\n    case 2453: return \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\";\n    case 2460: return \"Type '{0}' has no property '{1}'.\";\n    case 2469: return \"The '{0}' operator cannot be applied to type '{1}'.\";\n    case 2474: return \"In 'const' enum declarations member initializer must be constant expression.\";\n    case 2484: return \"Export declaration conflicts with exported declaration of '{0}'.\";\n    case 2531: return \"Object is possibly 'null'.\";\n    case 2540: return \"Cannot assign to '{0}' because it is a constant or a read-only property.\";\n    case 2541: return \"The target of an assignment must be a variable or a property access.\";\n    case 2542: return \"Index signature in type '{0}' only permits reading.\";\n    case 2554: return \"Expected {0} arguments, but got {1}.\";\n    case 2555: return \"Expected at least {0} arguments, but got {1}.\";\n    case 2558: return \"Expected {0} type arguments, but got {1}.\";\n    case 2651: return \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\";\n    case 2673: return \"Constructor of class '{0}' is private and only accessible within the class declaration.\";\n    case 2674: return \"Constructor of class '{0}' is protected and only accessible within the class declaration.\";\n    case 2685: return \"The 'this' types of each signature are incompatible.\";\n    case 2694: return \"Namespace '{0}' has no exported member '{1}'.\";\n    case 2706: return \"Required type parameters may not follow optional type parameters.\";\n    case 2718: return \"Duplicate property '{0}'.\";\n    case 2757: return \"Type '{0}' has no call signatures.\";\n    case 6054: return \"File '{0}' not found.\";\n    case 6188: return \"Numeric separators are not allowed here.\";\n    case 6189: return \"Multiple consecutive numeric separators are not permitted.\";\n    case 17009: return \"'super' must be called before accessing 'this' in the constructor of a derived class.\";\n    case 17011: return \"'super' must be called before accessing a property of 'super' in the constructor of a derived class.\";\n    default: return \"\";\n  }\n}\n","/**\n * Built-in elements providing WebAssembly core functionality.\n * @module builtins\n *//***/\n\n import {\n  Compiler,\n  Constraints,\n  RuntimeFeatures,\n  flatten\n} from \"./compiler\";\n\nimport {\n  DiagnosticCode\n} from \"./diagnostics\";\n\nimport {\n  Node,\n  NodeKind,\n  Expression,\n  LiteralKind,\n  LiteralExpression,\n  StringLiteralExpression,\n  CallExpression,\n  isNumericLiteral\n} from \"./ast\";\n\nimport {\n  Type,\n  TypeKind,\n  TypeFlags,\n  Signature\n} from \"./types\";\n\nimport {\n  BinaryOp,\n  UnaryOp,\n  HostOp,\n  AtomicRMWOp,\n  SIMDExtractOp,\n  SIMDReplaceOp,\n  SIMDShiftOp,\n  SIMDTernaryOp,\n  NativeType,\n  ExpressionRef,\n  ExpressionId,\n  getExpressionId,\n  getExpressionType,\n  getConstValueI64High,\n  getConstValueI64Low,\n  getConstValueI32,\n  getConstValueF32,\n  getConstValueF64,\n  Relooper,\n  RelooperBlockRef,\n  SIMDLoadOp,\n  getLocalGetIndex,\n  hasSideEffects\n} from \"./module\";\n\nimport {\n  ElementKind,\n  FunctionPrototype,\n  Field,\n  Global,\n  DecoratorFlags,\n  Element\n} from \"./program\";\n\nimport {\n  FlowFlags,\n  LocalFlags\n} from \"./flow\";\n\nimport {\n  ReportMode\n} from \"./resolver\";\n\nimport {\n  CommonFlags,\n  Feature,\n  featureToString,\n  TypeinfoFlags\n} from \"./common\";\n\nimport {\n  writeI8,\n  writeI16,\n  writeI32,\n  writeF32,\n  writeF64,\n  isPowerOf2\n} from \"./util\";\n\n/** Symbols of various compiler built-ins. */\nexport namespace BuiltinSymbols {\n  // std/builtins.ts\n  export const isInteger = \"~lib/builtins/isInteger\";\n  export const isFloat = \"~lib/builtins/isFloat\";\n  export const isBoolean = \"~lib/builtins/isBoolean\";\n  export const isSigned = \"~lib/builtins/isSigned\";\n  export const isReference = \"~lib/builtins/isReference\";\n  export const isString = \"~lib/builtins/isString\";\n  export const isArray = \"~lib/builtins/isArray\";\n  export const isArrayLike = \"~lib/builtins/isArrayLike\";\n  export const isFunction = \"~lib/builtins/isFunction\";\n  export const isNullable = \"~lib/builtins/isNullable\";\n  export const isDefined = \"~lib/builtins/isDefined\";\n  export const isConstant = \"~lib/builtins/isConstant\";\n  export const isManaged = \"~lib/builtins/isManaged\";\n  export const isVoid = \"~lib/builtins/isVoid\";\n\n  export const clz = \"~lib/builtins/clz\";\n  export const ctz = \"~lib/builtins/ctz\";\n  export const popcnt = \"~lib/builtins/popcnt\";\n  export const rotl = \"~lib/builtins/rotl\";\n  export const rotr = \"~lib/builtins/rotr\";\n  export const abs = \"~lib/builtins/abs\";\n  export const max = \"~lib/builtins/max\";\n  export const min = \"~lib/builtins/min\";\n  export const ceil = \"~lib/builtins/ceil\";\n  export const floor = \"~lib/builtins/floor\";\n  export const copysign = \"~lib/builtins/copysign\";\n  export const nearest = \"~lib/builtins/nearest\";\n  export const reinterpret = \"~lib/builtins/reinterpret\";\n  export const sqrt = \"~lib/builtins/sqrt\";\n  export const trunc = \"~lib/builtins/trunc\";\n  export const load = \"~lib/builtins/load\";\n  export const store = \"~lib/builtins/store\";\n  export const atomic_load = \"~lib/builtins/atomic.load\";\n  export const atomic_store = \"~lib/builtins/atomic.store\";\n  export const atomic_add = \"~lib/builtins/atomic.add\";\n  export const atomic_sub = \"~lib/builtins/atomic.sub\";\n  export const atomic_and = \"~lib/builtins/atomic.and\";\n  export const atomic_or = \"~lib/builtins/atomic.or\";\n  export const atomic_xor = \"~lib/builtins/atomic.xor\";\n  export const atomic_xchg = \"~lib/builtins/atomic.xchg\";\n  export const atomic_cmpxchg = \"~lib/builtins/atomic.cmpxchg\";\n  export const atomic_wait = \"~lib/builtins/atomic.wait\";\n  export const atomic_notify = \"~lib/builtins/atomic.notify\";\n  export const atomic_fence = \"~lib/builtins/atomic.fence\";\n\n  export const sizeof = \"~lib/builtins/sizeof\";\n  export const alignof = \"~lib/builtins/alignof\";\n  export const offsetof = \"~lib/builtins/offsetof\";\n  export const nameof = \"~lib/builtins/nameof\";\n  export const lengthof = \"~lib/builtins/lengthof\";\n  export const select = \"~lib/builtins/select\";\n  export const unreachable = \"~lib/builtins/unreachable\";\n  export const changetype = \"~lib/builtins/changetype\";\n  export const assert = \"~lib/builtins/assert\";\n  export const unchecked = \"~lib/builtins/unchecked\";\n  export const call_direct = \"~lib/builtins/call_direct\";\n  export const call_indirect = \"~lib/builtins/call_indirect\";\n  export const instantiate = \"~lib/builtins/instantiate\";\n  export const idof = \"~lib/builtins/idof\";\n\n  export const i8 = \"~lib/builtins/i8\";\n  export const i16 = \"~lib/builtins/i16\";\n  export const i32 = \"~lib/builtins/i32\";\n  export const i64 = \"~lib/builtins/i64\";\n  export const isize = \"~lib/builtins/isize\";\n  export const u8 = \"~lib/builtins/u8\";\n  export const u16 = \"~lib/builtins/u16\";\n  export const u32 = \"~lib/builtins/u32\";\n  export const u64 = \"~lib/builtins/u64\";\n  export const usize = \"~lib/builtins/usize\";\n  export const bool = \"~lib/builtins/bool\";\n  export const f32 = \"~lib/builtins/f32\";\n  export const f64 = \"~lib/builtins/f64\";\n  export const v128 = \"~lib/builtins/v128\";\n  export const void_ = \"~lib/builtins/void\";\n\n  export const i32_clz = \"~lib/builtins/i32.clz\";\n  export const i64_clz = \"~lib/builtins/i64.clz\";\n  export const i32_ctz = \"~lib/builtins/i32.ctz\";\n  export const i64_ctz = \"~lib/builtins/i64.ctz\";\n  export const i32_popcnt = \"~lib/builtins/i32.popcnt\";\n  export const i64_popcnt = \"~lib/builtins/i64.popcnt\";\n  export const i32_rotl = \"~lib/builtins/i32.rotl\";\n  export const i64_rotl = \"~lib/builtins/i64.rotl\";\n  export const i32_rotr = \"~lib/builtins/i32.rotr\";\n  export const i64_rotr = \"~lib/builtins/i64.rotr\";\n\n  export const f32_abs = \"~lib/builtins/f32.abs\";\n  export const f64_abs = \"~lib/builtins/f64.abs\";\n  export const f32_max = \"~lib/builtins/f32.max\";\n  export const f64_max = \"~lib/builtins/f64.max\";\n  export const f32_min = \"~lib/builtins/f32.min\";\n  export const f64_min = \"~lib/builtins/f64.min\";\n  export const f32_ceil = \"~lib/builtins/f32.ceil\";\n  export const f64_ceil = \"~lib/builtins/f64.ceil\";\n  export const f32_floor = \"~lib/builtins/f32.floor\";\n  export const f64_floor = \"~lib/builtins/f64.floor\";\n  export const f32_copysign = \"~lib/builtins/f32.copysign\";\n  export const f64_copysign = \"~lib/builtins/f64.copysign\";\n  export const f32_nearest = \"~lib/builtins/f32.nearest\";\n  export const f64_nearest = \"~lib/builtins/f64.nearest\";\n  export const i32_reinterpret_f32 = \"~lib/builtins/i32.reinterpret_f32\";\n  export const i64_reinterpret_f64 = \"~lib/builtins/i64.reinterpret_f64\";\n  export const f32_reinterpret_i32 = \"~lib/builtins/f32.reinterpret_i32\";\n  export const f64_reinterpret_i64 = \"~lib/builtins/f64.reinterpret_i64\";\n  export const f32_sqrt = \"~lib/builtins/f32.sqrt\";\n  export const f64_sqrt = \"~lib/builtins/f64.sqrt\";\n  export const f32_trunc = \"~lib/builtins/f32.trunc\";\n  export const f64_trunc = \"~lib/builtins/f64.trunc\";\n\n  export const i32_load8_s = \"~lib/builtins/i32.load8_s\";\n  export const i32_load8_u = \"~lib/builtins/i32.load8_u\";\n  export const i32_load16_s = \"~lib/builtins/i32.load16_s\";\n  export const i32_load16_u = \"~lib/builtins/i32.load16_u\";\n  export const i32_load = \"~lib/builtins/i32.load\";\n  export const i64_load8_s = \"~lib/builtins/i64.load8_s\";\n  export const i64_load8_u = \"~lib/builtins/i64.load8_u\";\n  export const i64_load16_s = \"~lib/builtins/i64.load16_s\";\n  export const i64_load16_u = \"~lib/builtins/i64.load16_u\";\n  export const i64_load32_s = \"~lib/builtins/i64.load32_s\";\n  export const i64_load32_u = \"~lib/builtins/i64.load32_u\";\n  export const i64_load = \"~lib/builtins/i64.load\";\n  export const f32_load = \"~lib/builtins/f32.load\";\n  export const f64_load = \"~lib/builtins/f64.load\";\n  export const i32_store8 = \"~lib/builtins/i32.store8\";\n  export const i32_store16 = \"~lib/builtins/i32.store16\";\n  export const i32_store = \"~lib/builtins/i32.store\";\n  export const i64_store8 = \"~lib/builtins/i64.store8\";\n  export const i64_store16 = \"~lib/builtins/i64.store16\";\n  export const i64_store32 = \"~lib/builtins/i64.store32\";\n  export const i64_store = \"~lib/builtins/i64.store\";\n  export const f32_store = \"~lib/builtins/f32.store\";\n  export const f64_store = \"~lib/builtins/f64.store\";\n\n  export const i32_atomic_load8_u = \"~lib/builtins/i32.atomic.load8_u\";\n  export const i32_atomic_load16_u = \"~lib/builtins/i32.atomic.load16_u\";\n  export const i32_atomic_load = \"~lib/builtins/i32.atomic.load\";\n  export const i64_atomic_load8_u = \"~lib/builtins/i64.atomic.load8_u\";\n  export const i64_atomic_load16_u = \"~lib/builtins/i64.atomic.load16_u\";\n  export const i64_atomic_load32_u = \"~lib/builtins/i64.atomic.load32_u\";\n  export const i64_atomic_load = \"~lib/builtins/i64.atomic.load\";\n  export const i32_atomic_store8 = \"~lib/builtins/i32.atomic.store8\";\n  export const i32_atomic_store16 = \"~lib/builtins/i32.atomic.store16\";\n  export const i32_atomic_store = \"~lib/builtins/i32.atomic.store\";\n  export const i64_atomic_store8 = \"~lib/builtins/i64.atomic.store8\";\n  export const i64_atomic_store16 = \"~lib/builtins/i64.atomic.store16\";\n  export const i64_atomic_store32 = \"~lib/builtins/i64.atomic.store32\";\n  export const i64_atomic_store = \"~lib/builtins/i64.atomic.store\";\n  export const i32_atomic_rmw8_add_u = \"~lib/builtins/i32.atomic.rmw8.add_u\";\n  export const i32_atomic_rmw16_add_u = \"~lib/builtins/i32.atomic.rmw16.add_u\";\n  export const i32_atomic_rmw_add = \"~lib/builtins/i32.atomic.rmw.add\";\n  export const i64_atomic_rmw8_add_u = \"~lib/builtins/i64.atomic.rmw8.add_u\";\n  export const i64_atomic_rmw16_add_u = \"~lib/builtins/i64.atomic.rmw16.add_u\";\n  export const i64_atomic_rmw32_add_u = \"~lib/builtins/i64.atomic.rmw32.add_u\";\n  export const i64_atomic_rmw_add = \"~lib/builtins/i64.atomic.rmw.add\";\n  export const i32_atomic_rmw8_sub_u = \"~lib/builtins/i32.atomic.rmw8.sub_u\";\n  export const i32_atomic_rmw16_sub_u = \"~lib/builtins/i32.atomic.rmw16.sub_u\";\n  export const i32_atomic_rmw_sub = \"~lib/builtins/i32.atomic.rmw.sub\";\n  export const i64_atomic_rmw8_sub_u = \"~lib/builtins/i64.atomic.rmw8.sub_u\";\n  export const i64_atomic_rmw16_sub_u = \"~lib/builtins/i64.atomic.rmw16.sub_u\";\n  export const i64_atomic_rmw32_sub_u = \"~lib/builtins/i64.atomic.rmw32.sub_u\";\n  export const i64_atomic_rmw_sub = \"~lib/builtins/i64.atomic.rmw.sub\";\n  export const i32_atomic_rmw8_and_u = \"~lib/builtins/i32.atomic.rmw8.and_u\";\n  export const i32_atomic_rmw16_and_u = \"~lib/builtins/i32.atomic.rmw16.and_u\";\n  export const i32_atomic_rmw_and = \"~lib/builtins/i32.atomic.rmw.and\";\n  export const i64_atomic_rmw8_and_u = \"~lib/builtins/i64.atomic.rmw8.and_u\";\n  export const i64_atomic_rmw16_and_u = \"~lib/builtins/i64.atomic.rmw16.and_u\";\n  export const i64_atomic_rmw32_and_u = \"~lib/builtins/i64.atomic.rmw32.and_u\";\n  export const i64_atomic_rmw_and = \"~lib/builtins/i64.atomic.rmw.and\";\n  export const i32_atomic_rmw8_or_u = \"~lib/builtins/i32.atomic.rmw8.or_u\";\n  export const i32_atomic_rmw16_or_u = \"~lib/builtins/i32.atomic.rmw16.or_u\";\n  export const i32_atomic_rmw_or = \"~lib/builtins/i32.atomic.rmw.or\";\n  export const i64_atomic_rmw8_or_u = \"~lib/builtins/i64.atomic.rmw8.or_u\";\n  export const i64_atomic_rmw16_or_u = \"~lib/builtins/i64.atomic.rmw16.or_u\";\n  export const i64_atomic_rmw32_or_u = \"~lib/builtins/i64.atomic.rmw32.or_u\";\n  export const i64_atomic_rmw_or = \"~lib/builtins/i64.atomic.rmw.or\";\n  export const i32_atomic_rmw8_xor_u = \"~lib/builtins/i32.atomic.rmw8.xor_u\";\n  export const i32_atomic_rmw16_xor_u = \"~lib/builtins/i32.atomic.rmw16.xor_u\";\n  export const i32_atomic_rmw_xor = \"~lib/builtins/i32.atomic.rmw.xor\";\n  export const i64_atomic_rmw8_xor_u = \"~lib/builtins/i64.atomic.rmw8.xor_u\";\n  export const i64_atomic_rmw16_xor_u = \"~lib/builtins/i64.atomic.rmw16.xor_u\";\n  export const i64_atomic_rmw32_xor_u = \"~lib/builtins/i64.atomic.rmw32.xor_u\";\n  export const i64_atomic_rmw_xor = \"~lib/builtins/i64.atomic.rmw.xor\";\n  export const i32_atomic_rmw8_xchg_u = \"~lib/builtins/i32.atomic.rmw8.xchg_u\";\n  export const i32_atomic_rmw16_xchg_u = \"~lib/builtins/i32.atomic.rmw16.xchg_u\";\n  export const i32_atomic_rmw_xchg = \"~lib/builtins/i32.atomic.rmw.xchg\";\n  export const i64_atomic_rmw8_xchg_u = \"~lib/builtins/i64.atomic.rmw8.xchg_u\";\n  export const i64_atomic_rmw16_xchg_u = \"~lib/builtins/i64.atomic.rmw16.xchg_u\";\n  export const i64_atomic_rmw32_xchg_u = \"~lib/builtins/i64.atomic.rmw32.xchg_u\";\n  export const i64_atomic_rmw_xchg = \"~lib/builtins/i64.atomic.rmw.xchg\";\n  export const i32_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw8.cmpxchg_u\";\n  export const i32_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i32.atomic.rmw16.cmpxchg_u\";\n  export const i32_atomic_rmw_cmpxchg = \"~lib/builtins/i32.atomic.rmw.cmpxchg\";\n  export const i64_atomic_rmw8_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw8.cmpxchg_u\";\n  export const i64_atomic_rmw16_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw16.cmpxchg_u\";\n  export const i64_atomic_rmw32_cmpxchg_u = \"~lib/builtins/i64.atomic.rmw32.cmpxchg_u\";\n  export const i64_atomic_rmw_cmpxchg = \"~lib/builtins/i64.atomic.rmw.cmpxchg\";\n  export const i32_wait = \"~lib/builtins/i32.wait\";\n  export const i64_wait = \"~lib/builtins/i64.wait\";\n\n  export const v128_splat = \"~lib/builtins/v128.splat\";\n  export const v128_extract_lane = \"~lib/builtins/v128.extract_lane\";\n  export const v128_replace_lane = \"~lib/builtins/v128.replace_lane\";\n  export const v128_shuffle = \"~lib/builtins/v128.shuffle\";\n  export const v128_swizzle = \"~lib/builtins/v128.swizzle\";\n  export const v128_load_splat = \"~lib/builtins/v128.load_splat\";\n  export const v128_load_ext = \"~lib/builtins/v128.load_ext\";\n  export const v128_load = \"~lib/builtins/v128.load\";\n  export const v128_store = \"~lib/builtins/v128.store\";\n  export const v128_add = \"~lib/builtins/v128.add\";\n  export const v128_sub = \"~lib/builtins/v128.sub\";\n  export const v128_mul = \"~lib/builtins/v128.mul\";\n  export const v128_div = \"~lib/builtins/v128.div\";\n  export const v128_neg = \"~lib/builtins/v128.neg\";\n  export const v128_add_saturate = \"~lib/builtins/v128.add_saturate\";\n  export const v128_sub_saturate = \"~lib/builtins/v128.sub_saturate\";\n  export const v128_shl = \"~lib/builtins/v128.shl\";\n  export const v128_shr = \"~lib/builtins/v128.shr\";\n  export const v128_and = \"~lib/builtins/v128.and\";\n  export const v128_or = \"~lib/builtins/v128.or\";\n  export const v128_xor = \"~lib/builtins/v128.xor\";\n  export const v128_andnot = \"~lib/builtins/v128.andnot\";\n  export const v128_not = \"~lib/builtins/v128.not\";\n  export const v128_bitselect = \"~lib/builtins/v128.bitselect\";\n  export const v128_any_true = \"~lib/builtins/v128.any_true\";\n  export const v128_all_true = \"~lib/builtins/v128.all_true\";\n  export const v128_min = \"~lib/builtins/v128.min\";\n  export const v128_max = \"~lib/builtins/v128.max\";\n  export const v128_dot = \"~lib/builtins/v128.dot\";\n  export const v128_abs = \"~lib/builtins/v128.abs\";\n  export const v128_sqrt = \"~lib/builtins/v128.sqrt\";\n  export const v128_eq = \"~lib/builtins/v128.eq\";\n  export const v128_ne = \"~lib/builtins/v128.ne\";\n  export const v128_lt = \"~lib/builtins/v128.lt\";\n  export const v128_le = \"~lib/builtins/v128.le\";\n  export const v128_gt = \"~lib/builtins/v128.gt\";\n  export const v128_ge = \"~lib/builtins/v128.ge\";\n  export const v128_convert = \"~lib/builtins/v128.convert\";\n  export const v128_trunc_sat = \"~lib/builtins/v128.trunc_sat\";\n  export const v128_narrow = \"~lib/builtins/v128.narrow\";\n  export const v128_widen_low = \"~lib/builtins/v128.widen_low\";\n  export const v128_widen_high = \"~lib/builtins/v128.widen_high\";\n  export const v128_qfma = \"~lib/builtins/v128.qfma\";\n  export const v128_qfms = \"~lib/builtins/v128.qfms\";\n\n  export const i8x16 = \"~lib/builtins/i8x16\";\n  export const i16x8 = \"~lib/builtins/i16x8\";\n  export const i32x4 = \"~lib/builtins/i32x4\";\n  export const i64x2 = \"~lib/builtins/i64x2\";\n  export const f32x4 = \"~lib/builtins/f32x4\";\n  export const f64x2 = \"~lib/builtins/f64x2\";\n\n  export const i8x16_splat = \"~lib/builtins/i8x16.splat\";\n  export const i8x16_extract_lane_s = \"~lib/builtins/i8x16.extract_lane_s\";\n  export const i8x16_extract_lane_u = \"~lib/builtins/i8x16.extract_lane_u\";\n  export const i8x16_replace_lane = \"~lib/builtins/i8x16.replace_lane\";\n  export const i8x16_add = \"~lib/builtins/i8x16.add\";\n  export const i8x16_sub = \"~lib/builtins/i8x16.sub\";\n  export const i8x16_mul = \"~lib/builtins/i8x16.mul\";\n  export const i8x16_min_s = \"~lib/builtins/i8x16.min_s\";\n  export const i8x16_min_u = \"~lib/builtins/i8x16.min_u\";\n  export const i8x16_max_s = \"~lib/builtins/i8x16.max_s\";\n  export const i8x16_max_u = \"~lib/builtins/i8x16.max_u\";\n  export const i8x16_neg = \"~lib/builtins/i8x16.neg\";\n  export const i8x16_add_saturate_s = \"~lib/builtins/i8x16.add_saturate_s\";\n  export const i8x16_add_saturate_u = \"~lib/builtins/i8x16.add_saturate_u\";\n  export const i8x16_sub_saturate_s = \"~lib/builtins/i8x16.sub_saturate_s\";\n  export const i8x16_sub_saturate_u = \"~lib/builtins/i8x16.sub_saturate_u\";\n  export const i8x16_shl = \"~lib/builtins/i8x16.shl\";\n  export const i8x16_shr_s = \"~lib/builtins/i8x16.shr_s\";\n  export const i8x16_shr_u = \"~lib/builtins/i8x16.shr_u\";\n  export const i8x16_any_true = \"~lib/builtins/i8x16.any_true\";\n  export const i8x16_all_true = \"~lib/builtins/i8x16.all_true\";\n  export const i8x16_eq = \"~lib/builtins/i8x16.eq\";\n  export const i8x16_ne = \"~lib/builtins/i8x16.ne\";\n  export const i8x16_lt_s = \"~lib/builtins/i8x16.lt_s\";\n  export const i8x16_lt_u = \"~lib/builtins/i8x16.lt_u\";\n  export const i8x16_le_s = \"~lib/builtins/i8x16.le_s\";\n  export const i8x16_le_u = \"~lib/builtins/i8x16.le_u\";\n  export const i8x16_gt_s = \"~lib/builtins/i8x16.gt_s\";\n  export const i8x16_gt_u = \"~lib/builtins/i8x16.gt_u\";\n  export const i8x16_ge_s = \"~lib/builtins/i8x16.ge_s\";\n  export const i8x16_ge_u = \"~lib/builtins/i8x16.ge_u\";\n  export const i8x16_narrow_i16x8_s = \"~lib/builtins/i8x16.narrow_i16x8_s\";\n  export const i8x16_narrow_i16x8_u = \"~lib/builtins/i8x16.narrow_i16x8_u\";\n\n  export const i16x8_splat = \"~lib/builtins/i16x8.splat\";\n  export const i16x8_extract_lane_s = \"~lib/builtins/i16x8.extract_lane_s\";\n  export const i16x8_extract_lane_u = \"~lib/builtins/i16x8.extract_lane_u\";\n  export const i16x8_replace_lane = \"~lib/builtins/i16x8.replace_lane\";\n  export const i16x8_add = \"~lib/builtins/i16x8.add\";\n  export const i16x8_sub = \"~lib/builtins/i16x8.sub\";\n  export const i16x8_mul = \"~lib/builtins/i16x8.mul\";\n  export const i16x8_min_s = \"~lib/builtins/i16x8.min_s\";\n  export const i16x8_min_u = \"~lib/builtins/i16x8.min_u\";\n  export const i16x8_max_s = \"~lib/builtins/i16x8.max_s\";\n  export const i16x8_max_u = \"~lib/builtins/i16x8.max_u\";\n  export const i16x8_neg = \"~lib/builtins/i16x8.neg\";\n  export const i16x8_add_saturate_s = \"~lib/builtins/i16x8.add_saturate_s\";\n  export const i16x8_add_saturate_u = \"~lib/builtins/i16x8.add_saturate_u\";\n  export const i16x8_sub_saturate_s = \"~lib/builtins/i16x8.sub_saturate_s\";\n  export const i16x8_sub_saturate_u = \"~lib/builtins/i16x8.sub_saturate_u\";\n  export const i16x8_shl = \"~lib/builtins/i16x8.shl\";\n  export const i16x8_shr_s = \"~lib/builtins/i16x8.shr_s\";\n  export const i16x8_shr_u = \"~lib/builtins/i16x8.shr_u\";\n  export const i16x8_any_true = \"~lib/builtins/i16x8.any_true\";\n  export const i16x8_all_true = \"~lib/builtins/i16x8.all_true\";\n  export const i16x8_eq = \"~lib/builtins/i16x8.eq\";\n  export const i16x8_ne = \"~lib/builtins/i16x8.ne\";\n  export const i16x8_lt_s = \"~lib/builtins/i16x8.lt_s\";\n  export const i16x8_lt_u = \"~lib/builtins/i16x8.lt_u\";\n  export const i16x8_le_s = \"~lib/builtins/i16x8.le_s\";\n  export const i16x8_le_u = \"~lib/builtins/i16x8.le_u\";\n  export const i16x8_gt_s = \"~lib/builtins/i16x8.gt_s\";\n  export const i16x8_gt_u = \"~lib/builtins/i16x8.gt_u\";\n  export const i16x8_ge_s = \"~lib/builtins/i16x8.ge_s\";\n  export const i16x8_ge_u = \"~lib/builtins/i16x8.ge_u\";\n  export const i16x8_narrow_i32x4_s = \"~lib/builtins/i16x8.narrow_i32x4_s\";\n  export const i16x8_narrow_i32x4_u = \"~lib/builtins/i16x8.narrow_i32x4_u\";\n  export const i16x8_widen_low_i8x16_s = \"~lib/builtins/i16x8.widen_low_i8x16_s\";\n  export const i16x8_widen_low_i8x16_u = \"~lib/builtins/i16x8.widen_low_i8x16_u\";\n  export const i16x8_widen_high_i8x16_s = \"~lib/builtins/i16x8.widen_high_i8x16_s\";\n  export const i16x8_widen_high_i8x16_u = \"~lib/builtins/i16x8.widen_high_i8x16_u\";\n  export const i16x8_load8x8_s = \"~lib/builtins/i16x8.load8x8_s\";\n  export const i16x8_load8x8_u = \"~lib/builtins/i16x8.load8x8_u\";\n\n  export const i32x4_splat = \"~lib/builtins/i32x4.splat\";\n  export const i32x4_extract_lane = \"~lib/builtins/i32x4.extract_lane\";\n  export const i32x4_replace_lane = \"~lib/builtins/i32x4.replace_lane\";\n  export const i32x4_add = \"~lib/builtins/i32x4.add\";\n  export const i32x4_sub = \"~lib/builtins/i32x4.sub\";\n  export const i32x4_mul = \"~lib/builtins/i32x4.mul\";\n  export const i32x4_min_s = \"~lib/builtins/i32x4.min_s\";\n  export const i32x4_min_u = \"~lib/builtins/i32x4.min_u\";\n  export const i32x4_max_s = \"~lib/builtins/i32x4.max_s\";\n  export const i32x4_max_u = \"~lib/builtins/i32x4.max_u\";\n  export const i32x4_dot_i16x8_s = \"~lib/builtins/i32x4.dot_i16x8_s\";\n  export const i32x4_neg = \"~lib/builtins/i32x4.neg\";\n  export const i32x4_shl = \"~lib/builtins/i32x4.shl\";\n  export const i32x4_shr_s = \"~lib/builtins/i32x4.shr_s\";\n  export const i32x4_shr_u = \"~lib/builtins/i32x4.shr_u\";\n  export const i32x4_any_true = \"~lib/builtins/i32x4.any_true\";\n  export const i32x4_all_true = \"~lib/builtins/i32x4.all_true\";\n  export const i32x4_eq = \"~lib/builtins/i32x4.eq\";\n  export const i32x4_ne = \"~lib/builtins/i32x4.ne\";\n  export const i32x4_lt_s = \"~lib/builtins/i32x4.lt_s\";\n  export const i32x4_lt_u = \"~lib/builtins/i32x4.lt_u\";\n  export const i32x4_le_s = \"~lib/builtins/i32x4.le_s\";\n  export const i32x4_le_u = \"~lib/builtins/i32x4.le_u\";\n  export const i32x4_gt_s = \"~lib/builtins/i32x4.gt_s\";\n  export const i32x4_gt_u = \"~lib/builtins/i32x4.gt_u\";\n  export const i32x4_ge_s = \"~lib/builtins/i32x4.ge_s\";\n  export const i32x4_ge_u = \"~lib/builtins/i32x4.ge_u\";\n  export const i32x4_trunc_sat_f32x4_s = \"~lib/builtins/i32x4.trunc_sat_f32x4_s\";\n  export const i32x4_trunc_sat_f32x4_u = \"~lib/builtins/i32x4.trunc_sat_f32x4_u\";\n  export const i32x4_widen_low_i16x8_s = \"~lib/builtins/i32x4.widen_low_i16x8_s\";\n  export const i32x4_widen_low_i16x8_u = \"~lib/builtins/i32x4.widen_low_i16x8_u\";\n  export const i32x4_widen_high_i16x8_s = \"~lib/builtins/i32x4.widen_high_i16x8_s\";\n  export const i32x4_widen_high_i16x8_u = \"~lib/builtins/i32x4.widen_high_i16x8_u\";\n  export const i32x4_load16x4_s = \"~lib/builtins/i32x4.load16x4_s\";\n  export const i32x4_load16x4_u = \"~lib/builtins/i32x4.load16x4_u\";\n\n  export const i64x2_splat = \"~lib/builtins/i64x2.splat\";\n  export const i64x2_extract_lane = \"~lib/builtins/i64x2.extract_lane\";\n  export const i64x2_replace_lane = \"~lib/builtins/i64x2.replace_lane\";\n  export const i64x2_add = \"~lib/builtins/i64x2.add\";\n  export const i64x2_sub = \"~lib/builtins/i64x2.sub\"; // i64x2 has no .mul\n  export const i64x2_neg = \"~lib/builtins/i64x2.neg\";\n  export const i64x2_shl = \"~lib/builtins/i64x2.shl\";\n  export const i64x2_shr_s = \"~lib/builtins/i64x2.shr_s\";\n  export const i64x2_shr_u = \"~lib/builtins/i64x2.shr_u\";\n  export const i64x2_any_true = \"~lib/builtins/i64x2.any_true\";\n  export const i64x2_all_true = \"~lib/builtins/i64x2.all_true\"; // i64x2 has no .eq etc.\n  export const i64x2_trunc_sat_f64x2_s = \"~lib/builtins/i64x2.trunc_sat_f64x2_s\";\n  export const i64x2_trunc_sat_f64x2_u = \"~lib/builtins/i64x2.trunc_sat_f64x2_u\";\n  export const i64x2_load32x2_s = \"~lib/builtins/i64x2.load32x2_s\";\n  export const i64x2_load32x2_u = \"~lib/builtins/i64x2.load32x2_u\";\n\n  export const f32x4_splat = \"~lib/builtins/f32x4.splat\";\n  export const f32x4_extract_lane = \"~lib/builtins/f32x4.extract_lane\";\n  export const f32x4_replace_lane = \"~lib/builtins/f32x4.replace_lane\";\n  export const f32x4_add = \"~lib/builtins/f32x4.add\";\n  export const f32x4_sub = \"~lib/builtins/f32x4.sub\";\n  export const f32x4_mul = \"~lib/builtins/f32x4.mul\";\n  export const f32x4_div = \"~lib/builtins/f32x4.div\";\n  export const f32x4_neg = \"~lib/builtins/f32x4.neg\";\n  export const f32x4_min = \"~lib/builtins/f32x4.min\";\n  export const f32x4_max = \"~lib/builtins/f32x4.max\";\n  export const f32x4_abs = \"~lib/builtins/f32x4.abs\";\n  export const f32x4_sqrt = \"~lib/builtins/f32x4.sqrt\";\n  export const f32x4_eq = \"~lib/builtins/f32x4.eq\";\n  export const f32x4_ne = \"~lib/builtins/f32x4.ne\";\n  export const f32x4_lt = \"~lib/builtins/f32x4.lt\";\n  export const f32x4_le = \"~lib/builtins/f32x4.le\";\n  export const f32x4_gt = \"~lib/builtins/f32x4.gt\";\n  export const f32x4_ge = \"~lib/builtins/f32x4.ge\";\n  export const f32x4_convert_i32x4_s = \"~lib/builtins/f32x4.convert_i32x4_s\";\n  export const f32x4_convert_i32x4_u = \"~lib/builtins/f32x4.convert_i32x4_u\";\n  export const f32x4_qfma = \"~lib/builtins/f32x4.qfma\";\n  export const f32x4_qfms = \"~lib/builtins/f32x4.qfms\";\n\n  export const f64x2_splat = \"~lib/builtins/f64x2.splat\";\n  export const f64x2_extract_lane = \"~lib/builtins/f64x2.extract_lane\";\n  export const f64x2_replace_lane = \"~lib/builtins/f64x2.replace_lane\";\n  export const f64x2_add = \"~lib/builtins/f64x2.add\";\n  export const f64x2_sub = \"~lib/builtins/f64x2.sub\";\n  export const f64x2_mul = \"~lib/builtins/f64x2.mul\";\n  export const f64x2_div = \"~lib/builtins/f64x2.div\";\n  export const f64x2_neg = \"~lib/builtins/f64x2.neg\";\n  export const f64x2_min = \"~lib/builtins/f64x2.min\";\n  export const f64x2_max = \"~lib/builtins/f64x2.max\";\n  export const f64x2_abs = \"~lib/builtins/f64x2.abs\";\n  export const f64x2_sqrt = \"~lib/builtins/f64x2.sqrt\";\n  export const f64x2_eq = \"~lib/builtins/f64x2.eq\";\n  export const f64x2_ne = \"~lib/builtins/f64x2.ne\";\n  export const f64x2_lt = \"~lib/builtins/f64x2.lt\";\n  export const f64x2_le = \"~lib/builtins/f64x2.le\";\n  export const f64x2_gt = \"~lib/builtins/f64x2.gt\";\n  export const f64x2_ge = \"~lib/builtins/f64x2.ge\";\n  export const f64x2_convert_i64x2_s = \"~lib/builtins/f64x2.convert_i64x2_s\";\n  export const f64x2_convert_i64x2_u = \"~lib/builtins/f64x2.convert_i64x2_u\";\n  export const f64x2_qfma = \"~lib/builtins/f64x2.qfma\";\n  export const f64x2_qfms = \"~lib/builtins/f64x2.qfms\";\n\n  export const v8x16_shuffle = \"~lib/builtins/v8x16.shuffle\";\n  export const v8x16_swizzle = \"~lib/builtins/v8x16.swizzle\";\n  export const v8x16_load_splat = \"~lib/builtins/v8x16.load_splat\";\n  export const v16x8_load_splat = \"~lib/builtins/v16x8.load_splat\";\n  export const v32x4_load_splat = \"~lib/builtins/v32x4.load_splat\";\n  export const v64x2_load_splat = \"~lib/builtins/v64x2.load_splat\";\n\n  // internals\n  export const heap_base = \"~lib/heap/__heap_base\";\n  export const rtti_base = \"~lib/rt/__rtti_base\";\n  export const visit_globals = \"~lib/rt/__visit_globals\";\n  export const visit_members = \"~lib/rt/__visit_members\";\n\n  // std/number.ts\n  export const isNaN = \"~lib/number/isNaN\";\n  export const isFinite = \"~lib/number/isFinite\";\n\n  // std/diagnostics.ts\n  export const ERROR = \"~lib/diagnostics/ERROR\";\n  export const WARNING = \"~lib/diagnostics/WARNING\";\n  export const INFO = \"~lib/diagnostics/INFO\";\n\n  // std/memory.ts\n  export const memory_size = \"~lib/memory/memory.size\";\n  export const memory_grow = \"~lib/memory/memory.grow\";\n  export const memory_copy = \"~lib/memory/memory.copy\";\n  export const memory_fill = \"~lib/memory/memory.fill\";\n  export const memory_allocate = \"~lib/memory/memory.allocate\";\n  export const memory_free = \"~lib/memory/memory.free\";\n  export const memory_reset = \"~lib/memory/memory.reset\";\n\n  // std/runtime.ts\n  export const runtime_instanceof = \"~lib/runtime/runtime.instanceof\";\n  export const runtime_flags = \"~lib/runtime/runtime.flags\";\n  export const runtime_allocate = \"~lib/util/runtime/allocate\";\n  export const runtime_reallocate = \"~lib/util/runtime/reallocate\";\n  export const runtime_register = \"~lib/util/runtime/register\";\n  export const runtime_discard = \"~lib/util/runtime/discard\";\n  export const runtime_makeArray = \"~lib/util/runtime/makeArray\";\n\n  // std/typedarray.ts\n  export const Int8Array = \"~lib/typedarray/Int8Array\";\n  export const Uint8Array = \"~lib/typedarray/Uint8Array\";\n  export const Int16Array = \"~lib/typedarray/Int16Array\";\n  export const Uint16Array = \"~lib/typedarray/Uint16Array\";\n  export const Int32Array = \"~lib/typedarray/Int32Array\";\n  export const Uint32Array = \"~lib/typedarray/Uint32Array\";\n  export const Int64Array = \"~lib/typedarray/Int64Array\";\n  export const Uint64Array = \"~lib/typedarray/Uint64Array\";\n  export const Uint8ClampedArray = \"~lib/typedarray/Uint8ClampedArray\";\n  export const Float32Array = \"~lib/typedarray/Float32Array\";\n  export const Float64Array = \"~lib/typedarray/Float64Array\";\n\n  // compiler generated\n  export const started = \"~lib/started\";\n  export const argc = \"~lib/argc\";\n  export const setargc = \"~lib/setargc\";\n  export const capabilities = \"~lib/capabilities\";\n}\n\n/** Compiles a call to a built-in function. */\nexport function compileCall(\n  /* Compiler reference. */\n  compiler: Compiler,\n  /** Respective function prototype. */\n  prototype: FunctionPrototype,\n  /** Pre-resolved type arguments. */\n  typeArguments: Type[] | null,\n  /** Operand expressions. */\n  operands: Expression[],\n  /** Contextual type. */\n  contextualType: Type,\n  /** Respective call expression. */\n  reportNode: CallExpression,\n  /** Indicates that contextual type is ASM type. */\n  isAsm: bool = false\n): ExpressionRef {\n  var module = compiler.module;\n\n  switch (prototype.internalName) {\n\n    // === Static type evaluation =================================================================\n\n    case BuiltinSymbols.isInteger: { // isInteger<T!>() / isInteger<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.INTEGER) && !type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isFloat: { // isFloat<T!>() / isFloat<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.FLOAT)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isBoolean: { // isBoolean<T!>() / isBoolean<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type == Type.bool\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isSigned: { // isSigned<T!>() / isSigned<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.SIGNED)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isReference: { // isReference<T!>() / isReference<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return type.is(TypeFlags.REFERENCE)\n        ? module.i32(1)\n        : module.i32(0);\n    }\n    case BuiltinSymbols.isString: { // isString<T!>() / isString<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          let stringInstance = compiler.program.stringInstance;\n          if (stringInstance && classReference.isAssignableTo(stringInstance)) return module.i32(1);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArray: { // isArray<T!>() / isArray<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.prototype.extends(compiler.program.arrayPrototype) ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isArrayLike: { // isArrayLike<T!>() / isArrayLike<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let classReference = type.classReference;\n        if (classReference) {\n          return module.i32(classReference.isArrayLike ? 1 : 0);\n        }\n      }\n      return module.i32(0);\n    }\n    case BuiltinSymbols.isFunction: { // isFunction<T!> / isFunction<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.signatureReference ? 1 : 0);\n    }\n    case BuiltinSymbols.isNullable: { // isNullable<T!> / isNullable<T?>(value: T) -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.is(TypeFlags.NULLABLE) ? 1 : 0);\n    }\n    case BuiltinSymbols.isDefined: { // isDefined(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let element = compiler.resolver.lookupExpression(\n        operands[0],\n        compiler.currentFlow,\n        Type.auto,\n        ReportMode.SWALLOW\n      );\n      return module.i32(element ? 1 : 0);\n    }\n    case BuiltinSymbols.isConstant: { // isConstant(expression) -> bool\n      compiler.currentType = Type.bool;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let expr = compiler.compileExpression(operands[0], Type.auto);\n      compiler.currentType = Type.bool;\n      return module.i32(getExpressionId(expr) == ExpressionId.Const ? 1 : 0);\n    }\n    case BuiltinSymbols.isManaged: { // isManaged<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.isManaged ? 1 : 0);\n    }\n    case BuiltinSymbols.isVoid: { // isVoid<T!>() -> bool\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.bool;\n      if (!type) return module.unreachable();\n      return module.i32(type.kind == TypeKind.VOID ? 1 : 0);\n    }\n    case BuiltinSymbols.lengthof: { // lengthof<T!>() -> i32\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.i32;\n      if (!type) return module.unreachable();\n      let signatureReference = type.signatureReference;\n      if (!signatureReference) {\n        compiler.error(\n          DiagnosticCode.Type_0_has_no_call_signatures,\n          reportNode.range, type.toString()\n        );\n        return module.unreachable();\n      }\n      return module.i32(signatureReference.parameterTypes.length);\n    }\n    case BuiltinSymbols.sizeof: { // sizeof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!byteSize) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"sizeof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(byteSize);\n        }\n        return module.i64(byteSize, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(byteSize, 0);\n        }\n        return module.i32(byteSize);\n      }\n    }\n    case BuiltinSymbols.alignof: { // alignof<T!>() -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let byteSize = type.byteSize;\n      if (!isPowerOf2(byteSize)) { // implies == 0\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"alignof\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let alignLog2 = ctz<i32>(byteSize);\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(alignLog2);\n        }\n        return module.i64(alignLog2, 0);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(alignLog2, 0);\n        }\n        return module.i32(alignLog2);\n      }\n    }\n    case BuiltinSymbols.offsetof: { // offsetof<T!>(fieldName?: string) -> usize\n      compiler.currentType = compiler.options.usizeType;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 0, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let classType = type.classReference;\n      if (!(type.is(TypeFlags.REFERENCE) && classType !== null)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"offsetof\", type.toString()\n        );\n        if (compiler.options.isWasm64) {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n            compiler.currentType = Type.u32;\n          }\n        } else {\n          if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n            compiler.currentType = Type.u64;\n          }\n        }\n        return module.unreachable();\n      }\n      let offset: i32;\n      if (operands.length) {\n        if (\n          operands[0].kind != NodeKind.LITERAL ||\n          (<LiteralExpression>operands[0]).literalKind != LiteralKind.STRING\n        ) {\n          compiler.error(\n            DiagnosticCode.String_literal_expected,\n            operands[0].range\n          );\n          return module.unreachable();\n        }\n        let fieldName = (<StringLiteralExpression>operands[0]).value;\n        let field = classType.members ? classType.members.get(fieldName) : null;\n        if (!(field && field.kind == ElementKind.FIELD)) {\n          compiler.error(\n            DiagnosticCode.Type_0_has_no_property_1,\n            operands[0].range, classType.internalName, fieldName\n          );\n          return module.unreachable();\n        }\n        offset = (<Field>field).memoryOffset;\n      } else {\n        offset = classType.currentMemoryOffset;\n      }\n      if (compiler.options.isWasm64) {\n        // implicitly wrap if contextual type is a 32-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size <= 32) {\n          compiler.currentType = Type.u32;\n          return module.i32(offset);\n        }\n        return module.i64(offset);\n      } else {\n        // implicitly extend if contextual type is a 64-bit integer\n        if (contextualType.is(TypeFlags.INTEGER) && contextualType.size == 64) {\n          compiler.currentType = Type.u64;\n          return module.i64(offset);\n        }\n        return module.i32(offset);\n      }\n    }\n    case BuiltinSymbols.nameof: {\n      let resultType = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      if (!resultType) {\n        compiler.currentType = compiler.program.stringInstance.type;\n        return module.unreachable();\n      }\n      let value: string;\n      if (resultType.is(TypeFlags.REFERENCE)) {\n        let classReference = resultType.classReference;\n        if (classReference) {\n          value = classReference.name;\n        } else {\n          let signatureReference = resultType.signatureReference;\n          if (signatureReference) {\n            value = \"Function\";\n          } else {\n            value = \"Anyref\";\n          }\n        }\n      } else {\n        switch (resultType.kind) {\n          case TypeKind.BOOL: { value = \"bool\"; break; }\n          case TypeKind.I8: { value = \"i8\"; break; }\n          case TypeKind.U8: { value = \"u8\"; break; }\n          case TypeKind.I16: { value = \"i16\"; break; }\n          case TypeKind.U16: { value = \"u16\"; break; }\n          case TypeKind.I32: { value = \"i32\"; break; }\n          case TypeKind.U32: { value = \"u32\"; break; }\n          case TypeKind.F32: { value = \"f32\"; break; }\n          case TypeKind.I64: { value = \"i64\"; break; }\n          case TypeKind.U64: { value = \"u64\"; break; }\n          case TypeKind.F64: { value = \"f64\"; break; }\n          case TypeKind.ISIZE: { value = \"isize\"; break; }\n          case TypeKind.USIZE: { value = \"usize\"; break; }\n          case TypeKind.V128: { value = \"v128\"; break; }\n          case TypeKind.ANYREF: { value = \"anyref\"; break; }\n          default: assert(false);\n          case TypeKind.VOID: { value = \"void\"; break; }\n        }\n      }\n      return compiler.ensureStaticString(value);\n    }\n\n    // === Math ===================================================================================\n\n    case BuiltinSymbols.clz: { // clz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.ClzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ClzI64\n                : UnaryOp.ClzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.ClzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"clz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ctz: { // ctz<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.CtzI32, arg0);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.CtzI64\n                : UnaryOp.CtzI32,\n              arg0\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.CtzI64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ctz\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.popcnt: { // popcnt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (compiler.currentType.kind) {\n          case TypeKind.BOOL: // not wrapped\n          case TypeKind.I8:\n          case TypeKind.U8:\n          case TypeKind.I16:\n          case TypeKind.U16:\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.PopcntI32, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.PopcntI64, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.PopcntI64\n                : UnaryOp.PopcntI32,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"popcnt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotl: { // rotl<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotlI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotlI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotlI64\n                : BinaryOp.RotlI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotlI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.rotr: { // rotr<T?>(value: T, shift: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.i32, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.BOOL: {\n            return compiler.ensureSmallIntegerWrap(\n              module.binary(BinaryOp.RotrI32, arg0, arg1),\n              type\n            );\n          }\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.RotrI32, arg0, arg1);\n          case TypeKind.USIZE:\n          case TypeKind.ISIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.RotrI64\n                : BinaryOp.RotrI32,\n              arg0, arg1\n            );\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.RotrI64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"rotr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.abs: { // abs<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: {\n            let flow = compiler.currentFlow;\n\n            // possibly overflows, e.g. abs<i8>(-128) == 128\n            let temp1 = flow.getTempLocal(Type.i32);\n            let temp2 = flow.getTempLocal(Type.i32);\n            // (x + (x >> 31)) ^ (x >> 31)\n            let ret = module.binary(BinaryOp.XorI32,\n              module.binary(BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I32)\n              ),\n              module.local_get(temp2.index, NativeType.I32)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.ISIZE: {\n            let options = compiler.options;\n            let flow = compiler.currentFlow;\n            let isWasm64 = options.isWasm64;\n\n            let temp1 = flow.getTempLocal(options.usizeType);\n            let temp2 = flow.getTempLocal(options.usizeType);\n            let ret = module.binary(isWasm64 ? BinaryOp.XorI64 : BinaryOp.XorI32,\n              module.binary(isWasm64 ? BinaryOp.AddI64 : BinaryOp.AddI32,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(isWasm64 ? BinaryOp.ShrI64 : BinaryOp.ShrI32,\n                    module.local_tee(temp1.index, arg0),\n                    isWasm64 ? module.i64(63) : module.i32(31)\n                  )\n                ),\n                module.local_get(temp1.index, options.nativeSizeType)\n              ),\n              module.local_get(temp2.index, options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.I64: {\n            let flow = compiler.currentFlow;\n\n            let temp1 = flow.getTempLocal(Type.i64);\n            let temp2 = flow.getTempLocal(Type.i64);\n            // (x + (x >> 63)) ^ (x >> 63)\n            let ret = module.binary(BinaryOp.XorI64,\n              module.binary(BinaryOp.AddI64,\n                module.local_tee(\n                  temp2.index,\n                  module.binary(BinaryOp.ShrI64,\n                    module.local_tee(temp1.index, arg0),\n                    module.i64(63)\n                  )\n                ),\n                module.local_get(temp1.index, NativeType.I64)\n              ),\n              module.local_get(temp2.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp2);\n            flow.freeTempLocal(temp1);\n            return ret;\n          }\n          case TypeKind.USIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.max: { // max<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.GtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.GtU32; break; }\n          case TypeKind.I64: { op = BinaryOp.GtI64; break; }\n          case TypeKind.U64: { op = BinaryOp.GtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtI64\n              : BinaryOp.GtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.GtU64\n              : BinaryOp.GtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.min: { // min<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let left = operands[0];\n      let arg0 = typeArguments\n        ? compiler.compileExpression(left, typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1: ExpressionRef;\n        if (!typeArguments && isNumericLiteral(left)) { // prefer right type\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.MUST_WRAP);\n          if (compiler.currentType != type) {\n            arg0 = compiler.compileExpression(left, type = compiler.currentType, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n          }\n        } else {\n          arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP);\n        }\n        let op: BinaryOp = -1;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32: { op = BinaryOp.LtI32; break; }\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: { op = BinaryOp.LtU32; break; }\n          case TypeKind.I64:  { op = BinaryOp.LtI64; break; }\n          case TypeKind.U64:  { op = BinaryOp.LtU64; break; }\n          case TypeKind.ISIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtI64\n              : BinaryOp.LtI32;\n            break;\n          }\n          case TypeKind.USIZE: {\n            op = compiler.options.isWasm64\n              ? BinaryOp.LtU64\n              : BinaryOp.LtU32;\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64, arg0, arg1);\n        }\n        if (op != -1) {\n          let flow = compiler.currentFlow;\n          let nativeType = type.toNativeType();\n          let temp1 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp1.index, LocalFlags.WRAPPED);\n          let temp2 = flow.getTempLocal(type);\n          flow.setLocalFlag(temp2.index, LocalFlags.WRAPPED);\n          let ret = module.select(\n            module.local_tee(temp1.index, arg0),\n            module.local_tee(temp2.index, arg1),\n            module.binary(op,\n              module.local_get(temp1.index, nativeType),\n              module.local_get(temp2.index, nativeType)\n            )\n          );\n          flow.freeTempLocal(temp2);\n          flow.freeTempLocal(temp1);\n          return ret;\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.ceil: { // ceil<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.CeilF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.CeilF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"ceil\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.floor: { // floor<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered rounded\n          case TypeKind.F32: return module.unary(UnaryOp.FloorF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.FloorF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"floor\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.copysign: { // copysign<T?>(left: T, right: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          // TODO: does an integer version make sense?\n          case TypeKind.F32: return module.binary(BinaryOp.CopysignF32, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.CopysignF64, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"copysign\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.nearest: { // nearest<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0;\n          case TypeKind.F32: return module.unary(UnaryOp.NearestF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NearestF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"nearest\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.reinterpret: { // reinterpret<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32:\n          case TypeKind.U32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF32, arg0);\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = type;\n            return module.unary(UnaryOp.ReinterpretF64, arg0);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let arg0 = compiler.compileExpression(operands[0],\n              compiler.options.isWasm64\n                ? Type.f64\n                : Type.f32,\n              Constraints.CONV_IMPLICIT\n            );\n            compiler.currentType = type;\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.ReinterpretF64\n                : UnaryOp.ReinterpretF32,\n              arg0\n            );\n          }\n          case TypeKind.F32: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f32;\n            return module.unary(UnaryOp.ReinterpretI32, arg0);\n          }\n          case TypeKind.F64: {\n            let arg0 = compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_IMPLICIT);\n            compiler.currentType = Type.f64;\n            return module.unary(UnaryOp.ReinterpretI64, arg0);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"reinterpret\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.sqrt: { // sqrt<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.f64, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // TODO: integer versions (that return f64 or convert)?\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.trunc: { // trunc<T?>(value: T) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto, Constraints.NONE);\n      let type = compiler.currentType;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.BOOL: return arg0; // considered truncated\n          case TypeKind.F32: return module.unary(UnaryOp.TruncF32, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.TruncF64, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"trunc\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Memory access ==========================================================================\n\n    case BuiltinSymbols.load: { // load<T!>(offset: usize, immOffset?: usize, immAlign?: usize) -> T*\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        contextualType != Type.auto &&\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          compiler.currentType = outType;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = outType;\n      return module.load(\n        type.byteSize,\n        type.is(TypeFlags.SIGNED | TypeFlags.INTEGER),\n        arg0,\n        outType.toNativeType(),\n        immOffset,\n        immAlign\n      );\n    }\n    case BuiltinSymbols.store: { // store<T!>(offset: usize, value: T*, offset?: usize, align?: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length >= 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (operands.length == 4) {\n        immAlign = evaluateImmediateOffset(operands[3], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[3].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[3].range, \"Alignment\"\n          );\n          compiler.currentType = Type.void;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.void;\n      return module.store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset, immAlign);\n    }\n\n    // === Atomics ================================================================================\n\n    case BuiltinSymbols.atomic_load: { // load<T!>(offset: usize, immOffset?: usize) -> T*\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let outType = (\n        type.is(TypeFlags.INTEGER) &&\n        contextualType.is(TypeFlags.INTEGER) &&\n        contextualType.size > type.size\n      ) ? contextualType : type;\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.load\", type.toString()\n        );\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let immOffset = operands.length == 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = outType;\n        return module.unreachable();\n      }\n      compiler.currentType = outType;\n      return module.atomic_load(\n        type.byteSize,\n        arg0,\n        outType.toNativeType(),\n        immOffset\n      );\n    }\n    case BuiltinSymbols.atomic_store: { // store<T!>(offset: usize, value: T*, immOffset?: usize) -> void\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.store\", type.toString()\n        );\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = isAsm\n        ? compiler.compileExpression(\n            operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size          // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      compiler.currentType = Type.void;\n      return module.atomic_store(type.byteSize, arg0, arg1, inType.toNativeType(), immOffset);\n    }\n    case BuiltinSymbols.atomic_add: // any_atomic_binary<T!>(ptr, value: T, immOffset?: usize) -> T\n    case BuiltinSymbols.atomic_sub:\n    case BuiltinSymbols.atomic_and:\n    case BuiltinSymbols.atomic_or:\n    case BuiltinSymbols.atomic_xor:\n    case BuiltinSymbols.atomic_xchg: {\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 2, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        let opName: string;\n        switch (prototype.internalName) {\n          default: assert(false);\n          case BuiltinSymbols.atomic_add: { opName = \"atomic.add\"; break; }\n          case BuiltinSymbols.atomic_sub: { opName = \"atomic.sub\"; break; }\n          case BuiltinSymbols.atomic_and: { opName = \"atomic.and\"; break; }\n          case BuiltinSymbols.atomic_or: { opName = \"atomic.or\"; break; }\n          case BuiltinSymbols.atomic_xor: { opName = \"atomic.xor\"; break; }\n          case BuiltinSymbols.atomic_xchg: { opName = \"atomic.xchg\"; break; }\n        }\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, opName, type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 3 ? evaluateImmediateOffset(operands[2], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      let op: AtomicRMWOp;\n      switch (prototype.internalName) {\n        default: assert(false);\n        case BuiltinSymbols.atomic_add:  { op = AtomicRMWOp.Add;  break; }\n        case BuiltinSymbols.atomic_sub:  { op = AtomicRMWOp.Sub;  break; }\n        case BuiltinSymbols.atomic_and:  { op = AtomicRMWOp.And;  break; }\n        case BuiltinSymbols.atomic_or:   { op = AtomicRMWOp.Or;   break; }\n        case BuiltinSymbols.atomic_xor:  { op = AtomicRMWOp.Xor;  break; }\n        case BuiltinSymbols.atomic_xchg: { op = AtomicRMWOp.Xchg; break; }\n      }\n      compiler.currentType = inType;\n      return module.atomic_rmw(op, type.byteSize, immOffset, arg0, arg1, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_cmpxchg: { // cmpxchg<T!>(ptr: usize, expected: T, replacement: T, off?: usize) -> T\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 3, 4, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.INTEGER) || type.size < 8) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"atomic.cmpxchg\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0],\n        compiler.options.usizeType,\n        Constraints.CONV_IMPLICIT\n      );\n      let arg1 = isAsm\n        ? compiler.compileExpression(operands[1],\n            contextualType,\n            Constraints.CONV_IMPLICIT\n          )\n        : compiler.compileExpression(\n            operands[1],\n            type,\n            type.is(TypeFlags.INTEGER)\n              ? Constraints.NONE // no need to convert to small int (but now might result in a float)\n              : Constraints.CONV_IMPLICIT\n          );\n      let inType = compiler.currentType;\n      let arg2 = compiler.compileExpression(operands[2],\n        inType,\n        Constraints.CONV_IMPLICIT\n      );\n      if (\n        type.is(TypeFlags.INTEGER) &&\n        (\n          !inType.is(TypeFlags.INTEGER) || // float to int\n          inType.size < type.size       // int to larger int (clear garbage bits)\n        )\n      ) {\n        arg1 = compiler.convertExpression(arg1,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[1]\n        );\n        arg2 = compiler.convertExpression(arg2,\n          inType, type,\n          false, false, // still clears garbage bits when not wrapping\n          operands[2]\n        );\n        inType = type;\n      }\n      let immOffset = operands.length == 4 ? evaluateImmediateOffset(operands[3], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = inType;\n        return module.unreachable();\n      }\n      compiler.currentType = inType;\n      return module.atomic_cmpxchg(type.byteSize, immOffset, arg0, arg1, arg2, inType.toNativeType());\n    }\n    case BuiltinSymbols.atomic_wait: { // wait<T!>(ptr: usize, expected: T, timeout: i64) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.i64, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      switch (type.kind) {\n        case TypeKind.I32:\n        case TypeKind.I64:\n        case TypeKind.ISIZE:\n        case TypeKind.U32:\n        case TypeKind.U64:\n        case TypeKind.USIZE: return module.atomic_wait(arg0, arg1, arg2, type.toNativeType());\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"atomic.wait\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.atomic_notify: { // notify(ptr: usize, count: i32) -> i32\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.i32;\n      return module.atomic_notify(arg0, arg1);\n    }\n    case BuiltinSymbols.atomic_fence: { // fence() -> void\n      compiler.currentType = Type.void;\n      if (\n        checkFeatureEnabled(Feature.THREADS, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.atomic_fence();\n    }\n\n    // === Control flow ===========================================================================\n\n    case BuiltinSymbols.select: { // select<T?>(ifTrue: T, ifFalse: T, condition: bool) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      if (!type.isAny(TypeFlags.VALUE | TypeFlags.REFERENCE)) {\n        compiler.error(\n          DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n          reportNode.typeArgumentsRange, \"select\", type.toString()\n        );\n        return module.unreachable();\n      }\n      let arg1 = compiler.compileExpression(operands[1], type, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.makeIsTrueish(\n        compiler.compileExpression(operands[2], Type.bool),\n        compiler.currentType // ^\n      );\n      compiler.currentType = type;\n      return module.select(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.unreachable: { // unreachable() -> *\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      checkArgsRequired(operands, 0, reportNode, compiler);\n      return module.unreachable();\n    }\n\n    // === Memory =================================================================================\n\n    case BuiltinSymbols.memory_size: { // memory.size() -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 0, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemorySize);\n    }\n    case BuiltinSymbols.memory_grow: { // memory.grow(pages: i32) -> i32\n      compiler.currentType = Type.i32;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      return module.host(HostOp.MemoryGrow, null, [\n        compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_IMPLICIT)\n      ]);\n    }\n    case BuiltinSymbols.memory_copy: { // memory.copy(dest: usize, src: usize: n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], usizeType, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_copy(arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.memory_fill: { // memory.fill(dest: usize, value: u8, n: usize) -> void\n      compiler.currentType = Type.void;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) return module.unreachable();\n      if (!compiler.options.hasFeature(Feature.BULK_MEMORY)) {\n        let instance = compiler.resolver.resolveFunction(prototype, null); // reports\n        compiler.currentType = Type.void;\n        if (!instance) return module.unreachable();\n        return compiler.compileCallDirect(instance, operands, reportNode);\n      }\n      let usizeType = compiler.options.usizeType;\n      let arg0 = compiler.compileExpression(operands[0], usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], usizeType, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.void;\n      return module.memory_fill(arg0, arg1, arg2);\n    }\n\n    // === Helpers ================================================================================\n\n    case BuiltinSymbols.changetype: { // changetype<T!>(value: *) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let toType = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.auto);\n      let fromType = compiler.currentType;\n      compiler.currentType = toType;\n      if (!fromType.isChangeableTo(toType)) {\n        compiler.error(\n          DiagnosticCode.Type_0_cannot_be_changed_to_type_1,\n          reportNode.range, fromType.toString(), toType.toString()\n        );\n        return module.unreachable();\n      }\n      return arg0;\n    }\n    case BuiltinSymbols.assert: { // assert<T?>(isTrueish: T, message?: string) -> T{!= null}\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsOptional(operands, 1, 2, reportNode, compiler)\n      ) {\n        if (typeArguments) {\n          assert(typeArguments.length); // otherwise invalid, should not been set at all\n          compiler.currentType = typeArguments[0].nonNullableType;\n        }\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT | Constraints.MUST_WRAP)\n        : compiler.compileExpression(operands[0], Type.bool, Constraints.MUST_WRAP);\n      let type = compiler.currentType;\n      compiler.currentType = type.nonNullableType;\n\n      // if the assertion can be proven statically, omit it\n      if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n        switch (getExpressionType(arg0)) {\n          case NativeType.I32: {\n            if (getConstValueI32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.I64: {\n            if (getConstValueI64Low(arg0) != 0 || getConstValueI64High(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F32: {\n            if (getConstValueF32(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n          case NativeType.F64: {\n            if (getConstValueF64(arg0) != 0) {\n              if (contextualType == Type.void) {\n                compiler.currentType = Type.void;\n                return module.nop();\n              }\n              return arg0;\n            }\n            break;\n          }\n        }\n      }\n\n      // return ifTrueish if assertions are disabled\n      if (compiler.options.noAssert) {\n        if (contextualType == Type.void) { // simplify if dropped anyway\n          compiler.currentType = Type.void;\n          return module.nop();\n        }\n        return arg0;\n      }\n\n      // otherwise call abort if the assertion is false-ish\n      let abort = compileAbort(compiler, operands.length == 2 ? operands[1] : null, reportNode);\n      compiler.currentType = type.nonNullableType;\n      if (contextualType == Type.void) { // simplify if dropped anyway\n        compiler.currentType = Type.void;\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: return module.if(module.unary(UnaryOp.EqzI32, arg0), abort);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.if(module.unary(UnaryOp.EqzI64, arg0), abort);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                arg0\n              ),\n              abort\n            );\n          }\n          // TODO: also check for NaN in float assertions, as in `Boolean(NaN) -> false`?\n          case TypeKind.F32: return module.if(module.binary(BinaryOp.EqF32, arg0, module.f32(0)), abort);\n          case TypeKind.F64: return module.if(module.binary(BinaryOp.EqF64, arg0, module.f64(0)), abort);\n        }\n      } else {\n        compiler.currentType = type.nonNullableType;\n        let flow = compiler.currentFlow;\n        switch (compiler.currentType.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.BOOL: {\n            let temp = flow.getTempLocal(type);\n            flow.setLocalFlag(temp.index, LocalFlags.WRAPPED); // arg0 is wrapped\n            let ret = module.if(\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.I32),\n              abort\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.I64:\n          case TypeKind.U64: {\n            let temp = flow.getTempLocal(Type.i64);\n            let ret = module.if(\n              module.unary(UnaryOp.EqzI64,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.I64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            let temp = flow.getTempLocal(compiler.options.usizeType);\n            let ret = module.if(\n              module.unary(\n                compiler.options.isWasm64\n                  ? UnaryOp.EqzI64\n                  : UnaryOp.EqzI32,\n                module.local_tee(temp.index, arg0)\n              ),\n              abort,\n              module.local_get(temp.index, compiler.options.nativeSizeType)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F32: {\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF32,\n                module.local_tee(temp.index, arg0),\n                module.f32(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.if(\n              module.binary(BinaryOp.EqF64,\n                module.local_tee(temp.index, arg0),\n                module.f64(0)\n              ),\n              abort,\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Not_implemented,\n        reportNode.typeArgumentsRange\n      );\n      return abort;\n    }\n    case BuiltinSymbols.unchecked: { // unchecked(expr: *) -> *\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) return module.unreachable();\n      let flow = compiler.currentFlow;\n      let alreadyUnchecked = flow.is(FlowFlags.UNCHECKED_CONTEXT);\n      flow.set(FlowFlags.UNCHECKED_CONTEXT);\n      // eliminate unnecessary tees by preferring contextualType(=void)\n      let expr = compiler.compileExpression(operands[0], contextualType);\n      if (!alreadyUnchecked) flow.unset(FlowFlags.UNCHECKED_CONTEXT);\n      return expr;\n    }\n    case BuiltinSymbols.call_direct:\n    case BuiltinSymbols.call_indirect: { // call_indirect<T?>(target: Function | u32, ...args: *[]) -> T\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, i32.MAX_VALUE, reportNode, compiler)\n      ) return module.unreachable();\n      let returnType = typeArguments ? typeArguments[0] : contextualType;\n      let arg0 = compiler.compileExpression(operands[0], Type.u32);\n      let arg0Type = compiler.currentType;\n      if (!(\n        arg0Type == Type.u32 ||                                      // either plain index\n        arg0Type.kind == TypeKind.U32 && arg0Type.signatureReference // or function reference\n      )) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_a_function_index_or_function_reference,\n          operands[0].range, arg0Type.toString()\n        );\n        return module.unreachable();\n      }\n      let numOperands = operands.length - 1;\n      let operandExprs = new Array<ExpressionRef>(numOperands);\n      let nativeReturnType = returnType.toNativeType();\n      let parameterTypes = new Array<Type>(numOperands);\n      let nativeParamTypes = new Array<NativeType>(numOperands);\n      for (let i = 0; i < numOperands; ++i) {\n        operandExprs[i] = compiler.compileExpression(operands[1 + i], Type.i32);\n        let operandType = compiler.currentType;\n        parameterTypes[i] = operandType;\n        nativeParamTypes[i] = operandType.toNativeType();\n      }\n      let typeName = Signature.makeSignatureString(parameterTypes, returnType);\n      let typeRef = module.getFunctionTypeBySignature(nativeReturnType, nativeParamTypes);\n      if (!typeRef) typeRef = module.addFunctionType(typeName, nativeReturnType, nativeParamTypes);\n      compiler.currentType = returnType;\n      if (prototype.internalName == BuiltinSymbols.call_direct) {\n        // if the index expression is precomputable to a constant value, emit a direct call\n        if (getExpressionId(arg0 = module.precomputeExpression(arg0)) == ExpressionId.Const) {\n          assert(getExpressionType(arg0) == NativeType.I32);\n          let index = getConstValueI32(arg0);\n          let functionTable = compiler.functionTable;\n          if (index >= 0 && index < functionTable.length) {\n            return module.call(functionTable[index], operandExprs, nativeReturnType);\n          }\n        }\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[0].range\n        );\n        return module.unreachable();\n      }\n      // of course this can easily result in a 'RuntimeError: function signature mismatch' trap and\n      // thus must be used with care. it exists because it *might* be useful in specific scenarios.\n      return module.call_indirect(arg0, operandExprs, typeName);\n    }\n    case BuiltinSymbols.instantiate: { // instantiate<T!>(...args: *[]) -> T\n      if (\n        checkTypeRequired(typeArguments, reportNode, compiler, true)\n      ) return module.unreachable();\n      let typeArgument = typeArguments![0];\n      let classInstance = typeArgument.classReference;\n      if (!(typeArgument.is(TypeFlags.REFERENCE) && classInstance !== null)) {\n        compiler.error(\n          DiagnosticCode.This_expression_is_not_constructable,\n          reportNode.expression.range\n        );\n        return module.unreachable();\n      }\n      compiler.currentType = classInstance.type;\n      return compiler.compileInstantiate(classInstance, operands, Constraints.NONE, reportNode);\n    }\n\n    // === User-defined diagnostics ===============================================================\n\n    case BuiltinSymbols.ERROR: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.error(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.WARNING: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.warning(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n    case BuiltinSymbols.INFO: {\n      checkTypeAbsent(typeArguments, reportNode, prototype);\n      compiler.info(\n        DiagnosticCode.User_defined_0,\n        reportNode.range, (operands.length ? operands[0] : reportNode).range.toString()\n      );\n      return module.nop();\n    }\n\n    // === Portable type conversions ==============================================================\n\n    case BuiltinSymbols.i8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.i64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.i64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.i64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.isize: {\n      let isizeType = compiler.options.isizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = isizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], isizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u8: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u8;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u8, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u16: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u16;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u16, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.u64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.u64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.u64, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.usize: {\n      let usizeType = compiler.options.usizeType;\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = usizeType;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], usizeType, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.bool: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.bool, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f32: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f32;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f32, Constraints.CONV_EXPLICIT);\n    }\n    case BuiltinSymbols.f64: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.f64;\n        return module.unreachable();\n      }\n      return compiler.compileExpression(operands[0], Type.f64, Constraints.CONV_EXPLICIT);\n    }\n\n    // === SIMD ===================================================================================\n\n    case BuiltinSymbols.v128: // alias for now\n    case BuiltinSymbols.i8x16: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 16, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 16; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i8, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI8(getConstValueI32(expr), bytes, i);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i16x8: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 8, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 8; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i16, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI16(getConstValueI32(expr), bytes, i << 1);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I32);\n          writeI32(getConstValueI32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.i64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.i64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.I64);\n          let off = i << 3;\n          writeI32(getConstValueI64Low(expr), bytes, off);\n          writeI32(getConstValueI64High(expr), bytes, off + 4);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f32x4: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 4, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 4; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f32, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F32);\n          writeF32(getConstValueF32(expr), bytes, i << 2);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.f64x2: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let bytes = new Uint8Array(16);\n      for (let i = 0; i < 2; ++i) {\n        let value = operands[i];\n        if (value) {\n          let expr = compiler.precomputeExpression(value, Type.f64, Constraints.CONV_IMPLICIT);\n          if (getExpressionId(expr) != ExpressionId.Const) {\n            compiler.error(\n              DiagnosticCode.Expression_must_be_a_compile_time_constant,\n              value.range\n            );\n            compiler.currentType = Type.v128;\n            return module.unreachable();\n          }\n          assert(getExpressionType(expr) == NativeType.F64);\n          writeF64(getConstValueF64(expr), bytes, i << 3);\n        }\n      }\n      compiler.currentType = Type.v128;\n      return module.v128(bytes);\n    }\n    case BuiltinSymbols.v128_splat: { // splat<T!>(x: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.SplatI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.SplatI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.SplatI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.SplatI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.SplatI64x2\n                : UnaryOp.SplatI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.SplatF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SplatF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_extract_lane: { // extract_lane<T!>(x: v128, idx: u8) -> T\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      compiler.currentType = type;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_extract(SIMDExtractOp.ExtractLaneI8x16, arg0, idx);\n          case TypeKind.U8: return module.simd_extract(SIMDExtractOp.ExtractLaneU8x16, arg0, idx);\n          case TypeKind.I16: return module.simd_extract(SIMDExtractOp.ExtractLaneI16x8, arg0, idx);\n          case TypeKind.U16: return module.simd_extract(SIMDExtractOp.ExtractLaneU16x8, arg0, idx);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_extract(SIMDExtractOp.ExtractLaneI32x4, arg0, idx);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_extract(SIMDExtractOp.ExtractLaneI64x2, arg0, idx);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_extract(\n              compiler.options.isWasm64\n                ? SIMDExtractOp.ExtractLaneI64x2\n                : SIMDExtractOp.ExtractLaneI32x4,\n              arg0, idx\n            );\n          }\n          case TypeKind.F32: return module.simd_extract(SIMDExtractOp.ExtractLaneF32x4, arg0, idx);\n          case TypeKind.F64: return module.simd_extract(SIMDExtractOp.ExtractLaneF64x2, arg0, idx);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.extract_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_replace_lane: { // replace_lane<T!>(x: v128, idx: u8, value: T) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.precomputeExpression(operands[1], Type.u8, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], type, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      let idx = 0;\n      if (getExpressionId(arg1) == ExpressionId.Const) {\n        assert(getExpressionType(arg1) == NativeType.I32);\n        idx = getConstValueI32(arg1);\n      } else {\n        compiler.error(\n          DiagnosticCode.Expression_must_be_a_compile_time_constant,\n          operands[1].range\n        );\n      }\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let maxIdx = (16 / assert(type.byteSize)) - 1;\n        if (idx < 0 || idx > maxIdx) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[1].range, \"Lane index\", \"0\", maxIdx.toString()\n          );\n          idx = 0;\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI8x16, arg0, idx, arg2);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI16x8, arg0, idx, arg2);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI32x4, arg0, idx, arg2);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneI64x2, arg0, idx, arg2);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_replace(\n              compiler.options.isWasm64\n                ? SIMDReplaceOp.ReplaceLaneI64x2\n                : SIMDReplaceOp.ReplaceLaneI32x4,\n              arg0, idx, arg2\n            );\n          }\n          case TypeKind.F32: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF32x4, arg0, idx, arg2);\n          case TypeKind.F64: return module.simd_replace(SIMDReplaceOp.ReplaceLaneF64x2, arg0, idx, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.replace_lane\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shuffle: { // shuffle<T!>(a: v128, b: v128, ...lanes: u8[]) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      if (!type.is(TypeFlags.REFERENCE)) {\n        let laneWidth = type.byteSize;\n        let laneCount = 16 / laneWidth;\n        assert(isInteger(laneCount) && isPowerOf2(laneCount));\n        if (\n          checkArgsRequired(operands, 2 + laneCount, reportNode, compiler)\n        ) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n        let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n        let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE:\n          case TypeKind.F32:\n          case TypeKind.F64: {\n            let mask = new Uint8Array(16);\n            let maxIdx = (laneCount << 1) - 1;\n            for (let i = 0; i < laneCount; ++i) {\n              let operand = operands[2 + i];\n              let argN = compiler.precomputeExpression(operand, Type.u8, Constraints.CONV_IMPLICIT);\n              if (getExpressionId(argN) != ExpressionId.Const) {\n                compiler.error(\n                  DiagnosticCode.Expression_must_be_a_compile_time_constant,\n                  operand.range\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              assert(getExpressionType(argN) == NativeType.I32);\n              let idx = getConstValueI32(argN);\n              if (idx < 0 || idx > maxIdx) {\n                compiler.error(\n                  DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n                  operand.range, \"Lane index\", \"0\", maxIdx.toString()\n                );\n                compiler.currentType = Type.v128;\n                return module.unreachable();\n              }\n              switch (laneWidth) {\n                case 1: {\n                  writeI8(idx, mask, i);\n                  break;\n                }\n                case 2: {\n                  let off8 = i << 1;\n                  let idx8 = idx << 1;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  break;\n                }\n                case 4: {\n                  let off8 = i << 2;\n                  let idx8 = idx << 2;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  break;\n                }\n                case 8: {\n                  let off8 = i << 3;\n                  let idx8 = idx << 3;\n                  writeI8(idx8    , mask, off8);\n                  writeI8(idx8 + 1, mask, off8 + 1);\n                  writeI8(idx8 + 2, mask, off8 + 2);\n                  writeI8(idx8 + 3, mask, off8 + 3);\n                  writeI8(idx8 + 4, mask, off8 + 4);\n                  writeI8(idx8 + 5, mask, off8 + 5);\n                  writeI8(idx8 + 6, mask, off8 + 6);\n                  writeI8(idx8 + 7, mask, off8 + 7);\n                  break;\n                }\n                default: assert(false);\n              }\n            }\n            compiler.currentType = Type.v128;\n            return module.simd_shuffle(arg0, arg1, mask);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shuffle\", type.toString()\n      );\n      compiler.currentType = Type.v128;\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_swizzle: { // swizzle(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.SwizzleV8x16, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_load_splat: { // load_splat<T!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV8x16, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I16:\n          case TypeKind.U16: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV16x8, arg0, immOffset, immAlign);\n          }\n          case TypeKind.I32:\n          case TypeKind.U32:\n          case TypeKind.F32: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n          }\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.simd_load(SIMDLoadOp.LoadSplatV32x4, arg0, immOffset, immAlign);\n            }\n            // fall-through\n          }\n          case TypeKind.I64:\n          case TypeKind.U64:\n          case TypeKind.F64: {\n            return module.simd_load(SIMDLoadOp.LoadSplatV64x2, arg0, immOffset, immAlign);\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_splat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_load_ext: { // load_ext<TFrom!>(ptr: usize, immOffset?: usize, immAlign?: usize) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler, true) |\n        checkArgsOptional(operands, 1, 3, reportNode, compiler)\n      ) return module.unreachable();\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let numOperands = operands.length;\n      let immOffset = numOperands >= 2 ? evaluateImmediateOffset(operands[1], compiler) : 0; // reports\n      if (immOffset < 0) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let immAlign: i32;\n      let naturalAlign = type.byteSize;\n      if (numOperands == 3) {\n        immAlign = evaluateImmediateOffset(operands[2], compiler);\n        if (immAlign < 0) {\n          compiler.currentType = Type.v128;\n          return module.unreachable();\n        }\n      } else {\n        immAlign = naturalAlign;\n      }\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        if (immAlign > naturalAlign) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_value_between_1_and_2_inclusive,\n            operands[2].range, \"Alignment\", \"0\", naturalAlign.toString()\n          );\n          return module.unreachable();\n        }\n        if (!isPowerOf2(immAlign)) {\n          compiler.error(\n            DiagnosticCode._0_must_be_a_power_of_two,\n            operands[2].range, \"Alignment\"\n          );\n          return module.unreachable();\n        }\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_load(SIMDLoadOp.LoadI8ToI16x8, arg0, immOffset, immAlign);\n          case TypeKind.U8: return module.simd_load(SIMDLoadOp.LoadU8ToU16x8, arg0, immOffset, immAlign);\n          case TypeKind.I16: return module.simd_load(SIMDLoadOp.LoadI16ToI32x4, arg0, immOffset, immAlign);\n          case TypeKind.U16: return module.simd_load(SIMDLoadOp.LoadU16ToU32x4, arg0, immOffset, immAlign);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.simd_load(SIMDLoadOp.LoadI32ToI64x2, arg0, immOffset, immAlign);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.simd_load(SIMDLoadOp.LoadU32ToU64x2, arg0, immOffset, immAlign);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.load_ext\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add: { // add<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.AddI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.AddI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.AddI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.AddI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.AddI64x2\n                : BinaryOp.AddI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.AddF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.AddF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub: { // sub<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.SubI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.SubI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.SubI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.binary(BinaryOp.SubI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.binary(\n              compiler.options.isWasm64\n                ? BinaryOp.SubI64x2\n                : BinaryOp.SubI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.SubF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.SubF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_mul: { // mul<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.binary(BinaryOp.MulI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.binary(BinaryOp.MulI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.MulI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.MulF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MulF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.mul\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_div: { // div<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.binary(BinaryOp.DivF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.DivF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.div\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_add_saturate: { // add_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.AddSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.AddSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.AddSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.AddSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.add_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sub_saturate: { // sub_saturate<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.SubSatI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.SubSatU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.SubSatI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.SubSatU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sub_saturate\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_min: { // min<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MinI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MinU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MinI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MinU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MinI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MinU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MinF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MinF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.min\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_max: { // max<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.MaxI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.MaxU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.MaxI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.MaxU16x8, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.I32: return module.binary(BinaryOp.MaxI32x4, arg0, arg1);\n          case TypeKind.USIZE: {\n            if (compiler.options.isWasm64) break;\n            // fall-through\n          }\n          case TypeKind.U32: return module.binary(BinaryOp.MaxU32x4, arg0, arg1);\n          case TypeKind.F32: return module.binary(BinaryOp.MaxF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.MaxF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.max\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_dot: { // dot<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.DotI16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.dot\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_eq: { // eq<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.EqI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.EqI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.EqI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.EqF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.EqF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.eq\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ne: { // ne<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n            case TypeKind.U8: return module.binary(BinaryOp.NeI8x16, arg0, arg1);\n            case TypeKind.I16:\n            case TypeKind.U16: return module.binary(BinaryOp.NeI16x8, arg0, arg1);\n            case TypeKind.I32:\n            case TypeKind.U32: return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n            case TypeKind.ISIZE:\n            case TypeKind.USIZE: {\n              if (!compiler.options.isWasm64) {\n                return module.binary(BinaryOp.NeI32x4, arg0, arg1);\n              }\n              break;\n            }\n            case TypeKind.F32: return module.binary(BinaryOp.NeF32x4, arg0, arg1);\n            case TypeKind.F64: return module.binary(BinaryOp.NeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ne\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_lt: { // lt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.lt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_le: { // le<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.LeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.LeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.LeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.LeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.LeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.LeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.LeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.le\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_gt: { // gt<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GtI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GtU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GtI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GtU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GtU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GtF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GtF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.gt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_ge: { // ge<T!>(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.binary(BinaryOp.GeI8x16, arg0, arg1);\n          case TypeKind.U8: return module.binary(BinaryOp.GeU8x16, arg0, arg1);\n          case TypeKind.I16: return module.binary(BinaryOp.GeI16x8, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.GeU16x8, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n          case TypeKind.ISIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeI32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.USIZE: {\n            if (!compiler.options.isWasm64) {\n              return module.binary(BinaryOp.GeU32x4, arg0, arg1);\n            }\n            break;\n          }\n          case TypeKind.F32: return module.binary(BinaryOp.GeF32x4, arg0, arg1);\n          case TypeKind.F64: return module.binary(BinaryOp.GeF64x2, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.ge\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_narrow: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I16: return module.binary(BinaryOp.NarrowI16x8ToI8x16, arg0, arg1);\n          case TypeKind.U16: return module.binary(BinaryOp.NarrowU16x8ToU8x16, arg0, arg1);\n          case TypeKind.I32: return module.binary(BinaryOp.NarrowI32x4ToI16x8, arg0, arg1);\n          case TypeKind.U32: return module.binary(BinaryOp.NarrowU32x4ToU16x8, arg0, arg1);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.narrow\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_neg: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.NegI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.NegI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.NegI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.NegI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.NegI64x2\n                : UnaryOp.NegI32x4,\n              arg0\n            );\n          }\n          case TypeKind.F32: return module.unary(UnaryOp.NegF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.NegF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.neg\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_abs: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.AbsF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.AbsF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.abs\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_sqrt: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.unary(UnaryOp.SqrtF32x4, arg0);\n          case TypeKind.F64: return module.unary(UnaryOp.SqrtF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.sqrt\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_convert: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.ConvertI32x4ToF32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.ConvertU32x4ToF32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.ConvertI64x2ToF64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.ConvertU64x2ToF64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.convert\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_trunc_sat: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I32: return module.unary(UnaryOp.TruncSatF32x4ToI32x4, arg0);\n          case TypeKind.U32: return module.unary(UnaryOp.TruncSatF32x4ToU32x4, arg0);\n          case TypeKind.I64: return module.unary(UnaryOp.TruncSatF64x2ToI64x2, arg0);\n          case TypeKind.U64: return module.unary(UnaryOp.TruncSatF64x2ToU64x2, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.trunc_sat\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_low: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenLowI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenLowU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenLowI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenLowU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_low\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_widen_high: {\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.unary(UnaryOp.WidenHighI8x16ToI16x8, arg0);\n          case TypeKind.U8: return module.unary(UnaryOp.WidenHighU8x16ToU16x8, arg0);\n          case TypeKind.I16: return module.unary(UnaryOp.WidenHighI16x8ToI32x4, arg0);\n          case TypeKind.U16: return module.unary(UnaryOp.WidenHighU16x8ToU32x4, arg0);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.widen_high\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shl: { // shl<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShlI8x16, arg0, arg1);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShlI16x8, arg0, arg1);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShlI32x4, arg0, arg1);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShlI64x2, arg0, arg1);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShlI64x2\n                : SIMDShiftOp.ShlI32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shl\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_shr: { // shr<T!>(a: v128, b: i32) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.i32, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.v128;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8: return module.simd_shift(SIMDShiftOp.ShrI8x16, arg0, arg1);\n          case TypeKind.U8: return module.simd_shift(SIMDShiftOp.ShrU8x16, arg0, arg1);\n          case TypeKind.I16: return module.simd_shift(SIMDShiftOp.ShrI16x8, arg0, arg1);\n          case TypeKind.U16: return module.simd_shift(SIMDShiftOp.ShrU16x8, arg0, arg1);\n          case TypeKind.I32: return module.simd_shift(SIMDShiftOp.ShrI32x4, arg0, arg1);\n          case TypeKind.U32: return module.simd_shift(SIMDShiftOp.ShrU32x4, arg0, arg1);\n          case TypeKind.I64: return module.simd_shift(SIMDShiftOp.ShrI64x2, arg0, arg1);\n          case TypeKind.U64: return module.simd_shift(SIMDShiftOp.ShrU64x2, arg0, arg1);\n          case TypeKind.ISIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrI64x2\n                : SIMDShiftOp.ShrI32x4,\n              arg0, arg1\n            );\n          }\n          case TypeKind.USIZE: {\n            return module.simd_shift(\n              compiler.options.isWasm64\n                ? SIMDShiftOp.ShrU64x2\n                : SIMDShiftOp.ShrU32x4,\n              arg0, arg1\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.shr\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_and: { // and(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_or: { // or(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.OrV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_xor: { // xor(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.XorV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_andnot: { // andnot(a: v128, b: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.binary(BinaryOp.AndNotV128, arg0, arg1);\n    }\n    case BuiltinSymbols.v128_not: { // not(a: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.unary(UnaryOp.NotV128, arg0);\n    }\n    case BuiltinSymbols.v128_bitselect: { // bitselect(v1: v128, v2: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      return module.simd_ternary(SIMDTernaryOp.Bitselect, arg0, arg1, arg2);\n    }\n    case BuiltinSymbols.v128_any_true: { // any_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AnyTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AnyTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AnyTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AnyTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AnyTrueI64x2\n                : UnaryOp.AnyTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.any_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_all_true: { // all_true<T!>(a: v128) -> bool\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.I8:\n          case TypeKind.U8: return module.unary(UnaryOp.AllTrueI8x16, arg0);\n          case TypeKind.I16:\n          case TypeKind.U16: return module.unary(UnaryOp.AllTrueI16x8, arg0);\n          case TypeKind.I32:\n          case TypeKind.U32: return module.unary(UnaryOp.AllTrueI32x4, arg0);\n          case TypeKind.I64:\n          case TypeKind.U64: return module.unary(UnaryOp.AllTrueI64x2, arg0);\n          case TypeKind.ISIZE:\n          case TypeKind.USIZE: {\n            return module.unary(\n              compiler.options.isWasm64\n                ? UnaryOp.AllTrueI64x2\n                : UnaryOp.AllTrueI32x4,\n              arg0\n            );\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.all_true\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfma: { // qfma(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMAF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMAF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfma\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.v128_qfms: { // qfms(a: v128, b: v128, c: v128) -> v128\n      if (\n        checkFeatureEnabled(Feature.SIMD, reportNode, compiler) |\n        checkTypeRequired(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 3, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.v128;\n        return module.unreachable();\n      }\n      let type = typeArguments![0];\n      let arg0 = compiler.compileExpression(operands[0], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.v128, Constraints.CONV_IMPLICIT);\n      let arg2 = compiler.compileExpression(operands[2], Type.v128, Constraints.CONV_IMPLICIT);\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          case TypeKind.F32: return module.simd_ternary(SIMDTernaryOp.QFMSF32x4, arg0, arg1, arg2);\n          case TypeKind.F64: return module.simd_ternary(SIMDTernaryOp.QFMSF64x2, arg0, arg1, arg2);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"v128.qfms\", type.toString()\n      );\n      return module.unreachable();\n    }\n\n    // === Internal runtime =======================================================================\n\n    case BuiltinSymbols.idof: {\n      let type = evaluateConstantType(compiler, typeArguments, operands, reportNode);\n      compiler.currentType = Type.u32;\n      if (!type) return module.unreachable();\n      if (type.is(TypeFlags.REFERENCE)) {\n        let signatureReference = type.signatureReference;\n        if (signatureReference) {\n          return module.i32(signatureReference.id);\n        }\n        let classReference = type.classReference;\n        if (classReference !== null && !classReference.hasDecorator(DecoratorFlags.UNMANAGED)) {\n          return module.i32(classReference.id);\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"idof\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.visit_globals: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 1, reportNode, compiler) // cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitGlobals;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_globals, [ arg0 ], NativeType.None);\n    }\n    case BuiltinSymbols.visit_members: {\n      if (\n        checkTypeAbsent(typeArguments, reportNode, prototype) |\n        checkArgsRequired(operands, 2, reportNode, compiler) // ref, cookie\n      ) {\n        compiler.currentType = Type.void;\n        return module.unreachable();\n      }\n      let arg0 = compiler.compileExpression(operands[0], compiler.options.usizeType, Constraints.CONV_IMPLICIT);\n      let arg1 = compiler.compileExpression(operands[1], Type.u32, Constraints.CONV_IMPLICIT);\n      compiler.runtimeFeatures |= RuntimeFeatures.visitMembers;\n      compiler.currentType = Type.void;\n      return module.call(BuiltinSymbols.visit_members, [ arg0, arg1 ], NativeType.None);\n    }\n    case BuiltinSymbols.isNaN: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // never NaN\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(0)\n                ], NativeType.I32)\n              : module.i32(0);\n          }\n          // (t = arg0) != t\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF32,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.NeF32,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F32)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.NeF64,\n                arg0,\n                module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.NeF64,\n              module.local_tee(temp.index, arg0),\n              module.local_get(temp.index, NativeType.F64)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isNaN\", type.toString()\n      );\n      return module.unreachable();\n    }\n    case BuiltinSymbols.isFinite: {\n      if (\n        checkTypeOptional(typeArguments, reportNode, compiler) |\n        checkArgsRequired(operands, 1, reportNode, compiler)\n      ) {\n        compiler.currentType = Type.bool;\n        return module.unreachable();\n      }\n      let arg0 = typeArguments\n        ? compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT)\n        : compiler.compileExpression(operands[0], Type.auto);\n      let type = compiler.currentType;\n      compiler.currentType = Type.bool;\n      if (!type.is(TypeFlags.REFERENCE)) {\n        switch (type.kind) {\n          // always finite\n          case TypeKind.I8:\n          case TypeKind.I16:\n          case TypeKind.I32:\n          case TypeKind.I64:\n          case TypeKind.ISIZE:\n          case TypeKind.U8:\n          case TypeKind.U16:\n          case TypeKind.U32:\n          case TypeKind.U64:\n          case TypeKind.USIZE: {\n            return hasSideEffects(arg0)\n              ? module.block(null, [\n                  module.drop(arg0),\n                  module.i32(1)\n                ], NativeType.I32)\n              : module.i32(1);\n          }\n          // (t = arg0) - t == 0\n          case TypeKind.F32: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF32,\n                module.binary(BinaryOp.SubF32,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F32)\n                ),\n                module.f32(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f32);\n            let ret = module.binary(BinaryOp.EqF32,\n              module.binary(BinaryOp.SubF32,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F32)\n              ),\n              module.f32(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n          case TypeKind.F64: {\n            if (getExpressionId(arg0) == ExpressionId.LocalGet) {\n              return module.binary(BinaryOp.EqF64,\n                module.binary(BinaryOp.SubF64,\n                  arg0,\n                  module.local_get(getLocalGetIndex(arg0), NativeType.F64)\n                ),\n                module.f64(0)\n              );\n            }\n            let flow = compiler.currentFlow;\n            let temp = flow.getTempLocal(Type.f64);\n            let ret = module.binary(BinaryOp.EqF64,\n              module.binary(BinaryOp.SubF64,\n                module.local_tee(temp.index, arg0),\n                module.local_get(temp.index, NativeType.F64)\n              ),\n              module.f64(0)\n            );\n            flow.freeTempLocal(temp);\n            return ret;\n          }\n        }\n      }\n      compiler.error(\n        DiagnosticCode.Operation_0_cannot_be_applied_to_type_1,\n        reportNode.typeArgumentsRange, \"isFinite\", type.toString()\n      );\n      return module.unreachable();\n    }\n  }\n\n  // try to defer inline asm to a concrete built-in\n  {\n    let expr = tryDeferASM(compiler, prototype, operands, reportNode);\n    if (expr) {\n      if (typeArguments) {\n        compiler.error(\n          DiagnosticCode.Type_0_is_not_generic,\n          reportNode.typeArgumentsRange, prototype.internalName\n        );\n      }\n      return expr;\n    }\n  }\n  compiler.error(\n    DiagnosticCode.Not_implemented,\n    reportNode.expression.range\n  );\n  return module.unreachable();\n}\n\n/** Tries to defer an inline-assembler-like call to a built-in function. */\nfunction tryDeferASM(\n  compiler: Compiler,\n  prototype: FunctionPrototype,\n  operands: Expression[],\n  reportNode: CallExpression\n): ExpressionRef {\n  /* tslint:disable:max-line-length */\n  switch (prototype.internalName) {\n\n    // TODO: Operators can't be just deferred (don't have a corresponding generic built-in)\n    //   add, sub, mul, div_s, div_u, rem_s, rem_u\n    //   and, or, xor, shl, shr_u, shr_s\n    //   eq, eqz, ne, lt_s, lt_u, le_s, le_u, gt_s, gt_u, ge_s, ge_u\n\n    case BuiltinSymbols.i32_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_clz: return deferASM(BuiltinSymbols.clz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_ctz: return deferASM(BuiltinSymbols.ctz, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_popcnt: return deferASM(BuiltinSymbols.popcnt, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotl: return deferASM(BuiltinSymbols.rotl, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i32_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_rotr: return deferASM(BuiltinSymbols.rotr, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_abs: return deferASM(BuiltinSymbols.abs, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_max: return deferASM(BuiltinSymbols.max, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_max: return deferASM(BuiltinSymbols.max, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_min: return deferASM(BuiltinSymbols.min, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_min: return deferASM(BuiltinSymbols.min, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_ceil: return deferASM(BuiltinSymbols.ceil, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_floor: return deferASM(BuiltinSymbols.floor, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_copysign: return deferASM(BuiltinSymbols.copysign, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_nearest: return deferASM(BuiltinSymbols.nearest, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_reinterpret_f32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.i64_reinterpret_f64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.i64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_reinterpret_i32: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.f64_reinterpret_i64: return deferASM(BuiltinSymbols.reinterpret, compiler, Type.f64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_sqrt: return deferASM(BuiltinSymbols.sqrt, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f32_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_trunc: return deferASM(BuiltinSymbols.trunc, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_load: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_load8_s: return deferASM(BuiltinSymbols.load, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load8_u: return deferASM(BuiltinSymbols.load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_s: return deferASM(BuiltinSymbols.load, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load16_u: return deferASM(BuiltinSymbols.load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_s: return deferASM(BuiltinSymbols.load, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load32_u: return deferASM(BuiltinSymbols.load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_load: return deferASM(BuiltinSymbols.load, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_load: return deferASM(BuiltinSymbols.load, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_load: return deferASM(BuiltinSymbols.load, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.i32_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_store: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_store8: return deferASM(BuiltinSymbols.store, compiler, Type.i8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store16: return deferASM(BuiltinSymbols.store, compiler, Type.i16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store32: return deferASM(BuiltinSymbols.store, compiler, Type.i32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_store: return deferASM(BuiltinSymbols.store, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.f32_store: return deferASM(BuiltinSymbols.store, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f64_store: return deferASM(BuiltinSymbols.store, compiler, Type.f64, operands, Type.f64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_load8_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load16_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load32_u: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_load: return deferASM(BuiltinSymbols.atomic_load, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_store8: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store16: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store32: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_store: return deferASM(BuiltinSymbols.atomic_store, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_add_u: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_add: return deferASM(BuiltinSymbols.atomic_add, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_sub_u: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_sub: return deferASM(BuiltinSymbols.atomic_sub, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_and_u: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_and: return deferASM(BuiltinSymbols.atomic_and, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_or_u: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_or: return deferASM(BuiltinSymbols.atomic_or, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xor_u: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xor: return deferASM(BuiltinSymbols.atomic_xor, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_xchg_u: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_xchg: return deferASM(BuiltinSymbols.atomic_xchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw8_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u8, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw16_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u16, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw32_cmpxchg_u: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.u32, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64_atomic_rmw_cmpxchg: return deferASM(BuiltinSymbols.atomic_cmpxchg, compiler, Type.i64, operands, Type.i64, reportNode);\n\n    case BuiltinSymbols.i32_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64_wait: return deferASM(BuiltinSymbols.atomic_wait, compiler, Type.i64, operands, Type.i32, reportNode);\n\n    case BuiltinSymbols.v128_load: return deferASM(BuiltinSymbols.load, compiler, Type.v128, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v128_store: return deferASM(BuiltinSymbols.store, compiler, Type.v128, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i8x16_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i8, operands, Type.i8, reportNode);\n    case BuiltinSymbols.i8x16_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u8, operands, Type.u8, reportNode);\n    case BuiltinSymbols.i8x16_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i8, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i8x16_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i8x16_narrow_i16x8_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i16x8_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_s: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i16, operands, Type.i16, reportNode);\n    case BuiltinSymbols.i16x8_extract_lane_u: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.u16, operands, Type.u16, reportNode);\n    case BuiltinSymbols.i16x8_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_s: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_add_saturate_u: return deferASM(BuiltinSymbols.v128_add_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_s: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_sub_saturate_u: return deferASM(BuiltinSymbols.v128_sub_saturate, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i16, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i16x8_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_s: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_narrow_i32x4_u: return deferASM(BuiltinSymbols.v128_narrow, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_low_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_widen_high_i8x16_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i16x8_load8x8_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u8, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_s: return deferASM(BuiltinSymbols.v128_min, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_min_u: return deferASM(BuiltinSymbols.v128_min, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_s: return deferASM(BuiltinSymbols.v128_max, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_max_u: return deferASM(BuiltinSymbols.v128_max, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_dot_i16x8_s: return deferASM(BuiltinSymbols.v128_dot, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i32, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_s: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_lt_u: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_s: return deferASM(BuiltinSymbols.v128_le, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_le_u: return deferASM(BuiltinSymbols.v128_le, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_s: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_gt_u: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_s: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_ge_u: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_trunc_sat_f32x4_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_low_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_low, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_s: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_widen_high_i16x8_u: return deferASM(BuiltinSymbols.v128_widen_high, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i32x4_load16x4_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u16, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.i64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.i64, operands, Type.i64, reportNode);\n    case BuiltinSymbols.i64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shl: return deferASM(BuiltinSymbols.v128_shl, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_s: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_shr_u: return deferASM(BuiltinSymbols.v128_shr, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_any_true: return deferASM(BuiltinSymbols.v128_any_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_all_true: return deferASM(BuiltinSymbols.v128_all_true, compiler, Type.i64, operands, Type.i32, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_s: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_trunc_sat_f64x2_u: return deferASM(BuiltinSymbols.v128_trunc_sat, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_s: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.i64x2_load32x2_u: return deferASM(BuiltinSymbols.v128_load_ext, compiler, Type.u32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f32x4_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f32, operands, Type.f32, reportNode);\n    case BuiltinSymbols.f32x4_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_convert_i32x4_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f32x4_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f32, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.f64x2_splat: return deferASM(BuiltinSymbols.v128_splat, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_extract_lane: return deferASM(BuiltinSymbols.v128_extract_lane, compiler, Type.f64, operands, Type.f64, reportNode);\n    case BuiltinSymbols.f64x2_replace_lane: return deferASM(BuiltinSymbols.v128_replace_lane, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_add: return deferASM(BuiltinSymbols.v128_add, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sub: return deferASM(BuiltinSymbols.v128_sub, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_mul: return deferASM(BuiltinSymbols.v128_mul, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_div: return deferASM(BuiltinSymbols.v128_div, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_neg: return deferASM(BuiltinSymbols.v128_neg, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_min: return deferASM(BuiltinSymbols.v128_min, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_max: return deferASM(BuiltinSymbols.v128_max, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_abs: return deferASM(BuiltinSymbols.v128_abs, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_sqrt: return deferASM(BuiltinSymbols.v128_sqrt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_eq: return deferASM(BuiltinSymbols.v128_eq, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ne: return deferASM(BuiltinSymbols.v128_ne, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_lt: return deferASM(BuiltinSymbols.v128_lt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_le: return deferASM(BuiltinSymbols.v128_le, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_gt: return deferASM(BuiltinSymbols.v128_gt, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_ge: return deferASM(BuiltinSymbols.v128_ge, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_s: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.i64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_convert_i64x2_u: return deferASM(BuiltinSymbols.v128_convert, compiler, Type.u64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfma: return deferASM(BuiltinSymbols.v128_qfma, compiler, Type.f64, operands, Type.v128, reportNode);\n    case BuiltinSymbols.f64x2_qfms: return deferASM(BuiltinSymbols.v128_qfms, compiler, Type.f64, operands, Type.v128, reportNode);\n\n    case BuiltinSymbols.v8x16_shuffle: return deferASM(BuiltinSymbols.v128_shuffle, compiler, Type.i8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_swizzle: return deferASM(BuiltinSymbols.v128_swizzle, compiler, null, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v8x16_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u8, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v16x8_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u16, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v32x4_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u32, operands, Type.v128, reportNode);\n    case BuiltinSymbols.v64x2_load_splat: return deferASM(BuiltinSymbols.v128_load_splat, compiler, Type.u64, operands, Type.v128, reportNode);\n  }\n  /* tslint:enable:max-line-length */\n  return 0;\n}\n\n/** A helper for deferring inline-assembler-like calls to built-in functions. */\nfunction deferASM(\n  name: string,\n  compiler: Compiler,\n  typeArgument: Type | null,\n  operands: Expression[],\n  contextualType: Type,\n  reportNode: CallExpression\n): ExpressionRef {\n  assert(compiler.program.elementsByName.has(name));\n  var prototype = compiler.program.elementsByName.get(name)!;\n  assert(prototype.kind == ElementKind.FUNCTION_PROTOTYPE);\n  return compileCall(\n    compiler,\n    <FunctionPrototype>prototype,\n    typeArgument ? [ typeArgument ] : null,\n    operands,\n    contextualType,\n    reportNode,\n    /* isAsm */ true\n  );\n}\n\n/** Compiles an abort wired to the conditionally imported 'abort' function. */\nexport function compileAbort(\n  compiler: Compiler,\n  message: Expression | null,\n  reportNode: Node\n): ExpressionRef {\n  var program = compiler.program;\n  var module = compiler.module;\n\n  var stringInstance = compiler.program.stringInstance;\n  if (!stringInstance) return module.unreachable();\n\n  var abortInstance = program.abortInstance;\n  if (!(abortInstance && compiler.compileFunction(abortInstance))) return module.unreachable();\n\n  var messageArg: ExpressionRef;\n  if (message !== null) {\n    // The message argument works much like an arm of an IF that does not become executed if the\n    // assertion succeeds respectively is only being computed if the program actually crashes.\n    // Hence, let's make it so that the autorelease is skipped at the end of the current block,\n    // essentially ignoring the message GC-wise. Doesn't matter anyway on a crash.\n    messageArg = compiler.compileExpression(message, stringInstance.type, Constraints.CONV_IMPLICIT | Constraints.WILL_RETAIN);\n  } else {\n    messageArg = stringInstance.type.toNativeZero(module);\n  }\n\n  var filenameArg = compiler.ensureStaticString(reportNode.range.source.normalizedPath);\n\n  compiler.currentType = Type.void;\n  return module.block(null, [\n    module.call(\n      abortInstance.internalName, [\n        messageArg,\n        filenameArg,\n        module.i32(reportNode.range.line),\n        module.i32(reportNode.range.column)\n      ],\n      NativeType.None\n    ),\n    module.unreachable()\n  ]);\n}\n\n/** Compiles the `visit_globals` function. */\nexport function compileVisitGlobals(compiler: Compiler): void {\n  var module = compiler.module;\n  var exprs = new Array<ExpressionRef>();\n  var typeRef = compiler.ensureFunctionType([ Type.u32 ], Type.void); // cookie\n  var nativeSizeType = compiler.options.nativeSizeType;\n  var visitInstance = assert(compiler.program.visitInstance);\n\n  compiler.compileFunction(visitInstance);\n\n  for (let element of compiler.program.elementsByName.values()) {\n    if (element.kind != ElementKind.GLOBAL) continue;\n    let global = <Global>element;\n    let globalType = global.type;\n    let classType = globalType.classReference;\n    if (\n      globalType.is(TypeFlags.REFERENCE) &&\n      classType !== null &&\n      !classType.hasDecorator(DecoratorFlags.UNMANAGED) &&\n      global.is(CommonFlags.COMPILED)\n    ) {\n      if (global.is(CommonFlags.INLINED)) {\n        let value = global.constantIntegerValue;\n        if (i64_low(value) || i64_high(value)) {\n          exprs.push(\n            module.call(visitInstance.internalName, [\n              compiler.options.isWasm64\n                ? module.i64(i64_low(value), i64_high(value))\n                : module.i32(i64_low(value))\n            ], NativeType.None)\n          );\n        }\n      } else {\n        exprs.push(\n          module.if(\n            module.local_tee(1,\n              module.global_get(global.internalName, nativeSizeType)\n            ),\n            module.call(visitInstance.internalName, [\n              module.local_get(1, nativeSizeType), // tempRef != null\n              module.local_get(0, NativeType.I32) // cookie\n            ], NativeType.None)\n          )\n        );\n      }\n    }\n  }\n  module.addFunction(BuiltinSymbols.visit_globals, typeRef, [ nativeSizeType ],\n    exprs.length\n      ? module.block(null, exprs)\n      : module.nop()\n  );\n}\n\n/** Compiles the `visit_members` function. */\nexport function compileVisitMembers(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var usizeType = program.options.usizeType;\n  var nativeSizeType = usizeType.toNativeType();\n  var nativeSizeSize = usizeType.byteSize;\n  var ftype = compiler.ensureFunctionType([ usizeType, Type.i32 ], Type.void); // ref, cookie\n  var managedClasses = program.managedClasses;\n  var visitInstance = assert(program.visitInstance);\n  var blocks = new Array<RelooperBlockRef>();\n  var relooper = Relooper.create(module);\n\n  var outer = relooper.addBlockWithSwitch(\n    module.nop(),\n    module.load(nativeSizeSize, false,\n      nativeSizeType == NativeType.I64\n        ? module.binary(BinaryOp.SubI64,\n            module.local_get(0, nativeSizeType),\n            module.i64(8)\n          )\n        : module.binary(BinaryOp.SubI32,\n            module.local_get(0, nativeSizeType),\n            module.i32(8) // rtId is at -8\n          ),\n      NativeType.I32,\n      0\n    )\n  );\n\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(instance.type.isManaged);\n    assert(id == lastId++);\n\n    let visitImpl: Element | null;\n    let code = new Array<ExpressionRef>();\n\n    // if a library element, check if it implements a custom traversal function\n    if (instance.isDeclaredInLibrary && (visitImpl = instance.lookupInSelf(\"__visit_impl\"))) {\n      assert(visitImpl.kind == ElementKind.FUNCTION_PROTOTYPE);\n      let visitFunc = program.resolver.resolveFunction(<FunctionPrototype>visitImpl, null);\n      if (!visitFunc || !compiler.compileFunction(visitFunc)) {\n        code.push(\n          module.unreachable()\n        );\n      } else {\n        let visitSig = visitFunc.signature;\n        assert(\n          visitSig.parameterTypes.length == 1 &&\n          visitSig.parameterTypes[0] == Type.u32 &&\n          visitSig.returnType == Type.void &&\n          visitSig.thisType == instance.type\n        );\n        code.push(\n          module.call(visitFunc.internalName, [\n            module.local_get(0, nativeSizeType), // ref\n            module.local_get(1, NativeType.I32)  // cookie\n          ], NativeType.None)\n        );\n      }\n\n    // otherwise generate traversal logic for own fields\n    } else {\n      let members = instance.members;\n      if (members) {\n        for (let member of members.values()) {\n          if (member.kind == ElementKind.FIELD) {\n            if ((<Field>member).parent === instance) {\n              let fieldType = (<Field>member).type;\n              if (fieldType.isManaged) {\n                let fieldOffset = (<Field>member).memoryOffset;\n                assert(fieldOffset >= 0);\n                code.push(\n                  // if ($2 = value) FIELDCLASS~traverse($2)\n                  module.if(\n                    module.local_tee(2,\n                      module.load(nativeSizeSize, false,\n                        module.local_get(0, nativeSizeType),\n                        nativeSizeType, fieldOffset\n                      )\n                    ),\n                    module.call(visitInstance.internalName, [\n                      module.local_get(2, nativeSizeType), // ref\n                      module.local_get(1, NativeType.I32)  // cookie\n                    ], NativeType.None)\n                  )\n                );\n              }\n            }\n          }\n        }\n      }\n    }\n    if (!instance.base) code.push(module.return());\n    let block = relooper.addBlock(\n      flatten(module, code, NativeType.None)\n    );\n    relooper.addBranchForSwitch(outer, block, [ id ]);\n    blocks.push(block);\n  }\n  for (let [id, instance] of managedClasses) {\n    let base = instance.base;\n    if (base) {\n      relooper.addBranch(blocks[id], blocks[base.id]);\n    }\n  }\n  blocks.push(\n    relooper.addBlock(\n      module.unreachable()\n    )\n  );\n  relooper.addBranchForSwitch(outer, blocks[blocks.length - 1], []); // default\n  compiler.compileFunction(visitInstance);\n  module.addFunction(BuiltinSymbols.visit_members, ftype, [ nativeSizeType ], relooper.renderAndDispose(outer, 2));\n}\n\nfunction typeToRuntimeFlags(type: Type): TypeinfoFlags {\n  var flags = TypeinfoFlags.VALUE_ALIGN_0 * (1 << type.alignLog2);\n  if (type.is(TypeFlags.SIGNED)) flags |= TypeinfoFlags.VALUE_SIGNED;\n  if (type.is(TypeFlags.FLOAT)) flags |= TypeinfoFlags.VALUE_FLOAT;\n  if (type.is(TypeFlags.NULLABLE)) flags |= TypeinfoFlags.VALUE_NULLABLE;\n  if (type.isManaged) flags |= TypeinfoFlags.VALUE_MANAGED;\n  return flags / TypeinfoFlags.VALUE_ALIGN_0;\n}\n\n/** Compiles runtime type information for use by stdlib. */\nexport function compileRTTI(compiler: Compiler): void {\n  var program = compiler.program;\n  var module = compiler.module;\n  var managedClasses = program.managedClasses;\n  var count = managedClasses.size;\n  var size = 4 + 8 * count;\n  var data = new Uint8Array(size);\n  writeI32(count, data, 0);\n  var off = 4;\n  var abvInstance = program.arrayBufferViewInstance;\n  var abvPrototype = abvInstance.prototype;\n  var arrayPrototype = program.arrayPrototype;\n  var setPrototype = program.setPrototype;\n  var mapPrototype = program.mapPrototype;\n  var lastId = 0;\n  for (let [id, instance] of managedClasses) {\n    assert(id == lastId++);\n    let flags: TypeinfoFlags = 0;\n    if (instance.isAcyclic) flags |= TypeinfoFlags.ACYCLIC;\n    if (instance !== abvInstance && instance.extends(abvPrototype)) {\n      let valueType = instance.getArrayValueType();\n      flags |= TypeinfoFlags.ARRAYBUFFERVIEW;\n      if (instance.extends(arrayPrototype)) flags |= TypeinfoFlags.ARRAY;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(valueType);\n    } else if (instance.extends(setPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(setPrototype));\n      assert(typeArguments.length == 1);\n      flags |= TypeinfoFlags.SET;\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n    } else if (instance.extends(mapPrototype)) {\n      let typeArguments = assert(instance.getTypeArgumentsTo(mapPrototype));\n      assert(typeArguments.length == 2);\n      flags |= TypeinfoFlags.MAP;\n      flags |= TypeinfoFlags.KEY_ALIGN_0 * typeToRuntimeFlags(typeArguments[0]);\n      flags |= TypeinfoFlags.VALUE_ALIGN_0 * typeToRuntimeFlags(typeArguments[1]);\n    }\n    writeI32(flags, data, off); off += 4;\n    instance.rttiFlags = flags;\n    let base = instance.base;\n    writeI32(base ? base.id : 0, data, off); off += 4;\n  }\n  assert(off == size);\n  var usizeType = program.options.usizeType;\n  var segment = compiler.addMemorySegment(data);\n  if (usizeType.size == 8) {\n    let offset = segment.offset;\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I64, false, module.i64(i64_low(offset), i64_high(offset)));\n  } else {\n    module.addGlobal(BuiltinSymbols.rtti_base, NativeType.I32, false, module.i32(i64_low(segment.offset)));\n  }\n}\n\n// Helpers\n\n/** Evaluates the constant type of a type argument *or* expression. */\nfunction evaluateConstantType(\n  compiler: Compiler,\n  typeArguments: Type[] | null,\n  operands: Expression[],\n  reportNode: CallExpression\n): Type | null {\n  if (operands.length == 0) { // requires type argument\n    if (!typeArguments || typeArguments.length != 1) {\n      compiler.error(\n        DiagnosticCode.Expected_0_type_arguments_but_got_1,\n        reportNode.typeArgumentsRange, \"1\", typeArguments ? typeArguments.length.toString(10) : \"0\"\n      );\n      return null;\n    }\n    return typeArguments[0];\n  }\n  if (operands.length == 1) { // optional type argument\n    if (typeArguments !== null && typeArguments.length) {\n      if (typeArguments.length > 1) {\n        compiler.error(\n          DiagnosticCode.Expected_0_type_arguments_but_got_1,\n          reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n        );\n        return null;\n      }\n      compiler.compileExpression(operands[0], typeArguments[0], Constraints.CONV_IMPLICIT);\n    } else {\n      compiler.compileExpression(operands[0], Type.auto);\n    }\n    return compiler.currentType;\n  }\n  if (typeArguments && typeArguments.length > 1) {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", typeArguments.length.toString(10)\n    );\n  }\n  compiler.error(\n    DiagnosticCode.Expected_0_arguments_but_got_1,\n    reportNode.argumentsRange, \"1\", operands.length.toString(10)\n  );\n  return null;\n}\n\n/** Evaluates a compile-time constant immediate offset argument.*/\nfunction evaluateImmediateOffset(expression: Expression, compiler: Compiler): i32 {\n  var expr: ExpressionRef;\n  var value: i32;\n  if (compiler.options.isWasm64) {\n    expr = compiler.precomputeExpression(expression, Type.usize64, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I64 ||\n      getConstValueI64High(expr) != 0 ||\n      (value = getConstValueI64Low(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  } else {\n    expr = compiler.precomputeExpression(expression, Type.usize32, Constraints.CONV_IMPLICIT);\n    if (\n      getExpressionId(expr) != ExpressionId.Const ||\n      getExpressionType(expr) != NativeType.I32 ||\n      (value = getConstValueI32(expr)) < 0\n    ) {\n      compiler.error(\n        DiagnosticCode.Expression_must_be_a_compile_time_constant,\n        expression.range\n      );\n      value = -1;\n    }\n  }\n  return value;\n}\n\n/** Checks that the specified feature is enabled. */\nfunction checkFeatureEnabled(\n  feature: Feature,\n  reportNode: Node,\n  compiler: Compiler\n): i32 {\n  if (!compiler.options.hasFeature(feature)) {\n    compiler.error(\n      DiagnosticCode.Feature_0_is_not_enabled,\n      reportNode.range, featureToString(feature)\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call with a single required type argument. Returns `1` on error. */\nfunction checkTypeRequired(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n  } else {\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.range, \"1\", \"0\"\n    );\n  }\n  return 1;\n}\n\n/** Checks a call with a single optional type argument. Returns `1` on error. */\nfunction checkTypeOptional(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  compiler: Compiler,\n  setCurrentTypeOnError: bool = false\n): i32 {\n  if (typeArguments) {\n    let numTypeArguments = typeArguments.length;\n    if (numTypeArguments == 1) return 0;\n    assert(numTypeArguments); // invalid if 0, must not be set at all instead\n    if (setCurrentTypeOnError) compiler.currentType = typeArguments[0];\n    compiler.error(\n      DiagnosticCode.Expected_0_type_arguments_but_got_1,\n      reportNode.typeArgumentsRange, \"1\", numTypeArguments.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that is not generic. Returns `1` on error. */\nfunction checkTypeAbsent(\n  typeArguments: Type[] | null,\n  reportNode: CallExpression,\n  prototype: FunctionPrototype\n): i32 {\n  if (typeArguments) {\n    prototype.program.error(\n      DiagnosticCode.Type_0_is_not_generic,\n      reportNode.typeArgumentsRange, prototype.internalName\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a fixed number of arguments. Returns `1` on error. */\nfunction checkArgsRequired(\n  operands: Expression[],\n  expected: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  if (operands.length != expected) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expected.toString(), operands.length.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n\n/** Checks a call that requires a variable number of arguments. Returns `1` on error. */\nfunction checkArgsOptional(\n  operands: Expression[],\n  expectedMinimum: i32,\n  expectedMaximum: i32,\n  reportNode: CallExpression,\n  compiler: Compiler\n): i32 {\n  var numOperands = operands.length;\n  if (numOperands < expectedMinimum) {\n    compiler.error(\n      DiagnosticCode.Expected_at_least_0_arguments_but_got_1,\n      reportNode.range, expectedMinimum.toString(), numOperands.toString()\n    );\n    return 1;\n  } else if (numOperands > expectedMaximum) {\n    compiler.error(\n      DiagnosticCode.Expected_0_arguments_but_got_1,\n      reportNode.range, expectedMaximum.toString(), numOperands.toString()\n    );\n    return 1;\n  }\n  return 0;\n}\n","/**\n * A decompiler that generates low-level AssemblyScript from WebAssembly binaries.\n * @module decompiler\n *//***/\n\nimport {\n  Module,\n  NativeType,\n  ExpressionId,\n  UnaryOp,\n  BinaryOp,\n  HostOp,\n  FunctionRef,\n  ExpressionRef,\n  Index,\n  getFunctionName,\n  getFunctionBody,\n  getFunctionParamCount,\n  getFunctionParamType,\n  getFunctionResultType,\n  getExpressionId,\n  getExpressionType,\n  getBlockName,\n  getBlockChildCount,\n  getBlockChild,\n  getIfCondition,\n  getIfTrue,\n  getIfFalse,\n  getLoopName,\n  getLoopBody,\n  getBreakName,\n  getBreakCondition,\n  getLocalGetIndex,\n  getLocalSetIndex,\n  getLocalSetValue,\n  getLoadOffset,\n  getLoadPtr,\n  getStoreOffset,\n  getStorePtr,\n  getStoreValue,\n  getConstValueI32,\n  getConstValueI64Low,\n  getConstValueI64High,\n  getConstValueF32,\n  getConstValueF64,\n  getUnaryOp,\n  getUnaryValue,\n  getBinaryOp,\n  getBinaryLeft,\n  getBinaryRight,\n  getSelectThen,\n  getSelectElse,\n  getSelectCondition,\n  getDropValue,\n  getReturnValue,\n  getHostOp,\n  getHostOperand\n} from \"./module\";\n\n// TODO :-)\n\nexport class Decompiler {\n\n  static decompile(module: Module): string {\n    var decompiler = new Decompiler();\n    decompiler.decompile(module);\n    return decompiler.finish();\n  }\n\n  text: string[] = [];\n  functionId: i32 = 0;\n\n  constructor() { }\n\n  /** Decompiles a module to an AST that can then be serialized. */\n  decompile(module: Module): void {\n    throw new Error(\"not implemented\");\n  }\n\n  decompileFunction(func: FunctionRef): void {\n    var name = getFunctionName(func) || \"$\" + this.functionId.toString(10);\n    var body = getFunctionBody(func);\n    this.push(\"function \");\n    this.push(name);\n    this.push(\"(\");\n     for (let i: Index = 0, k: Index = getFunctionParamCount(func); i < k; ++i) {\n      if (i > 0) this.push(\", \");\n      this.push(\"$\");\n      this.push(i.toString(10));\n      this.push(\": \");\n      this.push(nativeTypeToType(getFunctionParamType(func, i)));\n    }\n    this.push(\"): \");\n    this.push(nativeTypeToType(getFunctionResultType(func)));\n    this.push(\" \");\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"{\\n\");\n    }\n    this.decompileExpression(body);\n    if (getExpressionId(body) != ExpressionId.Block) {\n      this.push(\"\\n}\\n\");\n    }\n    ++this.functionId;\n  }\n\n  decompileExpression(expr: ExpressionRef): void {\n    var id = getExpressionId(expr);\n    var type = getExpressionType(expr);\n\n    var nested: ExpressionRef;\n    var string: string | null;\n    var i: Index, k: Index;\n\n    switch (id) {\n      case ExpressionId.Block: { // TODO: magic\n        if ((string = getBlockName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"{\\n\");\n        k = getBlockChildCount(expr);\n        for (i = 0; i < k; ++i) {\n          this.decompileExpression(getBlockChild(expr, i));\n        }\n        this.push(\"}\\n\");\n        return;\n      }\n      case ExpressionId.If: {\n        if (type == NativeType.None) {\n          this.push(\"if (\");\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\") \");\n          this.decompileExpression(getIfTrue(expr));\n          if (nested = getIfFalse(expr)) {\n            this.push(\" else \");\n            this.decompileExpression(nested);\n          }\n        } else {\n          this.decompileExpression(getIfCondition(expr));\n          this.push(\" ? \");\n          this.decompileExpression(getIfTrue(expr));\n          this.push(\" : \");\n          this.decompileExpression(getIfFalse(expr));\n        }\n        return;\n      }\n      case ExpressionId.Loop: {\n        if ((string = getLoopName(expr)) != null) {\n          this.push(string);\n          this.push(\": \");\n        }\n        this.push(\"do \");\n        this.decompileExpression(getLoopBody(expr));\n        this.push(\"while (0);\\n\");\n      }\n      case ExpressionId.Break: {\n        if (nested = getBreakCondition(expr)) {\n          this.push(\"if (\");\n          this.decompileExpression(nested);\n          this.push(\") \");\n        }\n        if ((string = getBreakName(expr)) != null) {\n          this.push(\"break \");\n          this.push(string);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"break;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Switch:\n      case ExpressionId.Call:\n      case ExpressionId.CallIndirect: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.LocalGet: {\n        this.push(\"$\");\n        this.push(getLocalGetIndex(expr).toString(10));\n        return;\n      }\n      case ExpressionId.LocalSet: {\n        this.push(\"$\");\n        this.push(getLocalSetIndex(expr).toString(10));\n        this.push(\" = \");\n        this.decompileExpression(getLocalSetValue(expr));\n        return;\n      }\n      case ExpressionId.GlobalGet:\n      case ExpressionId.GlobalSet: {\n        throw new Error(\"not implemented\");\n      }\n      case ExpressionId.Load: {\n        this.push(\"load<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getLoadOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getLoadPtr(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Store: {\n        this.push(\"store<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.push(getStoreOffset(expr).toString(10));\n        this.push(\" + \");\n        this.decompileExpression(getStorePtr(expr));\n        this.push(\", \");\n        this.decompileExpression(getStoreValue(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Const: {\n        switch (type) {\n          case NativeType.I32: {\n            this.push(getConstValueI32(expr).toString(10));\n            return;\n          }\n          case NativeType.I64: {\n            this.push(\n              i64_to_string(\n                i64_new(\n                  getConstValueI64Low(expr),\n                  getConstValueI64High(expr)\n                )\n              )\n            );\n            return;\n          }\n          case NativeType.F32: {\n            this.push(getConstValueF32(expr).toString(10));\n            return;\n          }\n          case NativeType.F64: {\n            this.push(getConstValueF64(expr).toString(10));\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Unary: {\n        switch (getUnaryOp(expr)) {\n          case UnaryOp.ClzI32: {\n            this.push(\"clz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI32: {\n            this.push(\"ctz<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI32: {\n            this.push(\"popcnt<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NegF32:\n          case UnaryOp.NegF64: {\n            this.push(\"-\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.AbsF32: {\n            this.push(\"abs<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF32: {\n            this.push(\"ceil<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF32: {\n            this.push(\"floor<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF32: {\n            this.push(\"trunc<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF32: {\n            this.push(\"nearest<i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF32: {\n            this.push(\"sqrt<f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.EqzI32:\n          case UnaryOp.EqzI64: {\n            this.push(\"!\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ClzI64: {\n            this.push(\"clz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CtzI64: {\n            this.push(\"ctz<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.PopcntI64: {\n            this.push(\"popcnt<i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.AbsF64: {\n            this.push(\"abs<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.CeilF64: {\n            this.push(\"ceil<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.FloorF64: {\n            this.push(\"floor<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.TruncF64: {\n            this.push(\"trunc<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.NearestF64: {\n            this.push(\"nearest<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.SqrtF64: {\n            this.push(\"sqrt<f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ExtendI32: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ExtendU32: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.WrapI64: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF32ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI32: {\n            this.push(\"<i32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToI64: {\n            this.push(\"<i64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU32: {\n            this.push(\"<i32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.TruncF64ToU64: {\n            this.push(\"<i64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretF32: {\n            this.push(\"reinterpret<f32,i32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretF64: {\n            this.push(\"reinterpret<f64,i64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ConvertI32ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI32ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF32: {\n            this.push(\"<f32><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU32ToF64: {\n            this.push(\"<f64><u32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF32: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertI64ToF64: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF32: {\n            this.push(\"<f32><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ConvertU64ToF64: {\n            this.push(\"<f64><u64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.PromoteF32: {\n            this.push(\"<f64>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.DemoteF64: {\n            this.push(\"<f32>\");\n            this.decompileExpression(getUnaryValue(expr));\n            return;\n          }\n          case UnaryOp.ReinterpretI32: {\n            this.push(\"reinterpret<i32,f32>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n          case UnaryOp.ReinterpretI64: {\n            this.push(\"reinterpret<i64,f64>(\");\n            this.decompileExpression(getUnaryValue(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Binary: { // TODO: precedence\n        switch (getBinaryOp(expr)) {\n          case BinaryOp.AddI32:\n          case BinaryOp.AddI64:\n          case BinaryOp.AddF32:\n          case BinaryOp.AddF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" + \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.SubI32:\n          case BinaryOp.SubI64:\n          case BinaryOp.SubF32:\n          case BinaryOp.SubF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" - \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.MulI32:\n          case BinaryOp.MulI64:\n          case BinaryOp.MulF32:\n          case BinaryOp.MulF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" * \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivI32:\n          case BinaryOp.DivI64:\n          case BinaryOp.DivF32:\n          case BinaryOp.DivF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RemI32:\n          case BinaryOp.RemI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU32: {\n            this.push(\"<i32>(<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.AndI32:\n          case BinaryOp.AndI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" & \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.OrI32:\n          case BinaryOp.OrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" | \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.XorI32:\n          case BinaryOp.XorI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" ^ \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShlI32:\n          case BinaryOp.ShlI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" << \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrU32:\n          case BinaryOp.ShrU64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >>> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.ShrI32:\n          case BinaryOp.ShrI64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >> \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI32: {\n            this.push(\"rotl<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI32: {\n            this.push(\"rotr<i32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.EqI32:\n          case BinaryOp.EqI64:\n          case BinaryOp.EqF32:\n          case BinaryOp.EqF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" == \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.NeI32:\n          case BinaryOp.NeI64:\n          case BinaryOp.NeF32:\n          case BinaryOp.NeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" != \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtI32:\n          case BinaryOp.LtI64:\n          case BinaryOp.LtF32:\n          case BinaryOp.LtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeI32:\n          case BinaryOp.LeI64:\n          case BinaryOp.LeF32:\n          case BinaryOp.LeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtI32:\n          case BinaryOp.GtI64:\n          case BinaryOp.GtF32:\n          case BinaryOp.GtF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeI32:\n          case BinaryOp.GeI64:\n          case BinaryOp.GeF32:\n          case BinaryOp.GeF64: {\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= \");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU32: {\n            this.push(\"<u32>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u32>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.DivU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" / <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RemU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" % <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.RotlI64: {\n            this.push(\"rotl<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.RotrI64: {\n            this.push(\"rotr<i64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.LtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" < <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.LeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" <= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GtU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" > <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.GeU64: {\n            this.push(\"<u64>\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\" >= <u64>\");\n            this.decompileExpression(getBinaryRight(expr));\n            return;\n          }\n          case BinaryOp.CopysignF32: {\n            this.push(\"copysign<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF32: {\n            this.push(\"min<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF32: {\n            this.push(\"max<f32>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.CopysignF64: {\n            this.push(\"copysign<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MinF64: {\n            this.push(\"min<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n          case BinaryOp.MaxF64: {\n            this.push(\"max<f64>(\");\n            this.decompileExpression(getBinaryLeft(expr));\n            this.push(\", \");\n            this.decompileExpression(getBinaryRight(expr));\n            this.push(\")\");\n            return;\n          }\n        }\n        return;\n      }\n      case ExpressionId.Select: {\n        this.push(\"select<\");\n        this.push(nativeTypeToType(type));\n        this.push(\">(\");\n        this.decompileExpression(getSelectThen(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectElse(expr));\n        this.push(\", \");\n        this.decompileExpression(getSelectCondition(expr));\n        this.push(\")\");\n        return;\n      }\n      case ExpressionId.Drop: {\n        this.decompileExpression(getDropValue(expr));\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Return: {\n        if (nested = getReturnValue(expr)) {\n          this.push(\"return \");\n          this.decompileExpression(nested);\n          this.push(\";\\n\");\n        } else {\n          this.push(\"return;\\n\");\n        }\n        return;\n      }\n      case ExpressionId.Host: {\n        switch (getHostOp(expr)) {\n          case HostOp.MemorySize: {\n            this.push(\"memory.size()\");\n            return;\n          }\n          case HostOp.MemoryGrow: {\n            this.push(\"memory.grow(\");\n            this.decompileExpression(getHostOperand(expr, 0));\n            this.push(\")\");\n            return;\n          }\n        }\n        break;\n      }\n      case ExpressionId.Nop: {\n        this.push(\";\\n\");\n        return;\n      }\n      case ExpressionId.Unreachable: {\n        this.push(\"unreachable()\");\n        return;\n      }\n      case ExpressionId.AtomicCmpxchg:\n      case ExpressionId.AtomicRMW:\n      case ExpressionId.AtomicWait:\n      case ExpressionId.AtomicNotify:\n    }\n    throw new Error(\"not implemented\");\n  }\n\n  private push(text: string): void {\n    // mostly here so we can add debugging if necessary\n    this.text.push(text);\n  }\n\n  finish(): string {\n    var ret = this.text.join(\"\");\n    this.text = [];\n    return ret;\n  }\n}\n\nfunction nativeTypeToType(type: NativeType): string {\n  switch (type) {\n    case NativeType.None: return \"void\";\n    case NativeType.I32: return \"i32\";\n    case NativeType.I64: return \"i64\";\n    case NativeType.F32: return \"f32\";\n    case NativeType.F64: return \"f64\";\n    case NativeType.V128: return \"v128\";\n    case NativeType.Unreachable: throw new Error(\"unreachable type\");\n    case NativeType.Auto: throw new Error(\"auto type\");\n    default: throw new Error(\"unexpected type\");\n  }\n}\n","/**\n * Definition builders for WebIDL and TypeScript.\n * @module definitions\n *//***/\n\n import {\n  CommonFlags\n} from \"./common\";\n\nimport {\n  Program,\n  Element,\n  ElementKind,\n  Global,\n  Enum,\n  EnumValue,\n  Field,\n  Function,\n  FunctionPrototype,\n  Class,\n  ClassPrototype,\n  Namespace,\n  ConstantValueKind,\n  Interface,\n  Property,\n  PropertyPrototype,\n  File\n} from \"./program\";\n\nimport {\n  Type,\n  TypeKind\n} from \"./types\";\n\nimport {\n  SourceKind\n } from \"./ast\";\n\nimport {\n  indent\n} from \"./util\";\n\n/** Walker base class. */\nexport abstract class ExportsWalker {\n\n  /** Program reference. */\n  program: Program;\n  /** Whether to include private members */\n  includePrivate: bool;\n  /** Already seen elements. */\n  seen: Map<Element,string> = new Map();\n\n  /** Constructs a new Element walker. */\n  constructor(program: Program, includePrivate: bool = false) {\n    this.program = program;\n    this.includePrivate;\n  }\n\n  /** Walks all elements and calls the respective handlers. */\n  walk(): void {\n    for (let file of this.program.filesByName.values()) {\n      if (file.source.sourceKind == SourceKind.USER_ENTRY) this.visitFile(file);\n    }\n  }\n\n  /** Visits all exported elements of a file. */\n  visitFile(file: File): void {\n    var members = file.exports;\n    if (members) {\n      for (let [name, member] of members) this.visitElement(name, member);\n    }\n    var exportsStar = file.exportsStar;\n    if (exportsStar) {\n      for (let exportStar of exportsStar) this.visitFile(exportStar);\n    }\n  }\n\n  /** Visits an element.*/\n  visitElement(name: string, element: Element): void {\n    if (element.is(CommonFlags.PRIVATE) && !this.includePrivate) return;\n    var seen = this.seen;\n    if (seen.has(element)) {\n      this.visitAlias(name, element, <string>seen.get(element));\n      return;\n    }\n    seen.set(element, name);\n    switch (element.kind) {\n      case ElementKind.GLOBAL: {\n        if (element.is(CommonFlags.COMPILED)) this.visitGlobal(name, <Global>element);\n        break;\n      }\n      case ElementKind.ENUM: {\n        if (element.is(CommonFlags.COMPILED)) this.visitEnum(name, <Enum>element);\n        break;\n      }\n      case ElementKind.FUNCTION_PROTOTYPE: {\n        this.visitFunctionInstances(name, <FunctionPrototype>element);\n        break;\n      }\n      case ElementKind.CLASS_PROTOTYPE: {\n        this.visitClassInstances(name, <ClassPrototype>element);\n        break;\n      }\n      case ElementKind.FIELD: {\n        if ((<Field>element).is(CommonFlags.COMPILED)) this.visitField(name, <Field>element);\n        break;\n      }\n      case ElementKind.PROPERTY_PROTOTYPE: {\n        this.visitPropertyInstances(name, <PropertyPrototype>element);\n        break;\n      }\n      case ElementKind.PROPERTY: {\n        let prop = <Property>element;\n        let getter = prop.getterInstance;\n        if (getter) this.visitFunction(name, getter);\n        let setter = prop.setterInstance;\n        if (setter) this.visitFunction(name, setter);\n        break;\n      }\n      case ElementKind.NAMESPACE: {\n        if (hasCompiledMember(element)) this.visitNamespace(name, element);\n        break;\n      }\n      case ElementKind.TYPEDEFINITION: break;\n      default: assert(false);\n    }\n  }\n\n  private visitFunctionInstances(name: string, element: FunctionPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitFunction(name, <Function>instance);\n      }\n    }\n  }\n\n  private visitClassInstances(name: string, element: ClassPrototype): void {\n    var instances = element.instances;\n    if (instances) {\n      for (let instance of instances.values()) {\n        if (instance.is(CommonFlags.COMPILED)) this.visitClass(name, <Class>instance);\n      }\n    }\n  }\n\n  private visitPropertyInstances(name: string, element: PropertyPrototype): void {\n    // var instances = element.instances;\n    // if (instances) {\n    //   for (let instance of instances.values()) {\n    //     if (instance.is(CommonFlags.COMPILED)) this.visitProperty(<Property>instance);\n    //   }\n    // }\n    assert(false);\n  }\n\n  abstract visitGlobal(name: string, element: Global): void;\n  abstract visitEnum(name: string, element: Enum): void;\n  abstract visitFunction(name: string, element: Function): void;\n  abstract visitClass(name: string, element: Class): void;\n  abstract visitInterface(name: string, element: Interface): void;\n  abstract visitField(name: string, element: Field): void;\n  abstract visitNamespace(name: string, element: Element): void;\n  abstract visitAlias(name: string, element: Element, originalName: string): void;\n}\n\n/** A WebIDL definitions builder. */\nexport class IDLBuilder extends ExportsWalker {\n\n  /** Builds WebIDL definitions for the specified program. */\n  static build(program: Program): string {\n    return new IDLBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (isConst) sb.push(\"const \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\" \");\n    sb.push(name);\n    if (isConst) {\n      switch (element.constantValueKind) {\n        case ConstantValueKind.INTEGER: {\n          sb.push(\" = \");\n          sb.push(i64_to_string(element.constantIntegerValue));\n          break;\n        }\n        case ConstantValueKind.FLOAT: {\n          sb.push(\" = \");\n          sb.push(element.constantFloatValue.toString());\n          break;\n        }\n        default: assert(false);\n      }\n    }\n    sb.push(\";\\n\");\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          let isConst = (<EnumValue>member).is(CommonFlags.INLINED);\n          indent(sb, this.indentLevel);\n          if (isConst) sb.push(\"const \");\n          else sb.push(\"readonly \");\n          sb.push(\"unsigned long \");\n          sb.push(name);\n          if (isConst) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\";\\n\");\n        }\n      }\n      for (let member of members.values()) {\n        if (member.kind != ElementKind.ENUMVALUE) this.visitElement(member.name, member);\n      }\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    sb.push(this.typeToString(signature.returnType));\n    sb.push(\" \");\n    sb.push(name);\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(this.typeToString(parameters[i]));\n      sb.push(\" \");\n      sb.push(signature.getParameterName(i));\n    }\n    sb.push(\");\\n\");\n    var members = element.members;\n    if (members && members.size) {\n      indent(sb, this.indentLevel);\n      sb.push(\"interface \");\n      sb.push(element.name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    // TODO\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    // TODO\n  }\n\n  visitNamespace(name: string, element: Namespace): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"interface \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      for (let member of members.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    // TODO\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"byte\";\n      case TypeKind.I16: return \"short\";\n      case TypeKind.I32: return \"long\";\n      case TypeKind.I64: return \"long long\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"long long\" : \"long\";\n      case TypeKind.U8: return \"octet\";\n      case TypeKind.U16: return \"unsigned short\";\n      case TypeKind.U32: return \"unsigned long\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"unsigned long long\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"unsigned long long\" : \"unsigned long\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"boolean\";\n      case TypeKind.F32: return \"unrestricted float\";\n      case TypeKind.F64: return \"unrestricted double\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"interface ASModule {\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    return sb.join(\"\");\n  }\n}\n\n/** A TypeScript definitions builder. */\nexport class TSDBuilder extends ExportsWalker {\n\n  /** Builds TypeScript definitions for the specified program. */\n  static build(program: Program): string {\n    return new TSDBuilder(program).build();\n  }\n\n  private sb: string[] = [];\n  private indentLevel: i32 = 0;\n  private unknown: Set<string> = new Set();\n\n  /** Constructs a new WebIDL builder. */\n  constructor(program: Program, includePrivate: bool = false) {\n    super(program, includePrivate);\n  }\n\n  visitGlobal(name: string, element: Global): void {\n    var sb = this.sb;\n    var isConst = element.is(CommonFlags.INLINED);\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.STATIC)) {\n      if (isConst) sb.push(\"static readonly \");\n      else sb.push(\"static \");\n    } else {\n      if (isConst) sb.push(\"export const \");\n      else sb.push(\"export var \");\n    }\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitEnum(name: string, element: Enum): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel++);\n    sb.push(\"export enum \");\n    sb.push(name);\n    sb.push(\" {\\n\");\n    var members = element.members;\n    if (members) {\n      let numMembers = members.size;\n      for (let [name, member] of members) {\n        if (member.kind == ElementKind.ENUMVALUE) {\n          indent(sb, this.indentLevel);\n          sb.push(name);\n          if (member.is(CommonFlags.INLINED)) {\n            sb.push(\" = \");\n            assert((<EnumValue>member).constantValueKind == ConstantValueKind.INTEGER);\n            sb.push(i64_low((<EnumValue>member).constantIntegerValue).toString(10));\n          }\n          sb.push(\",\\n\");\n          --numMembers;\n        }\n      }\n      if (numMembers) this.visitNamespace(name, element);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitFunction(name: string, element: Function): void {\n    if (element.isAny(CommonFlags.PRIVATE | CommonFlags.SET)) return;\n    var sb = this.sb;\n    var signature = element.signature;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.GET)) {\n      sb.push(\"get \");\n      sb.push(name); // 'get:funcName' internally\n      sb.push(\"(): \");\n      sb.push(this.typeToString(signature.returnType));\n      sb.push(\";\\n\");\n      return;\n    } else {\n      if (!element.isAny(CommonFlags.STATIC | CommonFlags.INSTANCE)) sb.push(\"export function \");\n      sb.push(name);\n    }\n    sb.push(\"(\");\n    var parameters = signature.parameterTypes;\n    var numParameters = parameters.length;\n    // var requiredParameters = signature.requiredParameters;\n    for (let i = 0; i < numParameters; ++i) {\n      if (i) sb.push(\", \");\n      // if (i >= requiredParameters) sb.push(\"optional \");\n      sb.push(signature.getParameterName(i));\n      sb.push(\": \");\n      sb.push(this.typeToString(parameters[i]));\n    }\n    if (element.isAny(CommonFlags.CONSTRUCTOR | CommonFlags.SET)) {\n      sb.push(\")\");\n    } else {\n      sb.push(\"): \");\n      sb.push(this.typeToString(signature.returnType));\n    }\n    sb.push(\";\\n\");\n    this.visitNamespace(name, element);\n  }\n\n  visitClass(name: string, element: Class): void {\n    var sb = this.sb;\n    var isInterface = element.kind == ElementKind.INTERFACE;\n    indent(sb, this.indentLevel++);\n    if (isInterface) {\n      sb.push(\"export interface \");\n    } else {\n      if (element.is(CommonFlags.ABSTRACT)) sb.push(\"abstract \");\n      sb.push(\"export class \");\n    }\n    sb.push(name);\n    // var base = element.base;\n    // if (base && base.is(CommonFlags.COMPILED | CommonFlags.MODULE_EXPORT)) {\n    //   sb.push(\" extends \");\n    //   sb.push(base.name); // TODO: fqn\n    // }\n    sb.push(\" {\\n\");\n    var staticMembers = element.prototype.members;\n    if (staticMembers) {\n      for (let member of staticMembers.values()) this.visitElement(member.name, member);\n    }\n    var instanceMembers = element.members;\n    if (instanceMembers) {\n      for (let member of instanceMembers.values()) this.visitElement(member.name, member);\n    }\n    indent(sb, --this.indentLevel);\n    sb.push(\"}\\n\");\n  }\n\n  visitInterface(name: string, element: Interface): void {\n    this.visitClass(name, element);\n  }\n\n  visitField(name: string, element: Field): void {\n    if (element.is(CommonFlags.PRIVATE)) return;\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    if (element.is(CommonFlags.PROTECTED)) sb.push(\"protected \");\n    if (element.is(CommonFlags.STATIC)) sb.push(\"static \");\n    if (element.is(CommonFlags.READONLY)) sb.push(\"readonly \");\n    sb.push(name);\n    sb.push(\": \");\n    sb.push(this.typeToString(element.type));\n    sb.push(\";\\n\");\n  }\n\n  visitNamespace(name: string, element: Element): void {\n    var members = element.members;\n    if (members && members.size) {\n      let sb = this.sb;\n      indent(sb, this.indentLevel++);\n      sb.push(\"export namespace \");\n      sb.push(name);\n      sb.push(\" {\\n\");\n      for (let member of members.values()) this.visitElement(member.name, member);\n      indent(sb, --this.indentLevel);\n      sb.push(\"}\\n\");\n    }\n  }\n\n  visitAlias(name: string, element: Element, originalName: string): void {\n    var sb = this.sb;\n    indent(sb, this.indentLevel);\n    sb.push(\"export const \");\n    sb.push(name);\n    sb.push(\": typeof \");\n    sb.push(originalName);\n    sb.push(\";\\n\");\n  }\n\n  typeToString(type: Type): string {\n    switch (type.kind) {\n      case TypeKind.I8: return \"i8\";\n      case TypeKind.I16: return \"i16\";\n      case TypeKind.I32: return \"i32\";\n      case TypeKind.I64: return \"I64\";\n      case TypeKind.ISIZE: return this.program.options.isWasm64 ? \"I64\" : \"i32\";\n      case TypeKind.U8: return \"u8\";\n      case TypeKind.U16: return \"u16\";\n      case TypeKind.U32: return \"u32\";\n        // ^ TODO: function types\n      case TypeKind.U64: return \"U64\";\n      case TypeKind.USIZE: return this.program.options.isWasm64 ? \"U64\" : \"u32\";\n        // ^ TODO: class types\n      case TypeKind.BOOL: return \"bool\";\n      case TypeKind.F32: return \"f32\";\n      case TypeKind.F64: return \"f64\";\n      case TypeKind.V128: return \"v128\";\n      case TypeKind.VOID: return \"void\";\n      default: {\n        assert(false);\n        return \"any\";\n      }\n    }\n  }\n\n  build(): string {\n    var sb = this.sb;\n    sb.push(\"declare module ASModule {\\n\");\n    sb.push(\"  type i8 = number;\\n\");\n    sb.push(\"  type i16 = number;\\n\");\n    sb.push(\"  type i32 = number;\\n\");\n    sb.push(\"  type u8 = number;\\n\");\n    sb.push(\"  type u16 = number;\\n\");\n    sb.push(\"  type u32 = number;\\n\");\n    sb.push(\"  type f32 = number;\\n\");\n    sb.push(\"  type f64 = number;\\n\");\n    sb.push(\"  type bool = any;\\n\");\n    ++this.indentLevel;\n    this.walk();\n    --this.indentLevel;\n    sb.push(\"}\\n\");\n    sb.push(\"export default ASModule;\\n\");\n    return this.sb.join(\"\");\n  }\n}\n\n// helpers\n\n/** Tests if a namespace-like element has at least one compiled member. */\nfunction hasCompiledMember(element: Element): bool {\n  var members = element.members;\n  if (members) {\n    for (let member of members.values()) {\n      switch (member.kind) {\n        case ElementKind.FUNCTION_PROTOTYPE: {\n          let instances = (<FunctionPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        case ElementKind.CLASS_PROTOTYPE: {\n          let instances = (<ClassPrototype>member).instances;\n          if (instances) {\n            for (let instance of instances.values()) {\n              if (instance.is(CommonFlags.COMPILED)) return true;\n            }\n          }\n          break;\n        }\n        default: {\n          if (member.is(CommonFlags.COMPILED) || hasCompiledMember(member)) return true;\n          break;\n        }\n      }\n    }\n  }\n  return false;\n}\n","/**\n * A TypeScript parser for the AssemblyScript subset.\n * @module parser\n *//***/\n\nimport {\n  CommonFlags,\n  LIBRARY_PREFIX,\n  PATH_DELIMITER\n} from \"./common\";\n\nimport {\n  Program\n} from \"./program\";\n\nimport {\n  Tokenizer,\n  Token,\n  Range,\n  CommentHandler,\n  IdentifierHandling,\n  isIllegalVariableIdentifier\n} from \"./tokenizer\";\n\nimport {\n  DiagnosticCode,\n  DiagnosticEmitter\n} from \"./diagnostics\";\n\nimport {\n  normalizePath\n} from \"./util\";\n\nimport {\n  Node,\n  NodeKind,\n  Source,\n  SourceKind,\n  TypeNode,\n  NamedTypeNode,\n  FunctionTypeNode,\n  ArrowKind,\n\n  Expression,\n  AssertionKind,\n  CallExpression,\n  ClassExpression,\n  FunctionExpression,\n  IdentifierExpression,\n  StringLiteralExpression,\n\n  Statement,\n  BlockStatement,\n  BreakStatement,\n  ClassDeclaration,\n  ContinueStatement,\n  DeclarationStatement,\n  DecoratorNode,\n  DoStatement,\n  EnumDeclaration,\n  EnumValueDeclaration,\n  ExportImportStatement,\n  ExportMember,\n  ExportStatement,\n  ExpressionStatement,\n  ForStatement,\n  FunctionDeclaration,\n  IfStatement,\n  ImportDeclaration,\n  ImportStatement,\n  IndexSignatureDeclaration,\n  NamespaceDeclaration,\n  ParameterNode,\n  ParameterKind,\n  ReturnStatement,\n  SwitchCase,\n  SwitchStatement,\n  ThrowStatement,\n  TryStatement,\n  TypeDeclaration,\n  TypeParameterNode,\n  VariableStatement,\n  VariableDeclaration,\n  VoidStatement,\n  WhileStatement,\n\n  mangleInternalPath,\n  nodeIsCallable,\n  nodeIsGenericCallable\n} from \"./ast\";\n\n/** Parser interface. */\nexport class Parser extends DiagnosticEmitter {\n\n  /** Program being created. */\n  program: Program;\n  /** Source file names to be requested next. */\n  backlog: string[] = new Array();\n  /** Source file names already seen, that is processed or backlogged. */\n  seenlog: Set<string> = new Set();\n  /** Source file names already completely processed. */\n  donelog: Set<string> = new Set();\n  /** Optional handler to intercept comments while tokenizing. */\n  onComment: CommentHandler | null = null;\n  /** Current file being parsed. */\n  currentSource: Source;\n  /** Dependency map **/\n  dependees: Map<string, Source> = new Map();\n\n  /** Constructs a new parser. */\n  constructor() {\n    super();\n    this.program = new Program(this.diagnostics);\n  }\n\n  /** Parses a file and adds its definitions to the program. */\n  parseFile(\n    /** Source text of the file. */\n    text: string,\n    /** Normalized path of the file. */\n    path: string,\n    /** Whether this is an entry file. */\n    isEntry: bool\n  ): void {\n    // the frontend gives us paths with .ts endings\n    var normalizedPath = normalizePath(path);\n    var internalPath = mangleInternalPath(normalizedPath);\n    // check if already processed\n    if (this.donelog.has(internalPath)) return;\n    this.donelog.add(internalPath); // do not parse again\n    this.seenlog.add(internalPath); // do not request again\n\n    // create the source element\n    var source = new Source(\n      normalizedPath,\n      text,\n      isEntry\n        ? SourceKind.USER_ENTRY\n        : path.startsWith(LIBRARY_PREFIX)\n          ? path.indexOf(PATH_DELIMITER, LIBRARY_PREFIX.length) < 0\n            ? SourceKind.LIBRARY_ENTRY\n            : SourceKind.LIBRARY\n          : SourceKind.USER\n    );\n    var program = this.program;\n    program.sources.push(source);\n    this.currentSource = source;\n\n    // tokenize and parse\n    var tn = new Tokenizer(source, program.diagnostics);\n    tn.onComment = this.onComment;\n    source.tokenizer = tn;\n    var statements = source.statements;\n    while (!tn.skip(Token.ENDOFFILE)) {\n      let statement = this.parseTopLevelStatement(tn, null);\n      if (statement) statements.push(statement);\n    }\n    tn.finish();\n  }\n\n  /** Parses a top-level statement. */\n  parseTopLevelStatement(\n    tn: Tokenizer,\n    namespace: NamespaceDeclaration | null = null\n  ): Statement | null {\n    var flags = CommonFlags.NONE;\n    var startPos: i32 = -1;\n\n    // check decorators\n    var decorators: DecoratorNode[] | null = null;\n    while (tn.skip(Token.AT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      let decorator = this.parseDecorator(tn);\n      if (!decorator) {\n        this.skipStatement(tn);\n        continue;\n      }\n      if (!decorators) decorators = [decorator];\n      else decorators.push(decorator);\n    }\n\n    // check modifiers\n    var exportStart: i32 = 0;\n    var exportEnd: i32 = 0;\n    var defaultStart: i32 = 0;\n    var defaultEnd: i32 = 0;\n    if (tn.skip(Token.EXPORT)) {\n      if (startPos < 0) startPos = tn.tokenPos;\n      flags |= CommonFlags.EXPORT;\n      exportStart = tn.tokenPos;\n      exportEnd = tn.pos;\n      if (tn.skip(Token.DEFAULT)) {\n        defaultStart = tn.tokenPos;\n        defaultEnd = tn.pos;\n      }\n    }\n\n    var declareStart: i32 = 0;\n    var declareEnd: i32 = 0;\n    var contextIsAmbient = namespace != null && namespace.is(CommonFlags.AMBIENT);\n    if (tn.skip(Token.DECLARE)) {\n      if (contextIsAmbient) {\n        this.error(\n          DiagnosticCode.A_declare_modifier_cannot_be_used_in_an_already_ambient_context,\n          tn.range()\n        ); // recoverable\n      } else {\n        if (startPos < 0) startPos = tn.tokenPos;\n        declareStart = startPos;\n        declareEnd = tn.pos;\n        flags |= CommonFlags.DECLARE | CommonFlags.AMBIENT;\n      }\n    } else if (contextIsAmbient) {\n      flags |= CommonFlags.AMBIENT;\n    }\n\n    // parse the statement\n    var statement: Statement | null = null;\n\n    // handle declarations\n    var first = tn.peek();\n    if (startPos < 0) startPos = tn.nextTokenPos;\n    switch (first) {\n      case Token.CONST: {\n        tn.next();\n        flags |= CommonFlags.CONST;\n        if (tn.skip(Token.ENUM)) {\n          statement = this.parseEnum(tn, flags, decorators, startPos);\n        } else {\n          statement = this.parseVariable(tn, flags, decorators, startPos);\n        }\n        decorators = null;\n        break;\n      }\n      case Token.LET: flags |= CommonFlags.LET;\n      case Token.VAR: {\n        tn.next();\n        statement = this.parseVariable(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ENUM: {\n        tn.next();\n        statement = this.parseEnum(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.FUNCTION: {\n        tn.next();\n        statement = this.parseFunction(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.ABSTRACT: {\n        let state = tn.mark();\n        tn.next();\n        if (!tn.skip(Token.CLASS)) {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n          break;\n        } else {\n          tn.discard(state);\n        }\n        flags |= CommonFlags.ABSTRACT;\n        // fall through\n      }\n      case Token.CLASS:\n      case Token.INTERFACE: {\n        tn.next();\n        statement = this.parseClassOrInterface(tn, flags, decorators, startPos);\n        decorators = null;\n        break;\n      }\n      case Token.NAMESPACE: {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseNamespace(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      case Token.IMPORT: {\n        tn.next();\n        flags |= CommonFlags.IMPORT;\n        if (flags & CommonFlags.EXPORT) {\n          statement = this.parseExportImport(tn, startPos);\n        } else {\n          statement = this.parseImport(tn);\n        }\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          tn.discard(state);\n          statement = this.parseTypeDeclaration(tn, flags, decorators, startPos);\n          decorators = null;\n        } else {\n          tn.reset(state);\n          statement = this.parseStatement(tn, true);\n        }\n        break;\n      }\n      default: {\n\n        // handle plain exports\n        if (flags & CommonFlags.EXPORT) {\n          if (defaultEnd && tn.skipIdentifier(IdentifierHandling.PREFER)) {\n            if (declareEnd) {\n              this.error(\n                DiagnosticCode.An_export_assignment_cannot_have_modifiers,\n                tn.range(declareStart, declareEnd)\n              );\n            }\n            statement = this.parseExportDefaultAlias(tn, startPos, defaultStart, defaultEnd);\n            defaultStart = defaultEnd = 0; // consume\n          } else {\n            statement = this.parseExport(tn, startPos, (flags & CommonFlags.DECLARE) != 0);\n          }\n\n        // handle non-declaration statements\n        } else {\n          if (exportEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(exportStart, exportEnd), \"export\"\n            ); // recoverable\n          }\n          if (declareEnd) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(declareStart, declareEnd), \"declare\"\n            ); // recoverable\n          }\n          if (!namespace) {\n            statement = this.parseStatement(tn, true);\n          } // TODO: else?\n        }\n        break;\n      }\n    }\n\n    // check for decorators that weren't consumed\n    if (decorators) {\n      for (let i = 0, k = decorators.length; i < k; ++i) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          decorators[i].range\n        );\n      }\n    }\n\n    // check if this an `export default` declaration\n    if (defaultEnd && statement !== null) {\n      switch (statement.kind) {\n        case NodeKind.ENUMDECLARATION:\n        case NodeKind.FUNCTIONDECLARATION:\n        case NodeKind.CLASSDECLARATION:\n        case NodeKind.INTERFACEDECLARATION:\n        case NodeKind.NAMESPACEDECLARATION: {\n          return Node.createExportDefaultStatement(<DeclarationStatement>statement, tn.range(startPos, tn.pos));\n        }\n        default: {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(defaultStart, defaultEnd), \"default\"\n          );\n        }\n      }\n    }\n    return statement;\n  }\n\n  /** Obtains the next file to parse. */\n  nextFile(): string | null {\n    var backlog = this.backlog;\n    return backlog.length ? backlog.shift()! : null;\n  }\n\n  /** Obtains the dependee of the given imported file. */\n  getDependee(dependent: string): string | null {\n    var source = this.dependees.get(dependent);\n    if (source) return source.internalPath;\n    return null;\n  }\n\n  /** Finishes parsing and returns the program. */\n  finish(): Program {\n    if (this.backlog.length) throw new Error(\"backlog is not empty\");\n    this.backlog = [];\n    this.seenlog.clear();\n    this.donelog.clear();\n    this.dependees.clear();\n    return this.program;\n  }\n\n  /** Parses a type. */\n  parseType(\n    tn: Tokenizer,\n    acceptParenthesized: bool = true,\n    suppressErrors: bool = false\n  ): TypeNode | null {\n\n    // NOTE: this parses our limited subset\n    var token = tn.next();\n    var startPos = tn.tokenPos;\n\n    var type: TypeNode;\n\n    // '(' ...\n    if (token == Token.OPENPAREN) {\n\n      // '(' FunctionSignature ')' '|' 'null'?\n      let isNullableSignature = tn.skip(Token.OPENPAREN);\n      // FunctionSignature?\n      let signature = this.tryParseFunctionType(tn);\n      if (signature) {\n        if (isNullableSignature) {\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \")\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.BAR)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"|\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.NULL)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          signature.isNullable = true;\n        }\n        return signature;\n      } else if (isNullableSignature || this.tryParseSignatureIsSignature) {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n      // Type (',' Type)* ')'\n      if (acceptParenthesized) {\n        let innerType = this.parseType(tn, false, suppressErrors);\n        if (!innerType) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \")\"\n            );\n          }\n          return null;\n        }\n        type = innerType;\n        type.range.start = startPos;\n        type.range.end = tn.pos;\n      } else {\n        this.error(\n          DiagnosticCode.Unexpected_token,\n          tn.range()\n        );\n        return null;\n      }\n\n    // 'void'\n    } else if (token == Token.VOID) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"void\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'this'\n    } else if (token == Token.THIS) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"this\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // 'true'\n    } else if (token == Token.TRUE || token == Token.FALSE) {\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"bool\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // StringLiteral\n    } else if (token == Token.STRINGLITERAL) {\n      tn.readString();\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"string\", tn.range()), [], false, tn.range(startPos, tn.pos)\n      );\n\n    // Identifier\n    } else if (token == Token.IDENTIFIER) {\n      let first = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n      let current = first;\n      let parameters: NamedTypeNode[] | null = null;\n      let nullable = false;\n\n      // Identifier ('.' Identifier)+\n      while (tn.skip(Token.DOT)) {\n        if (tn.skip(Token.IDENTIFIER)) {\n          let next = Node.createSimpleTypeName(tn.readIdentifier(), tn.range());\n          current.next = next;\n          current = next;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range(tn.pos)\n          );\n          return null;\n        }\n      }\n\n      // Name<T>\n      if (tn.skip(Token.LESSTHAN)) {\n        do {\n          let parameter = this.parseType(tn, true, suppressErrors);\n          if (!parameter) return null;\n          if (!parameters) parameters = [<NamedTypeNode>parameter];\n          else parameters.push(<NamedTypeNode>parameter);\n        } while (tn.skip(Token.COMMA));\n        if (!tn.skip(Token.GREATERTHAN)) {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \">\"\n            );\n          }\n          return null;\n        }\n      }\n      // ... | null\n      while (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(tn.pos), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(first, parameters || [], nullable, tn.range(startPos, tn.pos));\n    } else {\n      if (!suppressErrors) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n      }\n      return null;\n    }\n    // ... [][]\n    while (tn.skip(Token.OPENBRACKET)) {\n      let bracketStart = tn.tokenPos;\n      if (!tn.skip(Token.CLOSEBRACKET)) {\n        if (!suppressErrors) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"]\"\n          );\n        }\n        return null;\n      }\n      let bracketRange = tn.range(bracketStart, tn.pos);\n\n      // ...[] | null\n      let nullable = false;\n      if (tn.skip(Token.BAR)) {\n        if (tn.skip(Token.NULL)) {\n          nullable = true;\n        } else {\n          if (!suppressErrors) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"null\"\n            );\n          }\n          return null;\n        }\n      }\n      type = Node.createNamedType(\n        Node.createSimpleTypeName(\"Array\", bracketRange),\n        [ type ],\n        nullable,\n        tn.range(startPos, tn.pos)\n      );\n      if (nullable) break;\n    }\n\n    return type;\n  }\n\n  // Indicates whether tryParseSignature determined that it is handling a Signature\n  private tryParseSignatureIsSignature: bool = false;\n\n  /** Parses a function type, as used in type declarations. */\n  tryParseFunctionType(\n    tn: Tokenizer\n  ): FunctionTypeNode | null {\n\n    // at '(': ('...'? Identifier '?'? ':' Type (','  '...'? Identifier '?'? ':' Type)* )? ')' '=>' Type\n\n    var state = tn.mark();\n    var startPos = tn.tokenPos;\n    var parameters: ParameterNode[] | null = null;\n    var thisType: NamedTypeNode | null = null;\n    var isSignature: bool = false;\n    var firstParamNameNoType: IdentifierExpression | null = null;\n    var firstParamKind: ParameterKind = ParameterKind.DEFAULT;\n\n    if (tn.skip(Token.CLOSEPAREN)) {\n      isSignature = true;\n      tn.discard(state);\n      parameters = [];\n\n    } else {\n      isSignature = false; // not yet known\n      do {\n        let kind = ParameterKind.DEFAULT;\n        if (tn.skip(Token.DOT_DOT_DOT)) {\n          isSignature = true;\n          tn.discard(state);\n          kind = ParameterKind.REST;\n        }\n        if (tn.skip(Token.THIS)) {\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let t = this.parseType(tn, false);\n            if (!t) return null;\n            if (t.kind != NodeKind.NAMEDTYPE) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                t.range\n              );\n              this.tryParseSignatureIsSignature = true;\n              return null;\n            }\n            thisType = <NamedTypeNode>t;\n          } else {\n            tn.reset(state);\n            this.tryParseSignatureIsSignature = false;\n            return null;\n          }\n        } else if (tn.skipIdentifier()) {\n          let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range(tn.tokenPos, tn.pos));\n          if (tn.skip(Token.QUESTION)) {\n            isSignature = true;\n            tn.discard(state);\n            if (kind == ParameterKind.REST) {\n              this.error(\n                DiagnosticCode.A_rest_parameter_cannot_be_optional,\n                tn.range()\n              ); // recoverable\n            } else {\n              kind = ParameterKind.OPTIONAL;\n            }\n          }\n          if (tn.skip(Token.COLON)) {\n            isSignature = true;\n            tn.discard(state);\n            let type = this.parseType(tn); // not suppressing errors because known\n            if (!type) {\n              this.tryParseSignatureIsSignature = isSignature;\n              return null;\n            }\n            let param = new ParameterNode();\n            param.parameterKind = kind;\n            param.name = name;\n            param.type = type;\n            if (!parameters) parameters = [ param ];\n            else parameters.push(param);\n          } else {\n            if (!isSignature) {\n              if (tn.peek() == Token.COMMA) {\n                isSignature = true;\n                tn.discard(state);\n              }\n            }\n            if (isSignature) {\n              let param = new ParameterNode();\n              param.parameterKind = kind;\n              param.name = name;\n              param.type = Node.createOmittedType(tn.range().atEnd);\n              if (!parameters) parameters = [ param ];\n              else parameters.push(param);\n              this.error(\n                DiagnosticCode.Type_expected,\n                param.type.range\n              ); // recoverable\n            } else if (!parameters) {\n              // on '(' Identifier ^',' we don't yet know whether this is a\n              // parenthesized or a function type, hence we have to delay the\n              // respective diagnostic until we know for sure.\n              firstParamNameNoType = name;\n              firstParamKind = kind;\n            }\n          }\n        } else {\n          if (isSignature) {\n            this.error(\n              DiagnosticCode.Identifier_expected,\n              tn.range()\n            );\n          } else {\n            tn.reset(state);\n          }\n          this.tryParseSignatureIsSignature = isSignature;\n          return null;\n        }\n      } while (tn.skip(Token.COMMA));\n      if (!tn.skip(Token.CLOSEPAREN)) {\n        if (isSignature) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        } else {\n          tn.reset(state);\n        }\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    }\n\n    var returnType: TypeNode | null;\n    if (tn.skip(Token.EQUALS_GREATERTHAN)) {\n      if (!isSignature) {\n        isSignature = true;\n        tn.discard(state);\n        if (firstParamNameNoType) { // now we know\n          let param = new ParameterNode();\n          param.parameterKind = firstParamKind;\n          param.name = firstParamNameNoType;\n          param.type = Node.createOmittedType(firstParamNameNoType.range.atEnd);\n          if (!parameters) parameters = [ param ];\n          else parameters.push(param);\n          this.error(\n            DiagnosticCode.Type_expected,\n            param.type.range\n          ); // recoverable\n        }\n      }\n      returnType = this.parseType(tn);\n      if (!returnType) {\n        this.tryParseSignatureIsSignature = isSignature;\n        return null;\n      }\n    } else {\n      if (isSignature) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=>\"\n        );\n      } else {\n        tn.reset(state);\n      }\n      this.tryParseSignatureIsSignature = isSignature;\n      return null;\n    }\n    this.tryParseSignatureIsSignature = true;\n    return Node.createFunctionType(\n      parameters || [],\n      returnType,\n      thisType,\n      false,\n      tn.range(startPos, tn.pos)\n    );\n  }\n\n  // statements\n\n  parseDecorator(\n    tn: Tokenizer\n  ): DecoratorNode | null {\n\n    // at '@': Identifier ('.' Identifier)* '(' Arguments\n\n    var startPos = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let name = tn.readIdentifier();\n      let expression: Expression = Node.createIdentifierExpression(name, tn.range(startPos, tn.pos));\n      while (tn.skip(Token.DOT)) {\n        if (tn.skipIdentifier()) {\n          name = tn.readIdentifier();\n          expression = Node.createPropertyAccessExpression(\n            expression,\n            Node.createIdentifierExpression(name, tn.range()),\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let args: Expression[] | null;\n      if (tn.skip(Token.OPENPAREN)) {\n        args = this.parseArguments(tn);\n        if (args) {\n          return Node.createDecorator(expression, args, tn.range(startPos, tn.pos));\n        }\n      } else {\n        return Node.createDecorator(expression, null, tn.range(startPos, tn.pos));\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVariable(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): VariableStatement | null {\n\n    // at ('const' | 'let' | 'var'): VariableDeclaration (',' VariableDeclaration)* ';'?\n\n    var members = new Array<VariableDeclaration>();\n    do {\n      let member = this.parseVariableDeclaration(tn, flags, decorators);\n      if (!member) return null;\n      members.push(<VariableDeclaration>member);\n    } while (tn.skip(Token.COMMA));\n\n    var ret = Node.createVariableStatement(members, decorators, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseVariableDeclaration(\n    tn: Tokenizer,\n    parentFlags: CommonFlags,\n    parentDecorators: DecoratorNode[] | null\n  ): VariableDeclaration | null {\n\n    // before: Identifier (':' Type)? ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (isIllegalVariableIdentifier(identifier.text)) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        identifier.range\n      );\n    }\n    var flags = parentFlags;\n    if (tn.skip(Token.EXCLAMATION)) {\n      flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n    }\n\n    var type: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      type = this.parseType(tn);\n    }\n\n    var initializer: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.Initializers_are_not_allowed_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n      initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!initializer) return null;\n    } else {\n      if (flags & CommonFlags.CONST) {\n        if (!(flags & CommonFlags.AMBIENT)) {\n          this.error(\n            DiagnosticCode._const_declarations_must_be_initialized,\n            identifier.range\n          ); // recoverable\n        }\n      } else if (!type) { // neither type nor initializer\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range(tn.pos)\n        ); // recoverable\n      }\n    }\n    var range = Range.join(identifier.range, tn.range());\n    if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && initializer) {\n      this.error(\n        DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n        range);\n    }\n    return Node.createVariableDeclaration(\n      identifier,\n      type,\n      initializer,\n      parentDecorators,\n      flags,\n      range\n    );\n  }\n\n  parseEnum(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): EnumDeclaration | null {\n\n    // at 'enum': Identifier '{' (EnumValueDeclaration (',' EnumValueDeclaration )*)? '}' ';'?\n\n    if (tn.next() != Token.IDENTIFIER) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    if (tn.next() != Token.OPENBRACE) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n    var members = new Array<EnumValueDeclaration>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let member = this.parseEnumValue(tn, CommonFlags.NONE);\n      if (!member) return null;\n      members.push(<EnumValueDeclaration>member);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEBRACE)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          return null;\n        }\n      }\n    }\n    var ret = Node.createEnumDeclaration(\n      identifier,\n      members,\n      decorators,\n      flags,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseEnumValue(\n    tn: Tokenizer,\n    parentFlags: CommonFlags\n  ): EnumValueDeclaration | null {\n\n    // before: Identifier ('=' Expression)?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n    var identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var value: Expression | null = null;\n    if (tn.skip(Token.EQUALS)) {\n      value = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!value) return null;\n    }\n    return Node.createEnumValueDeclaration(\n      identifier,\n      value,\n      parentFlags,\n      Range.join(identifier.range, tn.range())\n    );\n  }\n\n  parseReturn(\n    tn: Tokenizer\n  ): ReturnStatement | null {\n\n    // at 'return': Expression | (';' | '}' | ...'\\n')\n\n    var startPos = tn.tokenPos;\n    var expr: Expression | null = null;\n    if (\n      tn.peek(true) != Token.SEMICOLON &&\n      tn.nextToken != Token.CLOSEBRACE &&\n      !tn.nextTokenOnNewLine\n    ) {\n      if (!(expr = this.parseExpression(tn))) return null;\n    }\n\n    var ret = Node.createReturnStatement(expr, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTypeParameters(\n    tn: Tokenizer\n  ): TypeParameterNode[] | null {\n\n    // at '<': TypeParameter (',' TypeParameter)* '>'\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    var seenOptional = false;\n    while (!tn.skip(Token.GREATERTHAN)) {\n      let typeParameter = this.parseTypeParameter(tn);\n      if (!typeParameter) return null;\n      if (typeParameter.defaultType !== null) {\n        seenOptional = true;\n      } else if (seenOptional) {\n        this.error(\n          DiagnosticCode.Required_type_parameters_may_not_follow_optional_type_parameters,\n          typeParameter.range\n        );\n        typeParameter.defaultType = null;\n      }\n      if (!typeParameters) typeParameters = [ typeParameter ];\n      else typeParameters.push(typeParameter);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.GREATERTHAN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n      }\n    }\n    if (!(typeParameters && typeParameters.length)) {\n      this.error(\n        DiagnosticCode.Type_parameter_list_cannot_be_empty,\n        tn.range()\n      ); // recoverable\n    }\n    return typeParameters;\n  }\n\n  parseTypeParameter(\n    tn: Tokenizer\n  ): TypeParameterNode | null {\n\n    // before: Identifier ('extends' Type)? ('=' Type)?\n\n    if (tn.next() == Token.IDENTIFIER) {\n      let identifier = Node.createIdentifierExpression(\n        tn.readIdentifier(),\n        tn.range()\n      );\n      let extendsType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EXTENDS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        extendsType = <NamedTypeNode>t;\n      }\n      let defaultType: NamedTypeNode | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        let t = this.parseType(tn);\n        if (!t) return null;\n        if (t.kind != NodeKind.NAMEDTYPE) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            t.range\n          );\n          return null;\n        }\n        defaultType = <NamedTypeNode>t;\n      }\n      return Node.createTypeParameter(\n        identifier,\n        extendsType,\n        defaultType,\n        Range.join(identifier.range, tn.range())\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  private parseParametersThis: NamedTypeNode | null = null;\n\n  parseParameters(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode[] | null {\n\n    // at '(': (Parameter (',' Parameter)*)? ')'\n\n    var parameters = new Array<ParameterNode>();\n    var seenRest: ParameterNode | null = null;\n    var seenOptional = false;\n    var reportedRest = false;\n    var thisType: TypeNode | null = null;\n\n    // check if there is a leading `this` parameter\n    this.parseParametersThis = null;\n    if (tn.skip(Token.THIS)) {\n      if (tn.skip(Token.COLON)) {\n        thisType = this.parseType(tn); // reports\n        if (!thisType) return null;\n        if (thisType.kind == NodeKind.NAMEDTYPE) {\n          this.parseParametersThis = <NamedTypeNode>thisType;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            thisType.range\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n        return null;\n      }\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          return parameters;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let param = this.parseParameter(tn, isConstructor); // reports\n      if (!param) return null;\n      if (seenRest && !reportedRest) {\n        this.error(\n          DiagnosticCode.A_rest_parameter_must_be_last_in_a_parameter_list,\n          seenRest.name.range\n        );\n        reportedRest = true;\n      }\n      switch (param.parameterKind) {\n        default: {\n          if (seenOptional) {\n            this.error(\n              DiagnosticCode.A_required_parameter_cannot_follow_an_optional_parameter,\n              param.name.range\n            );\n          }\n          break;\n        }\n        case ParameterKind.OPTIONAL: {\n          seenOptional = true;\n          break;\n        }\n        case ParameterKind.REST: {\n          seenRest = param;\n          break;\n        }\n      }\n      parameters.push(param);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return parameters;\n  }\n\n  parseParameter(\n    tn: Tokenizer,\n    isConstructor: bool = false\n  ): ParameterNode | null {\n\n    // before: ('public' | 'private' | 'protected' | '...')? Identifier '?'? (':' Type)? ('=' Expression)?\n\n    var isRest = false;\n    var isOptional = false;\n    var startRange: Range | null = null;\n    var accessFlags: CommonFlags = CommonFlags.NONE;\n    if (isConstructor) {\n      if (tn.skip(Token.PUBLIC)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PUBLIC;\n      } else if (tn.skip(Token.PROTECTED)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PROTECTED;\n      } else if (tn.skip(Token.PRIVATE)) {\n        startRange = tn.range();\n        accessFlags |= CommonFlags.PRIVATE;\n      }\n      if (tn.peek() == Token.READONLY) {\n        let state = tn.mark();\n        tn.next();\n        if (tn.peek() != Token.COLON) { // modifier\n          tn.discard(state);\n          if (!startRange) startRange = tn.range();\n          accessFlags |= CommonFlags.READONLY;\n        } else { // identifier\n          tn.reset(state);\n        }\n      }\n    }\n    if (tn.skip(Token.DOT_DOT_DOT)) {\n      if (accessFlags) {\n        this.error(\n          DiagnosticCode.A_parameter_property_cannot_be_declared_using_a_rest_parameter,\n          tn.range()\n        );\n      } else {\n        startRange = tn.range();\n      }\n      isRest = true;\n    }\n    if (tn.skipIdentifier()) {\n      if (!isRest) startRange = tn.range();\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let type: TypeNode | null = null;\n      if (isOptional = tn.skip(Token.QUESTION)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_be_optional,\n            identifier.range\n          );\n        }\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        type = Node.createOmittedType(tn.range(tn.pos));\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        if (isRest) {\n          this.error(\n            DiagnosticCode.A_rest_parameter_cannot_have_an_initializer,\n            identifier.range\n          );\n        }\n        if (isOptional) {\n          this.error(\n            DiagnosticCode.Parameter_cannot_have_question_mark_and_initializer,\n            identifier.range\n          );\n        } else {\n          isOptional = true;\n        }\n        initializer = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (!initializer) return null;\n      }\n      let param = Node.createParameter(\n        identifier,\n        type,\n        initializer,\n        isRest\n          ? ParameterKind.REST\n          : isOptional\n            ? ParameterKind.OPTIONAL\n            : ParameterKind.DEFAULT,\n        Range.join(<Range>startRange, tn.range())\n      );\n      param.flags |= accessFlags;\n      return param;\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseFunction(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): FunctionDeclaration | null {\n\n    // at 'function':\n    //  Identifier\n    //  ('<' TypeParameters)?\n    //  '(' Parameters (':' Type)?\n    //  '{' Statement* '}'\n    //  ';'?\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range(tn.pos)\n      );\n      return null;\n    }\n\n    var name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    var signatureStart: i32 = -1;\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      signatureStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    if (!tn.skip(Token.OPENPAREN)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"(\"\n      );\n      return null;\n    }\n\n    if (signatureStart < 0) {\n      signatureStart = tn.tokenPos;\n    }\n\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n    var thisType = this.parseParametersThis;\n\n    var isSetter = (flags & CommonFlags.SET) != 0;\n    if (isSetter) {\n      if (parameters.length != 1) {\n        this.error(\n          DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n          name.range\n        ); // recoverable\n      }\n      if (parameters.length && parameters[0].initializer) {\n        this.error(\n          DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    if (flags & CommonFlags.GET) {\n      if (parameters.length) {\n        this.error(\n          DiagnosticCode.A_get_accessor_cannot_have_parameters,\n          name.range\n        ); // recoverable\n      }\n    }\n\n    var returnType: TypeNode | null = null;\n    if (tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn, true, isSetter);\n      if (!returnType) return null;\n    }\n\n    if (!returnType) {\n      returnType = Node.createOmittedType(\n        tn.range(tn.pos)\n      );\n      if (!isSetter) {\n        this.error(\n          DiagnosticCode.Type_expected,\n          returnType.range\n        ); // recoverable\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      thisType,\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      if (flags & CommonFlags.AMBIENT) {\n        this.error(\n          DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n          tn.range()\n        ); // recoverable\n      }\n\n      body = this.parseBlockStatement(tn, false);\n      if (!body) return null;\n    } else if (!(flags & CommonFlags.AMBIENT)) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        tn.range(tn.pos)\n      );\n    }\n\n    var ret = Node.createFunctionDeclaration(\n      name,\n      typeParameters,\n      signature,\n      body,\n      decorators,\n      flags,\n      ArrowKind.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseFunctionExpression(tn: Tokenizer): FunctionExpression | null {\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n    var arrowKind = ArrowKind.NONE;\n\n    // either at 'function':\n    //  Identifier?\n    //  '(' Parameters (':' Type)?\n    //  Statement\n\n    if (tn.token == Token.FUNCTION) {\n      if (tn.skipIdentifier()) {\n        name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      } else { // empty name\n        name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n      }\n      if (!tn.skip(Token.OPENPAREN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"(\"\n        );\n        return null;\n      }\n\n    // or at '(' of arrow function:\n    //  Parameters (':' Type)?\n    //  Statement\n\n    } else {\n      arrowKind = ArrowKind.ARROW_PARENTHESIZED;\n      assert(tn.token == Token.OPENPAREN);\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.tokenPos));\n    }\n\n    // TODO: type parameters? doesn't seem worth it.\n\n    var signatureStart = tn.pos;\n    var parameters = this.parseParameters(tn);\n    if (!parameters) return null;\n\n    return this.parseFunctionExpressionCommon(tn, name, parameters, arrowKind, startPos, signatureStart);\n  }\n\n  private parseFunctionExpressionCommon(\n    tn: Tokenizer,\n    name: IdentifierExpression,\n    parameters: ParameterNode[],\n    arrowKind: ArrowKind,\n    startPos: i32 = -1,\n    signatureStart: i32 = -1\n  ): FunctionExpression | null {\n    if (startPos < 0) startPos = name.range.start;\n    if (signatureStart < 0) signatureStart = startPos;\n\n    var returnType: TypeNode | null = null;\n    if (arrowKind != ArrowKind.ARROW_SINGLE && tn.skip(Token.COLON)) {\n      returnType = this.parseType(tn);\n      if (!returnType) return null;\n    } else {\n      returnType = Node.createOmittedType(tn.range(tn.pos));\n    }\n\n    if (arrowKind) {\n      if (!tn.skip(Token.EQUALS_GREATERTHAN)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"=>\"\n        );\n        return null;\n      }\n    }\n\n    var signature = Node.createFunctionType(\n      parameters,\n      returnType,\n      null, // TODO?\n      false,\n      tn.range(signatureStart, tn.pos)\n    );\n\n    var body: Statement | null = null;\n    if (arrowKind) {\n      if (tn.skip(Token.OPENBRACE)) {\n        body = this.parseBlockStatement(tn, false);\n      } else {\n        let bodyExpression = this.parseExpression(tn, Precedence.COMMA + 1);\n        if (bodyExpression) body = Node.createExpressionStatement(bodyExpression);\n      }\n    } else {\n      if (!tn.skip(Token.OPENBRACE)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(tn.pos), \"{\"\n        );\n        return null;\n      }\n      body = this.parseBlockStatement(tn, false);\n    }\n    if (!body) return null;\n\n    var declaration = Node.createFunctionDeclaration(\n      name,\n      null,\n      signature,\n      body,\n      null,\n      CommonFlags.NONE,\n      arrowKind,\n      tn.range(startPos, tn.pos)\n    );\n    return Node.createFunctionExpression(declaration);\n  }\n\n  parseClassOrInterface(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): ClassDeclaration | null {\n\n    // at ('class' | 'interface'):\n    //   Identifier\n    //   ('<' TypeParameters)?\n    //   ('extends' Type)?\n    //   ('implements' Type (',' Type)*)?\n    //   '{' ClassMember* '}'\n\n    var isInterface = tn.token == Token.INTERFACE;\n\n    if (!tn.skipIdentifier()) {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n      return null;\n    }\n\n    var identifier = Node.createIdentifierExpression(\n      tn.readIdentifier(),\n      tn.range()\n    );\n\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      flags |= CommonFlags.GENERIC;\n    }\n\n    var extendsType: NamedTypeNode | null = null;\n    if (tn.skip(Token.EXTENDS)) {\n      let t = this.parseType(tn);\n      if (!t) return null;\n      if (t.kind != NodeKind.NAMEDTYPE) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          t.range\n        );\n        return null;\n      }\n      extendsType = <NamedTypeNode>t;\n    }\n\n    var implementsTypes: NamedTypeNode[] | null = null;\n    if (tn.skip(Token.IMPLEMENTS)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode.Interface_declaration_cannot_have_implements_clause,\n          tn.range()\n        ); // recoverable\n      }\n      do {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        if (!isInterface) {\n          if (!implementsTypes) implementsTypes = [<NamedTypeNode>type];\n          else implementsTypes.push(<NamedTypeNode>type);\n        }\n      } while (tn.skip(Token.COMMA));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration: ClassDeclaration;\n    if (isInterface) {\n      assert(!implementsTypes);\n      declaration = Node.createInterfaceDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    } else {\n      declaration = Node.createClassDeclaration(\n        identifier,\n        typeParameters,\n        extendsType,\n        implementsTypes,\n        members,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n    }\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return declaration;\n  }\n\n  parseClassExpression(tn: Tokenizer): ClassExpression | null {\n\n    // at 'class': Identifier? '{' ... '}'\n\n    var startPos = tn.tokenPos;\n    var name: IdentifierExpression;\n\n    if (tn.skipIdentifier()) {\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    } else {\n      name = Node.createEmptyIdentifierExpression(tn.range(tn.pos));\n    }\n\n    if (!tn.skip(Token.OPENBRACE)) {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(tn.pos), \"{\"\n      );\n      return null;\n    }\n\n    var members = new Array<DeclarationStatement>();\n    var declaration = Node.createClassDeclaration(\n      name,\n      [],\n      null,\n      null,\n      members,\n      null,\n      CommonFlags.NONE,\n      tn.range(startPos, tn.pos)\n    );\n    if (!tn.skip(Token.CLOSEBRACE)) {\n      do {\n        let member = this.parseClassMember(tn, declaration);\n        if (member) members.push(<DeclarationStatement>member);\n        else {\n          this.skipStatement(tn);\n          if (tn.skip(Token.ENDOFFILE)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      } while (!tn.skip(Token.CLOSEBRACE));\n    }\n    declaration.range.end = tn.pos;\n    return Node.createClassExpression(declaration);\n  }\n\n  parseClassMember(\n    tn: Tokenizer,\n    parent: ClassDeclaration\n  ): DeclarationStatement | null {\n\n    // before:\n    //   ('public' | 'private' | 'protected')?\n    //   ('static' | 'abstract')?\n    //   'readonly'?\n    //   ('get' | 'set')?\n    //   Identifier ...\n\n    var startPos = tn.pos;\n    var isInterface = parent.kind == NodeKind.INTERFACEDECLARATION;\n\n    var decorators: DecoratorNode[] | null = null;\n    if (tn.skip(Token.AT)) {\n      do {\n        let decorator = this.parseDecorator(tn);\n        if (!decorator) break;\n        if (!decorators) decorators = [<DecoratorNode>decorator];\n        else decorators.push(<DecoratorNode>decorator);\n      } while (tn.skip(Token.AT));\n      if (decorators && isInterface) {\n        this.error(\n          DiagnosticCode.Decorators_are_not_valid_here,\n          Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n        );\n      }\n    }\n\n    // inherit ambient status\n    var flags = parent.flags & CommonFlags.AMBIENT;\n\n    // implemented methods are virtual\n    if (isInterface) flags |= CommonFlags.VIRTUAL;\n\n    var accessStart = 0;\n    var accessEnd = 0;\n    if (tn.skip(Token.PUBLIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"public\"\n        );\n      }\n      flags |= CommonFlags.PUBLIC;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PRIVATE)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"private\"\n        );\n      }\n      flags |= CommonFlags.PRIVATE;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    } else if (tn.skip(Token.PROTECTED)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"protected\"\n        );\n      }\n      flags |= CommonFlags.PROTECTED;\n      accessStart = tn.tokenPos;\n      accessEnd = tn.pos;\n    }\n\n    var staticStart = 0;\n    var staticEnd = 0;\n    var abstractStart = 0;\n    var abstractEnd = 0;\n    if (tn.skip(Token.STATIC)) {\n      if (isInterface) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(), \"static\"\n        );\n      }\n      flags |= CommonFlags.STATIC;\n      staticStart = tn.tokenPos;\n      staticEnd = tn.pos;\n    } else {\n      flags |= CommonFlags.INSTANCE;\n      if (tn.skip(Token.ABSTRACT)) {\n        if (isInterface) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(), \"abstract\"\n          );\n        }\n        flags |= CommonFlags.ABSTRACT;\n        abstractStart = tn.tokenPos;\n        abstractEnd = tn.pos;\n      }\n      if (parent.flags & CommonFlags.GENERIC) flags |= CommonFlags.GENERIC_CONTEXT;\n    }\n\n    var readonlyStart: i32 = 0;\n    var readonlyEnd: i32 = 0;\n    if (tn.peek() == Token.READONLY) {\n      let state = tn.mark();\n      tn.next();\n      if (tn.peek() != Token.COLON) { // modifier\n        tn.discard(state);\n        flags |= CommonFlags.READONLY;\n        readonlyStart = tn.tokenPos;\n        readonlyEnd = tn.pos;\n      } else { // identifier\n        tn.reset(state);\n      }\n    }\n\n    // check if accessor: ('get' | 'set') ^\\n Identifier\n    var state = tn.mark();\n    var isConstructor = false;\n    var isGetter = false;\n    var getStart: i32 = 0;\n    var getEnd: i32 = 0;\n    var isSetter = false;\n    var setStart: i32 = 0;\n    var setEnd: i32 = 0;\n    if (!isInterface) {\n      if (tn.skip(Token.GET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.GET;\n          isGetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.SET)) {\n        if (tn.peek(true, IdentifierHandling.PREFER) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n          flags |= CommonFlags.SET;\n          isSetter = true;\n          setStart = tn.tokenPos;\n          setEnd = tn.pos;\n          if (flags & CommonFlags.READONLY) {\n            this.error(\n              DiagnosticCode._0_modifier_cannot_be_used_here,\n              tn.range(readonlyStart, readonlyEnd), \"readonly\"\n            ); // recoverable\n          }\n        } else {\n          tn.reset(state);\n        }\n      } else if (tn.skip(Token.CONSTRUCTOR)) {\n        flags |= CommonFlags.CONSTRUCTOR;\n        isConstructor = true;\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n      }\n    }\n\n    var name: IdentifierExpression;\n    if (isConstructor) {\n      name = Node.createConstructorExpression(tn.range());\n    } else {\n      if (!(isGetter || isSetter) && tn.skip(Token.OPENBRACKET)) {\n        // TODO: also handle symbols, which might have some of these modifiers\n        if (flags & CommonFlags.PUBLIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"public\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PROTECTED) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        } else if (flags & CommonFlags.PRIVATE) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(accessStart, accessEnd), \"protected\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.STATIC) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(staticStart, staticEnd), \"static\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(abstractStart, abstractEnd), \"abstract\"\n          ); // recoverable\n        }\n        if (flags & CommonFlags.READONLY) {\n          this.error(\n            DiagnosticCode._0_modifier_cannot_be_used_here,\n            tn.range(readonlyStart, readonlyEnd), \"readonly\"\n          ); // recoverable\n        }\n        let retIndex = this.parseIndexSignatureDeclaration(tn, decorators);\n        if (!retIndex) return null;\n        tn.skip(Token.SEMICOLON);\n        return retIndex;\n      }\n      if (!tn.skipIdentifier()) {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          tn.range()\n        );\n        return null;\n      }\n      name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var typeParameters: TypeParameterNode[] | null = null;\n    if (tn.skip(Token.LESSTHAN)) {\n      let typeParametersStart = tn.tokenPos;\n      typeParameters = this.parseTypeParameters(tn);\n      if (!typeParameters) return null;\n      if (isConstructor) {\n        this.error(\n          DiagnosticCode.Type_parameters_cannot_appear_on_a_constructor_declaration,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else if (isGetter || isSetter) {\n        this.error(\n          DiagnosticCode.An_accessor_cannot_have_type_parameters,\n          tn.range(typeParametersStart, tn.pos)\n        ); // recoverable\n      } else {\n        flags |= CommonFlags.GENERIC;\n      }\n    }\n\n    // method: '(' Parameters (':' Type)? '{' Statement* '}' ';'?\n    if (tn.skip(Token.OPENPAREN)) {\n      let signatureStart = tn.tokenPos;\n      let parameters = this.parseParameters(tn, isConstructor);\n      if (!parameters) return null;\n      let thisType = this.parseParametersThis;\n      if (isConstructor) {\n        for (let i = 0, k = parameters.length; i < k; ++i) {\n          let parameter = parameters[i];\n          if (parameter.isAny(\n            CommonFlags.PUBLIC |\n            CommonFlags.PROTECTED |\n            CommonFlags.PRIVATE |\n            CommonFlags.READONLY\n          )) {\n            let implicitFieldDeclaration = Node.createFieldDeclaration(\n              parameter.name,\n              parameter.type,\n              null, // initialized via parameter\n              null,\n              parameter.flags | CommonFlags.INSTANCE,\n              parameter.range\n            );\n            implicitFieldDeclaration.parameterIndex = i;\n            parameter.implicitFieldDeclaration = implicitFieldDeclaration;\n            parent.members.push(implicitFieldDeclaration);\n          }\n        }\n      } else if (isGetter) {\n        if (parameters.length) {\n          this.error(\n            DiagnosticCode.A_get_accessor_cannot_have_parameters,\n            name.range\n          );\n        }\n      } else if (isSetter) {\n        if (parameters.length != 1) {\n          this.error(\n            DiagnosticCode.A_set_accessor_must_have_exactly_one_parameter,\n            name.range\n          );\n        }\n        if (parameters.length && parameters[0].initializer) {\n          this.error(\n            DiagnosticCode.A_set_accessor_parameter_cannot_have_an_initializer,\n            name.range\n          );\n        }\n      }\n\n      let returnType: TypeNode | null = null;\n      if (tn.skip(Token.COLON)) {\n        if (name.kind == NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_annotation_cannot_appear_on_a_constructor_declaration,\n            tn.range()\n          );\n        } else if (isSetter) {\n          this.error(\n            DiagnosticCode.A_set_accessor_cannot_have_a_return_type_annotation,\n            tn.range()\n          );\n        }\n        returnType = this.parseType(tn, name.kind == NodeKind.CONSTRUCTOR || isSetter);\n        if (!returnType) return null;\n      } else {\n        returnType = Node.createOmittedType(tn.range(tn.pos));\n        if (!isSetter && name.kind != NodeKind.CONSTRUCTOR) {\n          this.error(\n            DiagnosticCode.Type_expected,\n            returnType.range\n          ); // recoverable\n        }\n      }\n\n      let signature = Node.createFunctionType(\n        parameters,\n        returnType,\n        thisType,\n        false,\n        tn.range(signatureStart, tn.pos)\n      );\n\n      let body: Statement | null = null;\n      if (tn.skip(Token.OPENBRACE)) {\n        if (flags & CommonFlags.AMBIENT) {\n          this.error(\n            DiagnosticCode.An_implementation_cannot_be_declared_in_ambient_contexts,\n            tn.range()\n          ); // recoverable\n        } else if (flags & CommonFlags.ABSTRACT) {\n          this.error(\n            DiagnosticCode.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract,\n            tn.range(), name.text\n          ); // recoverable\n        }\n        body = this.parseBlockStatement(tn, false);\n        if (!body) return null;\n      } else if (!(flags & CommonFlags.AMBIENT) && !isInterface) {\n        this.error(\n          DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n          tn.range()\n        ); // recoverable\n      }\n\n      let retMethod = Node.createMethodDeclaration(\n        name,\n        typeParameters,\n        signature,\n        body,\n        decorators,\n        flags,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return retMethod;\n\n    } else if (isConstructor) {\n      this.error(\n        DiagnosticCode.Constructor_implementation_is_missing,\n        name.range\n      );\n\n    } else if (isGetter || isSetter) {\n      this.error(\n        DiagnosticCode.Function_implementation_is_missing_or_not_immediately_following_the_declaration,\n        name.range\n      );\n\n    // field: (':' Type)? ('=' Expression)? ';'?\n    } else {\n      if (flags & CommonFlags.ABSTRACT) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(abstractStart, abstractEnd), \"abstract\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.GET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(getStart, getEnd), \"get\"\n        ); // recoverable\n      }\n\n      if (flags & CommonFlags.SET) {\n        this.error(\n          DiagnosticCode._0_modifier_cannot_be_used_here,\n          tn.range(setStart, setEnd), \"set\"\n        ); // recoverable\n      }\n\n      let type: TypeNode | null = null;\n      if (tn.skip(Token.QUESTION)) {\n        this.error(\n          DiagnosticCode.Optional_properties_are_not_supported,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      if (tn.skip(Token.EXCLAMATION)) {\n        flags |= CommonFlags.DEFINITE_ASSIGNMENT;\n      }\n      if (tn.skip(Token.COLON)) {\n        type = this.parseType(tn);\n        if (!type) return null;\n      } else {\n        this.error(\n          DiagnosticCode.Type_expected,\n          tn.range()\n        ); // recoverable\n      }\n      let initializer: Expression | null = null;\n      if (tn.skip(Token.EQUALS)) {\n        initializer = this.parseExpression(tn);\n        if (!initializer) return null;\n      }\n      let range = tn.range(startPos, tn.pos);\n      if ((flags & CommonFlags.DEFINITE_ASSIGNMENT) && ((flags & CommonFlags.STATIC) || isInterface || initializer)) {\n        this.error(\n          DiagnosticCode.A_definite_assignment_assertion_is_not_permitted_in_this_context,\n          range\n        );\n      }\n      let retField = Node.createFieldDeclaration(\n        name,\n        type,\n        initializer,\n        decorators,\n        flags,\n        range\n      );\n      tn.skip(Token.SEMICOLON);\n      return retField;\n    }\n    return null;\n  }\n\n  parseIndexSignatureDeclaration(tn: Tokenizer, decorators: DecoratorNode[] | null): IndexSignatureDeclaration | null {\n\n    // at: '[': 'key' ':' Type ']' ':' Type\n\n    if (decorators && decorators.length) {\n      this.error(\n        DiagnosticCode.Decorators_are_not_valid_here,\n        Range.join(decorators[0].range, decorators[decorators.length - 1].range)\n      ); // recoverable\n    }\n\n    var start = tn.tokenPos;\n    if (tn.skipIdentifier()) {\n      let id = tn.readIdentifier();\n      if (id == \"key\") {\n        if (tn.skip(Token.COLON)) {\n          let keyType = this.parseType(tn);\n          if (!keyType) return null;\n          if (keyType.kind != NodeKind.NAMEDTYPE) {\n            this.error(\n              DiagnosticCode.Type_expected,\n              tn.range()\n            );\n            return null;\n          }\n          if (tn.skip(Token.CLOSEBRACKET)) {\n            if (tn.skip(Token.COLON)) {\n              let valueType = this.parseType(tn);\n              if (!valueType) return null;\n              return Node.createIndexSignatureDeclaration(<NamedTypeNode>keyType, valueType, tn.range(start, tn.pos));\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \":\"\n              );\n            }\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n          }\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \":\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"key\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseNamespace(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): NamespaceDeclaration | null {\n\n    // at 'namespace': Identifier '{' (Variable | Function)* '}'\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.OPENBRACE)) {\n        let members = new Array<Statement>();\n        let declaration = Node.createNamespaceDeclaration(\n          identifier,\n          members,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          let member = this.parseTopLevelStatement(tn, declaration);\n          if (member) members.push(member);\n          else {\n            this.skipStatement(tn);\n            if (tn.skip(Token.ENDOFFILE)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        declaration.range.end = tn.pos;\n        tn.skip(Token.SEMICOLON);\n        return declaration;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"{\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExport(\n    tn: Tokenizer,\n    startPos: i32,\n    isDeclare: bool\n  ): ExportStatement | null {\n\n    // at 'export': '{' ExportMember (',' ExportMember)* }' ('from' StringLiteral)? ';'?\n\n    var path: StringLiteralExpression | null = null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let members = new Array<ExportMember>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseExportMember(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      let ret = Node.createExportStatement(members, path, isDeclare, tn.range(startPos, tn.pos));\n      let internalPath = ret.internalPath;\n      if (internalPath !== null && !this.seenlog.has(internalPath)) {\n        this.dependees.set(internalPath, this.currentSource);\n        this.backlog.push(internalPath);\n        this.seenlog.add(internalPath);\n      }\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else if (tn.skip(Token.ASTERISK)) {\n      if (tn.skip(Token.FROM)) {\n        if (tn.skip(Token.STRINGLITERAL)) {\n          path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n          let ret = Node.createExportStatement(null, path, isDeclare, tn.range(startPos, tn.pos));\n          let internalPath = assert(ret.internalPath);\n          let source = tn.source;\n          if (!source.exportPaths) source.exportPaths = new Set();\n          source.exportPaths.add(internalPath);\n          if (!this.seenlog.has(internalPath)) {\n            this.dependees.set(internalPath, this.currentSource);\n            this.backlog.push(internalPath);\n          }\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.String_literal_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"from\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseExportMember(\n    tn: Tokenizer\n  ): ExportMember | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier()) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createExportMember(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportDefaultAlias(\n    tn: Tokenizer,\n    startPos: i32,\n    defaultStart: i32,\n    defaultEnd: i32\n  ): ExportStatement {\n\n    // at 'export' 'default': [Known-To-Be-]Identifier\n\n    var name = tn.readIdentifier();\n    var range = tn.range();\n    var ret = Node.createExportStatement([\n      Node.createExportMember(\n        Node.createIdentifierExpression(name, range),\n        Node.createIdentifierExpression(\"default\", tn.range(defaultStart, defaultEnd)),\n        range\n      )\n    ], null, false, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseImport(\n    tn: Tokenizer\n  ): ImportStatement | null {\n\n    // at 'import':\n    //  ('{' (ImportMember (',' ImportMember)* '}') | ('*' 'as' Identifier)?\n    //  'from' StringLiteral ';'?\n\n    var startPos = tn.tokenPos;\n    var members: ImportDeclaration[] | null = null;\n    var namespaceName: IdentifierExpression | null = null;\n    var skipFrom = false;\n    if (tn.skip(Token.OPENBRACE)) { // import { ... } from \"file\"\n      members = new Array();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        let member = this.parseImportDeclaration(tn);\n        if (!member) return null;\n        members.push(member);\n        if (!tn.skip(Token.COMMA)) {\n          if (tn.skip(Token.CLOSEBRACE)) {\n            break;\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"}\"\n            );\n            return null;\n          }\n        }\n      }\n    } else if (tn.skip(Token.ASTERISK)) { // import * from \"file\"\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          namespaceName = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"as\"\n        );\n        return null;\n      }\n    } else if (tn.skip(Token.IDENTIFIER, IdentifierHandling.PREFER)) { // import Name from \"file\"\n      let name = tn.readIdentifier();\n      let range = tn.range();\n      members = [\n        Node.createImportDeclaration(\n          Node.createIdentifierExpression(\"default\", range),\n          Node.createIdentifierExpression(name, range),\n          range\n        )\n      ];\n      if (tn.skip(Token.COMMA)) {\n        // TODO: default + star, default + members\n        this.error(\n          DiagnosticCode.Not_implemented,\n          tn.range()\n        );\n        return null;\n      }\n    } else { // import \"file\"\n      skipFrom = true;\n    }\n\n    if (skipFrom || tn.skip(Token.FROM)) {\n      if (tn.skip(Token.STRINGLITERAL)) {\n        let path = Node.createStringLiteralExpression(tn.readString(), tn.range());\n        let ret: ImportStatement;\n        if (namespaceName) {\n          assert(!members);\n          ret = Node.createImportStatementWithWildcard(namespaceName, path, tn.range(startPos, tn.pos));\n        } else {\n          ret = Node.createImportStatement(members, path, tn.range(startPos, tn.pos));\n        }\n        let internalPath = ret.internalPath;\n        if (!this.seenlog.has(internalPath)) {\n          this.dependees.set(internalPath, this.currentSource);\n          this.backlog.push(internalPath);\n        }\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode.String_literal_expected,\n          tn.range()\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"from\"\n      );\n    }\n    return null;\n  }\n\n  parseImportDeclaration(\n    tn: Tokenizer\n  ): ImportDeclaration | null {\n\n    // before: Identifier ('as' Identifier)?\n\n    if (tn.skipIdentifier(IdentifierHandling.ALWAYS)) {\n      let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let asIdentifier: IdentifierExpression | null = null;\n      if (tn.skip(Token.AS)) {\n        if (tn.skipIdentifier()) {\n          asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n      }\n      return Node.createImportDeclaration(\n        identifier,\n        asIdentifier,\n        asIdentifier\n          ? Range.join(identifier.range, asIdentifier.range)\n          : identifier.range\n      );\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseExportImport(\n    tn: Tokenizer,\n    startPos: i32\n  ): ExportImportStatement | null {\n\n    // at 'export' 'import': Identifier ('=' Identifier)? ';'?\n\n    if (tn.skipIdentifier()) {\n      let asIdentifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      if (tn.skip(Token.EQUALS)) {\n        if (tn.skipIdentifier()) {\n          let identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          let ret = Node.createExportImportStatement(identifier, asIdentifier, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseStatement(\n    tn: Tokenizer,\n    topLevel: bool = false\n  ): Statement | null {\n\n    // at previous token\n\n    var state = tn.mark();\n    var token = tn.next();\n    var statement: Statement | null = null;\n    switch (token) {\n      case Token.BREAK: {\n        statement = this.parseBreak(tn);\n        break;\n      }\n      case Token.CONST: {\n        statement = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n        break;\n      }\n      case Token.CONTINUE: {\n        statement = this.parseContinue(tn);\n        break;\n      }\n      case Token.DO: {\n        statement = this.parseDoStatement(tn);\n        break;\n      }\n      case Token.FOR: {\n        statement = this.parseForStatement(tn);\n        break;\n      }\n      case Token.IF: {\n        statement = this.parseIfStatement(tn);\n        break;\n      }\n      case Token.LET: {\n        statement = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n        break;\n      }\n      case Token.VAR: {\n        statement = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n        break;\n      }\n      case Token.OPENBRACE: {\n        statement = this.parseBlockStatement(tn, topLevel);\n        break;\n      }\n      case Token.RETURN: {\n        if (topLevel) {\n          this.error(\n            DiagnosticCode.A_return_statement_can_only_be_used_within_a_function_body,\n            tn.range()\n          ); // recoverable\n        }\n        statement = this.parseReturn(tn);\n        break;\n      }\n      case Token.SEMICOLON: {\n        return Node.createEmptyStatement(tn.range(tn.tokenPos));\n      }\n      case Token.SWITCH: {\n        statement = this.parseSwitchStatement(tn);\n        break;\n      }\n      case Token.THROW: {\n        statement = this.parseThrowStatement(tn);\n        break;\n      }\n      case Token.TRY: {\n        statement = this.parseTryStatement(tn);\n        break;\n      }\n      case Token.VOID: {\n        statement = this.parseVoidStatement(tn);\n        break;\n      }\n      case Token.WHILE: {\n        statement = this.parseWhileStatement(tn);\n        break;\n      }\n      case Token.TYPE: { // also identifier\n        if (tn.peek(false, IdentifierHandling.PREFER) == Token.IDENTIFIER) {\n          statement = this.parseTypeDeclaration(tn, CommonFlags.NONE, null, tn.tokenPos);\n          break;\n        }\n        // fall-through\n      }\n      default: {\n        tn.reset(state);\n        statement = this.parseExpressionStatement(tn);\n        break;\n      }\n    }\n    if (!statement) { // has been reported\n      tn.reset(state);\n      this.skipStatement(tn);\n    } else {\n      tn.discard(state);\n    }\n    return statement;\n  }\n\n  parseBlockStatement(\n    tn: Tokenizer,\n    topLevel: bool\n  ): BlockStatement | null {\n\n    // at '{': Statement* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    var statements = new Array<Statement>();\n    while (!tn.skip(Token.CLOSEBRACE)) {\n      let state = tn.mark();\n      let statement = this.parseStatement(tn, topLevel);\n      if (!statement) {\n        if (tn.token == Token.ENDOFFILE) return null;\n        tn.reset(state);\n        this.skipStatement(tn);\n      } else {\n        tn.discard(state);\n        statements.push(statement);\n      }\n    }\n    var ret = Node.createBlockStatement(statements, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseBreak(\n    tn: Tokenizer\n  ): BreakStatement | null {\n\n    // at 'break': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createBreakStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseContinue(\n    tn: Tokenizer\n  ): ContinueStatement | null {\n\n    // at 'continue': Identifier? ';'?\n\n    var identifier: IdentifierExpression | null = null;\n    if (tn.peek(true) == Token.IDENTIFIER && !tn.nextTokenOnNewLine) {\n      tn.next(IdentifierHandling.PREFER);\n      identifier = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n    }\n    var ret = Node.createContinueStatement(identifier, tn.range());\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseDoStatement(\n    tn: Tokenizer\n  ): DoStatement | null {\n\n    // at 'do': Statement 'while' '(' Expression ')' ';'?\n\n    var startPos = tn.tokenPos;\n    var statement = this.parseStatement(tn);\n    if (!statement) return null;\n\n    if (tn.skip(Token.WHILE)) {\n\n      if (tn.skip(Token.OPENPAREN)) {\n        let condition = this.parseExpression(tn);\n        if (!condition) return null;\n\n        if (tn.skip(Token.CLOSEPAREN)) {\n          let ret = Node.createDoStatement(<Statement>statement, <Expression>condition, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"(\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"while\"\n      );\n    }\n    return null;\n  }\n\n  parseExpressionStatement(\n    tn: Tokenizer\n  ): ExpressionStatement | null {\n\n    // at previous token\n\n    var expr = this.parseExpression(tn);\n    if (!expr) return null;\n\n    var ret = Node.createExpressionStatement(expr);\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseForStatement(\n    tn: Tokenizer\n  ): ForStatement | null {\n\n    // at 'for': '(' Statement? Expression? ';' Expression? ')' Statement\n\n    var startPos = tn.tokenPos;\n\n    if (tn.skip(Token.OPENPAREN)) {\n      let initializer: Statement | null = null;\n\n      if (tn.skip(Token.CONST)) {\n        initializer = this.parseVariable(tn, CommonFlags.CONST, null, tn.tokenPos);\n      } else if (tn.skip(Token.LET)) {\n        initializer = this.parseVariable(tn, CommonFlags.LET, null, tn.tokenPos);\n      } else if (tn.skip(Token.VAR)) {\n        initializer = this.parseVariable(tn, CommonFlags.NONE, null, tn.tokenPos);\n\n      } else if (!tn.skip(Token.SEMICOLON)) {\n        initializer = this.parseExpressionStatement(tn);\n        if (!initializer) return null;\n      }\n\n      if (tn.token == Token.SEMICOLON) {\n        let condition: ExpressionStatement | null = null;\n        if (!tn.skip(Token.SEMICOLON)) {\n          condition = this.parseExpressionStatement(tn);\n          if (!condition) return null;\n        }\n\n        if (tn.token == Token.SEMICOLON) {\n          let incrementor: Expression | null = null;\n          if (!tn.skip(Token.CLOSEPAREN)) {\n            incrementor = this.parseExpression(tn);\n            if (!incrementor) return null;\n\n            if (!tn.skip(Token.CLOSEPAREN)) {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \")\"\n              );\n              return null;\n            }\n          }\n\n          let statement = this.parseStatement(tn);\n          if (!statement) return null;\n\n          return Node.createForStatement(\n            initializer,\n            condition\n              ? condition.expression\n              : null,\n            incrementor,\n            statement,\n            tn.range(startPos, tn.pos)\n          );\n\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \";\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \";\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseIfStatement(\n    tn: Tokenizer\n  ): IfStatement | null {\n\n    // at 'if': '(' Expression ')' Statement ('else' Statement)?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let elseStatement: Statement | null = null;\n        if (tn.skip(Token.ELSE)) {\n          elseStatement = this.parseStatement(tn);\n          if (!elseStatement) return null;\n        }\n        return Node.createIfStatement(\n          condition,\n          statement,\n          elseStatement,\n          tn.range(startPos, tn.pos)\n        );\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchStatement(\n    tn: Tokenizer\n  ): SwitchStatement | null {\n\n    // at 'switch': '(' Expression ')' '{' SwitchCase* '}' ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let condition = this.parseExpression(tn);\n      if (!condition) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        if (tn.skip(Token.OPENBRACE)) {\n          let cases = new Array<SwitchCase>();\n          while (!tn.skip(Token.CLOSEBRACE)) {\n            let case_ = this.parseSwitchCase(tn);\n            if (!case_) return null;\n            cases.push(<SwitchCase>case_);\n          }\n          let ret = Node.createSwitchStatement(condition, cases, tn.range(startPos, tn.pos));\n          tn.skip(Token.SEMICOLON);\n          return ret;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n        }\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  parseSwitchCase(\n    tn: Tokenizer\n  ): SwitchCase | null {\n\n    var startPos = tn.tokenPos;\n    var statements: Statement[],\n        statement: Statement | null;\n\n    // 'case' Expression ':' Statement*\n\n    if (tn.skip(Token.CASE)) {\n      let label = this.parseExpression(tn);\n      if (!label) return null;\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(label, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n\n    // 'default' ':' Statement*\n\n    } else if (tn.skip(Token.DEFAULT)) {\n      if (tn.skip(Token.COLON)) {\n        statements = new Array<Statement>();\n        while (tn.peek() != Token.CASE && tn.nextToken != Token.DEFAULT && tn.nextToken != Token.CLOSEBRACE) {\n          statement = this.parseStatement(tn);\n          if (!statement) return null;\n          statements.push(statement);\n        }\n        return Node.createSwitchCase(null, statements, tn.range(startPos, tn.pos));\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \":\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._case_or_default_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseThrowStatement(\n    tn: Tokenizer\n  ): ThrowStatement | null {\n\n    // at 'throw': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn);\n    if (!expression) return null;\n    var ret = Node.createThrowStatement(<Expression>expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseTryStatement(\n    tn: Tokenizer\n  ): TryStatement | null {\n\n    // at 'try':\n    //   '{' Statement* '}'\n    //   ('catch' '(' VariableMember ')' '{' Statement* '}')?\n    //   ('finally' '{' Statement* '}'? ';'?\n\n    var startPos = tn.tokenPos;\n    var stmt: Statement | null;\n    if (tn.skip(Token.OPENBRACE)) {\n      let statements = new Array<Statement>();\n      while (!tn.skip(Token.CLOSEBRACE)) {\n        stmt = this.parseStatement(tn);\n        if (!stmt) return null;\n        statements.push(<Statement>stmt);\n      }\n      let catchVariable: IdentifierExpression | null = null;\n      let catchStatements: Statement[] | null = null;\n      let finallyStatements: Statement[] | null = null;\n      if (tn.skip(Token.CATCH)) {\n        if (!tn.skip(Token.OPENPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"(\"\n          );\n          return null;\n        }\n        if (!tn.skipIdentifier()) {\n          this.error(\n            DiagnosticCode.Identifier_expected,\n            tn.range()\n          );\n          return null;\n        }\n        catchVariable = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        catchStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          catchStatements.push(<Statement>stmt);\n        }\n      }\n      if (tn.skip(Token.FINALLY)) {\n        if (!tn.skip(Token.OPENBRACE)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"{\"\n          );\n          return null;\n        }\n        finallyStatements = [];\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          stmt = this.parseStatement(tn);\n          if (!stmt) return null;\n          finallyStatements.push(<Statement>stmt);\n        }\n      }\n      if (!(catchStatements || finallyStatements)) {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"catch\"\n        );\n        return null;\n      }\n      let ret = Node.createTryStatement(\n        statements,\n        catchVariable,\n        catchStatements,\n        finallyStatements,\n        tn.range(startPos, tn.pos)\n      );\n      tn.skip(Token.SEMICOLON);\n      return ret;\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"{\"\n      );\n    }\n    return null;\n  }\n\n  parseTypeDeclaration(\n    tn: Tokenizer,\n    flags: CommonFlags,\n    decorators: DecoratorNode[] | null,\n    startPos: i32\n  ): TypeDeclaration | null {\n\n    // at 'type': Identifier ('<' TypeParameters '>')? '=' Type ';'?\n\n    if (tn.skipIdentifier()) {\n      let name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n      let typeParameters: TypeParameterNode[] | null = null;\n      if (tn.skip(Token.LESSTHAN)) {\n        typeParameters = this.parseTypeParameters(tn);\n        if (!typeParameters) return null;\n        flags |= CommonFlags.GENERIC;\n      }\n      if (tn.skip(Token.EQUALS)) {\n        let type = this.parseType(tn);\n        if (!type) return null;\n        let ret = Node.createTypeDeclaration(\n          name,\n          typeParameters,\n          type,\n          decorators,\n          flags,\n          tn.range(startPos, tn.pos)\n        );\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \"=\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode.Identifier_expected,\n        tn.range()\n      );\n    }\n    return null;\n  }\n\n  parseVoidStatement(\n    tn: Tokenizer\n  ): VoidStatement | null {\n\n    // at 'void': Expression ';'?\n\n    var startPos = tn.tokenPos;\n    var expression = this.parseExpression(tn, Precedence.GROUPING);\n    if (!expression) return null;\n    var ret = Node.createVoidStatement(expression, tn.range(startPos, tn.pos));\n    tn.skip(Token.SEMICOLON);\n    return ret;\n  }\n\n  parseWhileStatement(\n    tn: Tokenizer\n  ): WhileStatement | null {\n\n    // at 'while': '(' Expression ')' Statement ';'?\n\n    var startPos = tn.tokenPos;\n    if (tn.skip(Token.OPENPAREN)) {\n      let expression = this.parseExpression(tn);\n      if (!expression) return null;\n      if (tn.skip(Token.CLOSEPAREN)) {\n        let statement = this.parseStatement(tn);\n        if (!statement) return null;\n        let ret = Node.createWhileStatement(expression, statement, tn.range(startPos, tn.pos));\n        tn.skip(Token.SEMICOLON);\n        return ret;\n      } else {\n        this.error(\n          DiagnosticCode._0_expected,\n          tn.range(), \")\"\n        );\n      }\n    } else {\n      this.error(\n        DiagnosticCode._0_expected,\n        tn.range(), \"(\"\n      );\n    }\n    return null;\n  }\n\n  // expressions\n  // see: http://www.engr.mun.ca/~theo/Misc/exp_parsing.htm#climbing\n\n  parseExpressionStart(\n    tn: Tokenizer\n  ): Expression | null {\n\n    var token = tn.next(IdentifierHandling.PREFER);\n    var startPos = tn.tokenPos;\n    var precedence = determinePrecedenceStart(token);\n    if (precedence != Precedence.NONE) {\n      let operand: Expression | null;\n\n      // TODO: SpreadExpression, YieldExpression (currently become unsupported UnaryPrefixExpressions)\n\n      // NewExpression\n      if (token == Token.NEW) {\n        operand = this.parseExpression(tn, Precedence.CALL);\n        if (!operand) return null;\n        if (operand.kind == NodeKind.CALL) {\n          return Node.createNewExpression(\n            (<CallExpression>operand).expression,\n            (<CallExpression>operand).typeArguments,\n            (<CallExpression>operand).arguments,\n            tn.range(startPos, tn.pos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.This_expression_is_not_constructable,\n            operand.range\n          );\n        }\n        return null;\n      } else {\n        operand = this.parseExpression(tn, precedence);\n        if (!operand) return null;\n      }\n\n      // UnaryPrefixExpression\n      if (token == Token.PLUS_PLUS || token == Token.MINUS_MINUS) {\n        if (\n          operand.kind != NodeKind.IDENTIFIER &&\n          operand.kind != NodeKind.ELEMENTACCESS &&\n          operand.kind != NodeKind.PROPERTYACCESS\n        ) {\n          this.error(\n            DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n            operand.range\n          );\n        }\n      }\n      return Node.createUnaryPrefixExpression(token, operand, tn.range(startPos, tn.pos));\n    }\n\n    var expr: Expression | null = null;\n    switch (token) {\n\n      case Token.NULL: return Node.createNullExpression(tn.range());\n      case Token.TRUE: return Node.createTrueExpression(tn.range());\n      case Token.FALSE: return Node.createFalseExpression(tn.range());\n\n      // ParenthesizedExpression\n      // FunctionExpression\n      case Token.OPENPAREN: {\n\n        // determine whether this is a function expression\n        if (tn.skip(Token.CLOSEPAREN)) { // must be a function expression (fast route)\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [],\n            ArrowKind.ARROW_PARENTHESIZED\n          );\n        }\n        let state = tn.mark();\n        let again = true;\n        do {\n          switch (tn.next(IdentifierHandling.PREFER)) {\n\n            // function expression\n            case Token.DOT_DOT_DOT: {\n              tn.reset(state);\n              return this.parseFunctionExpression(tn);\n            }\n            // can be both\n            case Token.IDENTIFIER: {\n              tn.readIdentifier();\n              switch (tn.next()) {\n\n                // if we got here, check for arrow\n                case Token.CLOSEPAREN: {\n                  if (\n                    !tn.skip(Token.COLON) &&\n                    !tn.skip(Token.EQUALS_GREATERTHAN)\n                  ) {\n                    again = false;\n                    break;\n                  }\n                  // fall-through\n                }\n                // function expression\n                case Token.COLON: {    // type annotation\n                  tn.reset(state);\n                  return this.parseFunctionExpression(tn);\n                }\n                // optional parameter or parenthesized\n                case Token.QUESTION: {\n                  if (\n                    tn.skip(Token.COLON) ||   // optional parameter with type\n                    tn.skip(Token.COMMA) ||   // optional parameter without type\n                    tn.skip(Token.CLOSEPAREN) // last optional parameter without type\n                  ) {\n                    tn.reset(state);\n                    return this.parseFunctionExpression(tn);\n                  }\n                  again = false; // parenthesized\n                  break;\n                  }\n                case Token.COMMA: {\n                  break; // continue\n                }\n                // parenthesized expression\n                // case Token.EQUALS:  // missing type annotation for simplicity\n                default: {\n                  again = false;\n                  break;\n                }\n              }\n              break;\n            }\n            // parenthesized expression\n            default: {\n              again = false;\n              break;\n            }\n          }\n        } while (again);\n        tn.reset(state);\n\n        // parse parenthesized\n        expr = this.parseExpression(tn);\n        if (!expr) return null;\n        if (!tn.skip(Token.CLOSEPAREN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n        return Node.createParenthesizedExpression(expr, tn.range(startPos, tn.pos));\n      }\n      // ArrayLiteralExpression\n      case Token.OPENBRACKET: {\n        let elementExpressions = new Array<Expression | null>();\n        while (!tn.skip(Token.CLOSEBRACKET)) {\n          if (tn.peek() == Token.COMMA) {\n            expr = null; // omitted\n          } else {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n          }\n          elementExpressions.push(expr);\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACKET)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"]\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createArrayLiteralExpression(elementExpressions, tn.range(startPos, tn.pos));\n      }\n      // ObjectLiteralExpression\n      case Token.OPENBRACE: {\n        let startPos = tn.tokenPos;\n        let names = new Array<IdentifierExpression>();\n        let values = new Array<Expression>();\n        let name: IdentifierExpression;\n        while (!tn.skip(Token.CLOSEBRACE)) {\n          if (!tn.skipIdentifier()) {\n            if (!tn.skip(Token.STRINGLITERAL)) {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                tn.range(),\n              );\n              return null;\n            }\n            name = Node.createIdentifierExpression(tn.readString(), tn.range());\n            name.isQuoted = true;\n          } else {\n            name = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n          }\n          names.push(name);\n          if (tn.skip(Token.COLON)) {\n            let value = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!value) return null;\n            values.push(value);\n          } else if (!name.isQuoted) {\n            values.push(name);\n          } else {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          if (!tn.skip(Token.COMMA)) {\n            if (tn.skip(Token.CLOSEBRACE)) {\n              break;\n            } else {\n              this.error(\n                DiagnosticCode._0_expected,\n                tn.range(), \"}\"\n              );\n              return null;\n            }\n          }\n        }\n        return Node.createObjectLiteralExpression(names, values, tn.range(startPos, tn.pos));\n      }\n      // AssertionExpression (unary prefix)\n      case Token.LESSTHAN: {\n        let toType = this.parseType(tn);\n        if (!toType) return null;\n        if (!tn.skip(Token.GREATERTHAN)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \">\"\n          );\n          return null;\n        }\n        expr = this.parseExpression(tn, Precedence.CALL);\n        if (!expr) return null;\n        return Node.createAssertionExpression(\n          AssertionKind.PREFIX,\n          expr,\n          toType,\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.IDENTIFIER: {\n        let identifierText = tn.readIdentifier();\n        if (identifierText == \"null\") return Node.createNullExpression(tn.range()); // special\n        let identifier = Node.createIdentifierExpression(identifierText, tn.range(startPos, tn.pos));\n        if (tn.peek(true) == Token.EQUALS_GREATERTHAN && !tn.nextTokenOnNewLine) {\n          return this.parseFunctionExpressionCommon(\n            tn,\n            Node.createEmptyIdentifierExpression(tn.range(startPos)),\n            [\n              Node.createParameter(\n                identifier,\n                Node.createOmittedType(identifier.range.atEnd),\n                null,\n                ParameterKind.DEFAULT,\n                identifier.range\n              )\n            ],\n            ArrowKind.ARROW_SINGLE,\n            startPos\n          );\n        }\n        return identifier;\n      }\n      case Token.THIS: {\n        return Node.createThisExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.CONSTRUCTOR: {\n        return Node.createConstructorExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.SUPER: {\n        if (tn.peek() != Token.DOT && tn.nextToken != Token.OPENPAREN) {\n          this.error(\n            DiagnosticCode._super_must_be_followed_by_an_argument_list_or_member_access,\n            tn.range()\n          );\n        }\n        return Node.createSuperExpression(tn.range(startPos, tn.pos));\n      }\n      case Token.STRINGLITERAL: {\n        return Node.createStringLiteralExpression(tn.readString(), tn.range(startPos, tn.pos));\n      }\n      case Token.INTEGERLITERAL: {\n        return Node.createIntegerLiteralExpression(tn.readInteger(), tn.range(startPos, tn.pos));\n      }\n      case Token.FLOATLITERAL: {\n        return Node.createFloatLiteralExpression(tn.readFloat(), tn.range(startPos, tn.pos));\n      }\n      // RegexpLiteralExpression\n      // note that this also continues on invalid ones so the surrounding AST remains intact\n      case Token.SLASH: {\n        let regexpPattern = tn.readRegexpPattern(); // also reports\n        if (!tn.skip(Token.SLASH)) {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"/\"\n          );\n          return null;\n        }\n        return Node.createRegexpLiteralExpression(\n          regexpPattern,\n          tn.readRegexpFlags(), // also reports\n          tn.range(startPos, tn.pos)\n        );\n      }\n      case Token.FUNCTION: {\n        return this.parseFunctionExpression(tn);\n      }\n      case Token.CLASS: {\n        return this.parseClassExpression(tn);\n      }\n      default: {\n        if (token == Token.ENDOFFILE) {\n          this.error(\n            DiagnosticCode.Unexpected_end_of_text,\n            tn.range(startPos)\n          );\n        } else {\n          this.error(\n            DiagnosticCode.Expression_expected,\n            tn.range()\n          );\n        }\n        return null;\n      }\n    }\n  }\n\n  tryParseTypeArgumentsBeforeArguments(\n    tn: Tokenizer\n  ): TypeNode[] | null {\n\n    // at '<': Type (',' Type)* '>' '('\n\n    var state = tn.mark();\n    if (!tn.skip(Token.LESSTHAN)) return null;\n    var typeArguments: TypeNode[] | null = null;\n    do {\n      if (tn.peek() === Token.GREATERTHAN) {\n        break;\n      }\n      let type = this.parseType(tn, true, true);\n      if (!type) {\n        tn.reset(state);\n        return null;\n      }\n      if (!typeArguments) typeArguments = [ type ];\n      else typeArguments.push(type);\n    } while (tn.skip(Token.COMMA));\n    if (tn.skip(Token.GREATERTHAN) && tn.skip(Token.OPENPAREN)) {\n      return typeArguments;\n    }\n    tn.reset(state);\n    return null;\n  }\n\n  parseArguments(\n    tn: Tokenizer\n  ): Expression[] | null {\n\n    // at '(': (Expression (',' Expression)*)? ')'\n\n    var args = new Array<Expression>();\n    while (!tn.skip(Token.CLOSEPAREN)) {\n      let expr = this.parseExpression(tn, Precedence.COMMA + 1);\n      if (!expr) return null;\n      args.push(expr);\n      if (!tn.skip(Token.COMMA)) {\n        if (tn.skip(Token.CLOSEPAREN)) {\n          break;\n        } else {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \")\"\n          );\n          return null;\n        }\n      }\n    }\n    return args;\n  }\n\n  parseExpression(\n    tn: Tokenizer,\n    precedence: Precedence = Precedence.COMMA\n  ): Expression | null {\n    assert(precedence != Precedence.NONE);\n\n    var expr = this.parseExpressionStart(tn);\n    if (!expr) return null;\n    expr = this.maybeParseCallExpression(tn, expr); // simple call like on an Identifier\n\n    var startPos = expr.range.start;\n    var token: Token;\n    var next: Expression | null = null;\n    var nextPrecedence: Precedence;\n    while (\n      (nextPrecedence = determinePrecedence(token = tn.peek())) >= precedence\n    ) { // precedence climbing\n      tn.next();\n      switch (token) {\n        // AssertionExpression\n        case Token.AS: {\n          let toType = this.parseType(tn); // reports\n          if (!toType) return null;\n          expr = Node.createAssertionExpression(\n            AssertionKind.AS,\n            expr,\n            toType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        case Token.EXCLAMATION: {\n          expr = Node.createAssertionExpression(\n            AssertionKind.NONNULL,\n            expr,\n            null,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // InstanceOfExpression\n        case Token.INSTANCEOF: {\n          let isType = this.parseType(tn); // reports\n          if (!isType) return null;\n          expr = Node.createInstanceOfExpression(\n            expr,\n            isType,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // ElementAccessExpression\n        case Token.OPENBRACKET: {\n          next = this.parseExpression(tn); // reports\n          if (!next) return null;\n          if (!tn.skip(Token.CLOSEBRACKET)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \"]\"\n            );\n            return null;\n          }\n          expr = Node.createElementAccessExpression(\n            expr,\n            next,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // UnaryPostfixExpression\n        case Token.PLUS_PLUS:\n        case Token.MINUS_MINUS: {\n          if (\n            expr.kind != NodeKind.IDENTIFIER &&\n            expr.kind != NodeKind.ELEMENTACCESS &&\n            expr.kind != NodeKind.PROPERTYACCESS\n          ) {\n            this.error(\n              DiagnosticCode.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_or_a_property_access,\n              expr.range\n            );\n          }\n          expr = Node.createUnaryPostfixExpression(\n            token,\n            expr,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // TernaryExpression\n        case Token.QUESTION: {\n          let ifThen = this.parseExpression(tn);\n          if (!ifThen) return null;\n          if (!tn.skip(Token.COLON)) {\n            this.error(\n              DiagnosticCode._0_expected,\n              tn.range(), \":\"\n            );\n            return null;\n          }\n          let ifElse = this.parseExpression(tn, precedence > Precedence.COMMA\n            ? Precedence.COMMA + 1\n            : Precedence.COMMA\n          );\n          if (!ifElse) return null;\n          expr = Node.createTernaryExpression(\n            expr,\n            ifThen,\n            ifElse,\n            tn.range(startPos, tn.pos)\n          );\n          break;\n        }\n        // CommaExpression\n        case Token.COMMA: {\n          let commaExprs: Expression[] = [ expr ];\n          do {\n            expr = this.parseExpression(tn, Precedence.COMMA + 1);\n            if (!expr) return null;\n            commaExprs.push(expr);\n          } while (tn.skip(Token.COMMA));\n          expr = Node.createCommaExpression(commaExprs, tn.range(startPos, tn.pos));\n          break;\n        }\n        default: {\n\n          // PropertyAccessExpression\n          if (token == Token.DOT) {\n            if (tn.skipIdentifier()) {\n              next = Node.createIdentifierExpression(tn.readIdentifier(), tn.range());\n            } else {\n              next = this.parseExpression(tn,\n                isRightAssociative(token)\n                  ? nextPrecedence\n                  : nextPrecedence + 1\n              );\n              if (!next) return null;\n            }\n            if (next.kind == NodeKind.IDENTIFIER) { // expr '.' Identifier\n              expr = Node.createPropertyAccessExpression(\n                expr,\n                <IdentifierExpression>next,\n                tn.range(startPos, tn.pos)\n              );\n            } else if (next.kind == NodeKind.CALL) { // expr '.' CallExpression\n              expr = this.joinPropertyCall(tn, startPos, expr, <CallExpression>next);\n              if (!expr) return null;\n            } else {\n              this.error(\n                DiagnosticCode.Identifier_expected,\n                next.range\n              );\n              return null;\n            }\n\n          // BinaryExpression\n          } else {\n            next = this.parseExpression(tn,\n              isRightAssociative(token)\n                ? nextPrecedence\n                : nextPrecedence + 1\n            );\n            if (!next) return null;\n            expr = Node.createBinaryExpression(token, expr, next, tn.range(startPos, tn.pos));\n          }\n          break;\n        }\n      }\n      expr = this.maybeParseCallExpression(tn, expr); // compound call like on an ElementAccess\n    }\n    return expr;\n  }\n\n  private joinPropertyCall(\n    tn: Tokenizer,\n    startPos: i32,\n    expr: Expression,\n    call: CallExpression\n  ): Expression | null {\n    var callee = call.expression;\n    switch (callee.kind) {\n      case NodeKind.IDENTIFIER: { // join property access and use as call target\n        call.expression = Node.createPropertyAccessExpression(\n          expr,\n          <IdentifierExpression>callee,\n          tn.range(startPos, tn.pos)\n        );\n        break;\n      }\n      case NodeKind.CALL: { // join call target und wrap the original call around it\n        let inner = this.joinPropertyCall(tn, startPos, expr, <CallExpression>callee);\n        if (!inner) return null;\n        call.expression = inner;\n        call.range = tn.range(startPos, tn.pos);\n        break;\n      }\n      default: {\n        this.error(\n          DiagnosticCode.Identifier_expected,\n          call.range\n        );\n        return null;\n      }\n    }\n    return call;\n  }\n\n  private maybeParseCallExpression(\n    tn: Tokenizer,\n    expr: Expression\n  ): Expression {\n    if (nodeIsCallable(expr.kind)) {\n      let typeArguments: TypeNode[] | null = null;\n      while (\n        tn.skip(Token.OPENPAREN)\n        ||\n        nodeIsGenericCallable(expr.kind) && (typeArguments = this.tryParseTypeArgumentsBeforeArguments(tn)) !== null\n      ) {\n        let args = this.parseArguments(tn);\n        if (!args) break;\n        expr = Node.createCallExpression( // is again callable\n          expr,\n          typeArguments,\n          args,\n          tn.range(expr.range.start, tn.pos)\n        );\n      }\n    }\n    return expr;\n  }\n\n  /** Skips over a statement on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipStatement(tn: Tokenizer): void {\n    tn.peek(true);\n    if (tn.nextTokenOnNewLine) tn.next(); // if reset() to the previous line\n    do {\n      let nextToken = tn.peek(true);\n      if (\n        nextToken == Token.ENDOFFILE ||   // next step should handle this\n        nextToken == Token.SEMICOLON      // end of the statement for sure\n      ) {\n        tn.next();\n        break;\n      }\n      if (tn.nextTokenOnNewLine) break;   // end of the statement maybe\n      switch (tn.next()) {\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n        case Token.OPENBRACE: {\n          this.skipBlock(tn);\n          break;\n        }\n      }\n    } while (true);\n  }\n\n  /** Skips over a block on errors in an attempt to reduce unnecessary diagnostic noise. */\n  skipBlock(tn: Tokenizer): void {\n    // at '{': ... '}'\n    var depth = 1;\n    var again = true;\n    do {\n      switch (tn.next()) {\n        case Token.ENDOFFILE: {\n          this.error(\n            DiagnosticCode._0_expected,\n            tn.range(), \"}\"\n          );\n          again = false;\n          break;\n        }\n        case Token.OPENBRACE: {\n          ++depth;\n          break;\n        }\n        case Token.CLOSEBRACE: {\n          --depth;\n          if (!depth) again = false;\n          break;\n        }\n        case Token.IDENTIFIER: {\n          tn.readIdentifier();\n          break;\n        }\n        case Token.STRINGLITERAL: {\n          tn.readString();\n          break;\n        }\n        case Token.INTEGERLITERAL: {\n          tn.readInteger();\n          break;\n        }\n        case Token.FLOATLITERAL: {\n          tn.readFloat();\n          break;\n        }\n      }\n    } while (again);\n  }\n}\n\n/** Operator precedence from least to largest. */\nexport const enum Precedence {\n  NONE,\n  COMMA,\n  SPREAD,\n  YIELD,\n  ASSIGNMENT,\n  CONDITIONAL,\n  LOGICAL_OR,\n  LOGICAL_AND,\n  BITWISE_OR,\n  BITWISE_XOR,\n  BITWISE_AND,\n  EQUALITY,\n  RELATIONAL,\n  SHIFT,\n  ADDITIVE,\n  MULTIPLICATIVE,\n  EXPONENTIATED,\n  UNARY_PREFIX,\n  UNARY_POSTFIX,\n  CALL,\n  MEMBERACCESS,\n  GROUPING\n}\n\n/** Determines the precedence of a starting token. */\nfunction determinePrecedenceStart(kind: Token): Precedence {\n  switch (kind) {\n    case Token.DOT_DOT_DOT: return Precedence.SPREAD;\n    case Token.YIELD: return Precedence.YIELD;\n    case Token.EXCLAMATION:\n    case Token.TILDE:\n    case Token.PLUS:\n    case Token.MINUS:\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS:\n    case Token.TYPEOF:\n    case Token.VOID:\n    case Token.DELETE: return Precedence.UNARY_PREFIX;\n    case Token.NEW: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines the precende of a non-starting token. */\nfunction determinePrecedence(kind: Token): Precedence {\n  switch (kind) {\n    case Token.COMMA: return Precedence.COMMA;\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS: return Precedence.ASSIGNMENT;\n    case Token.QUESTION: return Precedence.CONDITIONAL;\n    case Token.BAR_BAR: return Precedence.LOGICAL_OR;\n    case Token.AMPERSAND_AMPERSAND: return Precedence.LOGICAL_AND;\n    case Token.BAR: return Precedence.BITWISE_OR;\n    case Token.CARET: return Precedence.BITWISE_XOR;\n    case Token.AMPERSAND: return Precedence.BITWISE_AND;\n    case Token.EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS:\n    case Token.EQUALS_EQUALS_EQUALS:\n    case Token.EXCLAMATION_EQUALS_EQUALS: return Precedence.EQUALITY;\n    case Token.AS:\n    case Token.IN:\n    case Token.INSTANCEOF:\n    case Token.LESSTHAN:\n    case Token.GREATERTHAN:\n    case Token.LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_EQUALS: return Precedence.RELATIONAL;\n    case Token.LESSTHAN_LESSTHAN:\n    case Token.GREATERTHAN_GREATERTHAN:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN: return Precedence.SHIFT;\n    case Token.PLUS:\n    case Token.MINUS: return Precedence.ADDITIVE;\n    case Token.ASTERISK:\n    case Token.SLASH:\n    case Token.PERCENT: return Precedence.MULTIPLICATIVE;\n    case Token.ASTERISK_ASTERISK: return Precedence.EXPONENTIATED;\n    case Token.PLUS_PLUS:\n    case Token.MINUS_MINUS: return Precedence.UNARY_POSTFIX;\n    case Token.DOT:\n    case Token.NEW:\n    case Token.OPENBRACKET:\n    case Token.EXCLAMATION: return Precedence.MEMBERACCESS;\n  }\n  return Precedence.NONE;\n}\n\n/** Determines whether a non-starting token is right associative. */\nfunction isRightAssociative(kind: Token): bool {\n  switch (kind) {\n    case Token.EQUALS:\n    case Token.PLUS_EQUALS:\n    case Token.MINUS_EQUALS:\n    case Token.ASTERISK_ASTERISK_EQUALS:\n    case Token.ASTERISK_EQUALS:\n    case Token.SLASH_EQUALS:\n    case Token.PERCENT_EQUALS:\n    case Token.LESSTHAN_LESSTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.GREATERTHAN_GREATERTHAN_GREATERTHAN_EQUALS:\n    case Token.AMPERSAND_EQUALS:\n    case Token.CARET_EQUALS:\n    case Token.BAR_EQUALS:\n    case Token.QUESTION:\n    case Token.ASTERISK_ASTERISK: return true;\n    default: return false;\n  }\n}\n","/**\n * JavaScript glue code.\n * @module glue/js\n * @preferred\n *//***/\n\nimport \"./binaryen\"; // must be first so portable can pick up the memory implementation\nimport \"../../../std/portable/index\";\nimport \"./float\";\nimport \"./i64\";\n\nimport { Module } from \"../../module\";\n\nModule.prototype.toText = function(this: Module) {\n  // NOTE: Conversion to StackIR can yield conversion artifacts like sequences\n  // of unreachable statements not actually emitted by the compiler. Optimizing\n  // StackIR removes these again, but may also suppress useless code emitted by\n  // the compiler that's then no longer visible in tests. Both not ideal.\n  return binaryen.wrapModule(this.ref).emitStackIR(/* optimize-stack-ir */ true);\n};\n\nModule.prototype.toAsmjs = function(this: Module) {\n  return binaryen.wrapModule(this.ref).emitAsmjs();\n};\n","// Copy Binaryen exports to global scope\n\nconst binaryen = global.Binaryen || require(\"binaryen\");\nglobal.binaryen = binaryen;\n\nfor (var key in binaryen) {\n  if (key.startsWith(\"_Binaryen\") || key.startsWith(\"_Relooper\")) global[key] = binaryen[key];\n}\n\n// Utilize Binaryen's heap\n\nglobal.__memory_allocate = binaryen._malloc;\nglobal.__memory_free = binaryen._free;\nglobal.__memory_copy = binaryen._memmove;\nglobal.__store = function(ptr, val) { binaryen.HEAPU8[ptr] = val; };\nglobal.__load = function(ptr) { return binaryen.HEAPU8[ptr]; };\n","module.exports = __WEBPACK_EXTERNAL_MODULE__20__;","/** @module std/portable *//***/\n\nvar globalScope = typeof window !== \"undefined\" && window || typeof global !== \"undefined\" && global || self;\n\nglobalScope.ASC_TARGET = 2; // Target.JS\nglobalScope.ASC_NO_ASSERT = false;\nglobalScope.ASC_MEMORY_BASE = 0;\nglobalScope.ASC_OPTIMIZE_LEVEL = 3;\nglobalScope.ASC_SHRINK_LEVEL = 0;\nglobalScope.ASC_FEATURE_MUTABLE_GLOBAL = false;\nglobalScope.ASC_FEATURE_SIGN_EXTENSION = false;\nglobalScope.ASC_FEATURE_BULK_MEMORY = false;\nglobalScope.ASC_FEATURE_SIMD = false;\nglobalScope.ASC_FEATURE_THREADS = false;\n\nvar F64 = new Float64Array(1);\nvar U64 = new Uint32Array(F64.buffer);\n\nObject.defineProperties(\n  globalScope[\"i8\"] = function i8(value) { return value << 24 >> 24; }\n, {\n  \"MIN_VALUE\": { value: -128, writable: false },\n  \"MAX_VALUE\": { value:  127, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i16\"] = function i16(value) { return value << 16 >> 16; }\n, {\n  \"MIN_VALUE\": { value: -32768, writable: false },\n  \"MAX_VALUE\": { value:  32767, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"i32\"] = globalScope[\"isize\"] = function i32(value) { return value | 0; }\n, {\n  \"MIN_VALUE\": { value: -2147483648, writable: false },\n  \"MAX_VALUE\": { value:  2147483647, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u8\"] = function u8(value) { return value & 0xff; }\n, {\n  \"MIN_VALUE\": { value:   0, writable: false },\n  \"MAX_VALUE\": { value: 255, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u16\"] = function u16(value) { return value & 0xffff; }\n, {\n  \"MIN_VALUE\": { value:     0, writable: false },\n  \"MAX_VALUE\": { value: 65535, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"u32\"] = globalScope[\"usize\"] = function u32(value) { return value >>> 0; }\n, {\n  \"MIN_VALUE\": { value:          0, writable: false },\n  \"MAX_VALUE\": { value: 4294967295, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"bool\"] = function bool(value) { return !!value; }\n, {\n  \"MIN_VALUE\": { value: false, writable: false },\n  \"MAX_VALUE\": { value: true,  writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f32\"] = function f32(value) { return Math.fround(value); }\n, {\n  \"EPSILON\":   { value: Math.fround(1.1920929e-07), writable: false },\n  \"MIN_VALUE\": { value: Math.fround(1.4012985e-45), writable: false },\n  \"MAX_VALUE\": { value: Math.fround(3.4028235e+38), writable: false },\n  \"MIN_NORMAL_VALUE\":  { value:  Math.fround(1.17549435e-38), writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -16777215, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  16777215, writable: false }\n});\n\nObject.defineProperties(\n  globalScope[\"f64\"] = function f64(value) { return +value; }\n, {\n  \"EPSILON\":   { value: 2.2204460492503131e-16,  writable: false },\n  \"MIN_VALUE\": { value:                  5e-324, writable: false },\n  \"MAX_VALUE\": { value: 1.7976931348623157e+308, writable: false },\n  \"MIN_NORMAL_VALUE\":  { value: 2.2250738585072014e-308 , writable: false },\n  \"MIN_SAFE_INTEGER\":  { value: -9007199254740991, writable: false },\n  \"MAX_SAFE_INTEGER\":  { value:  9007199254740991, writable: false }\n});\n\nglobalScope[\"clz\"] = Math.clz32;\n\nglobalScope[\"ctz\"] = function ctz(value) {\n  var c = Math.clz32(value & -value);\n  return value ? 31 - c : c;\n};\n\nglobalScope[\"popcnt\"] = function popcnt(value) {\n  value -= value >>> 1 & 0x55555555;\n  value = (value & 0x33333333) + (value >>> 2 & 0x33333333);\n  return (((value + (value >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n};\n\nglobalScope[\"rotl\"] = function rotl(value, shift) {\n  shift &= 31;\n  return (value << shift) | (value >>> (32 - shift));\n};\n\nglobalScope[\"rotr\"] = function rotr(value, shift) {\n  shift &= 31;\n  return (value >>> shift) | (value << (32 - shift));\n};\n\nglobalScope[\"abs\"] = Math.abs;\n\nglobalScope[\"max\"] = Math.max;\n\nglobalScope[\"min\"] = Math.min;\n\nglobalScope[\"ceil\"] = Math.ceil;\n\nglobalScope[\"floor\"] = Math.floor;\n\n// Adopt code from https://github.com/rfk/wasm-polyfill\nglobalScope[\"nearest\"] = function nearest(value) {\n  if (Math.abs(value - Math.trunc(value)) === 0.5) {\n    return 2.0 * Math.round(value * 0.5);\n  }\n  return Math.round(value);\n};\n\nglobalScope[\"select\"] = function select(ifTrue, ifFalse, condition) {\n  return condition ? ifTrue : ifFalse;\n};\n\nglobalScope[\"sqrt\"] = Math.sqrt;\n\nglobalScope[\"trunc\"] = Math.trunc;\n\nglobalScope[\"copysign\"] = function copysign(x, y) {\n  return Math.abs(x) * Math.sign(y);\n};\n\nglobalScope[\"bswap\"] = function bswap(value) {\n  var a = value >> 8 & 0x00FF00FF;\n  var b = (value & 0x00FF00FF) << 8;\n  value = a | b;\n  a = value >> 16 & 0x0000FFFF;\n  b = (value & 0x0000FFFF) << 16;\n  return a | b;\n};\n\nglobalScope[\"bswap16\"] = function bswap16(value) {\n  return ((value << 8) & 0xFF00) | ((value >> 8) & 0x00FF) | (value & 0xFFFF0000);\n};\n\nfunction UnreachableError() {\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, UnreachableError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nUnreachableError.prototype = Object.create(Error.prototype);\nUnreachableError.prototype.name = \"UnreachableError\";\nUnreachableError.prototype.message = \"unreachable\";\n\nglobalScope[\"unreachable\"] = function unreachable() {\n  throw new UnreachableError();\n};\n\nfunction AssertionError(message) {\n  this.message = message || \"assertion failed\";\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, AssertionError);\n  } else {\n    this.stack = this.name + \": \" + this.message + \"\\n\" + new Error().stack;\n  }\n}\nAssertionError.prototype = Object.create(Error.prototype);\nAssertionError.prototype.name = \"AssertionError\";\n\nglobalScope[\"assert\"] = function assert(isTrueish, message) {\n  if (isTrueish) return isTrueish;\n  throw new AssertionError(message);\n};\n\nglobalScope[\"changetype\"] = function changetype(value) {\n  return value;\n};\n\nString[\"fromCharCodes\"] = function fromCharCodes(arr) {\n  return String.fromCharCode.apply(String, arr);\n};\n\nString[\"fromCodePoints\"] = function fromCodePoints(arr) {\n  return String.fromCodePoint.apply(String, arr);\n};\n\nif (!String.prototype.replaceAll) {\n  Object.defineProperty(String.prototype, \"replaceAll\", {\n    value: function replaceAll(search, replacment) {\n      var res = this.split(search).join(replacment);\n      if (!search.length) res = replacment + res + replacment;\n      return res;\n    }\n  });\n}\n\nfunction defaultComparator(a, b) {\n  if (a === b) {\n    if (a !== 0) return 0;\n    a = 1 / a, b = 1 / b;\n  } else {\n    var nanA = a != a, nanB = b != b;\n    if (nanA | nanB) return nanA - nanB;\n    if (a == null) a = String(a);\n    if (b == null) b = String(b);\n  }\n  return a > b ? 1 : -1;\n}\n\nconst arraySort = Array.prototype.sort;\nArray.prototype.sort = function sort(comparator) {\n  return arraySort.call(this, comparator || defaultComparator);\n};\n\nglobalScope[\"isInteger\"] = Number.isInteger;\n\nglobalScope[\"isFloat\"] = function isFloat(arg) {\n  return typeof arg === \"number\";\n};\n\nglobalScope[\"isNullable\"] = function isNullable(arg) {\n  return true;\n}\n\nglobalScope[\"isReference\"] = function isReference(arg) {\n  return typeof arg === \"object\" || typeof arg === \"string\";\n};\n\nglobalScope[\"isFunction\"] = function isFunction(arg) {\n  return typeof arg === \"function\";\n}\n\nglobalScope[\"isString\"] = function isString(arg) {\n  return typeof arg === \"string\" || arg instanceof String;\n};\n\nglobalScope[\"isArray\"] = Array.isArray;\nglobalScope[\"isArrayLike\"] = function isArrayLike(expr) {\n  return expr\n    && typeof expr === 'object'\n    && typeof expr.length === 'number'\n    && expr.length >= 0\n    && Math.trunc(expr.length) === expr.length;\n};\n\nglobalScope[\"isDefined\"] = function isDefined(expr) {\n  return typeof expr !== \"undefined\";\n}\n\nglobalScope[\"isConstant\"] = function isConstant(expr) {\n  return false;\n};\n\nglobalScope[\"unchecked\"] = function unchecked(expr) {\n  return expr;\n};\n\nglobalScope[\"fmod\"] = function fmod(x, y) {\n  return x % y;\n};\n\nglobalScope[\"fmodf\"] = function fmodf(x, y) {\n  return Math.fround(x % y);\n};\n\nglobalScope[\"JSMath\"] = Math;\n\nObject.defineProperties(globalScope[\"JSMath\"], {\n  sincos_sin: { value: 0.0, writable: true },\n  sincos_cos: { value: 0.0, writable: true },\n  signbit: {\n    value: function signbit(x) {\n      F64[0] = x; return Boolean((U64[1] >>> 31) & (x == x));\n    }\n  },\n  sincos: {\n    value: function sincos(x) {\n      this.sincos_sin = Math.sin(x);\n      this.sincos_cos = Math.cos(x);\n    }\n  }\n});\n\nglobalScope[\"memory\"] = (() => {\n  var HEAP = new Uint8Array(0);\n  var HEAP_OFFSET = 0;\n  return {\n    allocate: globalScope[\"__memory_allocate\"] || function allocate(size) {\n      if (!(size >>>= 0)) return 0;\n      if (HEAP_OFFSET + size > HEAP.length) {\n        var oldHeap = HEAP;\n        HEAP = new Uint8Array(Math.max(65536, HEAP.length + size, HEAP.length * 2));\n        HEAP.set(oldHeap);\n      }\n      var ptr = HEAP_OFFSET;\n      if ((HEAP_OFFSET += size) & 7) HEAP_OFFSET = (HEAP_OFFSET | 7) + 1;\n      return ptr;\n    },\n    fill: globalScope[\"__memory_fill\"] || function fill(dest, value, size) {\n      HEAP.fill(value, dest, dest + size);\n    },\n    free: globalScope[\"__memory_free\"] || function free(ptr) { },\n    copy: globalScope[\"__memory_copy\"] || function copy(dest, src, size) {\n      HEAP.copyWithin(dest, src, src + size);\n    },\n    reset: globalScope[\"__memory_reset\"] || function reset() {\n      HEAP = new Uint8Array(0);\n      HEAP_OFFSET = 0;\n    }\n  };\n})();\n\nglobalScope[\"store\"] = globalScope[\"__store\"] || function store(ptr, value, offset) {\n  HEAP[(ptr | 0) + (offset | 0)] = value;\n};\n\nglobalScope[\"load\"] = globalScope[\"__load\"] || function load(ptr, offset) {\n  return HEAP[(ptr | 0) + (offset | 0)];\n};\n\nglobalScope[\"unmanaged\"] = function() {};\n","const F64 = new Float64Array(1);\nconst F32 = new Float32Array(F64.buffer);\nconst I32 = new Int32Array(F64.buffer);\n\nglobal.f32_as_i32 = function(value) {\n  F32[0] = value;\n  return I32[0];\n};\n\nglobal.i32_as_f32 = function(value) {\n  I32[0] = value;\n  return F32[0];\n};\n\nglobal.f64_as_i64 = function(value) {\n  F64[0] = value;\n  return i64_new(I32[0], I32[1]);\n};\n\nglobal.i64_as_f64 = function(value) {\n  I32[0] = i64_low(value);\n  I32[1] = i64_high(value);\n  return F64[0];\n};\n","const Long = global.Long || require(\"long\");\n\nglobal.i64_zero = Long.ZERO;\n\nglobal.i64_one = Long.ONE;\n\nglobal.i64_new = function(lo, hi) {\n  return Long.fromBits(lo, hi);\n};\n\nglobal.i64_low = function(value) {\n  return value.low;\n};\n\nglobal.i64_high = function(value) {\n  return value.high;\n};\n\nglobal.i64_add = function(left, right) {\n  return left.add(right);\n};\n\nglobal.i64_sub = function(left, right) {\n  return left.sub(right);\n};\n\nglobal.i64_mul = function(left, right) {\n  return left.mul(right);\n};\n\nglobal.i64_div = function(left, right) {\n  return left.div(right);\n};\n\nglobal.i64_div_u = function(left, right) {\n  return left.toUnsigned().div(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_rem = function(left, right) {\n  return left.mod(right);\n};\n\nglobal.i64_rem_u = function(left, right) {\n  return left.toUnsigned().mod(right.toUnsigned()).toSigned();\n};\n\nglobal.i64_and = function(left, right) {\n  return left.and(right);\n};\n\nglobal.i64_or = function(left, right) {\n  return left.or(right);\n};\n\nglobal.i64_xor = function(left, right) {\n  return left.xor(right);\n};\n\nglobal.i64_shl = function(left, right) {\n  return left.shl(right);\n};\n\nglobal.i64_shr = function(left, right) {\n  return left.shr(right);\n};\n\nglobal.i64_shr_u = function(left, right) {\n  return left.shru(right);\n};\n\nglobal.i64_not = function(value) {\n  return value.not();\n};\n\nglobal.i64_eq = function(left, right) {\n  return left.eq(right);\n};\n\nglobal.i64_ne = function(left, right) {\n  return left.ne(right);\n};\n\nglobal.i64_align = function(value, alignment) {\n  assert(alignment && (alignment & (alignment - 1)) == 0);\n  var mask = Long.fromInt(alignment - 1);\n  return value.add(mask).and(mask.not());\n};\n\nglobal.i64_is_i8 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i8.MAX_VALUE)\n      || value.high === -1 && (value.low >= i8.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i16 = function(value) {\n  return value.high === 0 && (value.low >= 0 && value.low <= i16.MAX_VALUE)\n      || value.high === -1 && (value.low >= i16.MIN_VALUE && value.low < 0);\n};\n\nglobal.i64_is_i32 = function(value) {\n  return (value.high === 0 && value.low >= 0)\n      || (value.high === -1 && value.low < 0);\n};\n\nglobal.i64_is_u8 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u8.MAX_VALUE;\n};\n\nglobal.i64_is_u16 = function(value) {\n  return value.high === 0 && value.low >= 0 && value.low <= u16.MAX_VALUE;\n};\n\nglobal.i64_is_u32 = function(value) {\n  return value.high === 0;\n};\n\nglobal.i64_is_bool = function(value) {\n  return value.high === 0 && (value.low === 0 || value.low === 1);\n};\n\nconst minSafeF32 = Long.fromNumber(f32.MIN_SAFE_INTEGER);\nconst maxSafeF32 = Long.fromNumber(f32.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f32 = function(value) {\n  return value.gte(minSafeF32) && value.lte(maxSafeF32);\n};\n\nconst minSafeF64 = Long.fromNumber(f64.MIN_SAFE_INTEGER);\nconst maxSafeF64 = Long.fromNumber(f64.MAX_SAFE_INTEGER);\n\nglobal.i64_is_f64 = function(value) {\n  return value.gte(minSafeF64) && value.lte(maxSafeF64);\n};\n\nglobal.i64_to_f32 = function(value) {\n  return global.Math.fround(value.toNumber());\n};\n\nglobal.i64_to_f64 = function(value) {\n  return value.toNumber();\n};\n\nglobal.i64_to_string = function(value, unsigned) {\n  return (unsigned ? value.toUnsigned() : value).toString(10);\n};\n","module.exports = Long;\r\n\r\n/**\r\n * wasm optimizations, to do native i64 multiplication and divide\r\n */\r\nvar wasm = null;\r\n\r\ntry {\r\n  wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\r\n    0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\r\n  ])), {}).exports;\r\n} catch (e) {\r\n  // no wasm support :(\r\n}\r\n\r\n/**\r\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\r\n *  See the from* functions below for more convenient ways of constructing Longs.\r\n * @exports Long\r\n * @class A Long class for representing a 64 bit two's-complement integer value.\r\n * @param {number} low The low (signed) 32 bits of the long\r\n * @param {number} high The high (signed) 32 bits of the long\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @constructor\r\n */\r\nfunction Long(low, high, unsigned) {\r\n\r\n    /**\r\n     * The low 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.low = low | 0;\r\n\r\n    /**\r\n     * The high 32 bits as a signed value.\r\n     * @type {number}\r\n     */\r\n    this.high = high | 0;\r\n\r\n    /**\r\n     * Whether unsigned or not.\r\n     * @type {boolean}\r\n     */\r\n    this.unsigned = !!unsigned;\r\n}\r\n\r\n// The internal representation of a long is the two given signed, 32-bit values.\r\n// We use 32-bit pieces because these are the size of integers on which\r\n// Javascript performs bit-operations.  For operations like addition and\r\n// multiplication, we split each number into 16 bit pieces, which can easily be\r\n// multiplied within Javascript's floating-point representation without overflow\r\n// or change in sign.\r\n//\r\n// In the algorithms below, we frequently reduce the negative case to the\r\n// positive case by negating the input(s) and then post-processing the result.\r\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\r\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\r\n// a positive number, it overflows back into a negative).  Not handling this\r\n// case would often result in infinite recursion.\r\n//\r\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\r\n// methods on which they depend.\r\n\r\n/**\r\n * An indicator used to reliably determine if an object is a Long or not.\r\n * @type {boolean}\r\n * @const\r\n * @private\r\n */\r\nLong.prototype.__isLong__;\r\n\r\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\r\n\r\n/**\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n * @inner\r\n */\r\nfunction isLong(obj) {\r\n    return (obj && obj[\"__isLong__\"]) === true;\r\n}\r\n\r\n/**\r\n * Tests if the specified object is a Long.\r\n * @function\r\n * @param {*} obj Object\r\n * @returns {boolean}\r\n */\r\nLong.isLong = isLong;\r\n\r\n/**\r\n * A cache of the Long representations of small integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar INT_CACHE = {};\r\n\r\n/**\r\n * A cache of the Long representations of small unsigned integer values.\r\n * @type {!Object}\r\n * @inner\r\n */\r\nvar UINT_CACHE = {};\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromInt(value, unsigned) {\r\n    var obj, cachedObj, cache;\r\n    if (unsigned) {\r\n        value >>>= 0;\r\n        if (cache = (0 <= value && value < 256)) {\r\n            cachedObj = UINT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\r\n        if (cache)\r\n            UINT_CACHE[value] = obj;\r\n        return obj;\r\n    } else {\r\n        value |= 0;\r\n        if (cache = (-128 <= value && value < 128)) {\r\n            cachedObj = INT_CACHE[value];\r\n            if (cachedObj)\r\n                return cachedObj;\r\n        }\r\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\r\n        if (cache)\r\n            INT_CACHE[value] = obj;\r\n        return obj;\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given 32 bit integer value.\r\n * @function\r\n * @param {number} value The 32 bit integer in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromInt = fromInt;\r\n\r\n/**\r\n * @param {number} value\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromNumber(value, unsigned) {\r\n    if (isNaN(value))\r\n        return unsigned ? UZERO : ZERO;\r\n    if (unsigned) {\r\n        if (value < 0)\r\n            return UZERO;\r\n        if (value >= TWO_PWR_64_DBL)\r\n            return MAX_UNSIGNED_VALUE;\r\n    } else {\r\n        if (value <= -TWO_PWR_63_DBL)\r\n            return MIN_VALUE;\r\n        if (value + 1 >= TWO_PWR_63_DBL)\r\n            return MAX_VALUE;\r\n    }\r\n    if (value < 0)\r\n        return fromNumber(-value, unsigned).neg();\r\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\r\n * @function\r\n * @param {number} value The number in question\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromNumber = fromNumber;\r\n\r\n/**\r\n * @param {number} lowBits\r\n * @param {number} highBits\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromBits(lowBits, highBits, unsigned) {\r\n    return new Long(lowBits, highBits, unsigned);\r\n}\r\n\r\n/**\r\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\r\n *  assumed to use 32 bits.\r\n * @function\r\n * @param {number} lowBits The low 32 bits\r\n * @param {number} highBits The high 32 bits\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromBits = fromBits;\r\n\r\n/**\r\n * @function\r\n * @param {number} base\r\n * @param {number} exponent\r\n * @returns {number}\r\n * @inner\r\n */\r\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\r\n\r\n/**\r\n * @param {string} str\r\n * @param {(boolean|number)=} unsigned\r\n * @param {number=} radix\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromString(str, unsigned, radix) {\r\n    if (str.length === 0)\r\n        throw Error('empty string');\r\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\r\n        return ZERO;\r\n    if (typeof unsigned === 'number') {\r\n        // For goog.math.long compatibility\r\n        radix = unsigned,\r\n        unsigned = false;\r\n    } else {\r\n        unsigned = !! unsigned;\r\n    }\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n\r\n    var p;\r\n    if ((p = str.indexOf('-')) > 0)\r\n        throw Error('interior hyphen');\r\n    else if (p === 0) {\r\n        return fromString(str.substring(1), unsigned, radix).neg();\r\n    }\r\n\r\n    // Do several (8) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\r\n\r\n    var result = ZERO;\r\n    for (var i = 0; i < str.length; i += 8) {\r\n        var size = Math.min(8, str.length - i),\r\n            value = parseInt(str.substring(i, i + size), radix);\r\n        if (size < 8) {\r\n            var power = fromNumber(pow_dbl(radix, size));\r\n            result = result.mul(power).add(fromNumber(value));\r\n        } else {\r\n            result = result.mul(radixToPower);\r\n            result = result.add(fromNumber(value));\r\n        }\r\n    }\r\n    result.unsigned = unsigned;\r\n    return result;\r\n}\r\n\r\n/**\r\n * Returns a Long representation of the given string, written using the specified radix.\r\n * @function\r\n * @param {string} str The textual representation of the Long\r\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\r\n * @returns {!Long} The corresponding Long value\r\n */\r\nLong.fromString = fromString;\r\n\r\n/**\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\r\n * @param {boolean=} unsigned\r\n * @returns {!Long}\r\n * @inner\r\n */\r\nfunction fromValue(val, unsigned) {\r\n    if (typeof val === 'number')\r\n        return fromNumber(val, unsigned);\r\n    if (typeof val === 'string')\r\n        return fromString(val, unsigned);\r\n    // Throws for non-objects, converts non-instanceof Long:\r\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\r\n}\r\n\r\n/**\r\n * Converts the specified value to a Long using the appropriate from* function for its type.\r\n * @function\r\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {!Long}\r\n */\r\nLong.fromValue = fromValue;\r\n\r\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\r\n// no runtime penalty for these.\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_16_DBL = 1 << 16;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24_DBL = 1 << 24;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\r\n\r\n/**\r\n * @type {number}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\r\n\r\n/**\r\n * @type {!Long}\r\n * @const\r\n * @inner\r\n */\r\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ZERO = fromInt(0);\r\n\r\n/**\r\n * Signed zero.\r\n * @type {!Long}\r\n */\r\nLong.ZERO = ZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UZERO = fromInt(0, true);\r\n\r\n/**\r\n * Unsigned zero.\r\n * @type {!Long}\r\n */\r\nLong.UZERO = UZERO;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar ONE = fromInt(1);\r\n\r\n/**\r\n * Signed one.\r\n * @type {!Long}\r\n */\r\nLong.ONE = ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar UONE = fromInt(1, true);\r\n\r\n/**\r\n * Unsigned one.\r\n * @type {!Long}\r\n */\r\nLong.UONE = UONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar NEG_ONE = fromInt(-1);\r\n\r\n/**\r\n * Signed negative one.\r\n * @type {!Long}\r\n */\r\nLong.NEG_ONE = NEG_ONE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_VALUE = fromBits(0xFFFFFFFF|0, 0x7FFFFFFF|0, false);\r\n\r\n/**\r\n * Maximum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_VALUE = MAX_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF|0, 0xFFFFFFFF|0, true);\r\n\r\n/**\r\n * Maximum unsigned value.\r\n * @type {!Long}\r\n */\r\nLong.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\r\n\r\n/**\r\n * @type {!Long}\r\n * @inner\r\n */\r\nvar MIN_VALUE = fromBits(0, 0x80000000|0, false);\r\n\r\n/**\r\n * Minimum signed value.\r\n * @type {!Long}\r\n */\r\nLong.MIN_VALUE = MIN_VALUE;\r\n\r\n/**\r\n * @alias Long.prototype\r\n * @inner\r\n */\r\nvar LongPrototype = Long.prototype;\r\n\r\n/**\r\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\r\n * @returns {number}\r\n */\r\nLongPrototype.toInt = function toInt() {\r\n    return this.unsigned ? this.low >>> 0 : this.low;\r\n};\r\n\r\n/**\r\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\r\n * @returns {number}\r\n */\r\nLongPrototype.toNumber = function toNumber() {\r\n    if (this.unsigned)\r\n        return ((this.high >>> 0) * TWO_PWR_32_DBL) + (this.low >>> 0);\r\n    return this.high * TWO_PWR_32_DBL + (this.low >>> 0);\r\n};\r\n\r\n/**\r\n * Converts the Long to a string written in the specified radix.\r\n * @param {number=} radix Radix (2-36), defaults to 10\r\n * @returns {string}\r\n * @override\r\n * @throws {RangeError} If `radix` is out of range\r\n */\r\nLongPrototype.toString = function toString(radix) {\r\n    radix = radix || 10;\r\n    if (radix < 2 || 36 < radix)\r\n        throw RangeError('radix');\r\n    if (this.isZero())\r\n        return '0';\r\n    if (this.isNegative()) { // Unsigned Longs are never negative\r\n        if (this.eq(MIN_VALUE)) {\r\n            // We need to change the Long value before it can be negated, so we remove\r\n            // the bottom-most digit in this base and then recurse to do the rest.\r\n            var radixLong = fromNumber(radix),\r\n                div = this.div(radixLong),\r\n                rem1 = div.mul(radixLong).sub(this);\r\n            return div.toString(radix) + rem1.toInt().toString(radix);\r\n        } else\r\n            return '-' + this.neg().toString(radix);\r\n    }\r\n\r\n    // Do several (6) digits each time through the loop, so as to\r\n    // minimize the calls to the very expensive emulated div.\r\n    var radixToPower = fromNumber(pow_dbl(radix, 6), this.unsigned),\r\n        rem = this;\r\n    var result = '';\r\n    while (true) {\r\n        var remDiv = rem.div(radixToPower),\r\n            intval = rem.sub(remDiv.mul(radixToPower)).toInt() >>> 0,\r\n            digits = intval.toString(radix);\r\n        rem = remDiv;\r\n        if (rem.isZero())\r\n            return digits + result;\r\n        else {\r\n            while (digits.length < 6)\r\n                digits = '0' + digits;\r\n            result = '' + digits + result;\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as a signed integer.\r\n * @returns {number} Signed high bits\r\n */\r\nLongPrototype.getHighBits = function getHighBits() {\r\n    return this.high;\r\n};\r\n\r\n/**\r\n * Gets the high 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned high bits\r\n */\r\nLongPrototype.getHighBitsUnsigned = function getHighBitsUnsigned() {\r\n    return this.high >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as a signed integer.\r\n * @returns {number} Signed low bits\r\n */\r\nLongPrototype.getLowBits = function getLowBits() {\r\n    return this.low;\r\n};\r\n\r\n/**\r\n * Gets the low 32 bits as an unsigned integer.\r\n * @returns {number} Unsigned low bits\r\n */\r\nLongPrototype.getLowBitsUnsigned = function getLowBitsUnsigned() {\r\n    return this.low >>> 0;\r\n};\r\n\r\n/**\r\n * Gets the number of bits needed to represent the absolute value of this Long.\r\n * @returns {number}\r\n */\r\nLongPrototype.getNumBitsAbs = function getNumBitsAbs() {\r\n    if (this.isNegative()) // Unsigned Longs are never negative\r\n        return this.eq(MIN_VALUE) ? 64 : this.neg().getNumBitsAbs();\r\n    var val = this.high != 0 ? this.high : this.low;\r\n    for (var bit = 31; bit > 0; bit--)\r\n        if ((val & (1 << bit)) != 0)\r\n            break;\r\n    return this.high != 0 ? bit + 33 : bit + 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isZero = function isZero() {\r\n    return this.high === 0 && this.low === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eqz = LongPrototype.isZero;\r\n\r\n/**\r\n * Tests if this Long's value is negative.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isNegative = function isNegative() {\r\n    return !this.unsigned && this.high < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is positive.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isPositive = function isPositive() {\r\n    return this.unsigned || this.high >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is odd.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isOdd = function isOdd() {\r\n    return (this.low & 1) === 1;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is even.\r\n * @returns {boolean}\r\n */\r\nLongPrototype.isEven = function isEven() {\r\n    return (this.low & 1) === 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.equals = function equals(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.unsigned !== other.unsigned && (this.high >>> 31) === 1 && (other.high >>> 31) === 1)\r\n        return false;\r\n    return this.high === other.high && this.low === other.low;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.eq = LongPrototype.equals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.notEquals = function notEquals(other) {\r\n    return !this.eq(/* validates */ other);\r\n};\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.neq = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ne = LongPrototype.notEquals;\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThan = function lessThan(other) {\r\n    return this.comp(/* validates */ other) < 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lt = LongPrototype.lessThan;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lessThanOrEqual = function lessThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) <= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.lte = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.le = LongPrototype.lessThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThan = function greaterThan(other) {\r\n    return this.comp(/* validates */ other) > 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gt = LongPrototype.greaterThan;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.greaterThanOrEqual = function greaterThanOrEqual(other) {\r\n    return this.comp(/* validates */ other) >= 0;\r\n};\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.gte = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {boolean}\r\n */\r\nLongPrototype.ge = LongPrototype.greaterThanOrEqual;\r\n\r\n/**\r\n * Compares this Long's value with the specified's.\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.compare = function compare(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    if (this.eq(other))\r\n        return 0;\r\n    var thisNeg = this.isNegative(),\r\n        otherNeg = other.isNegative();\r\n    if (thisNeg && !otherNeg)\r\n        return -1;\r\n    if (!thisNeg && otherNeg)\r\n        return 1;\r\n    // At this point the sign bits are the same\r\n    if (!this.unsigned)\r\n        return this.sub(other).isNegative() ? -1 : 1;\r\n    // Both are positive if at least one is unsigned\r\n    return (other.high >>> 0) > (this.high >>> 0) || (other.high === this.high && (other.low >>> 0) > (this.low >>> 0)) ? -1 : 1;\r\n};\r\n\r\n/**\r\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\r\n * @function\r\n * @param {!Long|number|string} other Other value\r\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\r\n *  if the given one is greater\r\n */\r\nLongPrototype.comp = LongPrototype.compare;\r\n\r\n/**\r\n * Negates this Long's value.\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.negate = function negate() {\r\n    if (!this.unsigned && this.eq(MIN_VALUE))\r\n        return MIN_VALUE;\r\n    return this.not().add(ONE);\r\n};\r\n\r\n/**\r\n * Negates this Long's value. This is an alias of {@link Long#negate}.\r\n * @function\r\n * @returns {!Long} Negated Long\r\n */\r\nLongPrototype.neg = LongPrototype.negate;\r\n\r\n/**\r\n * Returns the sum of this and the specified Long.\r\n * @param {!Long|number|string} addend Addend\r\n * @returns {!Long} Sum\r\n */\r\nLongPrototype.add = function add(addend) {\r\n    if (!isLong(addend))\r\n        addend = fromValue(addend);\r\n\r\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = addend.high >>> 16;\r\n    var b32 = addend.high & 0xFFFF;\r\n    var b16 = addend.low >>> 16;\r\n    var b00 = addend.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 + b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 + b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 + b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 + b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long.\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.subtract = function subtract(subtrahend) {\r\n    if (!isLong(subtrahend))\r\n        subtrahend = fromValue(subtrahend);\r\n    return this.add(subtrahend.neg());\r\n};\r\n\r\n/**\r\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\r\n * @function\r\n * @param {!Long|number|string} subtrahend Subtrahend\r\n * @returns {!Long} Difference\r\n */\r\nLongPrototype.sub = LongPrototype.subtract;\r\n\r\n/**\r\n * Returns the product of this and the specified Long.\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.multiply = function multiply(multiplier) {\r\n    if (this.isZero())\r\n        return ZERO;\r\n    if (!isLong(multiplier))\r\n        multiplier = fromValue(multiplier);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = wasm.mul(this.low,\r\n                           this.high,\r\n                           multiplier.low,\r\n                           multiplier.high);\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (multiplier.isZero())\r\n        return ZERO;\r\n    if (this.eq(MIN_VALUE))\r\n        return multiplier.isOdd() ? MIN_VALUE : ZERO;\r\n    if (multiplier.eq(MIN_VALUE))\r\n        return this.isOdd() ? MIN_VALUE : ZERO;\r\n\r\n    if (this.isNegative()) {\r\n        if (multiplier.isNegative())\r\n            return this.neg().mul(multiplier.neg());\r\n        else\r\n            return this.neg().mul(multiplier).neg();\r\n    } else if (multiplier.isNegative())\r\n        return this.mul(multiplier.neg()).neg();\r\n\r\n    // If both longs are small, use float multiplication\r\n    if (this.lt(TWO_PWR_24) && multiplier.lt(TWO_PWR_24))\r\n        return fromNumber(this.toNumber() * multiplier.toNumber(), this.unsigned);\r\n\r\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\r\n    // We can skip products that would overflow.\r\n\r\n    var a48 = this.high >>> 16;\r\n    var a32 = this.high & 0xFFFF;\r\n    var a16 = this.low >>> 16;\r\n    var a00 = this.low & 0xFFFF;\r\n\r\n    var b48 = multiplier.high >>> 16;\r\n    var b32 = multiplier.high & 0xFFFF;\r\n    var b16 = multiplier.low >>> 16;\r\n    var b00 = multiplier.low & 0xFFFF;\r\n\r\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\r\n    c00 += a00 * b00;\r\n    c16 += c00 >>> 16;\r\n    c00 &= 0xFFFF;\r\n    c16 += a16 * b00;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c16 += a00 * b16;\r\n    c32 += c16 >>> 16;\r\n    c16 &= 0xFFFF;\r\n    c32 += a32 * b00;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a16 * b16;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c32 += a00 * b32;\r\n    c48 += c32 >>> 16;\r\n    c32 &= 0xFFFF;\r\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\r\n    c48 &= 0xFFFF;\r\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\r\n * @function\r\n * @param {!Long|number|string} multiplier Multiplier\r\n * @returns {!Long} Product\r\n */\r\nLongPrototype.mul = LongPrototype.multiply;\r\n\r\n/**\r\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\r\n *  unsigned if this Long is unsigned.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.divide = function divide(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n    if (divisor.isZero())\r\n        throw Error('division by zero');\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        // guard against signed division overflow: the largest\r\n        // negative number / -1 would be 1 larger than the largest\r\n        // positive number, due to two's complement.\r\n        if (!this.unsigned &&\r\n            this.high === -0x80000000 &&\r\n            divisor.low === -1 && divisor.high === -1) {\r\n            // be consistent with non-wasm code path\r\n            return this;\r\n        }\r\n        var low = (this.unsigned ? wasm.div_u : wasm.div_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    if (this.isZero())\r\n        return this.unsigned ? UZERO : ZERO;\r\n    var approx, rem, res;\r\n    if (!this.unsigned) {\r\n        // This section is only relevant for signed longs and is derived from the\r\n        // closure library as a whole.\r\n        if (this.eq(MIN_VALUE)) {\r\n            if (divisor.eq(ONE) || divisor.eq(NEG_ONE))\r\n                return MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE\r\n            else if (divisor.eq(MIN_VALUE))\r\n                return ONE;\r\n            else {\r\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\r\n                var halfThis = this.shr(1);\r\n                approx = halfThis.div(divisor).shl(1);\r\n                if (approx.eq(ZERO)) {\r\n                    return divisor.isNegative() ? ONE : NEG_ONE;\r\n                } else {\r\n                    rem = this.sub(divisor.mul(approx));\r\n                    res = approx.add(rem.div(divisor));\r\n                    return res;\r\n                }\r\n            }\r\n        } else if (divisor.eq(MIN_VALUE))\r\n            return this.unsigned ? UZERO : ZERO;\r\n        if (this.isNegative()) {\r\n            if (divisor.isNegative())\r\n                return this.neg().div(divisor.neg());\r\n            return this.neg().div(divisor).neg();\r\n        } else if (divisor.isNegative())\r\n            return this.div(divisor.neg()).neg();\r\n        res = ZERO;\r\n    } else {\r\n        // The algorithm below has not been made for unsigned longs. It's therefore\r\n        // required to take special care of the MSB prior to running it.\r\n        if (!divisor.unsigned)\r\n            divisor = divisor.toUnsigned();\r\n        if (divisor.gt(this))\r\n            return UZERO;\r\n        if (divisor.gt(this.shru(1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\r\n            return UONE;\r\n        res = UZERO;\r\n    }\r\n\r\n    // Repeat the following until the remainder is less than other:  find a\r\n    // floating-point that approximates remainder / other *from below*, add this\r\n    // into the result, and subtract it from the remainder.  It is critical that\r\n    // the approximate value is less than or equal to the real value so that the\r\n    // remainder never becomes negative.\r\n    rem = this;\r\n    while (rem.gte(divisor)) {\r\n        // Approximate the result of division. This may be a little greater or\r\n        // smaller than the actual value.\r\n        approx = Math.max(1, Math.floor(rem.toNumber() / divisor.toNumber()));\r\n\r\n        // We will tweak the approximate result by changing it in the 48-th digit or\r\n        // the smallest non-fractional digit, whichever is larger.\r\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2),\r\n            delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48),\r\n\r\n        // Decrease the approximation until it is smaller than the remainder.  Note\r\n        // that if it is too large, the product overflows and is negative.\r\n            approxRes = fromNumber(approx),\r\n            approxRem = approxRes.mul(divisor);\r\n        while (approxRem.isNegative() || approxRem.gt(rem)) {\r\n            approx -= delta;\r\n            approxRes = fromNumber(approx, this.unsigned);\r\n            approxRem = approxRes.mul(divisor);\r\n        }\r\n\r\n        // We know the answer can't be zero... and actually, zero would cause\r\n        // infinite recursion since we would make no progress.\r\n        if (approxRes.isZero())\r\n            approxRes = ONE;\r\n\r\n        res = res.add(approxRes);\r\n        rem = rem.sub(approxRem);\r\n    }\r\n    return res;\r\n};\r\n\r\n/**\r\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Quotient\r\n */\r\nLongPrototype.div = LongPrototype.divide;\r\n\r\n/**\r\n * Returns this Long modulo the specified.\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.modulo = function modulo(divisor) {\r\n    if (!isLong(divisor))\r\n        divisor = fromValue(divisor);\r\n\r\n    // use wasm support if present\r\n    if (wasm) {\r\n        var low = (this.unsigned ? wasm.rem_u : wasm.rem_s)(\r\n            this.low,\r\n            this.high,\r\n            divisor.low,\r\n            divisor.high\r\n        );\r\n        return fromBits(low, wasm.get_high(), this.unsigned);\r\n    }\r\n\r\n    return this.sub(this.div(divisor).mul(divisor));\r\n};\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.mod = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\r\n * @function\r\n * @param {!Long|number|string} divisor Divisor\r\n * @returns {!Long} Remainder\r\n */\r\nLongPrototype.rem = LongPrototype.modulo;\r\n\r\n/**\r\n * Returns the bitwise NOT of this Long.\r\n * @returns {!Long}\r\n */\r\nLongPrototype.not = function not() {\r\n    return fromBits(~this.low, ~this.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise AND of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.and = function and(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low & other.low, this.high & other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise OR of this Long and the specified.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.or = function or(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low | other.low, this.high | other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns the bitwise XOR of this Long and the given one.\r\n * @param {!Long|number|string} other Other Long\r\n * @returns {!Long}\r\n */\r\nLongPrototype.xor = function xor(other) {\r\n    if (!isLong(other))\r\n        other = fromValue(other);\r\n    return fromBits(this.low ^ other.low, this.high ^ other.high, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftLeft = function shiftLeft(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits(this.low << numBits, (this.high << numBits) | (this.low >>> (32 - numBits)), this.unsigned);\r\n    else\r\n        return fromBits(0, this.low << (numBits - 32), this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shl = LongPrototype.shiftLeft;\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRight = function shiftRight(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    if ((numBits &= 63) === 0)\r\n        return this;\r\n    else if (numBits < 32)\r\n        return fromBits((this.low >>> numBits) | (this.high << (32 - numBits)), this.high >> numBits, this.unsigned);\r\n    else\r\n        return fromBits(this.high >> (numBits - 32), this.high >= 0 ? 0 : -1, this.unsigned);\r\n};\r\n\r\n/**\r\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr = LongPrototype.shiftRight;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount.\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shiftRightUnsigned = function shiftRightUnsigned(numBits) {\r\n    if (isLong(numBits))\r\n        numBits = numBits.toInt();\r\n    numBits &= 63;\r\n    if (numBits === 0)\r\n        return this;\r\n    else {\r\n        var high = this.high;\r\n        if (numBits < 32) {\r\n            var low = this.low;\r\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, this.unsigned);\r\n        } else if (numBits === 32)\r\n            return fromBits(high, 0, this.unsigned);\r\n        else\r\n            return fromBits(high >>> (numBits - 32), 0, this.unsigned);\r\n    }\r\n};\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shru = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\r\n * @function\r\n * @param {number|!Long} numBits Number of bits\r\n * @returns {!Long} Shifted Long\r\n */\r\nLongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\r\n\r\n/**\r\n * Converts this Long to signed.\r\n * @returns {!Long} Signed long\r\n */\r\nLongPrototype.toSigned = function toSigned() {\r\n    if (!this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, false);\r\n};\r\n\r\n/**\r\n * Converts this Long to unsigned.\r\n * @returns {!Long} Unsigned long\r\n */\r\nLongPrototype.toUnsigned = function toUnsigned() {\r\n    if (this.unsigned)\r\n        return this;\r\n    return fromBits(this.low, this.high, true);\r\n};\r\n\r\n/**\r\n * Converts this Long to its byte representation.\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {!Array.<number>} Byte representation\r\n */\r\nLongPrototype.toBytes = function toBytes(le) {\r\n    return le ? this.toBytesLE() : this.toBytesBE();\r\n};\r\n\r\n/**\r\n * Converts this Long to its little endian byte representation.\r\n * @returns {!Array.<number>} Little endian byte representation\r\n */\r\nLongPrototype.toBytesLE = function toBytesLE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        lo        & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo >>> 16 & 0xff,\r\n        lo >>> 24       ,\r\n        hi        & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi >>> 16 & 0xff,\r\n        hi >>> 24\r\n    ];\r\n};\r\n\r\n/**\r\n * Converts this Long to its big endian byte representation.\r\n * @returns {!Array.<number>} Big endian byte representation\r\n */\r\nLongPrototype.toBytesBE = function toBytesBE() {\r\n    var hi = this.high,\r\n        lo = this.low;\r\n    return [\r\n        hi >>> 24       ,\r\n        hi >>> 16 & 0xff,\r\n        hi >>>  8 & 0xff,\r\n        hi        & 0xff,\r\n        lo >>> 24       ,\r\n        lo >>> 16 & 0xff,\r\n        lo >>>  8 & 0xff,\r\n        lo        & 0xff\r\n    ];\r\n};\r\n\r\n/**\r\n * Creates a Long from its byte representation.\r\n * @param {!Array.<number>} bytes Byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @param {boolean=} le Whether little or big endian, defaults to big endian\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytes = function fromBytes(bytes, unsigned, le) {\r\n    return le ? Long.fromBytesLE(bytes, unsigned) : Long.fromBytesBE(bytes, unsigned);\r\n};\r\n\r\n/**\r\n * Creates a Long from its little endian byte representation.\r\n * @param {!Array.<number>} bytes Little endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesLE = function fromBytesLE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[0]       |\r\n        bytes[1] <<  8 |\r\n        bytes[2] << 16 |\r\n        bytes[3] << 24,\r\n        bytes[4]       |\r\n        bytes[5] <<  8 |\r\n        bytes[6] << 16 |\r\n        bytes[7] << 24,\r\n        unsigned\r\n    );\r\n};\r\n\r\n/**\r\n * Creates a Long from its big endian byte representation.\r\n * @param {!Array.<number>} bytes Big endian byte representation\r\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\r\n * @returns {Long} The corresponding Long value\r\n */\r\nLong.fromBytesBE = function fromBytesBE(bytes, unsigned) {\r\n    return new Long(\r\n        bytes[4] << 24 |\r\n        bytes[5] << 16 |\r\n        bytes[6] <<  8 |\r\n        bytes[7],\r\n        bytes[0] << 24 |\r\n        bytes[1] << 16 |\r\n        bytes[2] <<  8 |\r\n        bytes[3],\r\n        unsigned\r\n    );\r\n};\r\n","// This file is shared with the compiler and must remain portable\n\n/** Indicates specific features to activate. */\nexport const enum Feature {\n  /** No additional features. */\n  NONE = 0,\n  /** Sign extension operations. */\n  SIGN_EXTENSION = 1 << 0, // see: https://github.com/WebAssembly/sign-extension-ops\n  /** Mutable global imports and exports. */\n  MUTABLE_GLOBALS = 1 << 1, // see: https://github.com/WebAssembly/mutable-global\n  /** Non-trapping float to integer operations. */\n  NONTRAPPING_F2I = 1 << 2, // see: https://github.com/WebAssembly/nontrapping-float-to-int-conversions\n  /** Bulk memory operations. */\n  BULK_MEMORY = 1 << 3, // see: https://github.com/WebAssembly/bulk-memory-operations\n  /** SIMD types and operations. */\n  SIMD = 1 << 4, // see: https://github.com/WebAssembly/simd\n  /** Threading and atomic operations. */\n  THREADS = 1 << 5, // see: https://github.com/WebAssembly/threads\n  /** Exception handling operations. */\n  EXCEPTION_HANDLING = 1 << 6, // see: https://github.com/WebAssembly/exception-handling\n  /** Tail call operations. */\n  TAIL_CALLS = 1 << 7, // see: https://github.com/WebAssembly/tail-call\n  /** Reference types. */\n  REFERENCE_TYPES = 1 << 8 // see: https://github.com/WebAssembly/reference-types\n}\n\n/** Gets the name of the specified feature one would specify on the command line. */\nexport function featureToString(feature: Feature): string {\n  switch (feature) {\n    case Feature.SIGN_EXTENSION: return \"sign-extension\";\n    case Feature.MUTABLE_GLOBALS: return \"mutable-globals\";\n    case Feature.NONTRAPPING_F2I: return \"nontrapping-f2i\";\n    case Feature.BULK_MEMORY: return \"bulk-memory\";\n    case Feature.SIMD: return \"simd\";\n    case Feature.THREADS: return \"threads\";\n    case Feature.EXCEPTION_HANDLING: return \"exception-handling\";\n    case Feature.TAIL_CALLS: return \"tail-calls\";\n    case Feature.REFERENCE_TYPES: return \"reference-types\";\n  }\n  assert(false);\n  return \"\";\n}\n","// This file is shared with the compiler and must remain portable\n\n/** Compilation target. */\nexport enum Target {\n  /** WebAssembly with 32-bit pointers. */\n  WASM32,\n  /** WebAssembly with 64-bit pointers. Experimental and not supported by any runtime yet. */\n  WASM64,\n  /** Portable. */\n  JS\n}\n","// This file is shared with the compiler and must remain portable\n\n// ╒═══════════════════ Typeinfo interpretation ═══════════════════╕\n//    3                   2                   1\n//  1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0  bits\n// ├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┤ ◄─ __rtti_base\n// │                             count                             │\n// ╞═══════════════════════════════════════════════════════════════╡ ┐\n// │                      Typeinfo#flags [id=0]                    │ id < count\n// ├ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ─ ┤\n// │                      Typeinfo#base  [id=0]                    │\n// ├───────────────────────────────────────────────────────────────┤\n// │                              ...                              │\n\n/** Runtime type information data structure. */\n@unmanaged\nexport class Typeinfo {\n  /** Flags describing the shape of this class type. */\n  flags: TypeinfoFlags;\n  /** Base class id or `0` if none. */\n  base: u32;\n}\n\n/** Runtime type information flags. */\nexport const enum TypeinfoFlags {\n  /** No specific flags. */\n  NONE = 0,\n  /** Type is an `ArrayBufferView`. */\n  ARRAYBUFFERVIEW = 1 << 0,\n  /** Type is an `Array`. */\n  ARRAY = 1 << 1,\n  /** Type is a `Set`. */\n  SET = 1 << 2,\n  /** Type is a `Map`. */\n  MAP = 1 << 3,\n  /** Type is inherently acyclic. */\n  ACYCLIC = 1 << 4,\n  /** Value alignment of 1 byte. */\n  VALUE_ALIGN_0 = 1 << 5,\n  /** Value alignment of 2 bytes. */\n  VALUE_ALIGN_1 = 1 << 6,\n  /** Value alignment of 4 bytes. */\n  VALUE_ALIGN_2 = 1 << 7,\n  /** Value alignment of 8 bytes. */\n  VALUE_ALIGN_3 = 1 << 8,\n  /** Value alignment of 16 bytes. */\n  VALUE_ALIGN_4 = 1 << 9,\n  /** Value is a signed type. */\n  VALUE_SIGNED = 1 << 10,\n  /** Value is a float type. */\n  VALUE_FLOAT = 1 << 11,\n  /** Value type is nullable. */\n  VALUE_NULLABLE = 1 << 12,\n  /** Value type is managed. */\n  VALUE_MANAGED = 1 << 13,\n  /** Key alignment of 1 byte. */\n  KEY_ALIGN_0 = 1 << 14,\n  /** Key alignment of 2 bytes. */\n  KEY_ALIGN_1 = 1 << 15,\n  /** Key alignment of 4 bytes. */\n  KEY_ALIGN_2 = 1 << 16,\n  /** Key alignment of 8 bytes. */\n  KEY_ALIGN_3 = 1 << 17,\n  /** Key alignment of 16 bytes. */\n  KEY_ALIGN_4 = 1 << 18,\n  /** Key is a signed type. */\n  KEY_SIGNED = 1 << 19,\n  /** Key is a float type. */\n  KEY_FLOAT = 1 << 20,\n  /** Key type is nullable. */\n  KEY_NULLABLE = 1 << 21,\n  /** Key type is managed. */\n  KEY_MANAGED = 1 << 22\n}\n","/**\n * Low-level C-like compiler API.\n * @module index\n *//***/\n\nimport { Target, Feature } from \"./common\";\nimport { Compiler, Options } from \"./compiler\";\nimport { Decompiler } from \"./decompiler\";\nimport { IDLBuilder, TSDBuilder } from \"./definitions\";\nimport { DiagnosticMessage, DiagnosticCategory, formatDiagnosticMessage } from \"./diagnostics\";\nimport { Module } from \"./module\";\nimport { Parser } from \"./parser\";\nimport { Program } from \"./program\";\n\n/** Parses a source file. If `parser` has been omitted a new one is created. */\nexport function parseFile(\n  /** Source text of the file. */\n  text: string,\n  /** Normalized path of the file. */\n  path: string,\n  /** Whether this is an entry file. */\n  isEntry: bool = false,\n  /** Parser reference. */\n  parser: Parser | null = null\n): Parser {\n  if (!parser) parser = new Parser();\n  parser.parseFile(text, path, isEntry);\n  return parser;\n}\n\n/** Obtains the next required file's path. Returns `null` once complete. */\nexport function nextFile(parser: Parser): string | null {\n  return parser.nextFile();\n}\n\n/** Obtains the path of the dependee of a given imported file. */\nexport function getDependee(parser: Parser, file: string): string | null {\n  return parser.getDependee(file);\n}\n\n/** Obtains the next diagnostic message. Returns `null` once complete. */\nexport function nextDiagnostic(parser: Parser): DiagnosticMessage | null {\n  var program = parser.program;\n  return program.diagnosticsOffset < program.diagnostics.length\n    ? program.diagnostics[program.diagnosticsOffset++]\n    : null;\n}\n\n/** Formats a diagnostic message to a string. */\nexport { formatDiagnosticMessage as formatDiagnostic };\n\n/** Tests whether a diagnostic is informatory. */\nexport function isInfo(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.INFO;\n}\n\n/** Tests whether a diagnostic is a warning. */\nexport function isWarning(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.WARNING;\n}\n\n/** Tests whether a diagnostic is an error. */\nexport function isError(message: DiagnosticMessage): bool {\n  return message.category == DiagnosticCategory.ERROR;\n}\n\n/** Creates a new set of compiler options. */\nexport function createOptions(): Options {\n  return new Options();\n}\n\n/** Sets the `target` option. */\nexport function setTarget(options: Options, target: Target): void {\n  options.target = target;\n}\n\n/** Sets the `noAssert` option. */\nexport function setNoAssert(options: Options, noAssert: bool): void {\n  options.noAssert = noAssert;\n}\n\n/** Sets the `importMemory` option. */\nexport function setImportMemory(options: Options, importMemory: bool): void {\n  options.importMemory = importMemory;\n}\n\n/** Sets the `sharedMemory` option. */\nexport function setSharedMemory(options: Options, sharedMemory: i32): void {\n  options.sharedMemory = sharedMemory;\n}\n\n/** Sets the `importTable` option. */\nexport function setImportTable(options: Options, importTable: bool): void {\n  options.importTable = importTable;\n}\n\n/** Sets the `sourceMap` option. */\nexport function setSourceMap(options: Options, sourceMap: bool): void {\n  options.sourceMap = sourceMap;\n}\n\n/** Sets the `memoryBase` option. */\nexport function setMemoryBase(options: Options, memoryBase: u32): void {\n  options.memoryBase = memoryBase;\n}\n\n/** Sets a 'globalAliases' value. */\nexport function setGlobalAlias(options: Options, alias: string, name: string): void {\n  var globalAliases = options.globalAliases;\n  if (!globalAliases) options.globalAliases = globalAliases = new Map();\n  globalAliases.set(alias, name);\n}\n\n/** Sets the `explicitStart` option. */\nexport function setExplicitStart(options: Options, explicitStart: bool): void {\n  options.explicitStart = explicitStart;\n}\n\n/** Sets the `noUnsafe` option. */\nexport function setNoUnsafe(options: Options, noUnsafe: bool): void {\n  options.noUnsafe = noUnsafe;\n}\n\n/** Sign extension operations. */\nexport const FEATURE_SIGN_EXTENSION = Feature.SIGN_EXTENSION;\n/** Mutable global imports and exports. */\nexport const FEATURE_MUTABLE_GLOBALS = Feature.MUTABLE_GLOBALS;\n/** Non-trapping float to int conversion operations. */\nexport const FEATURE_NONTRAPPING_F2I = Feature.NONTRAPPING_F2I;\n/** Bulk memory operations. */\nexport const FEATURE_BULK_MEMORY = Feature.BULK_MEMORY;\n/** SIMD types and operations. */\nexport const FEATURE_SIMD = Feature.SIMD;\n/** Threading and atomic operations. */\nexport const FEATURE_THREADS = Feature.THREADS;\n/** Exception handling operations. */\nexport const FEATURE_EXCEPTION_HANDLING = Feature.EXCEPTION_HANDLING;\n/** Tail call operations. */\nexport const FEATURE_TAIL_CALLS = Feature.TAIL_CALLS;\n/** Reference types. */\nexport const FEATURE_REFERENCE_TYPES = Feature.REFERENCE_TYPES;\n\n/** Enables a specific feature. */\nexport function enableFeature(options: Options, feature: Feature): void {\n  options.features |= feature;\n}\n\n/** Disables a specific feature. */\nexport function disableFeature(options: Options, feature: Feature): void {\n  options.features &= ~feature;\n}\n\n/** Gives the compiler a hint at the optimize levels that will be used later on. */\nexport function setOptimizeLevelHints(options: Options, optimizeLevel: i32, shrinkLevel: i32): void {\n  options.optimizeLevelHint = optimizeLevel;\n  options.shrinkLevelHint = shrinkLevel;\n}\n\n/** Finishes parsing. */\nexport function finishParsing(parser: Parser): Program {\n  return parser.finish();\n}\n\n/** Obtains the source of the given file. */\nexport function getSource(program: Program, internalPath: string): string | null {\n  return program.getSource(internalPath);\n}\n\n/** Compiles the sources computed by the parser to a module. */\nexport function compileProgram(program: Program, options: Options | null = null): Module {\n  return new Compiler(program, options).compile();\n}\n\n/** Decompiles a module to its (low level) source. */\nexport function decompileModule(module: Module): string {\n  var decompiler = new Decompiler();\n  decompiler.decompile(module);\n  return decompiler.finish();\n}\n\n/** Builds WebIDL definitions for the specified program. */\nexport function buildIDL(program: Program): string {\n  return IDLBuilder.build(program);\n}\n\n/** Builds TypeScript definitions for the specified program. */\nexport function buildTSD(program: Program): string {\n  return TSDBuilder.build(program);\n}\n\n/** Builds a JSON file of a program's runtime type information. */\nexport function buildRTTI(program: Program): string {\n  var sb = new Array<string>();\n  sb.push(\"{\\n  \\\"names\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \\\"\");\n    sb.push(cls.internalName);\n    sb.push(\"\\\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"base\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    let base = cls.base;\n    sb.push(\"    \");\n    sb.push(base ? base.id.toString() : \"0\");\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ],\\n  \\\"flags\\\": [\\n\");\n  for (let cls of program.managedClasses.values()) {\n    sb.push(\"    \");\n    sb.push(cls.rttiFlags.toString());\n    sb.push(\",\\n\");\n  }\n  sb.push(\"  ]\\n}\\n\");\n  return sb.join(\"\");\n}\n\n/** Prefix indicating a library file. */\nexport { LIBRARY_PREFIX } from \"./common\";\n\n// Full API\nexport * from \"./ast\";\n// export * from \"./binary\";\nexport * from \"./common\";\nexport * from \"./compiler\";\nexport * from \"./decompiler\";\nexport * from \"./definitions\";\nexport * from \"./diagnosticMessages.generated\";\nexport * from \"./diagnostics\";\nexport * from \"./flow\";\nexport * from \"./module\";\nexport * from \"./parser\";\nexport * from \"./program\";\nexport * from \"./resolver\";\nexport * from \"./tokenizer\";\nexport * from \"./types\";\nexport * from \"./util/index\";\n","/** @module util *//***/\n\n/** Tests if the bit at the specified index is set within a 64-bit map. */\nexport function bitsetIs(map: I64, index: i32): bool {\n  assert(index >= 0 && index < 64);\n  return i64_ne(\n    i64_and(\n      map,\n      i64_shl(\n        i64_one,\n        i64_new(index)\n      )\n    ),\n    i64_zero\n  );\n}\n\n/** Sets or unsets the bit at the specified index within a 64-bit map and returns the new map. */\nexport function bitsetSet(map: I64, index: i32, isSet: bool): I64 {\n  assert(index >= 0 && index < 64);\n  return isSet\n    ? i64_or(\n        map,\n        i64_shl(\n          i64_one,\n          i64_new(index)\n        )\n      )\n    : i64_and(\n        map,\n        i64_not(\n          i64_shl(\n            i64_one,\n            i64_new(index)\n          )\n        )\n      );\n}\n","/** @module util *//***/\n\n/** An enum of named character codes. */\nexport const enum CharCode {\n\n  NULL = 0,\n  LINEFEED = 0x0A,\n  CARRIAGERETURN = 0x0D,\n  LINESEPARATOR = 0x2028,\n  PARAGRAPHSEPARATOR = 0x2029,\n  NEXTLINE = 0x0085,\n\n  SPACE = 0x20,\n  NONBREAKINGSPACE = 0xA0,\n  ENQUAD = 0x2000,\n  EMQUAD = 0x2001,\n  ENSPACE = 0x2002,\n  EMSPACE = 0x2003,\n  THREEPEREMSPACE = 0x2004,\n  FOURPEREMSPACE = 0x2005,\n  SIXPEREMSPACE = 0x2006,\n  FIGURESPACE = 0x2007,\n  PUNCTUATIONSPACE = 0x2008,\n  THINSPACE = 0x2009,\n  HAIRSPACE = 0x200A,\n  ZEROWIDTHSPACE = 0x200B,\n  NARROWNOBREAKSPACE = 0x202F,\n  IDEOGRAPHICSPACE = 0x3000,\n  MATHEMATICALSPACE = 0x205F,\n  OGHAM = 0x1680,\n\n  _ = 0x5F,\n\n  _0 = 0x30,\n  _1 = 0x31,\n  _2 = 0x32,\n  _3 = 0x33,\n  _4 = 0x34,\n  _5 = 0x35,\n  _6 = 0x36,\n  _7 = 0x37,\n  _8 = 0x38,\n  _9 = 0x39,\n\n  a = 0x61,\n  b = 0x62,\n  c = 0x63,\n  d = 0x64,\n  e = 0x65,\n  f = 0x66,\n  g = 0x67,\n  h = 0x68,\n  i = 0x69,\n  j = 0x6A,\n  k = 0x6B,\n  l = 0x6C,\n  m = 0x6D,\n  n = 0x6E,\n  o = 0x6F,\n  p = 0x70,\n  q = 0x71,\n  r = 0x72,\n  s = 0x73,\n  t = 0x74,\n  u = 0x75,\n  v = 0x76,\n  w = 0x77,\n  x = 0x78,\n  y = 0x79,\n  z = 0x7A,\n\n  A = 0x41,\n  B = 0x42,\n  C = 0x43,\n  D = 0x44,\n  E = 0x45,\n  F = 0x46,\n  G = 0x47,\n  H = 0x48,\n  I = 0x49,\n  J = 0x4A,\n  K = 0x4B,\n  L = 0x4C,\n  M = 0x4D,\n  N = 0x4E,\n  O = 0x4F,\n  P = 0x50,\n  Q = 0x51,\n  R = 0x52,\n  S = 0x53,\n  T = 0x54,\n  U = 0x55,\n  V = 0x56,\n  W = 0x57,\n  X = 0x58,\n  Y = 0x59,\n  Z = 0x5a,\n\n  AMPERSAND = 0x26,\n  ASTERISK = 0x2A,\n  AT = 0x40,\n  BACKSLASH = 0x5C,\n  BACKTICK = 0x60,\n  BAR = 0x7C,\n  CARET = 0x5E,\n  CLOSEBRACE = 0x7D,\n  CLOSEBRACKET = 0x5D,\n  CLOSEPAREN = 0x29,\n  COLON = 0x3A,\n  COMMA = 0x2C,\n  DOLLAR = 0x24,\n  DOT = 0x2E,\n  DOUBLEQUOTE = 0x22,\n  EQUALS = 0x3D,\n  EXCLAMATION = 0x21,\n  GREATERTHAN = 0x3E,\n  HASH = 0x23,\n  LESSTHAN = 0x3C,\n  MINUS = 0x2D,\n  OPENBRACE = 0x7B,\n  OPENBRACKET = 0x5B,\n  OPENPAREN = 0x28,\n  PERCENT = 0x25,\n  PLUS = 0x2B,\n  QUESTION = 0x3F,\n  SEMICOLON = 0x3B,\n  SINGLEQUOTE = 0x27,\n  SLASH = 0x2F,\n  TILDE = 0x7E,\n\n  BACKSPACE = 0x08,\n  FORMFEED = 0x0C,\n  BYTEORDERMARK = 0xFEFF,\n  TAB = 0x09,\n  VERTICALTAB = 0x0B\n}\n\n/** Tests if the specified character code is some sort of line break. */\nexport function isLineBreak(c: CharCode): bool {\n  switch (c) {\n    case CharCode.LINEFEED:\n    case CharCode.CARRIAGERETURN:\n    case CharCode.LINESEPARATOR:\n    case CharCode.PARAGRAPHSEPARATOR: {\n      return true;\n    }\n    default: {\n      return false;\n    }\n  }\n}\n\n/** Tests if the specified character code is some sort of white space. */\nexport function isWhiteSpace(c: i32): bool {\n  switch (c) {\n    case CharCode.SPACE:\n    case CharCode.TAB:\n    case CharCode.VERTICALTAB:\n    case CharCode.FORMFEED:\n    case CharCode.NONBREAKINGSPACE:\n    case CharCode.NEXTLINE:\n    case CharCode.OGHAM:\n    case CharCode.NARROWNOBREAKSPACE:\n    case CharCode.MATHEMATICALSPACE:\n    case CharCode.IDEOGRAPHICSPACE:\n    case CharCode.BYTEORDERMARK: {\n      return true;\n    }\n    default: {\n      return c >= CharCode.ENQUAD && c <= CharCode.ZEROWIDTHSPACE;\n    }\n  }\n}\n\n/** Tests if the specified character code is a valid decimal digit. */\nexport function isDecimalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._9;\n}\n\n/** Tests if the specified character code is a valid octal digit. */\nexport function isOctalDigit(c: i32): bool {\n  return c >= CharCode._0 && c <= CharCode._7;\n}\n\n/** Tests if the specified character code is a valid start of an identifier. */\nexport function isIdentifierStart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierStart(c);\n}\n\n/** Tests if the specified character code is a valid keyword character. */\nexport function isKeywordCharacter(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z;\n}\n\n/** Tests if the specified character code is a valid part of an identifier. */\nexport function isIdentifierPart(c: i32): bool {\n  return c >= CharCode.a && c <= CharCode.z\n      || c >= CharCode.A && c <= CharCode.Z\n      || c >= CharCode._0 && c <= CharCode._9\n      || c == CharCode._\n      || c == CharCode.DOLLAR\n      || c > 0x7f && isUnicodeIdentifierPart(c);\n}\n\n// storing as u16 to save memory\nconst unicodeIdentifierStart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514,\n  1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774,\n  1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969,\n  1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088,\n  2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384,\n  2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474,\n  2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529,\n  2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613,\n  2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705,\n  2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784,\n  2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873,\n  2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958,\n  2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986,\n  2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125,\n  3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240,\n  3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333,\n  3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455,\n  3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634,\n  3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725,\n  3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757,\n  3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840,\n  3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186,\n  4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293,\n  4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696,\n  4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798,\n  4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992,\n  5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872,\n  5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016,\n  6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389,\n  6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688,\n  6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141,\n  7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424,\n  7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025,\n  8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130,\n  8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188,\n  8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469,\n  8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505,\n  8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520,\n  11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670,\n  11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720,\n  11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329,\n  12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540,\n  12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893,\n  19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538,\n  42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888,\n  42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015,\n  43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259,\n  43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520,\n  43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695,\n  43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739,\n  43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798,\n  43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243,\n  55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285,\n  64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323,\n  64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019,\n  65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474,\n  65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\nconst unicodeIdentifierPart: u16[] = [\n  170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736,\n  740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906,\n  908, 908, 910, 929, 931,\n  1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415,\n  1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520,\n  1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788,\n  1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112,\n  2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423,\n  2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482,\n  2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525,\n  2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602,\n  2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632,\n  2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693,\n  2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757,\n  2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821,\n  2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884,\n  2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929,\n  2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972,\n  2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018,\n  3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088,\n  3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157,\n  3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216,\n  3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285,\n  3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340,\n  3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424,\n  3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515,\n  3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570,\n  3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720,\n  3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751,\n  3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789,\n  3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895,\n  3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028,\n  4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304,\n  4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744,\n  4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808,\n  4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108,\n  5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902,\n  5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099,\n  6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272,\n  6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516,\n  6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783,\n  6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155,\n  7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676,\n  7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027,\n  8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134,\n  8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205,\n  8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417,\n  8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477,\n  8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517,\n  8521, 8526, 8526, 8544, 8584,\n  11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559,\n  11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686,\n  11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728,\n  11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335,\n  12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449,\n  12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799,\n  13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512,\n  42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783,\n  42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072,\n  43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309,\n  43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584,\n  43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741,\n  43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808,\n  43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203,\n  55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275,\n  64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321,\n  64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008,\n  65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140,\n  65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382,\n  65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500,\n];\n\nfunction lookupInUnicodeMap(code: u16, map: u16[]): bool {\n  if (code < map[0]) return false;\n\n  var lo = 0;\n  var hi = map.length;\n  var mid: i32;\n  var midVal: u16;\n\n  while (lo + 1 < hi) {\n    mid = lo + ((hi - lo) >> 1);\n    mid -= (mid & 1);\n    midVal = map[mid];\n    if (midVal <= code && code <= map[mid + 1]) {\n      return true;\n    }\n    if (code < midVal) {\n      hi = mid;\n    } else {\n      lo = mid + 2;\n    }\n  }\n  return false;\n}\n\nfunction isUnicodeIdentifierStart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierStart);\n}\n\nfunction isUnicodeIdentifierPart(code: i32): bool {\n  return code < 0 || code > 0xffff ? false\n       : lookupInUnicodeMap(code as u16, unicodeIdentifierPart);\n}\n","export function makeArray<V>(original: Array<V> | null = null): Array<V> {\n  if (original) {\n    let cloned = new Array<V>(original.length);\n    for (let i = 0, k = original.length; i < k; ++i) unchecked(cloned[i] = original[i]);\n    return cloned;\n  }\n  return new Array<V>();\n}\n\nexport function makeSet<V>(original: Set<V> | null = null): Set<V> {\n  if (original) {\n    let cloned = new Set<V>();\n    for (let v of original) cloned.add(v);\n    return cloned;\n  }\n  return new Set<V>();\n}\n\nexport function makeMap<K,V>(original: Map<K,V> | null = null, overrides: Map<K,V> | null = null): Map<K,V> {\n  var cloned = new Map<K,V>();\n  if (original) {\n    for (let [k, v] of original) cloned.set(k, v);\n    if (overrides) for (let [k, v] of overrides) cloned.set(k, v);\n  } else if (overrides) {\n    for (let [k, v] of overrides) cloned.set(k, v);\n  }\n  return cloned;\n}\n","/** @module util *//***/\n\nimport {\n  CharCode\n} from \"./charcode\";\n\nimport {\n  PATH_DELIMITER\n} from \"../common\";\n\nconst separator = CharCode.SLASH;\n\n/**\n * Normalizes the specified path, removing interior placeholders.\n * Expects a posix-compatible relative path (not Windows compatible).\n */\nexport function normalizePath(path: string): string {\n  var pos = 0;\n  var len = path.length;\n\n  // trim leading './'\n  while (pos + 1 < len &&\n    path.charCodeAt(pos) == CharCode.DOT &&\n    path.charCodeAt(pos + 1) == separator\n  ) {\n    pos += 2;\n  }\n\n  if (pos > 0 || len < path.length) {\n    path = path.substring(pos, len);\n    len -= pos;\n    pos = 0;\n  }\n\n  var atEnd: bool;\n  while (pos + 1 < len) {\n    atEnd = false;\n\n    // we are only interested in '/.' sequences ...\n    if (\n      path.charCodeAt(pos) == separator &&\n      path.charCodeAt(pos + 1) == CharCode.DOT\n    ) {\n      // '/.' ( '/' | $ )\n      atEnd = pos + 2 == len;\n      if (atEnd ||\n        pos + 2 < len &&\n        path.charCodeAt(pos + 2) == separator\n      ) {\n        path = atEnd\n          ? path.substring(0, pos)\n          : path.substring(0, pos) + path.substring(pos + 2);\n        len -= 2;\n        continue;\n      }\n\n      // '/.' ( './' | '.' $ )\n      atEnd = pos + 3 == len;\n      if (atEnd && path.charCodeAt(pos + 2) == CharCode.DOT ||\n        pos + 3 < len &&\n        path.charCodeAt(pos + 2) == CharCode.DOT &&\n        path.charCodeAt(pos + 3) == separator\n      ) {\n        // find preceeding '/'\n        let ipos = pos;\n        while (--ipos >= 0) {\n          if (path.charCodeAt(ipos) == separator) {\n            if (pos - ipos != 3 ||\n              path.charCodeAt(ipos + 1) != CharCode.DOT ||\n              path.charCodeAt(ipos + 2) != CharCode.DOT\n            ) { // exclude '..' itself\n              path = atEnd\n                ? path.substring(0, ipos)\n                : path.substring(0, ipos) + path.substring(pos + 3);\n              len -= pos + 3 - ipos;\n              pos = ipos - 1; // incremented again at end of loop\n            }\n            break;\n          }\n        }\n\n        // if there's no preceeding '/', trim start if non-empty\n        if (ipos < 0 && pos > 0) {\n          if (pos != 2 ||\n            path.charCodeAt(0) != CharCode.DOT ||\n            path.charCodeAt(1) != CharCode.DOT\n          ) { // exclude '..' itself\n            path = path.substring(pos + 4);\n            len = path.length;\n            continue;\n          }\n        }\n      }\n    }\n    pos++;\n  }\n  return len > 0 ? path : \".\";\n}\n\n/** Resolves the specified path relative to the specified origin. */\nexport function resolvePath(normalizedPath: string, origin: string): string {\n  if (normalizedPath.startsWith(\"std/\")) {\n    return normalizedPath;\n  }\n  return normalizePath(\n    dirname(origin) + PATH_DELIMITER + normalizedPath\n  );\n}\n\n/** Obtains the directory portion of a normalized path. */\nexport function dirname(normalizedPath: string): string {\n  var pos = normalizedPath.length;\n  if (pos <= 1) {\n    if (pos == 0) return \".\";\n    if (normalizedPath.charCodeAt(0) == separator) {\n      return normalizedPath;\n    }\n  }\n  while (--pos > 0) {\n    if (normalizedPath.charCodeAt(pos) == separator) {\n      return normalizedPath.substring(0, pos);\n    }\n  }\n  return \".\";\n}\n","/** @module util *//***/\n\nconst indentX1 = \"  \";\nconst indentX2 = \"    \";\nconst indentX4 = \"        \";\n\n/** Creates an indentation matching the number of specified levels. */\nexport function indent(sb: string[], level: i32): void {\n  while (level >= 4) {\n    sb.push(indentX4);\n    level -= 4;\n  }\n  if (level >= 2) {\n    sb.push(indentX2);\n    level -= 2;\n  }\n  if (level) {\n    sb.push(indentX1);\n  }\n}\n","/** @module util *//***/\n\n/** Reads an 8-bit integer from the specified buffer. */\nexport function readI8(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset];\n}\n\n/** Writes an 8-bit integer to the specified buffer. */\nexport function writeI8(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset] = value;\n}\n\n/** Reads a 16-bit integer from the specified buffer. */\nexport function readI16(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8;\n}\n\n/** Writes a 16-bit integer to the specified buffer. */\nexport function writeI16(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n}\n\n/** Reads a 32-bit integer from the specified buffer. */\nexport function readI32(buffer: Uint8Array, offset: i32): i32 {\n  return buffer[offset    ]\n       | buffer[offset + 1] << 8\n       | buffer[offset + 2] << 16\n       | buffer[offset + 3] << 24;\n}\n\n/** Writes a 32-bit integer to the specified buffer. */\nexport function writeI32(value: i32, buffer: Uint8Array, offset: i32): void {\n  buffer[offset    ] = value;\n  buffer[offset + 1] = value >>> 8;\n  buffer[offset + 2] = value >>> 16;\n  buffer[offset + 3] = value >>> 24;\n}\n\n/** Reads a 64-bit integer from the specified buffer. */\nexport function readI64(buffer: Uint8Array, offset: i32): I64 {\n  var lo = readI32(buffer, offset);\n  var hi = readI32(buffer, offset + 4);\n  return i64_new(lo, hi);\n}\n\n/** Writes a 64-bit integer to the specified buffer. */\nexport function writeI64(value: I64, buffer: Uint8Array, offset: i32): void {\n  writeI32(i64_low(value), buffer, offset);\n  writeI32(i64_high(value), buffer, offset + 4);\n}\n\n/** Reads a 32-bit float from the specified buffer. */\nexport function readF32(buffer: Uint8Array, offset: i32): f32 {\n  return i32_as_f32(readI32(buffer, offset));\n}\n\n/** Writes a 32-bit float to the specified buffer. */\nexport function writeF32(value: f32, buffer: Uint8Array, offset: i32): void {\n  writeI32(f32_as_i32(value), buffer, offset);\n}\n\n/** Reads a 64-bit float from the specified buffer. */\nexport function readF64(buffer: Uint8Array, offset: i32): f64 {\n  return i64_as_f64(readI64(buffer, offset));\n}\n\n/** Writes a 64-bit float to the specified buffer. */\nexport function writeF64(value: f64, buffer: Uint8Array, offset: i32): void {\n  var valueI64 = f64_as_i64(value);\n  writeI32(i64_low(valueI64), buffer, offset);\n  writeI32(i64_high(valueI64), buffer, offset + 4);\n}\n"],"sourceRoot":""}