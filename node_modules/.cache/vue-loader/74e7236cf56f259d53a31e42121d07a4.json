{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/UseTest/index.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/UseTest/index.vue","mtime":1610544258554},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/sass-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoudGVzdCB7CiAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTsKICBwYWRkaW5nLWxlZnQ6IDEwcHg7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/UseTest","sourcesContent":["<template>\n  <div class='test'>\n    Name : {{ propControlData.properties.Name }}\n    <br/>\n    ID : {{ propControlData.properties.ID }}\n    <br/>\n    Selected : {{selectedControlTest}}\n    <br/>\n    <button @click=\"onAdd\">add</button>\n    <button @click=\"onUpdate\">update</button>\n    <button @click=\"onDelete\">delete</button>\n    <button @click=\"onSelect\">select</button>\n    <use-test v-for=\"(key, index) in controls\"\n      :key=\"index\"\n      :controlId=\"key\"\n      :userFormId=\"userFormId\"/>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\nimport { Component, Prop } from 'vue-property-decorator'\nimport { State, Action } from 'vuex-class'\nimport { IaddControl, IupdateControl, IdeleteControl, IselectControl, IfdEmitAction, IideEmitAction } from '@/storeModules/fd/actions'\n@Component({\n  name: 'UseTest'\n})\nexport default class UseTest extends FdControlVue {\n  $parent!: UseTest | Vue\n  @Action('fd/fdActionSample') fdActionSample!: (payload: any) => void\n  @Action('fd/addControl') addControl!: (payload: IaddControl) => void\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void\n  @Action('fd/deleteControl') deleteControl!: (payload: IdeleteControl) => void\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void\n  @Action('fd/fdEmitAction') fdEmitAction!: (payload: IfdEmitAction) => void\n  @Action('fd/ideEmitAction') ideEmitAction!: (payload: IideEmitAction) => void\n  @State(state => state.fd.userformData) userformData!: userformData\n  @State(state => state.fd.selectedControls) selectedControlTest!: selectedControls\n  @Prop({ required: true, type: String }) public controlId! : string\n  @Prop({ required: true, type: String }) public userFormId! : string\n\n  onAdd () {\n    const propData = this.propControlData.properties\n    const id = propData.ID as string + 1\n    const Name = propData.Name ? propData.Name : ''\n\n    const addTarget = this\n    this.addControl({\n      userFormId: this.userFormId,\n      controlId: this.controlId,\n      addId: id,\n      item: { properties: { Name: Name, ID: id }, controls: [], extraDatas: null, type: 'Label' }\n    })\n  }\n\n  onUpdate () {\n    this.updateControl({\n      userFormId: this.userFormId,\n      controlId: this.controlId,\n      propertyName: 'Name',\n      value: 'update'\n    })\n  }\n\n  onDelete () {\n    if (this.$parent instanceof UseTest) {\n      this.deleteControl({\n        userFormId: this.userFormId,\n        parentId: this.$parent.controlId,\n        targetId: this.controlId\n      })\n    }\n  }\n\n  onSelect () {\n    this.selectControl({\n      userFormId: this.userFormId,\n      select: { container: [this.userFormId], selected: [this.controlId] }\n    })\n  }\n\n  get propControlData () :controlData {\n    return this.userformData[this.userFormId][this.controlId]\n  }\n\n  get controls () {\n    return this.propControlData.controls\n  }\n}\n</script>\n\n<style lang=\"scss\">\n.test {\n  border: 1px solid blue;\n  padding-left: 10px;\n}\n</style>\n"]}]}