{"remainingRequest":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/formcontrols/src/FormDesigner/components/organisms/FDHeader/index.vue?vue&type=style&index=0&id=baa12ea4&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/formcontrols/src/FormDesigner/components/organisms/FDHeader/index.vue","mtime":1610544258558},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouYm9keSB7CiAgd2lkdGg6IDEwMCU7CiAgYm94LXNoYWRvdzogYm94LXNpemluZzsKfQoudGFibGluayB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSgyNDAsIDIzNCwgMjM0LCAwLjg3Nyk7CiAgY29sb3I6IHJnYigxNywgMTcsIDE3KTsKICBwYWRkaW5nOiA1cHg7CiAgY3Vyc29yOiBwb2ludGVyOwogIGZvbnQtc2l6ZTogMTJweDsKICBib3JkZXI6IG5vbmU7CiAgZmxvYXQ6IGxlZnQ7Cn0KLnN1Yi1tZW51LWxpIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMjVweCAxZnI7Cn0KLnRoaXJkcm93IHsKICBtYXJnaW4tdG9wOiA1cHg7Cn0KLnRhYmxpbms6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICM0ZGJjZTA7Cn0KCi5maXJzdHJvdyB7CiAgZm9udC1zaXplOiAxNXB4Owp9Ci5zZWNvbmRyb3cgewogIGJvcmRlcjogMXB4IHRyYW5zcGFyZW50OwogIHBhZGRpbmc6IDVweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI0MCwgMjM0LCAyMzQsIDAuODc3KTsKICBoZWlnaHQ6IDIwcHg7CiAgZGlzcGxheTogZmxleDsKfQouYnV0dG9ucyB7CiAgZmxvYXQ6IHJpZ2h0OwogIGxpbmUtaGVpZ2h0OiBub3JtYWw7Cn0KLm1pbiAubWF4IC5jbG9zZTEgewogIHdpZHRoOiA0MHB4Owp9Ci5jbG9zZTE6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6IHJlZDsKfQouZmEgewogIG1hcmdpbi1sZWZ0OiAzcHg7CiAgbWFyZ2luLXJpZ2h0OiAzcHg7Cn0KLnBhZGRpbmcgewogIHBhZGRpbmctdG9wOiAzcHg7Cn0KLm1hdGVyaWFsLWljb25zIHsKICBzaXplOiAxNXB4Owp9Ci5tYXRlcmlhbC1mbG9hdCB7CiAgZmxvYXQ6IGxlZnQ7Cn0KaTpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogIzRkYmNlMDsKICBjdXJzb3I6IGRlZmF1bHQ7Cn0KCi51aS10aXRsZWJhciB7CiAgZGlzcGxheTogZmxleDsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDMycHg7CiAgYmFja2dyb3VuZDogIzAwNzJjNjsKICB1c2VyLXNlbGVjdDogbm9uZTsKICBjdXJzb3I6IGRlZmF1bHQ7Cn0KLnVpLXRpdGxlaWNvbiB7CiAgZmxleC1ncm93OiAxOwogIG1heC13aWR0aDogMzJweDsKICBtYXgtaGVpZ2h0OiAzMnB4Owp9Ci51aS10aXRsZXRleHQgewogIGZsZXgtZ3JvdzogMjsKICBtYXgtaGVpZ2h0OiAzMnB4OwogIHdpZHRoOiBhdXRvOwogIGZvbnQ6IDEycHgvMzJweCAiU2Vnb2UgVUkiLCBBcmlhbCwgc2Fucy1zZXJpZjsKICBjb2xvcjogI2ZmZjsKICB0ZXh0LWluZGVudDogMTBweDsKfQoudWktdGl0bGVjb250cm9scyB7CiAgbWF4LXdpZHRoOiAxNDRweDsKICBtYXgtaGVpZ2h0OiAzMnB4OwogIGZsZXgtZ3JvdzogMTsKfQoudWktYnRuIHsKICBtYXJnaW46IDA7CiAgd2lkdGg6IDQ4cHg7CiAgaGVpZ2h0OiAzMnB4OwogIGJvcmRlcjogMDsKICBvdXRsaW5lOiAwOwogIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50Owp9Ci51aS1idG46aG92ZXIgewogIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTUsIDI1NSwgMC4xKTsKfQoudWktYnRuLmNsb3NlOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiAjZTgxMTIzOwp9CmhyIHsKICBtYXJnaW46IDBweDsKfQoudWktYnRuIHN2ZyBwYXRoLAoudWktYnRuIHN2ZyByZWN0LAoudWktYnRuIHN2ZyBwb2x5Z29uIHsKICBmaWxsOiAjZmZmOwp9Ci51aS1idG4gc3ZnIHsKICB3aWR0aDogMTBweDsKICBoZWlnaHQ6IDEwcHg7Cn0KCi5kcm9wZG93bi1jb250ZW50IHsKICBkaXNwbGF5OiBub25lOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjFmMWYxOwogIG1pbi13aWR0aDogMTYwcHg7CiAgYm94LXNoYWRvdzogMHB4IDhweCAxNnB4IDBweCByZ2JhKDAsIDAsIDAsIDAuMik7CiAgei1pbmRleDogMTsKfQoKLmRyb3Bkb3duLWNvbnRlbnQgYSB7CiAgY29sb3I6IGJsYWNrOwogIHBhZGRpbmc6IDEycHggMTZweDsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgZGlzcGxheTogYmxvY2s7Cn0KCi5kcm9wZG93bi1jb250ZW50IGE6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICNkZGQ7Cn0KCi50YWJsaW5rOmhvdmVyIC5kcm9wZG93bi1jb250ZW50IHsKICBkaXNwbGF5OiBibG9jazsKfQouZHJvcGRvd24gewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0KCi5jb21tYW5kYnV0dG9uLWVsZW1lbnQgewogIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7CiAgYm9yZGVyLXJhZGl1czogM3B4OwogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogIG1pbi13aWR0aDogNTBweDsKICBtYXgtd2lkdGg6IDExMnB4OwogIHdpZHRoOiBmaXQtY29udGVudDsKICBoZWlnaHQ6IGZpdC1jb250ZW50OwogIG1pbi1oZWlnaHQ6IDIwcHg7CiAgcGFkZGluZzogMHB4IDVweCAwcHggNXB4OwogIG92ZXJmbG93OiBoaWRkZW47Cn0KLmRpYWxvZy1hY3Rpb24tYnV0dG9uIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjJlZGVkOwogIHdpZHRoOiA3OXB4OwogIGhlaWdodDogMzVweDsKICBwYWRkaW5nLWxlZnQ6IDVweDsKICBwYWRkaW5nLXJpZ2h0OiA1cHg7CiAgcGFkZGluZy10b3A6IDhweDsKICBwYWRkaW5nLWJvdHRvbTogOHB4OwogIGJvcmRlcjogMXB4IHNvbGlkIGdyYXk7CiAgYm9yZGVyLXJhZGl1czogM3B4OwogIG92ZXJmbG93OiBoaWRkZW47Cn0KLmJ0bi1zdHlsZSB7CiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTsKICBib3JkZXItcmFkaXVzOiA1cHg7CiAgYmFja2dyb3VuZC1jb2xvcjogd2hpdGU7CiAgbWluLXdpZHRoOiA1MHB4OwogIG1heC13aWR0aDogMTEycHg7CiAgd2lkdGg6IGZpdC1jb250ZW50OwogIGhlaWdodDogZml0LWNvbnRlbnQ7CiAgbWluLWhlaWdodDogMjBweDsKICBwYWRkaW5nOiAwcHggNXB4IDBweCA1cHg7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICB0b3A6IC0zcHg7CiAgcG9zaXRpb246IHJlbGF0aXZlOwp9Cjpmb2N1cyB7CiAgb3V0bGluZTogbm9uZTsKfQoubWVudS1iYXIgewogIGJhY2tncm91bmQ6IHJnYmEoMjQwLCAyMzQsIDIzNCk7CiAgbGluZS1oZWlnaHQ6IDI0cHg7CiAgY3Vyc29yOiBjb250ZXh0LW1lbnU7CiAgbWFyZ2luLWxlZnQ6IDNweDsKfQoKLm1lbnUtYmFyIHVsIHsKICBkaXNwbGF5OiBpbmxpbmUtZmxleDsKICBsaXN0LXN0eWxlOiBub25lOwogIG1hcmdpbjogMHB4Owp9CgoubWVudS1iYXIgdWwgPiBsaSB7CiAgbGlzdC1zdHlsZTogbm9uZTsKICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgcGFkZGluZzogMHB4IDZweDsKICBmb250LXNpemU6IDEycHg7Cn0KCi5tZW51LWJhciB1bCBsaSBhIHsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgbWFyZ2luLWxlZnQ6IC0xNXB4Owp9Ci5tZW51LWJhciB1bCBsaSBhOnZpc2l0ZWQgewogIGNvbG9yOiBibGFjazsKfQoubWVudS1iYXIgdWwgewogIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMjQwLCAyMzQsIDIzNCk7CiAgcGFkZGluZzogMHB4Owp9CgouYWN0aXZlLAoubWVudS1iYXIgdWwgbGk6aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOwogIHotaW5kZXg6IDEwOwp9Cgouc3ViLW1lbnUtMSB7CiAgZGlzcGxheTogbm9uZTsKICBib3gtc2hhZG93OiAycHggMnB4IHJnYmEoMCwgMCwgMCwgMC4yKTsKfQoKLm1lbnUtYmFyIHVsIGxpOmhvdmVyIC5zdWItbWVudS0xIHsKICBkaXNwbGF5OiBibG9jazsKICBwb3NpdGlvbjogYWJzb2x1dGU7Cn0KCi5zdWItbWVudS0xIHVsIGxpIHsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIGJvcmRlcjogMC4xcHggc29saWQgd2hpdGU7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMwcHggMTUwcHg7CiAgd29yZC13cmFwOiBub25lOwp9Cgouc3ViLW1lbnUtMSB1bCB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICB3aWR0aDogMjAwcHg7CiAgcGFkZGluZzogMHB4OwogIG1hcmdpbi1sZWZ0OiAtNnB4Owp9Cgouc3ViLW1lbnUtMSB1bCBsaTpob3ZlciB7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE1NSwgMjE1LCAyNTUpOwogIGJvcmRlci1jb2xvcjogcmdiKDAsIDE1MywgMjU1KTsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDHeader","sourcesContent":["<template>\n  <div>\n    <div class=\"firstrow\">\n      <div class=\"ui-titlebar\">\n        <div class=\"ui-titletext\">Visual Basic for Applications - Book1</div>\n        <div class=\"ui-titlecontrols\">\n          <!-- fixed svg issue -->\n          <button class=\"ui-btn minimize\">\n            <FDSVGImage name=\"minimize.svg\" />\n          </button>\n          <button class=\"ui-btn maximize\">\n            <FDSVGImage name=\"maximize.svg\" />\n          </button>\n          <button class=\"ui-btn close\">\n            <FDSVGImage name=\"close-button.svg\" />\n          </button>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"secondrow\">\n      <i class=\"material-icons material-float\">&#xe5d4;</i>\n      <div class=\"menu-bar\">\n        <ul>\n          <li><u>F</u>ile</li>\n          <li><u>E</u>dit</li>\n          <li @click=\"subMenuDisplay\">\n            <u>V</u>iew\n            <div class=\"sub-menu-1\" v-if=\"displaySubMenu === true\">\n              <ul class=\"sub-menu-ul\">\n                <li class=\"sub-menu-li\">\n                  <CodeLogo class=\"fa padding\" />\n                  <span><u>C</u>ode</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <ObjectLogo class=\"fa padding\" />\n                  <span>O<u>b</u>ject</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <ObjBrowserLogo class=\"fa padding\" />\n                  <span><u>O</u>bject Browser</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>I</u>mmediate Window</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>Local<u>s</u> Window</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>Watc<u>h</u> Window</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>Call Stac<u>k</u></span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <PjExplorerLogo class=\"fa padding\" />\n                  <span><u>P</u>roject Explorer</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <PjPropertyLogo class=\"fa padding\" />\n                  <span>Properties <u>W</u>indow</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <ToolBoxLogo class=\"fa padding\" />\n                  <span>ToolBo<u>x</u></span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>T<u>a</u>b Order</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>Microscoft Excel</span>\n                </li>\n              </ul>\n            </div>\n          </li>\n          <li @click=\"subMenuDisplay\">\n            <u>I</u>nsert\n            <div class=\"sub-menu-1\" v-if=\"displaySubMenu === true\">\n              <ul class=\"sub-menu-ul\">\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>P</u>rocedure</span>\n                </li>\n                <li class=\"sub-menu-li\" @click=\"insertUserForm()\">\n                  <UserFormLogo class=\"fa padding\" />\n                  <span><u>U</u>serform</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>M</u>odule</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>C</u>lass Module</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>F<u>i</u>le</span>\n                </li>\n              </ul>\n            </div>\n          </li>\n          <li @click=\"subMenuDisplay\">\n            <u>F</u>ormat\n            <div class=\"sub-menu-1\" v-if=\"displaySubMenu === true\">\n              <ul class=\"sub-menu-ul\">\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>A</u>lign</span>\n                </li>\n                <li class=\"sub-menu-li\">\n                  <UserFormLogo class=\"fa padding\" />\n                  <span><u>M</u>ake Same Size</span>\n                </li>\n                <hr />\n                <li\n                  class=\"sub-menu-li\"\n                  :style=\"{ opacity: getdisableStyle('sizeToFit') ? 0.5 : 1 }\"\n                  @click=\"getdisableStyle('sizeToFit') ? '' : sizeToFit()\"\n                >\n                  <span></span>\n                  <span>Size to <u>F</u>it</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                 :style=\"{ opacity: getdisableStyle('sizeToGrid') ? 0.5 : 1 }\"\n                  @click=\"getdisableStyle('sizeToGrid') ? '' : sizeToGrid()\"\n                >\n                  <span></span>\n                  <span>Size to Gri<u>d</u></span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>H</u>orizontal Spacing</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('makeEqual') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('makeEqual') ? '' : makeEqual('Left')\"\n                >\n                  <span></span>\n                  <span>Make <u>E</u>qual</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('incDecspacing') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('incDecspacing') ? '' : incDecspacing('Left', 10)\"\n                >\n                  <span></span>\n                  <span><u>I</u>ncrease</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('incDecspacing') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('incDecspacing') ? '' : incDecspacing('Left', -10)\"\n                >\n                  <span></span>\n                  <span><u>D</u>ecrease</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('removeSpace') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('removeSpace') ? '' : removeSpace('Left')\"\n                >\n                  <span></span>\n                  <span><u>R</u>emove</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>V</u>ertical Spacing</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('makeEqual') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('makeEqual') ? '' : makeEqual('Top')\"\n                >\n                  <span></span>\n                  <span>Make <u>E</u>qual</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('incDecspacing') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('incDecspacing') ? '' : incDecspacing('Top', 10)\"\n                >\n                  <span></span>\n                  <span><u>I</u>ncrease</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('incDecspacing') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('incDecspacing') ? '' : incDecspacing('Top', -10)\"\n                >\n                  <span></span>\n                  <span><u>D</u>ecrease</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('removeSpace') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('removeSpace') ? '' : removeSpace('Top')\"\n                >\n                  <span></span>\n                  <span><u>R</u>emove</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>C</u>enter in Form</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('centreInForm') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('centreInForm') ? '' : centreInForm('horizontal')\"\n                >\n                  <span></span>\n                  <span><u>H</u>orizontally</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('centreInForm') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('centreInForm') ? '' : centreInForm('vertical')\"\n                >\n                  <span></span>\n                  <span><u>V</u>ertically</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span>A<u>r</u>range Buttons</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('arrangeButton') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('arrangeButton') ? '' : arrangeButton('right')\"\n                >\n                  <span></span>\n                  <span><u>R</u>ight</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('arrangeButton') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('arrangeButton') ? '' : arrangeButton('bottom')\"\n                >\n                  <span></span>\n                  <span><u>B</u>ottom</span>\n                </li>\n                <hr />\n                <li\n                  class=\"sub-menu-li\"\n                  :style=\"{ opacity: getdisableStyle('group') ? 0.5 : 1 }\"\n                  @click=\"getdisableStyle('group') ? '' : groupControl()\"\n                >\n                  <span></span>\n                  <span><u>G</u>roup</span>\n                </li>\n                <li\n                  class=\"sub-menu-li\"\n                  :style=\"{ opacity: getdisableStyle('unGroup') ? 0.5 : 1 }\"\n                  @click=\"getdisableStyle('unGroup') ? '' : unGroupControl()\"\n                >\n                  <span></span>\n                  <span><u>U</u>nGroup</span>\n                </li>\n                <hr />\n                <li class=\"sub-menu-li\">\n                  <span></span>\n                  <span><u>O</u>rder</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('order') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('order') ? '' : bringFront()\"\n                >\n                  <span></span>\n                  <span><u>B</u>ring to Front</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('order') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('order') ? '' : sendBack()\"\n                >\n                  <span></span>\n                  <span><u>S</u>end to Back</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('order') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('order') ? '' : bringForward()\"\n                >\n                  <span></span>\n                  <span><u>B</u>ring Forward</span>\n                </li>\n                <li class=\"sub-menu-li\"\n                :style=\"{ opacity: getdisableStyle('order') ? 0.5 : 1 }\"\n                @click=\"getdisableStyle('order') ? '' : sendBackward()\"\n                >\n                  <span></span>\n                  <span><u>S</u>end Backward</span>\n                </li>\n              </ul>\n            </div>\n          </li>\n          <li><u>D</u>ebug</li>\n          <li @click=\"clickChangeMode\"><u>R</u>un</li>\n          <li><u>T</u>ools</li>\n          <li><u>A</u>dd-Ins</li>\n          <li><u>W</u>indow</li>\n          <li><u>H</u>elp</li>\n        </ul>\n      </div>\n    </div>\n\n    <div class=\"thirdrow\">\n      <i class=\"material-icons\">&#xe5d4;</i>\n      <FileSaveLogo class=\"fa\" />\n      <CutLogo class=\"fa\" />\n      <CopyLogo class=\"fa\" />\n      <PasteLogo class=\"fa\" />\n      <FindLogo class=\"fa\" />\n      <UndoLogo class=\"fa\" />\n      <RedoLogo class=\"fa\" />\n      <DesignModeLogo class=\"fa\" />\n      <PjExplorerLogo class=\"fa\" />\n      <PjPropertyLogo class=\"fa\" />\n      <ObjBrowserLogo class=\"fa\" />\n      <ToolBoxLogo class=\"fa\" />\n      <HelpLogo class=\"fa\" />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue } from 'vue-property-decorator'\nimport { State, Action } from 'vuex-class'\nimport {\n  IaddUserform,\n  IupdateControlExtraData\n} from '@/storeModules/fd/actions'\nimport { ControlPropertyData } from '@/FormDesigner/models/ControlsTableProperties/ControlPropertyData'\nimport CutLogo from '../../../../assets/cut.svg'\nimport FileSaveLogo from '../../../../assets/file-save.svg'\nimport CopyLogo from '../../../../assets/copy.svg'\nimport PasteLogo from '../../../../assets/paste.svg'\nimport FindLogo from '../../../../assets/find.svg'\nimport UndoLogo from '../../../../assets/undo.svg'\nimport RedoLogo from '../../../../assets/redo.svg'\nimport DesignModeLogo from '../../../../assets/design-mode.svg'\nimport PjExplorerLogo from '../../../../assets/pj-explorer.svg'\nimport PjPropertyLogo from '../../../../assets/pj-property.svg'\nimport ObjBrowserLogo from '../../../../assets/obj-browser.svg'\nimport ToolBoxLogo from '../../../../assets/tool-box.svg'\nimport UserFormLogo from '../../../../assets/user-from.svg'\nimport HelpLogo from '../../../../assets/help.svg'\nimport CodeLogo from '../../../../assets/view-code.svg'\nimport ObjectLogo from '../../../../assets/view-object.svg'\nimport FDSVGImage from '@/FormDesigner/components/atoms/FDSVGImage/index.vue'\nimport { EventBus } from '@/FormDesigner/event-bus'\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\n\n@Component({\n  name: 'Header',\n  components: {\n    FileSaveLogo,\n    CutLogo,\n    CopyLogo,\n    PasteLogo,\n    FindLogo,\n    UndoLogo,\n    RedoLogo,\n    DesignModeLogo,\n    PjExplorerLogo,\n    PjPropertyLogo,\n    ObjBrowserLogo,\n    ToolBoxLogo,\n    UserFormLogo,\n    CodeLogo,\n    ObjectLogo,\n    HelpLogo,\n    FDSVGImage\n  }\n})\nexport default class Header extends FDCommonMethod {\n  displaySubMenu: boolean = false;\n  @Action('fd/addUserform') addControl!: (payload: IaddUserform) => void;\n  @Action('fd/changeRunMode') changeRunMode!: (payload: boolean) => void;\n\n  @State((state) => state.fd.selectedControls)\n  selectedControls!: fdState['selectedControls'];\n  @State((state) => state.fd.userformData) userformData!: userformData;\n  @State((state) => state.fd.isRunMode) isRunMode!: boolean;\n  @Action('fd/updateControlExtraData') updateControlExtraData!: (\n    payload: IupdateControlExtraData\n  ) => void;\n  propControlData = {};\n  userFormId = 'ID_USERFORM1';\n  insertUserForm () {\n    this.propControlData = this.userformData\n    const userform = new ControlPropertyData()\n    const userFormId = `ID_USERFORM${\n      Object.keys(this.userformData).length + 1\n    }`\n    const Name = `UserForm${Object.keys(this.userformData).length + 1}`\n    const Caption = `UserForm${Object.keys(this.userformData).length + 1}`\n    const ID = Object.keys(this.userformData).length + 1\n    this.addControl({\n      target: this,\n      key: userFormId,\n      value: {\n        properties: {\n          ...userform.data.UserForm,\n          Name: Name,\n          ID: ID,\n          Caption: Caption\n        },\n        controls: [],\n        extraDatas: { display: 'none' },\n        type: 'Userform'\n      }\n    })\n  }\n  subMenuDisplay () {\n    this.displaySubMenu = !this.displaySubMenu\n  }\n  clickChangeMode () {\n    this.changeRunMode(!this.isRunMode)\n  }\n  makeEqual (type: keyof controlProperties) {\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    const ctrlContainer = this.selectedControls[this.userFormId].container[0]\n    const controls = usrFrmData[ctrlContainer].controls\n    let divstyle: Array<IGroupStyle> = []\n    let getGroupIndex = -1\n    EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n      divstyle = divstayleArray\n    })\n    if (ctrlSel[0].startsWith('group')) {\n      getGroupIndex = divstyle.findIndex((val) => val.groupName === ctrlSel[0])\n    }\n    let propValue = 0\n    const leftArray: string[] = []\n    const rightArray: string[] = []\n    for (let index = 1; index < ctrlSel.length; index++) {\n      const selLeft = ctrlSel[0].startsWith('group')\n        ? parseInt(divstyle[getGroupIndex].left!)\n        : usrFrmData[ctrlSel[0]].properties.Left\n      const selTop = ctrlSel[0].startsWith('group')\n        ? parseInt(divstyle[getGroupIndex].top!)\n        : usrFrmData[ctrlSel[0]].properties.Top\n      if (!ctrlSel[index].startsWith('group')) {\n        const ctrlProp = usrFrmData[ctrlSel[index]].properties\n        if (type === 'Left') {\n          if (ctrlProp.Left! <= selLeft!) {\n            leftArray.push(ctrlSel[index])\n          } else {\n            rightArray.push(ctrlSel[index])\n          }\n        } else if (type === 'Top') {\n          if (ctrlProp.Top! <= selTop!) {\n            leftArray.push(ctrlSel[index])\n          } else {\n            rightArray.push(ctrlSel[index])\n          }\n        }\n      } else {\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n          divstyle = divstayleArray\n        })\n        const getIndex = divstyle.findIndex(\n          (val) => val.groupName === ctrlSel[index]\n        )\n        const groupLeft = parseInt(divstyle[getIndex].left!)\n        const groupTop = parseInt(divstyle[getIndex].top!)\n        const groupConrol = this.getGroupControl(ctrlSel[index])\n        if (type === 'Left') {\n          if (groupLeft <= selLeft!) {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Left!) === groupLeft) {\n                leftArray.push(ctrl)\n              }\n            }\n          } else {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Left!) === groupLeft) {\n                rightArray.push(ctrl)\n              }\n            }\n          }\n        } else if (type === 'Top') {\n          if (groupTop <= selTop!) {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Top!) === groupTop) {\n                leftArray.push(ctrl)\n              }\n            }\n          } else {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Top!) === groupTop) {\n                rightArray.push(ctrl)\n              }\n            }\n          }\n        }\n      }\n    }\n    if (ctrlSel[0].startsWith('group')) {\n      const getIndex = divstyle.findIndex(\n        (val) => val.groupName === ctrlSel[0]\n      )\n      const groupLeft = parseInt(divstyle[getIndex].left!)\n      const groupTop = parseInt(divstyle[getIndex].top!)\n      const groupConrol = this.getGroupControl(ctrlSel[0])\n      if (type === 'Left') {\n        for (let ctrl of groupConrol) {\n          const prop = this.userformData[this.userFormId][ctrl].properties\n          if (Math.floor(prop.Left!) === groupLeft) {\n            leftArray.push(ctrl)\n            rightArray.push(ctrl)\n          }\n        }\n      } else if (type === 'Top') {\n        for (let ctrl of groupConrol) {\n          const prop = this.userformData[this.userFormId][ctrl].properties\n          if (Math.floor(prop.Top!) === groupTop) {\n            leftArray.push(ctrl)\n            rightArray.push(ctrl)\n          }\n        }\n      }\n    } else {\n      leftArray.unshift(ctrlSel[0])\n      rightArray.push(ctrlSel[0])\n    }\n    console.log(leftArray, '', rightArray)\n    if (type === 'Left') {\n      leftArray.sort((a, b) => {\n        return usrFrmData[a].properties.Left! - usrFrmData[b].properties.Left!\n      })\n      rightArray.sort((a, b) => {\n        return usrFrmData[a].properties.Left! - usrFrmData[b].properties.Left!\n      })\n    } else if (type === 'Top') {\n      leftArray.sort((a, b) => {\n        return usrFrmData[a].properties.Top! - usrFrmData[b].properties.Top!\n      })\n      rightArray.sort((a, b) => {\n        return usrFrmData[a].properties.Top! - usrFrmData[b].properties.Top!\n      })\n    }\n    let leftControl = { ...usrFrmData[leftArray[0]].properties }\n    if (leftControl.GroupID !== '') {\n      const groupIndex = divstyle.findIndex(\n        (val) => val.groupName === leftControl.GroupID\n      )\n      const groupSize = divstyle[groupIndex]\n      leftControl = {\n        ...leftControl,\n        Width: parseInt(divstyle[groupIndex].width!),\n        Height: parseInt(divstyle[groupIndex].height!),\n        Left: parseInt(divstyle[groupIndex].left!),\n        Top: parseInt(divstyle[groupIndex].top!)\n      }\n    }\n    let rightControl = {\n      ...usrFrmData[rightArray[rightArray.length - 1]].properties\n    }\n    if (rightControl.GroupID !== '') {\n      const groupIndex = divstyle.findIndex(\n        (val) => val.groupName === rightControl.GroupID\n      )\n      const groupSize = divstyle[groupIndex]\n      rightControl = {\n        ...leftControl,\n        Width: parseInt(divstyle[groupIndex].width!),\n        Height: parseInt(divstyle[groupIndex].height!),\n        Left: parseInt(divstyle[groupIndex].left!),\n        Top: parseInt(divstyle[groupIndex].top!)\n      }\n    }\n    let totalSize = 0\n    for (let index = 0; index < ctrlSel.length; index++) {\n      if (type === 'Left') {\n        if (!ctrlSel[index].startsWith('group')) {\n          const ctrlProp = usrFrmData[ctrlSel[index]].properties\n          totalSize = totalSize + ctrlProp.Width!\n        } else {\n          const groupIndex = divstyle.findIndex(\n            (val) => val.groupName === ctrlSel[index]\n          )\n          totalSize = totalSize + parseInt(divstyle[groupIndex].width!)\n        }\n      } else if (type === 'Top') {\n        if (!ctrlSel[index].startsWith('group')) {\n          const ctrlProp = usrFrmData[ctrlSel[index]].properties\n          totalSize = totalSize + ctrlProp.Height!\n        } else {\n          const groupIndex = divstyle.findIndex(\n            (val) => val.groupName === ctrlSel[index]\n          )\n          totalSize = totalSize + parseInt(divstyle[groupIndex].height!)\n        }\n      }\n    }\n    let diffrence = 0\n    if (type === 'Left') {\n      diffrence =\n        (rightControl.Left! +\n          rightControl.Width! -\n          leftControl.Left! -\n          totalSize) /\n        (ctrlSel.length - 1)\n    } else if (type === 'Top') {\n      diffrence =\n        (rightControl.Top! +\n          rightControl.Height! -\n          leftControl.Top! -\n          totalSize) /\n        (ctrlSel.length - 1)\n    }\n    const unique = () => {\n      var a = leftArray.concat(rightArray)\n      for (var i = 0; i < a.length; ++i) {\n        for (var j = i + 1; j < a.length; ++j) {\n          if (a[i] === a[j]) {\n            a.splice(j--, 1)\n          }\n        }\n      }\n      return a\n    }\n    const combineArray = unique()\n    for (let index = 1; index < combineArray.length - 1; index++) {\n      const prevCtrlProp = usrFrmData[combineArray[index - 1]].properties\n      const ctrlProp = usrFrmData[combineArray[index]].properties\n      let prevIndex = -1\n      const controlPropIndex = -1\n      if (type === 'Left') {\n        if (prevCtrlProp.GroupID === '' && ctrlProp.GroupID === '') {\n          propValue = prevCtrlProp.Left! + prevCtrlProp.Width! + diffrence\n          this.updateControlProperty(type, propValue, combineArray[index])\n        } else {\n          if (prevCtrlProp.GroupID !== '') {\n            prevIndex = divstyle.findIndex(\n              (val) => val.groupName === prevCtrlProp.GroupID\n            )\n            propValue =\n              parseInt(divstyle[prevIndex].left!) +\n              parseInt(divstyle[prevIndex].width!) +\n              diffrence\n          } else {\n            propValue = prevCtrlProp.Left! + prevCtrlProp.Width! + diffrence\n          }\n          if (ctrlProp.GroupID !== '') {\n            const getIndex = divstyle.findIndex(\n              (val) => val.groupName === ctrlProp.GroupID\n            )\n            EventBus.$emit('updasteGroupSize', type, propValue, getIndex)\n          } else {\n            this.updateControlProperty(type, propValue, combineArray[index])\n          }\n        }\n      } else {\n        if (type === 'Top') {\n          if (prevCtrlProp.GroupID === '' && ctrlProp.GroupID === '') {\n            propValue = prevCtrlProp.Top! + prevCtrlProp.Height! + diffrence\n            this.updateControlProperty(type, propValue, combineArray[index])\n          } else {\n            if (prevCtrlProp.GroupID !== '') {\n              prevIndex = divstyle.findIndex(\n                (val) => val.groupName === prevCtrlProp.GroupID\n              )\n              propValue =\n                parseInt(divstyle[prevIndex].top!) +\n                parseInt(divstyle[prevIndex].height!) +\n                diffrence\n            } else {\n              propValue = prevCtrlProp.Top! + prevCtrlProp.Height! + diffrence\n            }\n            if (ctrlProp.GroupID !== '') {\n              const getIndex = divstyle.findIndex(\n                (val) => val.groupName === ctrlProp.GroupID\n              )\n              EventBus.$emit('updasteGroupSize', type, propValue, getIndex)\n            } else {\n              this.updateControlProperty(type, propValue, combineArray[index])\n            }\n          }\n        }\n      }\n    }\n  }\n  bringFront () {\n    const userData = this.userformData[this.userFormId]\n    const highProrControl: string[] = []\n    const lowProrControl: string[] = []\n    const container = this.getContainerList(this.getSelectedControlsDatas![0])[0]\n    const containerControls = this.userformData[this.userFormId][container].controls\n    for (const index in containerControls) {\n      const cntrlData = this.userformData[this.userFormId][containerControls[index]]\n      if (cntrlData.type === 'MultiPage' || cntrlData.type === 'Frame' || cntrlData.type === 'ListBox') {\n        highProrControl.push(containerControls[index])\n      } else {\n        lowProrControl.push(containerControls[index])\n      }\n    }\n    lowProrControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    let getLowPropHighestIndex: string = lowProrControl[lowProrControl.length - 1]\n    highProrControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    let getHighPropHighestIndex = highProrControl[highProrControl.length - 1]\n    const lowSeriesControl: string[] = []\n    const highSeriesControl: string[] = []\n    const getSelControl = [...this.getSelectedControlsDatas!]\n    getSelControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    for (const selControl of getSelControl) {\n      if (lowProrControl.includes(selControl)) {\n        lowSeriesControl.push(selControl)\n      } else {\n        highSeriesControl.push(selControl)\n      }\n    }\n    const setLowPropHighIndex = (control: string) => {\n      if (lowSeriesControl.length > 0 && lowSeriesControl.includes(control)) {\n        lowSeriesControl.pop()\n        const Index = lowProrControl.findIndex(val => userData[getLowPropHighestIndex!].extraDatas!.zIndex! - 1 === userData[val].extraDatas!.zIndex)\n        getLowPropHighestIndex = Index !== -1 ? lowProrControl[Index] : ''\n        if (Index !== -1) {\n          setLowPropHighIndex(getLowPropHighestIndex)\n        }\n      }\n    }\n    setLowPropHighIndex(getLowPropHighestIndex)\n    lowSeriesControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    if (lowSeriesControl.length > 0) {\n      const lowestZIndex = userData[lowSeriesControl[0]].extraDatas!.zIndex!\n      let nextSeries: string[] = []\n      let count = lowSeriesControl.length - 1\n      const diff = userData[getLowPropHighestIndex].extraDatas!.zIndex! - userData[lowSeriesControl[lowSeriesControl.length - 1]].extraDatas!.zIndex!\n      for (const ctrl of lowSeriesControl) {\n        const nextControl = lowSeriesControl.findIndex(val => 'zIndex' in userData[val].extraDatas! && (userData[ctrl].extraDatas!.zIndex! + 1 === userData[val].extraDatas!.zIndex!))\n        if (nextControl !== -1) {\n          nextSeries.push(ctrl)\n          count = count - 1\n        } else {\n          const difference = userData[getLowPropHighestIndex].extraDatas!.zIndex! - count\n          this.updateExtraDatas(ctrl, 'zIndex', difference)\n          if (nextSeries.length > 0) {\n            for (let i = 0; i < nextSeries.length; i++) {\n              const diff = userData[ctrl].extraDatas!.zIndex! - (nextSeries.length - i)\n              this.updateExtraDatas(nextSeries[i], 'zIndex', diff)\n            }\n            nextSeries = []\n          }\n          count = count - 1\n        }\n      }\n      let counter = 0\n      for (const ctrl of lowProrControl) {\n        if (!this.getSelectedControlsDatas!.includes(ctrl)) {\n          counter = counter + 1\n          this.updateExtraDatas(ctrl, 'zIndex', counter)\n        }\n      }\n    }\n\n    const setHighPropHighIndex = (control: string) => {\n      if (highSeriesControl.length > 0 && highSeriesControl.includes(control)) {\n        highSeriesControl.pop()\n        const Index = highProrControl.findIndex(val => userData[getHighPropHighestIndex!].extraDatas!.zIndex! - 1 === userData[val].extraDatas!.zIndex)\n        getHighPropHighestIndex = Index !== -1 ? highProrControl[Index] : ''\n        if (Index !== -1) {\n          setHighPropHighIndex(getHighPropHighestIndex)\n        }\n      }\n    }\n    setHighPropHighIndex(getHighPropHighestIndex)\n    highSeriesControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    if (highSeriesControl.length > 0) {\n      const highestZIndex = userData[highSeriesControl[0]].extraDatas!.zIndex!\n      let nextSeries: string[] = []\n      let count = highSeriesControl.length - 1\n      const diff = userData[getHighPropHighestIndex].extraDatas!.zIndex! - userData[highSeriesControl[highSeriesControl.length - 1]].extraDatas!.zIndex!\n      for (const ctrl of highSeriesControl) {\n        const nextControl = highSeriesControl.findIndex(val => 'zIndex' in userData[val].extraDatas! && (userData[ctrl].extraDatas!.zIndex! + 1 === userData[val].extraDatas!.zIndex!))\n        if (nextControl !== -1) {\n          nextSeries.push(ctrl)\n          count = count - 1\n        } else {\n          const difference = userData[getHighPropHighestIndex].extraDatas!.zIndex! - count\n          this.updateExtraDatas(ctrl, 'zIndex', difference)\n          if (nextSeries.length > 0) {\n            for (let i = 0; i < nextSeries.length; i++) {\n              const diff = userData[ctrl].extraDatas!.zIndex! - (nextSeries.length - i)\n              this.updateExtraDatas(nextSeries[i], 'zIndex', diff)\n            }\n            nextSeries = []\n          }\n          count = count - 1\n        }\n      }\n      let counter = 0\n      for (const ctrl of highProrControl) {\n        if (!this.getSelectedControlsDatas!.includes(ctrl)) {\n          counter = counter + 1\n          this.updateExtraDatas(ctrl, 'zIndex', counter)\n        }\n      }\n    }\n  }\n  sendBack () {\n    const userData = this.userformData[this.userFormId]\n    const highProrControl: string[] = []\n    const lowProrControl: string[] = []\n    const container = this.getContainerList(this.getSelectedControlsDatas![0])[0]\n    const containerControls = this.userformData[this.userFormId][container].controls\n    for (const index in containerControls) {\n      const cntrlData = this.userformData[this.userFormId][containerControls[index]]\n      if (cntrlData.type === 'MultiPage' || cntrlData.type === 'Frame' || cntrlData.type === 'ListBox') {\n        highProrControl.push(containerControls[index])\n      } else {\n        lowProrControl.push(containerControls[index])\n      }\n    }\n    lowProrControl.sort((a, b) => {\n      return userData[b].extraDatas!.zIndex! - userData[a].extraDatas!.zIndex!\n    })\n    let getLowPropHighestIndex: string = lowProrControl[lowProrControl.length - 1]\n    highProrControl.sort((a, b) => {\n      return userData[b].extraDatas!.zIndex! - userData[a].extraDatas!.zIndex!\n    })\n    let getHighPropHighestIndex = highProrControl[highProrControl.length - 1]\n    const lowSeriesControl: string[] = []\n    const highSeriesControl: string[] = []\n    const getSelControl = [...this.getSelectedControlsDatas!]\n    getSelControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    for (const selControl of getSelControl) {\n      if (lowProrControl.includes(selControl)) {\n        lowSeriesControl.push(selControl)\n      } else {\n        highSeriesControl.push(selControl)\n      }\n    }\n    const setLowPropHighIndex = (control: string) => {\n      if (lowSeriesControl.length > 0 && lowSeriesControl.includes(control)) {\n        lowSeriesControl.pop()\n        const Index = lowProrControl.findIndex(val => userData[getLowPropHighestIndex!].extraDatas!.zIndex! + 1 === userData[val].extraDatas!.zIndex)\n        getLowPropHighestIndex = Index !== -1 ? lowProrControl[Index] : ''\n        if (Index !== -1) {\n          setLowPropHighIndex(getLowPropHighestIndex)\n        }\n      }\n    }\n    setLowPropHighIndex(getLowPropHighestIndex)\n    if (lowSeriesControl.length > 0) {\n      lowSeriesControl.sort((a, b) => {\n        return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n      })\n      let count = userData[getLowPropHighestIndex].extraDatas!.zIndex!\n      for (const ctrl of lowSeriesControl) {\n        this.updateExtraDatas(ctrl, 'zIndex', count)\n        count = count + 1\n      }\n      let counter = userData[lowSeriesControl[lowSeriesControl.length - 1]].extraDatas!.zIndex!\n      for (let i = lowProrControl.length - 1; i >= 0; i--) {\n        if (!this.getSelectedControlsDatas!.includes(lowProrControl[i])) {\n          counter = counter + 1\n          this.updateExtraDatas(lowProrControl[i], 'zIndex', counter)\n        }\n      }\n    }\n\n    const setHighPropHighIndex = (control: string) => {\n      if (highSeriesControl.length > 0 && highSeriesControl.includes(control)) {\n        highSeriesControl.shift()\n        const Index = highProrControl.findIndex(val => userData[getHighPropHighestIndex!].extraDatas!.zIndex! + 1 === userData[val].extraDatas!.zIndex)\n        getHighPropHighestIndex = Index !== -1 ? highProrControl[Index] : ''\n        if (Index !== -1) {\n          setHighPropHighIndex(getHighPropHighestIndex)\n        }\n      }\n    }\n    setHighPropHighIndex(getHighPropHighestIndex)\n    if (highSeriesControl.length > 0) {\n      highSeriesControl.sort((a, b) => {\n        return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n      })\n      let count = userData[getHighPropHighestIndex].extraDatas!.zIndex!\n      for (const ctrl of highSeriesControl) {\n        this.updateExtraDatas(ctrl, 'zIndex', count)\n        count = count + 1\n      }\n      let counter = userData[highSeriesControl[highSeriesControl.length - 1]].extraDatas!.zIndex!\n      for (let i = highProrControl.length - 1; i >= 0; i--) {\n        if (!this.getSelectedControlsDatas!.includes(highProrControl[i])) {\n          counter = counter + 1\n          this.updateExtraDatas(highProrControl[i], 'zIndex', counter)\n        }\n      }\n    }\n  }\n  groupControl () {\n    EventBus.$emit('groupControl', 'group')\n  }\n  unGroupControl () {\n    EventBus.$emit('groupControl', 'ungroup')\n  }\n  sizeToFit () {\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    const sizeToFitArr: string[] = []\n    const sizeToFitVal: boolean[] = []\n    for (let index = 0; index < ctrlSel.length; index++) {\n      if (!ctrlSel[index].startsWith('group')) {\n        const controlprop = usrFrmData[ctrlSel[index]].properties\n        if ('AutoSize' in controlprop) {\n          sizeToFitArr.push(ctrlSel[index])\n          sizeToFitVal.push(controlprop.AutoSize!)\n          this.updateControlProperty('AutoSize', true, ctrlSel[index])\n        }\n      }\n    }\n    setTimeout(() => {\n      for (let index = 0; index < sizeToFitArr.length; index++) {\n        if (!sizeToFitArr[index].startsWith('group')) {\n          const controlprop = usrFrmData[sizeToFitArr[index]].properties\n          if ('AutoSize' in controlprop) {\n            this.updateControlProperty(\n              'AutoSize',\n              sizeToFitVal[index],\n              sizeToFitArr[index]\n            )\n          }\n        }\n      }\n    }, 100)\n  }\n  sizeToGrid () {\n    let divstyle: Array<IGroupStyle> = []\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    let ctrlContainer = this.selectedControls[this.userFormId].container[0]\n    for (let index = 0; index < ctrlSel.length; index++) {\n      if (!ctrlSel[index].startsWith('group')) {\n        const controlprop = usrFrmData[ctrlSel[index]].properties\n        this.updateControlProperty(\n          'Left',\n          Math.trunc(controlprop.Left!),\n          ctrlSel[index]\n        )\n        this.updateControlProperty(\n          'Top',\n          Math.trunc(controlprop.Top!),\n          ctrlSel[index]\n        )\n        this.updateControlProperty(\n          'Width',\n          Math.trunc(controlprop.Width!),\n          ctrlSel[index]\n        )\n        this.updateControlProperty(\n          'Height',\n          Math.trunc(controlprop.Height!),\n          ctrlSel[index]\n        )\n      } else {\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n          divstyle = divstayleArray\n        })\n        const getIndex = divstyle.findIndex(\n          (val) => val.groupName === ctrlSel[index]\n        )\n        EventBus.$emit('updasteGroupSize', 'GroupID', 0, getIndex)\n      }\n    }\n  }\n  incDecspacing (type: keyof controlProperties, value: number) {\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    const ctrlContainer = this.selectedControls[this.userFormId].container[0]\n    const controls = usrFrmData[ctrlContainer].controls\n    let divstyle: Array<IGroupStyle> = []\n    let getGroupIndex = -1\n    if (ctrlSel[0].startsWith('group')) {\n      EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n        divstyle = divstayleArray\n      })\n      getGroupIndex = divstyle.findIndex((val) => val.groupName === ctrlSel[0])\n    }\n    const leftArray: string[] = []\n    const rightArray: string[] = []\n    for (let index = 1; index < ctrlSel.length; index++) {\n      const selLeft = ctrlSel[0].startsWith('group')\n        ? parseInt(divstyle[getGroupIndex].left!)\n        : usrFrmData[ctrlSel[0]].properties.Left\n      const selTop = ctrlSel[0].startsWith('group')\n        ? parseInt(divstyle[getGroupIndex].top!)\n        : usrFrmData[ctrlSel[0]].properties.Top\n      if (!ctrlSel[index].startsWith('group')) {\n        const ctrlProp = usrFrmData[ctrlSel[index]].properties\n        if (type === 'Left') {\n          if (ctrlProp.Left! <= selLeft!) {\n            leftArray.push(ctrlSel[index])\n          } else {\n            rightArray.push(ctrlSel[index])\n          }\n        } else if (type === 'Top') {\n          if (ctrlProp.Top! <= selTop!) {\n            leftArray.push(ctrlSel[index])\n          } else {\n            rightArray.push(ctrlSel[index])\n          }\n        }\n      } else {\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n          divstyle = divstayleArray\n        })\n        const getIndex = divstyle.findIndex(\n          (val) => val.groupName === ctrlSel[index]\n        )\n        const groupLeft = parseInt(divstyle[getIndex].left!)\n        const groupTop = parseInt(divstyle[getIndex].top!)\n        const groupConrol = this.getGroupControl(ctrlSel[index])\n        if (type === 'Left') {\n          if (groupLeft <= selLeft!) {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Left!) === groupLeft) {\n                leftArray.push(ctrl)\n              }\n            }\n          } else {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Left!) === groupLeft) {\n                rightArray.push(ctrl)\n              }\n            }\n          }\n        } else if (type === 'Top') {\n          if (groupTop <= selTop!) {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Top!) === groupTop) {\n                leftArray.push(ctrl)\n              }\n            }\n          } else {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Top!) === groupTop) {\n                rightArray.push(ctrl)\n              }\n            }\n          }\n        }\n      }\n    }\n    if (ctrlSel[0].startsWith('group')) {\n      const getIndex = divstyle.findIndex(\n        (val) => val.groupName === ctrlSel[0]\n      )\n      const groupLeft = parseInt(divstyle[getIndex].left!)\n      const groupTop = parseInt(divstyle[getIndex].top!)\n      const groupConrol = this.getGroupControl(ctrlSel[0])\n      if (type === 'Left') {\n        for (let ctrl of groupConrol) {\n          const prop = this.userformData[this.userFormId][ctrl].properties\n          if (Math.floor(prop.Left!) === groupLeft) {\n            leftArray.push(ctrl)\n            rightArray.push(ctrl)\n          }\n        }\n      } else if (type === 'Top') {\n        for (let ctrl of groupConrol) {\n          const prop = this.userformData[this.userFormId][ctrl].properties\n          if (Math.floor(prop.Top!) === groupTop) {\n            leftArray.push(ctrl)\n            rightArray.push(ctrl)\n          }\n        }\n      }\n    } else {\n      leftArray.unshift(ctrlSel[0])\n      rightArray.push(ctrlSel[0])\n    }\n    console.log(leftArray, '', rightArray)\n    if (type === 'Left') {\n      leftArray.sort((a, b) => {\n        return usrFrmData[b].properties.Left! - usrFrmData[a].properties.Left!\n      })\n      rightArray.sort((a, b) => {\n        return usrFrmData[a].properties.Left! - usrFrmData[b].properties.Left!\n      })\n    } else if (type === 'Top') {\n      leftArray.sort((a, b) => {\n        return usrFrmData[b].properties.Top! - usrFrmData[a].properties.Top!\n      })\n      rightArray.sort((a, b) => {\n        return usrFrmData[a].properties.Top! - usrFrmData[b].properties.Top!\n      })\n    }\n    console.log(leftArray, rightArray)\n    const groupIndex: number = divstyle.findIndex(\n      (val) => val.groupName === ctrlSel[0]\n    )\n    const isGroup = ctrlSel[0].startsWith('group')\n    const ctrlProp = !isGroup && usrFrmData[ctrlSel[0]].properties\n    const newObject = {\n      Left:\n        isGroup && groupIndex !== -1\n          ? parseInt(divstyle[groupIndex].left!)\n          : ctrlProp\n            ? ctrlProp.Left!\n            : 0,\n      Top:\n        isGroup && groupIndex !== -1\n          ? parseInt(divstyle[groupIndex].top!)\n          : ctrlProp\n            ? ctrlProp.Top!\n            : 0,\n      Width:\n        isGroup && groupIndex !== -1\n          ? parseInt(divstyle[groupIndex].width!)\n          : ctrlProp\n            ? ctrlProp.Width!\n            : 0,\n      Height:\n        isGroup && groupIndex !== -1\n          ? parseInt(divstyle[groupIndex].height!)\n          : ctrlProp\n            ? ctrlProp.Height!\n            : 0\n    }\n    let incDecValue = 0\n    let propValue = 0\n    for (let index = 1; index < leftArray.length; index++) {\n      const ctrlProp = usrFrmData[leftArray[index]].properties\n      let prevIndex = -1\n      let controlPropIndex = -1\n      if (type === 'Left') {\n        if (ctrlProp.GroupID === '') {\n          propValue = propValue + value\n          incDecValue = ctrlProp.Left! - propValue\n          this.updateControlProperty(type, Math.round(incDecValue / 10) * 10, leftArray[index])\n        } else {\n          if (ctrlProp.GroupID !== '') {\n            controlPropIndex = divstyle.findIndex((val) => val.groupName === ctrlProp.GroupID)\n            let incDecValue = 0\n            propValue = propValue + value\n            incDecValue = parseInt(divstyle[controlPropIndex].left!) - propValue\n            EventBus.$emit(\n              'updasteGroupSize',\n              type,\n              Math.round(incDecValue / 10) * 10,\n              controlPropIndex\n            )\n          }\n        }\n      } else if (type === 'Top') {\n        if (ctrlProp.GroupID === '') {\n          propValue = propValue + value\n          incDecValue = ctrlProp.Top! - propValue\n          this.updateControlProperty(type, Math.round(incDecValue / 10) * 10, leftArray[index])\n        } else {\n          if (ctrlProp.GroupID !== '') {\n            controlPropIndex = divstyle.findIndex((val) => val.groupName === ctrlProp.GroupID)\n            let incDecValue = 0\n            propValue = propValue + value\n            incDecValue = parseInt(divstyle[controlPropIndex].top!) - propValue\n            EventBus.$emit(\n              'updasteGroupSize',\n              type,\n              Math.round(incDecValue / 10) * 10,\n              controlPropIndex\n            )\n          }\n        }\n      }\n    }\n    propValue = 0\n    for (let index = 1; index < rightArray.length; index++) {\n      const ctrlProp = usrFrmData[rightArray[index]].properties\n      let prevIndex = -1\n      let controlPropIndex = -1\n      if (type === 'Left') {\n        if (ctrlProp.GroupID === '') {\n          propValue = propValue + value\n          incDecValue = ctrlProp.Left! + propValue\n          this.updateControlProperty(type, Math.round(incDecValue / 10) * 10, rightArray[index])\n        } else {\n          if (ctrlProp.GroupID !== '') {\n            controlPropIndex = divstyle.findIndex((val) => val.groupName === ctrlProp.GroupID)\n            propValue = propValue + value\n            incDecValue = parseInt(divstyle[controlPropIndex].left!) + propValue\n            EventBus.$emit(\n              'updasteGroupSize',\n              type,\n              Math.round(incDecValue / 10) * 10,\n              controlPropIndex\n            )\n          }\n        }\n      } else if (type === 'Top') {\n        if (ctrlProp.GroupID === '') {\n          let incDecValue = 0\n          propValue = propValue + value\n          incDecValue = ctrlProp.Top! + propValue\n          this.updateControlProperty(type, Math.round(incDecValue / 10) * 10, rightArray[index])\n        } else {\n          if (ctrlProp.GroupID !== '') {\n            controlPropIndex = divstyle.findIndex((val) => val.groupName === ctrlProp.GroupID)\n            let incDecValue = 0\n            propValue = propValue + value\n            incDecValue = parseInt(divstyle[controlPropIndex].top!) + propValue\n            EventBus.$emit(\n              'updasteGroupSize',\n              type,\n              Math.round(incDecValue / 10) * 10,\n              controlPropIndex\n            )\n          }\n        }\n      }\n    }\n  }\n  getGroupControl (groupName: string) {\n    const ctrlContainer = this.selectedControls[this.userFormId].container[0]\n    const usrFrmData = this.userformData[this.userFormId]\n    const controls = []\n    for (const control of usrFrmData[ctrlContainer].controls) {\n      if (usrFrmData[control].properties.GroupID === groupName) {\n        controls.push(control)\n      }\n    }\n    return controls\n  }\n  removeSpace (type: keyof controlProperties) {\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    const ctrlContainer = this.selectedControls[this.userFormId].container[0]\n    const controls = usrFrmData[ctrlContainer].controls\n    let divstyle: Array<IGroupStyle> = []\n    let getGroupIndex = -1\n    if (ctrlSel[0].startsWith('group')) {\n      EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n        divstyle = divstayleArray\n      })\n      getGroupIndex = divstyle.findIndex((val) => val.groupName === ctrlSel[0])\n    }\n    let propValue = 0\n    const leftArray: string[] = []\n    const rightArray: string[] = []\n    for (let index = 1; index < ctrlSel.length; index++) {\n      const selLeft = ctrlSel[0].startsWith('group')\n        ? parseInt(divstyle[getGroupIndex].left!)\n        : usrFrmData[ctrlSel[0]].properties.Left\n      const selTop = ctrlSel[0].startsWith('group')\n        ? parseInt(divstyle[getGroupIndex].top!)\n        : usrFrmData[ctrlSel[0]].properties.Top\n      if (!ctrlSel[index].startsWith('group')) {\n        const ctrlProp = usrFrmData[ctrlSel[index]].properties\n        if (type === 'Left') {\n          if (ctrlProp.Left! <= selLeft!) {\n            leftArray.push(ctrlSel[index])\n          } else {\n            rightArray.push(ctrlSel[index])\n          }\n        } else if (type === 'Top') {\n          if (ctrlProp.Top! <= selTop!) {\n            leftArray.push(ctrlSel[index])\n          } else {\n            rightArray.push(ctrlSel[index])\n          }\n        }\n      } else {\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n          divstyle = divstayleArray\n        })\n        const getIndex = divstyle.findIndex(\n          (val) => val.groupName === ctrlSel[index]\n        )\n        const groupLeft = parseInt(divstyle[getIndex].left!)\n        const groupTop = parseInt(divstyle[getIndex].top!)\n        const groupConrol = this.getGroupControl(ctrlSel[index])\n        if (type === 'Left') {\n          if (groupLeft <= selLeft!) {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Left!) === groupLeft) {\n                leftArray.push(ctrl)\n              }\n            }\n          } else {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Left!) === groupLeft) {\n                rightArray.push(ctrl)\n              }\n            }\n          }\n        } else if (type === 'Top') {\n          if (groupTop <= selTop!) {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Top!) === groupTop) {\n                leftArray.push(ctrl)\n              }\n            }\n          } else {\n            for (let ctrl of groupConrol) {\n              const prop = this.userformData[this.userFormId][ctrl].properties\n              if (Math.floor(prop.Top!) === groupTop) {\n                rightArray.push(ctrl)\n              }\n            }\n          }\n        }\n      }\n    }\n    if (ctrlSel[0].startsWith('group')) {\n      const getIndex = divstyle.findIndex(\n        (val) => val.groupName === ctrlSel[0]\n      )\n      const groupLeft = parseInt(divstyle[getIndex].left!)\n      const groupTop = parseInt(divstyle[getIndex].top!)\n      const groupConrol = this.getGroupControl(ctrlSel[0])\n      if (type === 'Left') {\n        for (let ctrl of groupConrol) {\n          const prop = this.userformData[this.userFormId][ctrl].properties\n          if (Math.floor(prop.Left!) === groupLeft) {\n            leftArray.push(ctrl)\n            rightArray.push(ctrl)\n          }\n        }\n      } else if (type === 'Top') {\n        for (let ctrl of groupConrol) {\n          const prop = this.userformData[this.userFormId][ctrl].properties\n          if (Math.floor(prop.Top!) === groupTop) {\n            leftArray.push(ctrl)\n            rightArray.push(ctrl)\n          }\n        }\n      }\n    } else {\n      leftArray.unshift(ctrlSel[0])\n      rightArray.push(ctrlSel[0])\n    }\n    console.log(leftArray, '', rightArray)\n    if (type === 'Left') {\n      leftArray.sort((a, b) => {\n        return usrFrmData[b].properties.Left! - usrFrmData[a].properties.Left!\n      })\n      rightArray.sort((a, b) => {\n        return usrFrmData[a].properties.Left! - usrFrmData[b].properties.Left!\n      })\n    } else if (type === 'Top') {\n      leftArray.sort((a, b) => {\n        return usrFrmData[b].properties.Top! - usrFrmData[a].properties.Top!\n      })\n      rightArray.sort((a, b) => {\n        return usrFrmData[a].properties.Top! - usrFrmData[b].properties.Top!\n      })\n    }\n    console.log(leftArray, rightArray)\n    for (let index = 1; index < leftArray.length; index++) {\n      const prevCtrlProp = usrFrmData[leftArray[index - 1]].properties\n      const ctrlProp = usrFrmData[leftArray[index]].properties\n      let prevIndex = -1\n      let controlPropIndex = -1\n      if (type === 'Left') {\n        if (prevCtrlProp.GroupID === '' && ctrlProp.GroupID === '') {\n          propValue = prevCtrlProp.Left! - ctrlProp.Width!\n          this.updateControlProperty(type, propValue, leftArray[index])\n        } else {\n          if (prevCtrlProp.GroupID !== '') {\n            if (ctrlProp.GroupID === '') {\n              prevIndex = divstyle.findIndex(\n                (val) => val.groupName === prevCtrlProp.GroupID\n              )\n              propValue = parseInt(divstyle[prevIndex].left!) - ctrlProp.Width!\n              this.updateControlProperty(type, propValue, leftArray[index])\n            }\n          }\n          if (ctrlProp.GroupID !== '') {\n            controlPropIndex = divstyle.findIndex(\n              (val) => val.groupName === ctrlProp.GroupID\n            )\n            if (prevCtrlProp.GroupID === '') {\n              propValue =\n                prevCtrlProp.Left! -\n                parseInt(divstyle[controlPropIndex].width!)\n            } else {\n              prevIndex = divstyle.findIndex(\n                (val) => val.groupName === prevCtrlProp.GroupID\n              )\n              propValue =\n                parseInt(divstyle[prevIndex].left!) -\n                parseInt(divstyle[controlPropIndex].width!)\n            }\n            EventBus.$emit(\n              'updasteGroupSize',\n              type,\n              propValue,\n              controlPropIndex\n            )\n          }\n        }\n      } else if (type === 'Top') {\n        if (prevCtrlProp.GroupID === '' && ctrlProp.GroupID === '') {\n          propValue = prevCtrlProp.Top! - ctrlProp.Height!\n          this.updateControlProperty(type, propValue, leftArray[index])\n        } else {\n          if (prevCtrlProp.GroupID !== '') {\n            if (ctrlProp.GroupID === '') {\n              prevIndex = divstyle.findIndex(\n                (val) => val.groupName === prevCtrlProp.GroupID\n              )\n              propValue = parseInt(divstyle[prevIndex].top!) - ctrlProp.Height!\n              this.updateControlProperty(type, propValue, leftArray[index])\n            }\n          }\n          if (ctrlProp.GroupID !== '') {\n            controlPropIndex = divstyle.findIndex(\n              (val) => val.groupName === ctrlProp.GroupID\n            )\n            if (prevCtrlProp.GroupID === '') {\n              propValue =\n                prevCtrlProp.Top! -\n                parseInt(divstyle[controlPropIndex].height!)\n            } else {\n              prevIndex = divstyle.findIndex(\n                (val) => val.groupName === prevCtrlProp.GroupID\n              )\n              propValue =\n                parseInt(divstyle[prevIndex].top!) -\n                parseInt(divstyle[controlPropIndex].height!)\n            }\n            EventBus.$emit(\n              'updasteGroupSize',\n              type,\n              propValue,\n              controlPropIndex\n            )\n          }\n        }\n      }\n    }\n    for (let index = 1; index < rightArray.length; index++) {\n      const prevCtrlProp = usrFrmData[rightArray[index - 1]].properties\n      const ctrlProp = usrFrmData[rightArray[index]].properties\n      let prevIndex = -1\n      const controlPropIndex = -1\n      if (type === 'Left') {\n        if (prevCtrlProp.GroupID === '' && ctrlProp.GroupID === '') {\n          propValue = prevCtrlProp.Left! + prevCtrlProp.Width!\n          this.updateControlProperty(type, propValue, rightArray[index])\n        } else {\n          if (prevCtrlProp.GroupID !== '') {\n            prevIndex = divstyle.findIndex(\n              (val) => val.groupName === prevCtrlProp.GroupID\n            )\n            propValue =\n              parseInt(divstyle[prevIndex].left!) +\n              parseInt(divstyle[prevIndex].width!)\n          } else {\n            propValue = prevCtrlProp.Left! + prevCtrlProp.Width!\n          }\n          if (ctrlProp.GroupID !== '') {\n            const getIndex = divstyle.findIndex(\n              (val) => val.groupName === ctrlProp.GroupID\n            )\n            EventBus.$emit('updasteGroupSize', type, propValue, getIndex)\n          } else {\n            this.updateControlProperty(type, propValue, rightArray[index])\n          }\n        }\n      } else if (type === 'Top') {\n        if (prevCtrlProp.GroupID === '' && ctrlProp.GroupID === '') {\n          propValue = prevCtrlProp.Top! + prevCtrlProp.Height!\n          this.updateControlProperty(type, propValue, rightArray[index])\n        } else {\n          if (prevCtrlProp.GroupID !== '') {\n            prevIndex = divstyle.findIndex(\n              (val) => val.groupName === prevCtrlProp.GroupID\n            )\n            propValue =\n              parseInt(divstyle[prevIndex].top!) +\n              parseInt(divstyle[prevIndex].height!)\n          } else {\n            propValue = prevCtrlProp.Top! + prevCtrlProp.Height!\n          }\n          if (ctrlProp.GroupID !== '') {\n            const getIndex = divstyle.findIndex(\n              (val) => val.groupName === ctrlProp.GroupID\n            )\n            EventBus.$emit('updasteGroupSize', type, propValue, getIndex)\n          } else {\n            this.updateControlProperty(type, propValue, rightArray[index])\n          }\n        }\n      }\n    }\n  }\n  updatePropVal (propName: string, propValue: number) {\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    const usrFrmData = this.userformData[this.userFormId]\n    for (let index = 0; index < ctrlSel.length; index++) {\n      if (!ctrlSel[index].startsWith('group')) {\n        const curProp = usrFrmData[ctrlSel[index]].properties\n        if (propName === 'selCenter') {\n          const curCenter = curProp.Width! / 2\n          const value = propValue - curCenter\n          this.updateControlProperty('Left', value, ctrlSel[index])\n        }\n        if (propName === 'selMiddle') {\n          const curMiddle = curProp.Height! / 2\n          const value = propValue - curMiddle\n          this.updateControlProperty('Top', value, ctrlSel[index])\n        }\n      } else {\n        let divstyle: Array<IGroupStyle> = []\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n          divstyle = divstayleArray\n        })\n        const groupIndex = divstyle.findIndex(\n          (val) => val.groupName === ctrlSel[index]\n        )\n        const curProp = divstyle[groupIndex]\n        const left = parseInt(curProp.left!)\n        const top = parseInt(curProp.top!)\n        const width = parseInt(curProp.width!)\n        const height = parseInt(curProp.height!)\n        let value = -1\n        if (propName === 'selCenter') {\n          value = propValue - width! / 2\n          EventBus.$emit('updasteGroupSize', 'Left', value, groupIndex)\n        }\n        if (propName === 'selMiddle') {\n          value = propValue - height! / 2\n          EventBus.$emit('updasteGroupSize', 'Top', value, groupIndex)\n        }\n      }\n    }\n  }\n  centreInForm (value: string) {\n    let divstyle: Array<IGroupStyle> = []\n    const mainContainer = this.selectedControls[this.userFormId].container[0]\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlProp = usrFrmData[mainContainer].properties\n    if (value === 'horizontal') {\n      const selCenter = ctrlProp.Left! + ctrlProp.Width! / 2\n      this.updatePropVal('selCenter', selCenter)\n    } else if (value === 'vertical') {\n      const selMiddle = ctrlProp.Top! + ctrlProp.Height! / 2\n      this.updatePropVal('selMiddle', selMiddle)\n    }\n  }\n  arrangeButton (type: string) {\n    const usrFrmData = this.userformData[this.userFormId]\n    const ctrlSel = this.selectedControls[this.userFormId].selected\n    let ctrlContainer = this.selectedControls[this.userFormId].container[0]\n    ctrlContainer =\n      usrFrmData[ctrlContainer].type === 'Page'\n        ? this.selectedControls[this.userFormId].container[1]\n        : ctrlContainer\n    const buttonArray = []\n    for (let index = 0; index < ctrlSel.length; index++) {\n      if (!ctrlSel[index].startsWith('group')) {\n        const controlprop = usrFrmData[ctrlSel[index]]\n        if (controlprop.type === 'CommandButton') {\n          buttonArray.push(ctrlSel[index])\n        }\n      }\n    }\n    if (type === 'bottom') {\n      buttonArray.sort((a, b) => {\n        return usrFrmData[a].properties.Left! - usrFrmData[b].properties.Left!\n      })\n    } else if (type === 'right') {\n      buttonArray.sort((a, b) => {\n        return usrFrmData[a].properties.Top! - usrFrmData[b].properties.Top!\n      })\n    }\n    console.log(buttonArray)\n    const containerProp = usrFrmData[ctrlContainer].properties\n    let value: number = 0\n    const containerHeight = (usrFrmData[ctrlContainer].type === 'Userform')\n      ? 47 : usrFrmData[ctrlContainer].type === 'Frame' ? 27\n        : usrFrmData[ctrlContainer].type === 'MultiPage' ? 40 : 0\n    const containerWidth = 20\n    if (type === 'bottom') {\n      value = (containerProp.Height! - containerHeight) - usrFrmData[buttonArray[0]].properties.Height!\n      this.updateControlProperty('Top', value, buttonArray[0])\n      this.updateControlProperty('Left', 30, buttonArray[0])\n    } else if (type === 'right') {\n      value = (containerProp.Width! - containerWidth) - usrFrmData[buttonArray[0]].properties.Width!\n      this.updateControlProperty('Left', value, buttonArray[0])\n      this.updateControlProperty('Top', 20, buttonArray[0])\n    }\n\n    for (let index = 1; index < buttonArray.length; index++) {\n      const prevCtrlProp = usrFrmData[buttonArray[index - 1]].properties\n      const ctrlProp = usrFrmData[buttonArray[index]].properties\n      if (type === 'bottom') {\n        let propValue = prevCtrlProp.Left! + prevCtrlProp.Width! + 10\n        value =\n          (containerProp.Height! - containerHeight) -\n          usrFrmData[buttonArray[index]].properties.Height!\n        if (propValue + ctrlProp.Width! <= containerProp.Width! - containerWidth) {\n          this.updateControlProperty('Left', propValue, buttonArray[index])\n          this.updateControlProperty('Top', value, buttonArray[index])\n        } else {\n          propValue = containerProp.Width! - containerWidth - ctrlProp.Width!\n          this.updateControlProperty('Left', propValue, buttonArray[index])\n          this.updateControlProperty('Top', value, buttonArray[index])\n        }\n      } else if (type === 'right') {\n        let propValue = prevCtrlProp.Top! + prevCtrlProp.Height! + 10\n        value =\n          (containerProp.Width! - containerWidth) -\n          usrFrmData[buttonArray[index]].properties.Width!\n        if (propValue + ctrlProp.Height! <= containerProp.Height! - (containerHeight)) {\n          this.updateControlProperty('Top', propValue, buttonArray[index])\n          this.updateControlProperty('Left', value, buttonArray[index])\n        } else {\n          propValue = containerProp.Height! - containerHeight - ctrlProp.Height!\n          this.updateControlProperty('Top', propValue, buttonArray[index])\n          this.updateControlProperty('Left', value, buttonArray[index])\n        }\n      }\n    }\n  }\n  updateControlProperty (\n    propertyName: keyof controlProperties,\n    propertyValue: any,\n    controlId: string\n  ) {\n    this.updateControl({\n      userFormId: this.userFormId,\n      controlId: controlId,\n      propertyName: propertyName,\n      value: propertyValue\n    })\n  }\n  getdisableStyle (id: string) {\n    let disabled: boolean = true\n    const selected = this.selectedControls[this.userFormId].selected\n    const selContainer = this.selectedControls[this.userFormId].container\n    const userData = this.userformData[this.userFormId]\n    if (id === 'unGroup') {\n      let groupId: boolean = false\n      const selectedGroupArray = selected.filter(\n        (val: string) => val.startsWith('group') && val\n      )\n      if (selectedGroupArray.length === 1 && selected.length === 1) {\n        disabled = false\n      }\n    }\n    if (id === 'group') {\n      disabled = selected.length <= 1\n    }\n    if (id === 'sizeToGrid' || id === 'centreInForm') {\n      disabled = !(selected.length >= 1 && selected[0] !== selContainer[0])\n    }\n    if (id === 'sizeToFit') {\n      const selSelected = []\n      for (const control of this.selectedControls[this.userFormId].selected) {\n        if (!control.startsWith('group')) {\n          const type = this.userformData[this.userFormId][control].type\n          if (type !== 'MultiPage' && type !== 'Frame' && type !== 'ListBox' && type !== 'Page' && type !== 'TabStrip' && type !== 'Userform') {\n            selSelected.push(control)\n          }\n        }\n      }\n      disabled = !(selSelected.length >= 1)\n    }\n    if (id === 'order') {\n      disabled = !(selected.length >= 1 && userData[selContainer[0]].controls.length >= 2)\n    }\n    if (id === 'makeEqual') {\n      disabled = !(selected.length >= 3)\n    }\n    if (id === 'incDecspacing' || id === 'removeSpace') {\n      disabled = !(selected.length >= 2)\n    }\n    if (id === 'arrangeButton') {\n      const buttonArray = []\n      for (let index = 0; index < selected.length; index++) {\n        if (!selected[index].startsWith('group')) {\n          const controlprop = userData[selected[index]]\n          if (controlprop.type === 'CommandButton') {\n            buttonArray.push(selected[index])\n          }\n        }\n      }\n      disabled = !(buttonArray.length >= 1)\n    }\n    return disabled\n  }\n  bringForward () {\n    const userData = this.userformData[this.userFormId]\n    const highProrControl = []\n    const lowProrControl = []\n    const container = this.getContainerList(this.getSelectedControlsDatas![0])[0]\n    const containerControls = this.userformData[this.userFormId][container].controls\n    for (const index in containerControls) {\n      const cntrlData = this.userformData[this.userFormId][containerControls[index]]\n      if (cntrlData.type === 'MultiPage' || cntrlData.type === 'Frame' || cntrlData.type === 'ListBox') {\n        highProrControl.push(containerControls[index])\n      } else {\n        lowProrControl.push(containerControls[index])\n      }\n    }\n    let nextSelctedSeries: string[] = []\n    let nextHighControlSeries: string[] = []\n    const getSelControl = [...this.getSelectedControlsDatas!]\n    getSelControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    for (const selControl of getSelControl!) {\n      const type = userData[selControl].type\n      const tempZIndex = userData[selControl].extraDatas!.zIndex!\n      const controlIndex = Object.keys(userData).findIndex((val: string, index: number) => {\n        return 'zIndex' in userData[val].extraDatas! && (userData[val].extraDatas!.zIndex === tempZIndex + 1)\n      })\n      const nextSelectedControl = controlIndex !== -1 ? Object.keys(userData)[controlIndex] : ''\n      const nextControlType = userData[nextSelectedControl].type\n      if (nextSelectedControl !== '' && !highProrControl.includes(nextSelectedControl)) {\n        if (getSelControl!.includes(nextSelectedControl)) {\n          if (!nextSelctedSeries.includes(selControl)) {\n            nextSelctedSeries.push(selControl)\n          }\n          if (!nextSelctedSeries.includes(nextSelectedControl)) {\n            nextSelctedSeries.push(nextSelectedControl)\n          }\n        } else {\n          if (Object.keys(nextSelctedSeries).length !== 0) {\n            const tempExchageIndex = userData[nextSelctedSeries[0]].extraDatas!.zIndex!\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length /* && swapTabIndex > 0 */) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\n              this.updateExtraDatas(nextSelctedSeries[0], 'zIndex', swapTabIndex - (nextSelctedSeries!.length - 1))\n            }\n            for (let j = 1; j < nextSelctedSeries.length; j++) {\n              const updateIndex = userData[nextSelctedSeries[j]].extraDatas!.zIndex! + 1\n              this.updateExtraDatas(nextSelctedSeries[j], 'zIndex', updateIndex)\n            }\n            nextSelctedSeries = []\n          } else {\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length /* && swapTabIndex > 0 */) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\n            }\n          }\n        }\n      } else {\n        if (getSelControl!.includes(nextSelectedControl) && (type === 'Frame' || type === 'MultiPage' || type === 'ListBox')) {\n          if (!nextHighControlSeries.includes(selControl)) {\n            nextHighControlSeries.push(selControl)\n          }\n          if (!nextHighControlSeries.includes(nextSelectedControl)) {\n            nextHighControlSeries.push(nextSelectedControl)\n          }\n        } else if (type === 'Frame' || type === 'MultiPage' || type === 'ListBox') {\n          if (Object.keys(nextHighControlSeries).length !== 0) {\n            const tempExchageIndex = userData[nextHighControlSeries[0]].extraDatas!.zIndex!\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\n              this.updateExtraDatas(nextHighControlSeries[0], 'zIndex', swapTabIndex - (nextHighControlSeries!.length - 1))\n            }\n            for (let j = 1; j < nextHighControlSeries.length; j++) {\n              const updateIndex = userData[nextHighControlSeries[j]].extraDatas!.zIndex! + 1\n              this.updateExtraDatas(nextHighControlSeries[j], 'zIndex', updateIndex)\n            }\n            nextHighControlSeries = []\n          } else {\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length /* && swapTabIndex > 0 */) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\n            }\n          }\n        }\n      }\n    }\n  }\n  sendBackward () {\n    const userData = this.userformData[this.userFormId]\n    const highProrControl = []\n    const lowProrControl = []\n    const container = this.getContainerList(this.getSelectedControlsDatas![0])[0]\n    const containerControls = this.userformData[this.userFormId][container].controls\n    for (const index in containerControls) {\n      const cntrlData = this.userformData[this.userFormId][containerControls[index]]\n      if (cntrlData.type === 'MultiPage' || cntrlData.type === 'Frame' || cntrlData.type === 'ListBox') {\n        highProrControl.push(containerControls[index])\n      } else {\n        lowProrControl.push(containerControls[index])\n      }\n    }\n    let nextSelctedSeries: string[] = []\n    let nextHighControlSeries: string[] = []\n    const getSelControl = [...this.getSelectedControlsDatas!]\n    getSelControl.sort((a, b) => {\n      return userData[a].extraDatas!.zIndex! - userData[b].extraDatas!.zIndex!\n    })\n    for (const selControl of getSelControl) {\n      const type = userData[selControl].type\n      const tempZIndex = userData[selControl].extraDatas!.zIndex!\n      const controlIndex = Object.keys(userData).findIndex((val: string, index: number) => {\n        return 'zIndex' in userData[val].extraDatas! && (userData[val].extraDatas!.zIndex === tempZIndex - 1)\n      })\n      const nextSelectedControl = controlIndex !== -1 ? Object.keys(userData)[controlIndex] : ''\n      const nextControlType = userData[nextSelectedControl].type\n      if (nextSelectedControl !== '' && !highProrControl.includes(selControl)) {\n        if (getSelControl!.includes(nextSelectedControl)) {\n          if (!nextSelctedSeries.includes(selControl)) {\n            nextSelctedSeries.push(selControl)\n          }\n          if (!nextSelctedSeries.includes(nextSelectedControl)) {\n            nextSelctedSeries.push(nextSelectedControl)\n          }\n        } else {\n          if (Object.keys(nextSelctedSeries).length !== 0) {\n            console.log('nextSelctedSeries', nextSelctedSeries)\n            const tempExchageIndex = userData[nextSelctedSeries[0]].extraDatas!.zIndex!\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length && swapTabIndex > 0) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\n              this.updateExtraDatas(nextSelctedSeries[0], 'zIndex', (nextSelctedSeries!.length + 1) - swapTabIndex)\n            }\n            for (let j = 1; j < nextSelctedSeries.length; j++) {\n              const updateIndex = userData[nextSelctedSeries[j]].extraDatas!.zIndex! - 1\n              this.updateExtraDatas(nextSelctedSeries[j], 'zIndex', updateIndex)\n            }\n            nextSelctedSeries = []\n          } else {\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length && swapTabIndex > 0) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\n            }\n          }\n        }\n      } else if (!lowProrControl.includes(nextSelectedControl) && (type === 'Frame' || type === 'MultiPage' || type === 'ListBox')) {\n        if (getSelControl!.includes(nextSelectedControl)) {\n          if (!nextHighControlSeries.includes(selControl)) {\n            nextHighControlSeries.push(selControl)\n          }\n          if (!nextHighControlSeries.includes(nextSelectedControl)) {\n            nextHighControlSeries.push(nextSelectedControl)\n          }\n        } else {\n          if (Object.keys(nextHighControlSeries).length !== 0) {\n            const tempExchageIndex = userData[nextHighControlSeries[0]].extraDatas!.zIndex!\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(userData[container].controls[index], 'zIndex', tempExchageIndex)\n              this.updateExtraDatas(nextHighControlSeries[0], 'zIndex', (nextHighControlSeries!.length + 1) - swapTabIndex)\n            }\n            for (let j = 1; j < nextHighControlSeries.length; j++) {\n              const updateIndex = userData[nextHighControlSeries[j]].extraDatas!.zIndex! - 1\n              this.updateExtraDatas(nextHighControlSeries[j], 'zIndex', updateIndex)\n            }\n            nextHighControlSeries = []\n          } else {\n            const swapTabIndex = userData[nextSelectedControl].extraDatas!.zIndex!\n            if (swapTabIndex <= userData[container].controls.length && swapTabIndex > 0) {\n              const index = userData[container].controls.findIndex(\n                (val) => userData[val].extraDatas!.zIndex === swapTabIndex\n              )\n              this.updateExtraDatas(selControl, 'zIndex', swapTabIndex)\n              this.updateExtraDatas(nextSelectedControl, 'zIndex', tempZIndex)\n            }\n          }\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n.body {\n  width: 100%;\n  box-shadow: box-sizing;\n}\n.tablink {\n  background-color: rgba(240, 234, 234, 0.877);\n  color: rgb(17, 17, 17);\n  padding: 5px;\n  cursor: pointer;\n  font-size: 12px;\n  border: none;\n  float: left;\n}\n.sub-menu-li {\n  display: grid;\n  grid-template-columns: 25px 1fr;\n}\n.thirdrow {\n  margin-top: 5px;\n}\n.tablink:hover {\n  background-color: #4dbce0;\n}\n\n.firstrow {\n  font-size: 15px;\n}\n.secondrow {\n  border: 1px transparent;\n  padding: 5px;\n  background-color: rgba(240, 234, 234, 0.877);\n  height: 20px;\n  display: flex;\n}\n.buttons {\n  float: right;\n  line-height: normal;\n}\n.min .max .close1 {\n  width: 40px;\n}\n.close1:hover {\n  background-color: red;\n}\n.fa {\n  margin-left: 3px;\n  margin-right: 3px;\n}\n.padding {\n  padding-top: 3px;\n}\n.material-icons {\n  size: 15px;\n}\n.material-float {\n  float: left;\n}\ni:hover {\n  background-color: #4dbce0;\n  cursor: default;\n}\n\n.ui-titlebar {\n  display: flex;\n  width: 100%;\n  height: 32px;\n  background: #0072c6;\n  user-select: none;\n  cursor: default;\n}\n.ui-titleicon {\n  flex-grow: 1;\n  max-width: 32px;\n  max-height: 32px;\n}\n.ui-titletext {\n  flex-grow: 2;\n  max-height: 32px;\n  width: auto;\n  font: 12px/32px \"Segoe UI\", Arial, sans-serif;\n  color: #fff;\n  text-indent: 10px;\n}\n.ui-titlecontrols {\n  max-width: 144px;\n  max-height: 32px;\n  flex-grow: 1;\n}\n.ui-btn {\n  margin: 0;\n  width: 48px;\n  height: 32px;\n  border: 0;\n  outline: 0;\n  background: transparent;\n}\n.ui-btn:hover {\n  background: rgba(255, 255, 255, 0.1);\n}\n.ui-btn.close:hover {\n  background: #e81123;\n}\nhr {\n  margin: 0px;\n}\n.ui-btn svg path,\n.ui-btn svg rect,\n.ui-btn svg polygon {\n  fill: #fff;\n}\n.ui-btn svg {\n  width: 10px;\n  height: 10px;\n}\n\n.dropdown-content {\n  display: none;\n  position: absolute;\n  background-color: #f1f1f1;\n  min-width: 160px;\n  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);\n  z-index: 1;\n}\n\n.dropdown-content a {\n  color: black;\n  padding: 12px 16px;\n  text-decoration: none;\n  display: block;\n}\n\n.dropdown-content a:hover {\n  background-color: #ddd;\n}\n\n.tablink:hover .dropdown-content {\n  display: block;\n}\n.dropdown {\n  position: relative;\n  display: inline-block;\n}\n\n.commandbutton-element {\n  border: 1px solid gray;\n  border-radius: 3px;\n  background-color: white;\n  min-width: 50px;\n  max-width: 112px;\n  width: fit-content;\n  height: fit-content;\n  min-height: 20px;\n  padding: 0px 5px 0px 5px;\n  overflow: hidden;\n}\n.dialog-action-button {\n  background-color: #f2eded;\n  width: 79px;\n  height: 35px;\n  padding-left: 5px;\n  padding-right: 5px;\n  padding-top: 8px;\n  padding-bottom: 8px;\n  border: 1px solid gray;\n  border-radius: 3px;\n  overflow: hidden;\n}\n.btn-style {\n  border: 1px solid gray;\n  border-radius: 5px;\n  background-color: white;\n  min-width: 50px;\n  max-width: 112px;\n  width: fit-content;\n  height: fit-content;\n  min-height: 20px;\n  padding: 0px 5px 0px 5px;\n  overflow: hidden;\n  top: -3px;\n  position: relative;\n}\n:focus {\n  outline: none;\n}\n.menu-bar {\n  background: rgba(240, 234, 234);\n  line-height: 24px;\n  cursor: context-menu;\n  margin-left: 3px;\n}\n\n.menu-bar ul {\n  display: inline-flex;\n  list-style: none;\n  margin: 0px;\n}\n\n.menu-bar ul > li {\n  list-style: none;\n  text-align: center;\n  padding: 0px 6px;\n  font-size: 12px;\n}\n\n.menu-bar ul li a {\n  text-decoration: none;\n  margin-left: -15px;\n}\n.menu-bar ul li a:visited {\n  color: black;\n}\n.menu-bar ul {\n  background-color: rgba(240, 234, 234);\n  padding: 0px;\n}\n\n.active,\n.menu-bar ul li:hover {\n  background-color: white;\n  z-index: 10;\n}\n\n.sub-menu-1 {\n  display: none;\n  box-shadow: 2px 2px rgba(0, 0, 0, 0.2);\n}\n\n.menu-bar ul li:hover .sub-menu-1 {\n  display: block;\n  position: absolute;\n}\n\n.sub-menu-1 ul li {\n  text-align: left;\n  border: 0.1px solid white;\n  display: grid;\n  grid-template-columns: 30px 150px;\n  word-wrap: none;\n}\n\n.sub-menu-1 ul {\n  display: grid;\n  grid-template-columns: 1fr;\n  background-color: white;\n  width: 200px;\n  padding: 0px;\n  margin-left: -6px;\n}\n\n.sub-menu-1 ul li:hover {\n  background-color: rgb(155, 215, 255);\n  border-color: rgb(0, 153, 255);\n}\n</style>\n"]}]}