{"remainingRequest":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/formcontrols/src/FormDesigner/components/molecules/FDResizeHandler/index.vue?vue&type=style&index=0&id=41e95b57&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/formcontrols/src/FormDesigner/components/molecules/FDResizeHandler/index.vue","mtime":1610544258554},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5tb3ZlLWJvcmRlciB7CiAgei1pbmRleDogOTk5OTsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgYm9yZGVyOiAxcHggcmdiKDU5LCA1OCwgNTgpIGRhc2hlZDsKfQoubS10b3AtYiwgLm0tYm90dG9tLWJ7CiAgd2lkdGg6IDEwMCU7Cn0KLm0tbGVmdC1iLCAubS1yaWdodC1iewogIGhlaWdodDogMTAwJTsKfQoucmVzaXplLWFyZWEgewogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogMTAwJTsKICBoZWlnaHQ6IDEwMCU7Cn0KLmhhbmRsZSB7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgd2lkdGg6IDZweDsKICBoZWlnaHQ6IDZweDsKCiAgYmFja2dyb3VuZDogd2hpdGU7CiAgYm9yZGVyOiAxcHggc29saWQgIzMzMzsKfQouaGFuZGxlQWN0aXZhdGUgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgcG9zaXRpb246IGFic29sdXRlOwogIHdpZHRoOiA2cHg7CiAgaGVpZ2h0OiA2cHg7CgogIGJhY2tncm91bmQ6IGJsYWNrOwogIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlOwp9Ci5oYW5kbGUtdGwgewogIHRvcDogLTVweDsKICBsZWZ0OiAtNXB4OwogIGN1cnNvcjogbnctcmVzaXplOwp9Ci5oYW5kbGUtdG0gewogIHRvcDogLTVweDsKICBsZWZ0OiA1MCU7CiAgbWFyZ2luLWxlZnQ6IC01cHg7CiAgY3Vyc29yOiBuLXJlc2l6ZTsKfQouaGFuZGxlLXRyIHsKICB0b3A6IC01cHg7CiAgcmlnaHQ6IC01cHg7CiAgY3Vyc29yOiBuZS1yZXNpemU7Cn0KLmhhbmRsZS1tbCB7CiAgdG9wOiA1MCU7CiAgbWFyZ2luLXRvcDogLTVweDsKICBsZWZ0OiAtNXB4OwogIGN1cnNvcjogdy1yZXNpemU7Cn0KLmhhbmRsZS1tciB7CiAgdG9wOiA1MCU7CiAgbWFyZ2luLXRvcDogLTVweDsKICByaWdodDogLTVweDsKICBjdXJzb3I6IGUtcmVzaXplOwp9Ci5oYW5kbGUtYmwgewogIGJvdHRvbTogLTVweDsKICBsZWZ0OiAtNXB4OwogIGN1cnNvcjogc3ctcmVzaXplOwp9Ci5oYW5kbGUtYm0gewogIGJvdHRvbTogLTVweDsKICBsZWZ0OiA1MCU7CiAgbWFyZ2luLWxlZnQ6IC01cHg7CiAgY3Vyc29yOiBzLXJlc2l6ZTsKfQouaGFuZGxlLWJyIHsKICBib3R0b206IC01cHg7CiAgcmlnaHQ6IC01cHg7CiAgY3Vyc29yOiBzZS1yZXNpemU7Cn0KLnVzZXJGb3JtSGFuZGxlIHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogOHB4OwogIGhlaWdodDogOHB4OwogIGJhY2tncm91bmQ6IHdoaXRlOwogIGJvcmRlcjogMXB4IHNvbGlkICMzMzM7Cn0KLnVzZXJGb3JtSGFuZGxlLXRsIHsKICB0b3A6IC04cHg7CiAgbGVmdDogLThweDsKICBjdXJzb3I6IG53LXJlc2l6ZTsKICBiYWNrZ3JvdW5kOiBibGFjazsKICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsKICBjdXJzb3I6IGRlZmF1bHQ7Cn0KLnVzZXJGb3JtSGFuZGxlLXRtIHsKICB0b3A6IC05cHg7CiAgbGVmdDogNTAlOwogIG1hcmdpbi1sZWZ0OiAtOHB4OwogIGN1cnNvcjogbi1yZXNpemU7CiAgYmFja2dyb3VuZDogYmxhY2s7CiAgYm9yZGVyOiAxcHggc29saWQgd2hpdGU7CiAgY3Vyc29yOiBkZWZhdWx0Owp9Ci51c2VyRm9ybUhhbmRsZS10ciB7CiAgdG9wOiAtOHB4OwogIHJpZ2h0OiAtOHB4OwogIGN1cnNvcjogbmUtcmVzaXplOwogIGJhY2tncm91bmQ6IGJsYWNrOwogIGJvcmRlcjogMXB4IHNvbGlkIHdoaXRlOwogIGN1cnNvcjogZGVmYXVsdDsKfQoudXNlckZvcm1IYW5kbGUtbWwgewogIHRvcDogNTAlOwogIG1hcmdpbi10b3A6IC04cHg7CiAgbGVmdDogLTlweDsKICBiYWNrZ3JvdW5kOiBibGFjazsKICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsKICBjdXJzb3I6IGRlZmF1bHQ7Cn0KLnVzZXJGb3JtSGFuZGxlLW1yIHsKICB0b3A6IDUwJTsKICBtYXJnaW4tdG9wOiAtOHB4OwogIHJpZ2h0OiAtOXB4OwogIGN1cnNvcjogZS1yZXNpemU7Cn0KLnVzZXJGb3JtSGFuZGxlLWJsIHsKICBib3R0b206IC04cHg7CiAgbGVmdDogLThweDsKICBjdXJzb3I6IHN3LXJlc2l6ZTsKICBiYWNrZ3JvdW5kOiBibGFjazsKICBib3JkZXI6IDFweCBzb2xpZCB3aGl0ZTsKICBjdXJzb3I6IGRlZmF1bHQ7Cn0KLnVzZXJGb3JtSGFuZGxlLWJtIHsKICBib3R0b206IC05cHg7CiAgbGVmdDogNTAlOwogIG1hcmdpbi1sZWZ0OiAtOHB4OwogIGN1cnNvcjogcy1yZXNpemU7Cn0KLnVzZXJGb3JtSGFuZGxlLWJyIHsKICBib3R0b206IC04cHg7CiAgcmlnaHQ6IC04cHg7CiAgY3Vyc29yOiBzZS1yZXNpemU7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"index.vue","sourceRoot":"src/FormDesigner/components/molecules/FDResizeHandler","sourcesContent":["<template>\n  <div>\n    <!-- <div :class=\"getMainSelected ? 'resize-area' : null\"> -->\n    <div v-for=\"handlerName in handlers\" :key=\"handlerName\">\n      <div\n        v-if=\"controlType === 'control'\"\n        :class=\"[getMainSelected ? `handle handle-${handlerName}`: null]\"\n        :style=\"handlerStyle\"\n        @mousedown.stop=\"handleMouseDown($event, handlerName, controlType, controlId)\"\n      ></div>\n\n      <div\n        v-else-if=\"controlType === 'userform'\"\n        :class=\"[`userFormHandle userFormHandle-${handlerName}`]\"\n        @mousedown.stop=\"handleMouseDown($event, handlerName, controlType)\"\n      ></div>\n    </div>\n    <div v-show=\"isMove\" class=\"m-top-b move-border\" :style=\"getLTStyle\"/>\n    <div v-show=\"isMove\" class=\"m-right-b move-border\" :style=\"getRStyle\"/>\n    <div v-show=\"isMove\" class=\"m-bottom-b move-border\" :style=\"getBStyle\"/>\n    <div v-show=\"isMove\" class=\"m-left-b move-border\" :style=\"getLTStyle\"/>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Vue, Prop, Emit, Watch } from 'vue-property-decorator'\nimport { State } from 'vuex-class'\nimport { EventBus } from '@/FormDesigner/event-bus'\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\n@Component({\n  name: 'Resizehandler',\n  components: {}\n})\nexport default class Resizehandler extends FDCommonMethod {\n  $el: HTMLDivElement\n  @State((state) => state.fd.selectedControls) selectedControls!: fdState['selectedControls'];\n  @State((state) => state.fd.userformData) userformData!: userformData;\n\n  @Prop({ required: true, type: String }) public controlId!: string;\n  @Prop({ required: true, type: String }) public userFormId: string;\n  @Prop({ required: true, type: String }) public controlType: string;\n  @Prop() public size: {width: number, height: number}\n\n  positions: IMousePosition = {\n    clientX: 0,\n    clientY: 0,\n    movementX: 0,\n    movementY: 0,\n    offsetX: 0,\n    offsetY: 0\n  };\n  resizeDiv: string = '';\n\n  handlers: Array<String> = ['tl', 'tm', 'tr', 'mr', 'br', 'bm', 'bl', 'ml'];\n\n  isGroupActivated: number = -1\n  currentMouseDownEvent: CustomMouseEvent | null = null\n  @Emit('updateResize')\n  private updateResize (value: IResizeValue) {\n    return value\n  }\n  @Emit('muldragControl')\n  private muldragControl (event: MouseEvent, handler: string) {\n    return { event: event, handler: handler }\n  }\n\n  @Emit('updateUserFormResize')\n  private updateUserFormResize (value: IResizeValue) {\n    return value\n  }\n  @Emit('createGroup')\n  createGroup (groupId: string) {\n    return groupId\n  }\n\n  @Emit('updateIsMove')\n  updateIsMove (val: boolean) {\n    return val\n  }\n\n  isMove = false\n  isMainSelect = false\n  isSelctedControl: string = ''\n  currentELPosition: any = null\n  created () {\n    EventBus.$on('getMoveValue', this.getMoveValue)\n    EventBus.$on('startMoveControl', this.startMoveControl)\n    EventBus.$on('moveControl', this.moveControl)\n    EventBus.$on('endMoveControl', this.endMoveControl)\n  }\n  destroyed () {\n    EventBus.$off('getMoveValue', this.getMoveValue)\n    EventBus.$off('startMoveControl', this.startMoveControl)\n    EventBus.$off('moveControl', this.moveControl)\n    EventBus.$off('endMoveControl', this.endMoveControl)\n  }\n  getMoveValue (callBack: Function) {\n    if (this.isMainSelect) {\n      if (this.userformData[this.userFormId][this.controlId].type === 'Frame' || this.userformData[this.userFormId][this.controlId].type === 'MultiPage') {\n        callBack(this.positions.offsetX, this.positions.offsetY, this.isSelctedControl, this.getContainerList(this.isSelctedControl)[0])\n      } else {\n        callBack(this.positions.offsetX, this.positions.offsetY, this.controlId)\n      }\n    }\n  }\n  startMoveControl (event: MouseEvent) {\n    EventBus.$emit('handleName', 'notDrag')\n    if (this.getIsMoveTarget) {\n      this.positions.clientX = event.clientX\n      this.positions.clientY = event.clientY\n    }\n  }\n\n  moveControl (event: MouseEvent, controltype: string) {\n    if (this.getIsMoveTarget) {\n      this.moveBorder(event)\n      if (event.movementX !== 0 && event.movementY !== 0) {\n        const containerType = this.userformData[this.userFormId][this.controlId].type\n        if (containerType === 'Frame' || containerType === 'MultiPage') {\n          EventBus.$emit('handleName', 'frameDrag')\n          if (controltype === containerType) {\n            this.isMove = true\n          }\n        } else {\n          EventBus.$emit('handleName', 'drag')\n          this.isMove = true\n          this.updateIsMove(true)\n        }\n      }\n    }\n  }\n  endMoveControl () {\n    if (this.getIsMoveTarget) {\n      this.positions.movementX = 0\n      this.positions.movementY = 0\n      this.isMove = false\n    }\n  }\n  /**\n   * @description Implementation  of Logic for resize and drag the control and userform, it preserve initial position of control/userform position\n   * @function handleMouseDown\n   * @param event it is type of  MouseEvent\n   * @param handler specifies handlerName(for example topLeft, BottomRight etc)\n   * @param controlType To differentiate between userform and control resize logic\n   */\n  handleMouseDown (event: CustomMouseEvent, handler: string, controlType: string, controlID: string) {\n    this.isSelctedControl = controlID\n    this.updateIsMove(false)\n    EventBus.$emit('handleName', 'notDrag')\n    const controlGroup = this.userformData[this.userFormId][this.controlId].properties.GroupID\n    this.isGroupActivated = this.selectedControls[this.userFormId].selected.findIndex((val: string) => val.startsWith('group'))\n    if (this.isGroupActivated === -1 || (controlGroup === '' && !this.selectedControl.includes(this.controlId))) {\n      this.resizeDiv = handler\n      this.positions.clientX = event.clientX\n      this.positions.clientY = event.clientY\n      this.currentMouseDownEvent = event\n      if (controlType === 'control') {\n        const containerType = this.userformData[this.userFormId][this.controlId].type\n        if (handler !== 'drag') {\n          document.onmousemove = this.elementDrag\n        } else {\n          this.positions.offsetX = event.offsetX\n          this.positions.offsetY = event.offsetY\n          this.isMainSelect = true\n          EventBus.$emit('startMoveControl', event)\n          if (containerType === 'Frame' || containerType === 'MultiPage') {\n            document.onmousemove = (event: MouseEvent) => { this.moveControl(event, containerType) }\n          } else {\n            document.onmousemove = (event: MouseEvent) => { EventBus.$emit('moveControl', event) }\n          }\n        }\n      } else {\n        document.onmousemove = this.userFormResize\n      }\n      document.onmouseup = this.closeDragElement\n    } else {\n      this.muldragControl(event, handler)\n    }\n  }\n\n  moveBorder (event: MouseEvent) {\n    event.preventDefault()\n    this.positions.movementX = this.positions.clientX - event.clientX\n    this.positions.movementY = this.positions.clientY - event.clientY\n  }\n  get getLTStyle () {\n    return {\n      left: `${-this.positions.movementX}px`,\n      top: `${-this.positions.movementY}px`\n    }\n  }\n  get getRStyle () {\n    return this.size ? {\n      left: `${this.size.width - this.positions.movementX}px`,\n      top: `${-this.positions.movementY}px`\n    } : null\n  }\n  get getBStyle () {\n    return this.size ? {\n      left: `${-this.positions.movementX}px`,\n      top: `${this.size.height - this.positions.movementY}px`\n    } : null\n  }\n  /**\n   * @description Implementation  of Logic for  resizing the userform\n   * @function userFormResize\n   * @param event it is type of  MouseEvent\n   */\n  userFormResize (event: MouseEvent): void {\n    event.preventDefault()\n    this.positions.movementX = this.positions.clientX - event.clientX\n    this.positions.movementY = this.positions.clientY - event.clientY\n    this.positions.clientX = event.clientX\n    this.positions.clientY = event.clientY\n\n    const decWidth: number =\n      this.propControlData.properties.Width! - this.positions.movementX\n    const decHeight: number =\n      this.propControlData.properties.Height! - this.positions.movementY\n\n    if (decWidth > 102 && decHeight > 29) {\n      this.updateUserFormResize({\n        x: decWidth,\n        y: decHeight,\n        handler: this.resizeDiv\n      })\n    }\n  }\n\n  /**\n   * @description Implementation  of Logic for resize and drag the control and userform\n   * @function elementDrag\n   * @param event it is type of  MouseEvent\n   */\n  elementDrag (event: MouseEvent): void {\n    event.preventDefault()\n    this.positions.movementX = this.positions.clientX - event.clientX\n    this.positions.movementY = this.positions.clientY - event.clientY\n    const scale: number = (this.propControlData.properties.Zoom! * 1) / 100\n    const scale1: number = (this.propControlData.properties.Zoom! * 10) / 100\n    const grid: Array<number> = [scale1, scale1]\n    const x: number =\n      Math.round(this.positions.movementX / scale / grid[0]) * grid[0]\n    const y: number =\n      Math.round(this.positions.movementY / scale / grid[1]) * grid[1]\n\n    const diffGridX: number = x - this.positions.movementX\n    const diffGridY: number = y - this.positions.movementY\n\n    this.positions.clientX = event.clientX - diffGridX\n    this.positions.clientY = event.clientY - diffGridY\n    if (this.currentMouseDownEvent && (x !== 0 || y !== 0)) {\n      this.currentMouseDownEvent.customCallBack && this.currentMouseDownEvent.customCallBack()\n    }\n    this.updateResize({ x: x, y: y, handler: this.resizeDiv })\n  }\n\n  /**\n   * @description To destory the document event(mouseup,mousemove) attached while drag and resize implementation\n   * @function closeDragElement\n   */\n  closeDragElement (): void {\n    EventBus.$emit('endMoveControl')\n    this.isMainSelect = false\n    this.positions.offsetX = 0\n    this.positions.offsetY = 0\n    document.onmouseup = null\n    document.onmousemove = null\n    const groupId = this.userformData[this.userFormId][this.controlId]\n      .properties.GroupID\n    if (groupId !== '') {\n      this.createGroup(groupId!)\n    }\n  }\n\n  /**\n   * @description  To get main and sub selected control details by passing\n   * userFormId  which is taken as props from parent Component\n   * @function selectedControl\n   *\n   */\n  get selectedControl () {\n    return this.selectedControls[this.userFormId].selected\n  }\n\n  /**\n   * @description style object to dynamically changing the styles of  main and sub selected control in case of multiple selection  based on propControlData\n   * @function handlerStyle\n   *\n   */\n  get handlerStyle () {\n    return {\n      backgroundColor:\n        this.selectedControl[0] === this.controlId ? 'white' : 'black',\n      borderColor:\n        this.selectedControl[0] === this.controlId ? 'black' : 'white'\n    }\n  }\n\n  /**\n   * @description propControlData is abstract class providing implementation to resize UserForm by passing\n   * userFormId  which is taken as props from parent Component\n   * @function propControlData\n   *\n   */\n  get propControlData (): controlData {\n    return this.userformData[this.userFormId][this.userFormId]\n  }\n\n  get getMainSelected () {\n    return (\n      this.selectedControls[this.userFormId].selected.includes(this.controlId) ||\n      (this.selectedControls[this.userFormId].container.includes(this.controlId) &&\n      this.selectedControls[this.userFormId].selected.includes(this.controlId) !== (this.selectedControls[this.userFormId].container.includes(this.controlId))\n      ))\n  }\n\n  get getContainerSelect () {\n    return this.controlId === this.selectedControls[this.userFormId].container[0]\n  }\n\n  get getIsMoveTarget () {\n    return this.getMainSelected\n  }\n}\n</script>\n\n<style  scoped>\n.move-border {\n  z-index: 9999;\n  position: absolute;\n  border: 1px rgb(59, 58, 58) dashed;\n}\n.m-top-b, .m-bottom-b{\n  width: 100%;\n}\n.m-left-b, .m-right-b{\n  height: 100%;\n}\n.resize-area {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n}\n.handle {\n  box-sizing: border-box;\n  position: absolute;\n  width: 6px;\n  height: 6px;\n\n  background: white;\n  border: 1px solid #333;\n}\n.handleActivate {\n  box-sizing: border-box;\n  position: absolute;\n  width: 6px;\n  height: 6px;\n\n  background: black;\n  border: 1px solid white;\n}\n.handle-tl {\n  top: -5px;\n  left: -5px;\n  cursor: nw-resize;\n}\n.handle-tm {\n  top: -5px;\n  left: 50%;\n  margin-left: -5px;\n  cursor: n-resize;\n}\n.handle-tr {\n  top: -5px;\n  right: -5px;\n  cursor: ne-resize;\n}\n.handle-ml {\n  top: 50%;\n  margin-top: -5px;\n  left: -5px;\n  cursor: w-resize;\n}\n.handle-mr {\n  top: 50%;\n  margin-top: -5px;\n  right: -5px;\n  cursor: e-resize;\n}\n.handle-bl {\n  bottom: -5px;\n  left: -5px;\n  cursor: sw-resize;\n}\n.handle-bm {\n  bottom: -5px;\n  left: 50%;\n  margin-left: -5px;\n  cursor: s-resize;\n}\n.handle-br {\n  bottom: -5px;\n  right: -5px;\n  cursor: se-resize;\n}\n.userFormHandle {\n  box-sizing: border-box;\n  position: absolute;\n  width: 8px;\n  height: 8px;\n  background: white;\n  border: 1px solid #333;\n}\n.userFormHandle-tl {\n  top: -8px;\n  left: -8px;\n  cursor: nw-resize;\n  background: black;\n  border: 1px solid white;\n  cursor: default;\n}\n.userFormHandle-tm {\n  top: -9px;\n  left: 50%;\n  margin-left: -8px;\n  cursor: n-resize;\n  background: black;\n  border: 1px solid white;\n  cursor: default;\n}\n.userFormHandle-tr {\n  top: -8px;\n  right: -8px;\n  cursor: ne-resize;\n  background: black;\n  border: 1px solid white;\n  cursor: default;\n}\n.userFormHandle-ml {\n  top: 50%;\n  margin-top: -8px;\n  left: -9px;\n  background: black;\n  border: 1px solid white;\n  cursor: default;\n}\n.userFormHandle-mr {\n  top: 50%;\n  margin-top: -8px;\n  right: -9px;\n  cursor: e-resize;\n}\n.userFormHandle-bl {\n  bottom: -8px;\n  left: -8px;\n  cursor: sw-resize;\n  background: black;\n  border: 1px solid white;\n  cursor: default;\n}\n.userFormHandle-bm {\n  bottom: -9px;\n  left: 50%;\n  margin-left: -8px;\n  cursor: s-resize;\n}\n.userFormHandle-br {\n  bottom: -8px;\n  right: -8px;\n  cursor: se-resize;\n}\n</style>\n"]}]}