{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDResizeControl/index.vue?vue&type=style&index=0&id=04635044&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDResizeControl/index.vue","mtime":1610544258558},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5jb250cm9sU2VsZWN0U3R5bGUgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgcG9zaXRpb246IGFic29sdXRlOwogIC0tYm9yZGVyLXdpZHRoOiA1OwogIC0tc3RyaXBlLWRpc3RhbmNlOiAycHg7CiAgYm9yZGVyOiBjYWxjKHZhcigtLWJvcmRlci13aWR0aCkgKiAxcHgpIHNvbGlkIHRyYW5zcGFyZW50OwogIGJvcmRlci1pbWFnZTogcmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCgKICAgICAgLTExMGRlZywKICAgICAgYmxhY2ssCiAgICAgIHRyYW5zcGFyZW50IDFweCwKICAgICAgdHJhbnNwYXJlbnQgdmFyKC0tc3RyaXBlLWRpc3RhbmNlKSwKICAgICAgYmxhY2sgY2FsYyh2YXIoLS1zdHJpcGUtZGlzdGFuY2UpICsgMC4ycHgpCiAgICApCiAgICB2YXIoLS1ib3JkZXItd2lkdGgpOwp9Ci5jb250cm9sRWRpdFN0eWxlIHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICAtLWJvcmRlci13aWR0aDogNTsKICAtLXN0cmlwZS1kaXN0YW5jZTogMnB4OwogIGJvcmRlcjogY2FsYyh2YXIoLS1ib3JkZXItd2lkdGgpICogMXB4KSBzb2xpZCB0cmFuc3BhcmVudDsKICBib3JkZXItaW1hZ2U6IHJlcGVhdGluZy1saW5lYXItZ3JhZGllbnQoCiAgICAgIC00NWRlZywKICAgICAgYmxhY2ssCiAgICAgIHRyYW5zcGFyZW50IDJweCwKICAgICAgdHJhbnNwYXJlbnQgdmFyKC0tc3RyaXBlLWRpc3RhbmNlKSwKICAgICAgYmxhY2sgY2FsYyh2YXIoLS1zdHJpcGUtZGlzdGFuY2UpICsgMC4ycHgpCiAgICApCiAgICB2YXIoLS1ib3JkZXItd2lkdGgpOwp9Ci5jb250cm9sU3R5bGUgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGN1cnNvcjogZGVmYXVsdCAhaW1wb3J0YW50Owp9Cjpmb2N1cyB7CiAgb3V0bGluZTogbm9uZTsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDResizeControl","sourcesContent":["<template>\n  <div>\n    <div\n      :class=\"\n        mainSelected && isEditMode && !isRunMode\n          ? 'controlEditStyle'\n          : canDragMainDiv\n          ? 'controlSelectStyle'\n          : 'controlStyle'\n      \"\n      :style=\"resizeControlStyle\"\n      :ref=\"'draRef'.concat(controlId)\"\n      @mousedown.stop=\"\n        mainSelected && !isRunMode\n          ? handleDrag($event)\n          : !isRunMode && dragGroupControl($event)\n      \"\n      @contextmenu.stop=\"displayContextMenu\"\n    >\n      <ResizeHandler\n        v-if=\"!isRunMode\"\n        ref=\"resize\"\n        @updateResize=\"updateResize\"\n        :controlId=\"controlId\"\n        :userFormId=\"userFormId\"\n        controlType=\"control\"\n        @createGroup=\"createGroup\"\n        @muldragControl=\"muldragControl\"\n        @updateIsMove=\"updateIsMove\"\n        :size=\"{\n          width: propControlData.properties.Width,\n          height: propControlData.properties.Height,\n        }\"\n      />\n      <component\n        :is=\"propControlData.type\"\n        :controlId=\"propControlData.properties.ID\"\n        :userFormId=\"getUserFormId\"\n        :data=\"propControlData\"\n        :isActivated=\"\n          this.selectedControls[this.userFormId].selected.includes(this.controlId) &&\n           this.selectedControls[this.userFormId].selected.length === 1\n        \"\n        :isRunMode=\"isRunMode\"\n        :isEditMode=\"isEditMode\"\n        :containerId=\"containerId\"\n        @setEditMode=\"setEditMode\"\n        @selectedItem=\"selectedItem\"\n        @deleteItem=\"deleteItem\"\n        @updateModel=\"updateModelHandle\"\n        @updateModelExtraData=\"updateModelExtraDataHandle\"\n        @controlEditMode=\"controlEditMode\"\n        @updateEditMode=\"updateEditMode\"\n      >\n        {{ propControlData.properties.Caption }}\n      </component>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  Component,\n  Emit,\n  Prop,\n  Vue,\n  Ref,\n  PropSync,\n  Watch\n} from 'vue-property-decorator'\nimport { State, Action } from 'vuex-class'\n\nimport Label from '@/FormDesigner/components/atoms/FDLabel/index.vue'\nimport CommandButton from '@/FormDesigner/components/atoms/FDCommandButton/index.vue'\nimport ToggleButton from '@/FormDesigner/components/atoms/FDToggleButton/index.vue'\nimport TextBox from '@/FormDesigner/components/atoms/FDTextBox/index.vue'\nimport SpinButton from '@/FormDesigner/components/atoms/FDSpinButton/index.vue'\nimport ScrollBar from '@/FormDesigner/components/atoms/FDScrollBar/index.vue'\nimport OptionButton from '@/FormDesigner/components/atoms/FDOptionButton/index.vue'\nimport CheckBox from '@/FormDesigner/components/atoms/FDCheckBox/index.vue'\nimport ComboBox from '@/FormDesigner/components/atoms/FDComboBox/index.vue'\nimport ListBox from '@/FormDesigner/components/atoms/FDListBox/index.vue'\nimport FDImage from '@/FormDesigner/components/atoms/FDImage/index.vue'\nimport Frame from '@/FormDesigner/components/atoms/FDFrame/index.vue'\nimport TabStrip from '@/FormDesigner/components/atoms/FDTabStrip/index.vue'\nimport MultiPage from '@/FormDesigner/components/atoms/FDMultiPage/index.vue'\nimport ResizeHandler from '@/FormDesigner/components/molecules/FDResizeHandler/index.vue'\nimport FdSelectVue from '@/api/abstract/FormDesigner/FdSelectVue'\nimport Container from '../FDContainer/index.vue'\nimport { EventBus } from '@/FormDesigner/event-bus'\n@Component({\n  name: 'ResizeControl',\n  components: {\n    ResizeHandler,\n    Label,\n    CommandButton,\n    ToggleButton,\n    TextBox,\n    SpinButton,\n    ScrollBar,\n    CheckBox,\n    OptionButton,\n    FDImage,\n    Frame,\n    ComboBox,\n    ListBox,\n    TabStrip,\n    MultiPage\n  }\n})\nexport default class ResizeControl extends FdSelectVue {\n  @PropSync('currentSelectedGroup') public syncCurrentSelectedGroup!: string;\n  @Prop({ required: true, type: String }) public containerId!: string;\n  @Ref('resize') readonly resize!: ResizeHandler;\n  selMultipleCtrl: boolean = false\n\n  handleDrag (event: MouseEvent) {\n    if (this.selectedControls[this.userFormId].selected.length > 1 && this.selMultipleCtrl === false) {\n      if (event.which !== 3 && this.isMoveWhenMouseDown) {\n        this.selectedItem(event)\n      }\n    }\n    this.isMoveWhenMouseDown = false\n    this.resize.handleMouseDown(event, 'drag', 'control', this.controlId)\n  }\n  @Emit('muldragControl')\n  private muldragControl (val: IDragResizeGroup) {\n    return val\n  }\n\n  @Emit('dragControl')\n  dragControl (event: MouseEvent) {\n    return event\n  }\n  selectMultipleCtrl (val: boolean) {\n    this.selMultipleCtrl = val\n  }\n\n  dragGroupControl (event: MouseEvent) {\n    if (this.selectedControls[this.userFormId].selected.length > 1 && this.selMultipleCtrl === false) {\n      if (event.which !== 3 && this.isMoveWhenMouseDown) {\n        this.selectedItem(event)\n      }\n    }\n    this.propControlData.properties.GroupID && this.dragControl(event)\n  }\n  @Emit('openMenu')\n  openMenu (e: MouseEvent, parentID: string, controlID: string) {\n    return {\n      e,\n      parentID,\n      controlID\n    }\n  }\n\n  get canDragMainDiv (): boolean {\n    return this.mainSelected && !this.isEditMode && !this.isRunMode\n  }\n\n  get propControlData (): controlData {\n    return this.userformData[this.userFormId][this.controlId]\n  }\n  openContextMenu (e: MouseEvent, parentID: string, controlID: string, type: string, mode: boolean) {\n    this.$emit('openMenu', e, parentID, controlID, type, mode)\n  }\n  get resizeControlStyle () {\n    const userData = this.userformData[this.userFormId]\n    const currentProperties = this.propControlData.properties\n    const extraData = this.propControlData.extraDatas!\n    const bs = currentProperties.BorderStyle!\n    const isRotate = currentProperties.Width! > currentProperties.Height!\n    const type = this.propControlData.type\n    let highestZIndex = -1\n    if (this.selectedControlArray.length === 1 && !this.selectedControlArray[0].startsWith('group')) {\n      const selected = userData[this.selectedControlArray[0]].type === 'Page' ? this.selectedContainer[0] : this.selectedControlArray[0]\n      if (selected === this.propControlData.properties.ID && (type === 'Frame' || type === 'MultiPage')) {\n        const containerControls = [...userData[this.getContainerList(selected)[0]].controls]\n        containerControls.sort((a, b) => {\n          return userData[b].extraDatas!.zIndex! - userData[a].extraDatas!.zIndex!\n        })\n        highestZIndex = userData[containerControls[0]].extraDatas!.zIndex!\n      }\n    }\n    return {\n      left: `${currentProperties.Left}px`,\n      top: `${currentProperties.Top}px`,\n      /* border width(5) * 2 = 10 */\n      width: `${currentProperties.Width! + 10}px`,\n      height: `${currentProperties.Height! + 10}px`,\n      display:\n        this.isRunMode && currentProperties.Visible === false\n          ? 'none'\n          : 'block',\n      cursor: !this.isRunMode ? 'move' : 'default',\n      zIndex: (highestZIndex !== -1 && type !== 'Page' && this.isEditMode) ? highestZIndex + 1 : extraData.zIndex!\n    }\n  }\n  get mainSelected () {\n    return (\n      this.selectedControls[this.userFormId].selected.includes(\n        this.controlId\n      ) ||\n      (this.selectedControls[this.userFormId].container.includes(\n        this.controlId\n      ) &&\n        this.selectedControls[this.userFormId].selected.includes(\n          this.controlId\n        ) !==\n          this.selectedControls[this.userFormId].container.includes(\n            this.controlId\n          ))\n    )\n  }\n  deleteItem (event: KeyboardEvent) {\n    const userData = this.userformData[this.userFormId]\n    const type = userData[this.controlId].type\n    const controlId = type === 'Page' ? this.containerId : this.controlId\n    const containerId = type === 'Page' ? this.getContainerList(controlId)[0] : this.containerId\n    if (event.key !== 'Backspace') {\n      this.deleteZIndex(controlId)\n      this.deleteTabIndex(controlId)\n      this.deleteControl({\n        userFormId: this.userFormId,\n        parentId: containerId,\n        targetId: controlId\n      })\n    }\n    this.selectControl({\n      userFormId: this.userFormId,\n      select: {\n        container: this.getContainerList(containerId),\n        selected: [containerId]\n      }\n    })\n  }\n  selectedItem (e: MouseEvent) {\n    if (this.selMultipleCtrl === false) {\n      const userData = this.userformData[this.userFormId]\n      const groupId = this.propControlData.properties.GroupID\n        ? this.propControlData.properties.GroupID\n        : ''\n      const currentSelect = this.selectedControls[this.userFormId].selected\n      if (currentSelect.length === 1 && currentSelect[0] === this.controlId) {\n        if (\n          this.isMoveWhenMouseDown !== true &&\n        this.propControlData.type !== 'FDImage' &&\n        this.propControlData.type !== 'Frame' &&\n        this.propControlData.type !== 'MultiPage'\n        ) {\n          this.isEditMode = true\n          this.isMoveWhenMouseDown = false\n        }\n      } else {\n        if (currentSelect.length > 1 && (currentSelect.includes(this.controlId) || currentSelect.includes(this.userformData[this.userFormId][this.controlId].properties.GroupID!))) {\n          if (currentSelect.includes(this.controlId)) {\n            this.exchangeSelect()\n          } else {\n            if (\n              this.userformData[this.userFormId][this.controlId].properties.GroupID !== ''\n            ) {\n              const selGrpName = this.userformData[this.userFormId][this.controlId].properties.GroupID!\n              this.groupExchange(selGrpName)\n            }\n          }\n        } else {\n          let selectTarget = null\n          let currentGroup = ''\n          if (groupId !== '') {\n            if (\n              this.syncCurrentSelectedGroup === groupId &&\n            currentSelect[0] === groupId\n            ) {\n              selectTarget = this.controlId\n            } else {\n              selectTarget = groupId\n            }\n            currentGroup = groupId\n          } else {\n            selectTarget = this.controlId\n          }\n\n          this.selectControl({\n            userFormId: this.userFormId,\n            select: { container: this.getContainerList(selectTarget), selected: [selectTarget] }\n          })\n          this.syncCurrentSelectedGroup = currentGroup\n        }\n      }\n      if ((this.propControlData.type === 'Frame' || this.propControlData.type === 'MultiPage' || this.propControlData.type === 'ListBox') && currentSelect.length === 1) {\n        if (this.propControlData.type !== 'ListBox') {\n          this.isMoving = true\n          this.isEditMode = true\n          e.stopPropagation()\n        }\n      }\n    } else {\n      const userData = this.userformData[this.userFormId]\n      let mainSelected = this.selectedControls[this.userFormId].selected[0]\n      const controlData: controlData = userData[this.containerId]\n      let divstyle: Array<IGroupStyle> = []\n      if (mainSelected.startsWith('group') || userData[this.controlId].properties.GroupID !== '') {\n        EventBus.$emit('getGroupSize', (divstayleArray: Array<IGroupStyle>) => {\n          divstyle = divstayleArray\n        })\n      }\n      let mainCtrl: controlProperties = { ID: '' }\n      if (mainSelected.startsWith('group')) {\n        const getIndex = divstyle.findIndex(val => val.groupName === mainSelected)\n        mainCtrl = {\n          Left: parseInt(divstyle[getIndex].left!),\n          Top: parseInt(divstyle[getIndex].top!),\n          Width: parseInt(divstyle[getIndex].width!),\n          Height: parseInt(divstyle[getIndex].height!),\n          ID: ''\n        }\n      } else {\n        mainCtrl = userData[mainSelected].properties\n        if (mainSelected === this.containerId) {\n          mainSelected = ''\n          mainCtrl = userData[this.controlId].properties\n        }\n      }\n      let sideCtrl = userData[this.controlId].properties\n      if (userData[this.controlId].properties.GroupID !== '') {\n        const getIndex = divstyle.findIndex(val => val.groupName === userData[this.controlId].properties.GroupID)\n        sideCtrl = {\n          Left: parseInt(divstyle[getIndex].left!),\n          Top: parseInt(divstyle[getIndex].top!),\n          Width: parseInt(divstyle[getIndex].width!),\n          Height: parseInt(divstyle[getIndex].height!),\n          ID: ''\n        }\n      }\n      const selectedSize = {\n        Left: mainCtrl.Left! < sideCtrl.Left! ? mainCtrl.Left! : sideCtrl.Left!,\n        Top: mainCtrl.Top! < sideCtrl.Top! ? mainCtrl.Top! : sideCtrl.Top!,\n        Width: (mainCtrl.Left! + mainCtrl.Width!) > (sideCtrl.Left! + sideCtrl.Width!) ? mainCtrl.Left! + mainCtrl.Width! : sideCtrl.Left! + sideCtrl.Width!,\n        Height: (mainCtrl.Top! + mainCtrl.Height!) > (sideCtrl.Top! + sideCtrl.Height!) ? mainCtrl.Top! + mainCtrl.Height! : sideCtrl.Top! + sideCtrl.Height!\n      }\n      const left = selectedSize.Left\n      const top = selectedSize.Top\n      const right = selectedSize.Width\n      const bottom = selectedSize.Height\n      const multipleCtrl = []\n      if (left !== right || top !== bottom) {\n        for (let i in controlData.controls) {\n          const key: string = controlData.controls[i]\n          const controlProp: controlProperties = this.userformData[this.userFormId][key].properties\n          if (\n            left <= controlProp!.Left! + controlProp!.Width! &&\n            right >= controlProp!.Left! &&\n            top <= controlProp!.Top! + controlProp!.Height! &&\n            bottom >= controlProp!.Top!\n          ) {\n            multipleCtrl.push(key)\n          }\n        }\n        const selectedGroup: string[] = []\n        for (const val of multipleCtrl) {\n          const controlGroupId: string = this.userformData[this.userFormId][val]\n            .properties.GroupID!\n          if (controlGroupId && controlGroupId !== '') {\n            !selectedGroup.includes(controlGroupId)! &&\n              selectedGroup.push(controlGroupId)\n          } else {\n            selectedGroup.push(val)\n          }\n        }\n        if (this.selectedControlArray.length !== 0) {\n          this.selectControl({\n            userFormId: this.userFormId,\n            select: {\n              container: this.getContainerList(selectedGroup[0]),\n              selected: [...selectedGroup]\n            }\n          })\n        }\n      }\n    }\n  }\n\n  exchangeSelect () {\n    const sel = [...this.selectedControls[this.userFormId].selected]\n    const controlIndex = this.selectedControls[this.userFormId].selected.findIndex((val) => val === this.controlId)\n    sel.splice(controlIndex, 1)\n    sel.unshift(this.controlId)\n    this.selectControl({\n      userFormId: this.userFormId,\n      select: { container: this.getContainerList(sel[0]), selected: [...sel] }\n    })\n  }\n  groupExchange (groupName: string) {\n    const sel = [...this.selectedControls[this.userFormId].selected]\n    const controlIndex = this.selectedControls[this.userFormId].selected.findIndex((val) => val === groupName)\n    sel.splice(controlIndex, 1)\n    sel.unshift(groupName)\n    this.selectControl({\n      userFormId: this.userFormId,\n      select: { container: this.getContainerList(sel[0]), selected: [...sel] }\n    })\n  }\n  get getModeStyle () {\n    return this.mainSelected ? 'controlSelectStyle' : 'controlStyle'\n  }\n\n  @Watch('selectedControls', { deep: true })\n  updateSelectedControls () {\n    const type = this.userformData[this.userFormId][this.selectedContainer[0]].type\n    const controlType = this.userformData[this.userFormId][this.controlId].type\n    if (type === 'Frame' || type === 'Page' || type === 'MultiPage') {\n      if (controlType === 'Frame' || controlType === 'MultiPage') {\n        this.isEditMode = true\n      } else {\n        if (this.isMoving === false) {\n          this.isEditMode = false\n        } else {\n          this.isMoving = false\n        }\n      }\n    } else {\n      if (this.isMoving === false) {\n        this.isEditMode = false\n      } else {\n        this.isMoving = false\n      }\n    }\n  }\n\n  get getUserFormId () {\n    if (\n      this.propControlData.type === 'Frame' ||\n      this.propControlData.type === 'MultiPage' ||\n      this.propControlData.type === 'TabStrip'\n    ) {\n      return this.userFormId\n    } else {\n      return null\n    }\n  }\n  created () {\n    EventBus.$on('actMultipleCtrl', (val: boolean) => {\n      this.selMultipleCtrl = val\n    })\n  }\n  displayContextMenu (event: MouseEvent) {\n    this.openContextMenu(event, this.containerId, this.controlId, 'control', this.isEditMode)\n  }\n}\n</script>\n\n<style scoped>\n.controlSelectStyle {\n  box-sizing: border-box;\n  position: absolute;\n  --border-width: 5;\n  --stripe-distance: 2px;\n  border: calc(var(--border-width) * 1px) solid transparent;\n  border-image: repeating-linear-gradient(\n      -110deg,\n      black,\n      transparent 1px,\n      transparent var(--stripe-distance),\n      black calc(var(--stripe-distance) + 0.2px)\n    )\n    var(--border-width);\n}\n.controlEditStyle {\n  box-sizing: border-box;\n  position: absolute;\n  --border-width: 5;\n  --stripe-distance: 2px;\n  border: calc(var(--border-width) * 1px) solid transparent;\n  border-image: repeating-linear-gradient(\n      -45deg,\n      black,\n      transparent 2px,\n      transparent var(--stripe-distance),\n      black calc(var(--stripe-distance) + 0.2px)\n    )\n    var(--border-width);\n}\n.controlStyle {\n  box-sizing: border-box;\n  position: absolute;\n  cursor: default !important;\n}\n:focus {\n  outline: none;\n}\n</style>\n"]}]}