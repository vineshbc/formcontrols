{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/FDScrollBar/index.vue?vue&type=style&index=0&id=889bef88&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/FDScrollBar/index.vue","mtime":1610544258554},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLnNsaWRlY29udGFpbmVyIHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMjBweCBhdXRvIDIwcHg7Cn0KCi5zbGlkZXIgewogIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTsKICBjb250ZW50OiAnJzsKICAtLXJnYjoyNTAsMjUwLDI1MDsKICAtLWFscGhhOiAwLjU7CiAgYmFja2dyb3VuZC1jb2xvcjogcmdiYSh2YXIoLS1yZ2IpLCB2YXIoLS1hbHBoYSkpOwogIG91dGxpbmU6IG5vbmU7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQoKLnNsaWRlcjpob3ZlciB7CiAgb3BhY2l0eTogMTsKfQoKLnNsaWRlcjo6LXdlYmtpdC1zbGlkZXItdGh1bWIgewogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWJnLWNvbG9yKTsKICBib3JkZXI6IDJweCBzb2xpZCBncmF5OwogIGJvcmRlci1yaWdodDogMnB4IHNvbGlkIGJsYWNrOwogIGhlaWdodDogdmFyKC0taGVpZ2h0KTsKICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7CiAgYXBwZWFyYW5jZTogbm9uZTsKICB3aWR0aDogMjVweDsKICAtLWFscGhhOiAxOwogIGN1cnNvcjogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czphdXRvOwp9Cgouc2xpZGVyOjotbW96LXJhbmdlLXRodW1iIHsKICBiYWNrZ3JvdW5kOiByZ2IoMTM5LCAxMzgsIDEzOCk7CiAgY3Vyc29yOiBwb2ludGVyOwp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4MA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDScrollBar","sourcesContent":["<template>\n  <div\n  v-on=\"eventStoppers()\"\n  @click.stop=\"selectedItem\"\n  :style=\"outerScrollBarDivObj\"\n  :title=\"properties.ControlTipText\"\n  @keydown.enter=\"setContentEditable($event, true)\"\n  @keydown.esc=\"setContentEditable($event, false)\"\n  :tabindex=\"0\"\n  @mousedown=\"controlEditMode\"\n  >\n    <div class=\"slidecontainer\" :style=\"cssVars\">\n      <button :style=\"scrollBarButtonStyleObj\" @click=\"!getDisableValue?properties.Min > properties.Max ? increaseTheValue() : decreaseTheValue():''\">\n        <FdSvgImage\n          key=\"leftArrow\"\n          name=\"left-arrow.svg\"\n          @hook:mounted=\"changeForeColor\"\n          class=\"svgLeftRightStyle\"\n        />\n      </button>\n      <input\n        :disabled=\"getDisableValue\"\n        type=\"range\"\n        :min=\"properties.Min > properties.Max ? properties.Max : properties.Min\"\n        :max=\"properties.Min > properties.Max ? properties.Min : properties.Max\"\n        :value=\"properties.Value\"\n        class=\"slider\"\n        :style=\"inputStyleObj\"\n        @input=\"updateValueProperty\"\n        orient=\"vertical\"\n      />\n      <button :style=\"scrollBarButtonStyleObj\" @click=\"!getDisableValue?properties.Min > properties.Max ? decreaseTheValue() : increaseTheValue():''\">\n        <FdSvgImage\n          key=\"rightArrow\"\n          name=\"right-arrow.svg\"\n          @hook:mounted=\"changeForeColor\"\n          class=\"svgLeftRightStyle\"\n        />\n      </button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Emit, Mixins, Watch } from 'vue-property-decorator'\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\nimport FdSvgImage from '@/FormDesigner/components/atoms/FDSVGImage/index.vue'\nimport { controlProperties } from '@/FormDesigner/controls-properties'\n\n@Component({\n  name: 'FDScrollBar',\n  components: {\n    FdSvgImage\n  }\n})\nexport default class FDScrollBar extends Mixins(FdControlVue) {\n  $el: HTMLDivElement\n  updateValueProperty (e: Event) {\n    if (e.target instanceof HTMLInputElement) {\n      const targetValue = parseInt(e.target!.value)\n      this.updateDataModel({ propertyName: 'Value', value: targetValue })\n    }\n  }\n\n  get cssVars () {\n    const controlProp = this.properties\n    return {\n      position: 'relative',\n      left: '0px',\n      top: (this.properties.Min! > this.properties.Max!) ? this.checkOtherOrientations() ? `${controlProp.Height!}px` : '0px' : '0px',\n      gridTemplateColumns: this.checkOtherOrientations() ? '20px ' + `${controlProp.Height! - 40}px` + ' 20px' : '',\n      '--bg-color': this.properties.BackColor,\n      '--height': this.checkOtherOrientations() ? `${this.properties.Width!}px` : `${this.properties.Height!}px`,\n      transform: (this.properties.Min! > this.properties.Max!) ? this.scrollReAlign() : this.checkOtherOrientations() ? 'rotate(90deg)' : '',\n      transformOrigin: (this.properties.Min! > this.properties.Max!) ? this.checkOtherOrientations() ? '0% 0%' : '' : ''\n    }\n  }\n  scrollReAlign () {\n    if (this.checkOtherOrientations()) {\n      return 'rotate(-90deg)'\n    }\n    return 'ScaleX(-1)'\n  }\n  get getDisableValue () {\n    if (this.isRunMode || this.isEditMode) {\n      return this.properties.Enabled === false\n    } else {\n      return true\n    }\n  }\n  /**\n   * @description changes ForeColor property and then updates the getForeColor variable which is given to fill attribute of the svg element\n   * @function getForeColorValue\n   *\n   */\n  @Watch('properties.ForeColor', { deep: true })\n  changeForeColor () {\n    if (this.properties.Enabled) {\n      this.$el.querySelectorAll('.foreColor').forEach((e) => {\n        (e as SVGGElement).style.fill = this.getForeColorValue\n      })\n    } else {\n      this.$el.querySelectorAll('.foreColor').forEach((e) => {\n        (e as SVGGElement).style.fill = 'rgb(200,200,200)'\n      })\n    }\n  }\n\n  @Watch('properties.Enabled', { deep: true })\n  enabledValidate () {\n    this.changeForeColor()\n  }\n  get outerScrollBarDivObj () {\n    const controlProp = this.properties\n    let display = ''\n    if (this.isRunMode) {\n      display = controlProp.Visible ? 'inline-block' : 'none'\n    } else {\n      display = 'inline-block'\n    }\n    return {\n      width: `${controlProp.Width}px`,\n      height: `${controlProp.Height}px`,\n      left: `${controlProp.Left}px`,\n      top: `${controlProp.Top}px`,\n      display: display,\n      overflow: 'hidden',\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.getMouseCursorData\n          : 'default',\n      backgroundColor: 'white'\n    }\n  }\n\n  get inputStyleObj () {\n    const controlProp = this.properties\n    let a = null\n    let temprgba\n    if (controlProp.BackColor!!.startsWith('rgb')) {\n      a = controlProp.BackColor!.split('rgba(')[1].split(',')\n    } else {\n      temprgba = this.hexToRgbA(controlProp.BackColor!)\n    }\n\n    return {\n      width: this.checkOtherOrientations() ? `${controlProp.Height! - 40}px` : `${controlProp.Width! - 40}px`,\n      height: this.checkOtherOrientations() ? `${controlProp.Width!}px` : `${controlProp.Height!}px`,\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.getMouseCursorData\n          : 'default',\n      backgroundColor: controlProp.BackColor!.startsWith('rgb') ? `rgba(${a![0]},${a![1]},${a![2]},0.5)` : temprgba,\n      margin: '0px'\n    }\n  }\n  hexToRgbA (hex: string) {\n    let c: any\n    if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(hex)) {\n      c = hex.substring(1).split('')\n      if (c.length === 3) {\n        c = [c[0], c[0], c[1], c[1], c[2], c[2]]\n      }\n      c = '0x' + c.join('')\n      return 'rgba(' + [(c >> 16) & 255, (c >> 8) & 255, c & 255].join(',') + ',0.5)'\n    }\n  }\n  get scrollBarButtonStyleObj () {\n    const controlProp = this.properties\n    return {\n      backgroundColor: this.cssVars['--bg-color'],\n      overflow: 'hidden',\n      outline: 'none',\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.getMouseCursorData\n          : 'default',\n      border: !controlProp.Enabled ? '1px solid gray' : ''\n    }\n  }\n  mounted () {\n    this.$el.focus()\n  }\n\n  /**\n   * @description checkOtherOrientations returns string value from\n   * controlProperties.controlsOrientationProp\n   * @function checkOtherOrientations\n   * @returns boolean value\n   * @override\n   */\n  checkOtherOrientations (): boolean {\n    return controlProperties.controlsOrientationProp(this.data)\n  }\n  eventStoppers () {\n    const eventStop = (event: Event) => event.stopPropagation()\n    return this.isEditMode === false ? null : {\n      keydown: eventStop\n    }\n  }\n}\n</script>\n\n<style scoped>\n.slidecontainer {\n  display: grid;\n  grid-template-columns: 20px auto 20px;\n}\n\n.slider {\n  -webkit-appearance: none;\n  content: '';\n  --rgb:250,250,250;\n  --alpha: 0.5;\n  background-color: rgba(var(--rgb), var(--alpha));\n  outline: none;\n  overflow: hidden;\n  pointer-events: none;\n}\n\n.slider:hover {\n  opacity: 1;\n}\n\n.slider::-webkit-slider-thumb {\n  background-color: var(--bg-color);\n  border: 2px solid gray;\n  border-right: 2px solid black;\n  height: var(--height);\n  -webkit-appearance: none;\n  appearance: none;\n  width: 25px;\n  --alpha: 1;\n  cursor: inherit;\n  pointer-events:auto;\n}\n\n.slider::-moz-range-thumb {\n  background: rgb(139, 138, 138);\n  cursor: pointer;\n}\n</style>\n"]}]}