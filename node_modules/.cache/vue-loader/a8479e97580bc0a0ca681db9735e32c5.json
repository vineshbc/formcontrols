{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDFontDialog/index.vue?vue&type=template&id=16df5518&scoped=true&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDFontDialog/index.vue","mtime":1610544258558},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}