{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDContainer/index.vue?vue&type=style&index=0&id=01b0e554&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDContainer/index.vue","mtime":1610544258558},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiNyaWdodC1jbGljay1tZW51IHsKICBiYWNrZ3JvdW5kOiAjZmFmYWZhOwogIGJvcmRlcjogMXB4IHNvbGlkICNiZGJkYmQ7CiAgYm94LXNoYWRvdzogMCAycHggMnB4IDAgcmdiYSgwLCAwLCAwLCAwLjE0KSwgMCAzcHggMXB4IC0ycHggcmdiYSgwLCAwLCAwLCAwLjIpLAogICAgMCAxcHggNXB4IDAgcmdiYSgwLCAwLCAwLCAwLjEyKTsKICBkaXNwbGF5OiBibG9jazsKICBsaXN0LXN0eWxlOiBub25lOwogIG1hcmdpbjogMDsKICBwYWRkaW5nOiAwOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB3aWR0aDogMTAwcHg7CiAgei1pbmRleDogOTk5OTk5Owp9CgojcmlnaHQtY2xpY2stbWVudSBsaSB7CiAgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlMGUwZTA7CiAgbWFyZ2luOiAwOwogIHBhZGRpbmc6IDVweCA1cHg7Cn0KCiNyaWdodC1jbGljay1tZW51IGxpOmxhc3QtY2hpbGQgewogIGJvcmRlci1ib3R0b206IG5vbmU7Cn0KCiNyaWdodC1jbGljay1tZW51IGxpOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiAjMWU4OGU1OwogIGNvbG9yOiAjZmFmYWZhOwp9Cjpmb2N1cyB7CiAgb3V0bGluZTogbm9uZTsKfQouZHJhZ1NlbGVjdG9yIHsKICB2aXNpYmlsaXR5OiBoaWRkZW47Cn0KLmRyYWdTZWxlY3RvciA+IC5yZXNpemUgewogIHZpc2liaWxpdHk6IHZpc2libGU7Cn0KLmRyYWdTZWxlY3RvciA+IC5ncm91cCB7CiAgdmlzaWJpbGl0eTogdmlzaWJsZTsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingswgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDContainer","sourcesContent":["<template>\n  <div @mouseup=\"onMouseUp\">\n    <div\n      id=\"right-click-menu\"\n      :style=\"contextMenuStyle\"\n      ref=\"contextmenu\"\n      tabindex=\"0\"\n      @blur.stop=\"closeMenu\"\n    >\n      <ContextMenu\n        ref=\"refContextMenu\"\n        :userFormId=\"userFormId\"\n        :containerId=\"containerId\"\n        :controlId=\"controlId\"\n        :values=\"contextMenuType ? userformContextMenu : controlContextMenu\"\n        @createGroup=\"createGroup\"\n        @closeMenu=\"closeMenu\"\n        :groupStyleArray=\"groupStyleArray\"\n      />\n    </div>\n    <drag-selector\n      :class=\"[!isEditMode ? 'dragSelector' : '']\"\n      ref=\"dragSelector\"\n      :style=\"dragSelectorStyle\"\n    >\n      <GroupControl\n        :containerId=\"containerId\"\n        :userFormId=\"userFormId\"\n        ref=\"groupRef\"\n        class=\"group\"\n        :controlRef=\"$refs\"\n        :currentSelectedGroup=\"filterSelected\"\n        @openMenu=\"(e, parentID, controlID, type) => openContextMenu(e, parentID, controlID, type)\"\n      />\n      <div\n        v-for=\"control in propControlData.controls\"\n        :key=\"control\"\n        class=\"resize\"\n      >\n        <ResizeControl\n          ref=\"resizeControl\"\n          :name=\"control\"\n          @openMenu=\"\n            (e, parentID, controlID, type, mode) => openContextMenu(e, parentID, controlID, type, mode)\n          \"\n          :controlId=\"control\"\n          :containerId=\"controlId\"\n          :userFormId=\"userFormId\"\n          :currentSelectedGroup.sync=\"currentSelectedGroup\"\n          @createGroup=\"createGroup\"\n          @dragControl=\"dragControl\"\n          @muldragControl=\"muldragControl\"\n        >\n        </ResizeControl>\n      </div>\n    </drag-selector>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Emit, Prop, Vue, Ref, Watch } from 'vue-property-decorator'\nimport { State, Action } from 'vuex-class'\nimport ResizeControl from '@/FormDesigner/components/organisms/FDResizeControl/index.vue'\nimport ContextMenu from '@/FormDesigner/components/atoms/FDContextMenu/index.vue'\nimport { controlContextMenu } from '@/FormDesigner/models/controlContextMenuData'\nimport { userformContextMenu } from '../../../models/userformContextMenuData'\nimport GroupControl from '@/FormDesigner/components/organisms/FDGroupControl/index.vue'\nimport {\n  IsetChildControls,\n  IaddChildControls,\n  IselectControl,\n  IupdateControl,\n  IupdateGroup,\n  IupdateControlExtraData\n} from '@/storeModules/fd/actions'\nimport { EventBus } from '../../../event-bus'\nimport FDCommonMethod from '@/api/abstract/FormDesigner/FDCommonMethod'\n@Component({\n  name: 'Container',\n  components: {\n    ContextMenu,\n    GroupControl,\n    ResizeControl\n  }\n})\nexport default class Container extends FDCommonMethod {\n  $el!: HTMLDivElement;\n  currentSelectedGroup: string = '';\n\n  @Prop({ required: true, type: String }) public controlId!: string;\n  @Prop({ required: true, type: String }) userFormId!: string;\n  @Prop({ required: true, type: String }) containerId!: string;\n  @Prop() mouseCursorData: string;\n\n  @State((state) => state.fd.selectedControls)\n  selectedControls!: fdState['selectedControls'];\n  @State((state) => state.fd.userformData) userformData!: userformData;\n  @State((state) => state.fd.groupedControls)\n  groupedControls!: fdState['groupedControls'];\n\n  @Action('fd/updateGroup') updateGroup!: (payload: IupdateGroup) => void;\n  @Action('fd/updateControlExtraData') updateControlExtraData!: (payload: IupdateControlExtraData) => void;\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void;\n  @Action('fd/setChildControls') setChildControls!: (\n    payload: IsetChildControls\n  ) => void;\n  @Action('fd/addChildControls') addChildControls!: (\n    payload: IaddChildControls\n  ) => void;\n  @Action('fd/selectControl') selectControl!: (payload: IselectControl) => void;\n\n  @Prop({ required: true, type: Boolean }) viewMenu: boolean;\n  @Prop({ required: true, type: Boolean }) contextMenuType: boolean;\n  @Prop({ required: true, type: String }) top: string;\n  @Prop({ required: true, type: String }) left: string;\n  @Prop() isEditMode: boolean;\n  @Prop() width: number\n  @Prop() height: number\n\n  @Ref('groupRef') readonly groupRef!: GroupControl;\n  @Ref('refContextMenu') readonly refContextMenu!: ContextMenu;\n  @Ref('dragSelector') readonly dragSelector: dragselector;\n  @Ref('contextmenu') readonly contextmenu: HTMLDivElement;\n\n  controlContextMenu: Array<IcontextMenu> = controlContextMenu;\n  userformContextMenu: Array<IcontextMenu> = userformContextMenu;\n  handler: string = '';\n  grouphandler: string = '';\n  mainSelectData: controlData\n  containerPosition: IMousePosition = { clientX: 0, clientY: 0, movementX: 0, movementY: 0 }\n  selectedGroup: string[] = []\n  groupStyleArray: Array<IGroupStyle> = []\n\n  /**\n   * @description To get the selected container  from controls are dragged\n   * @function selectedContainer\n   */\n  get selectedContainer () {\n    return [...this.selectedControls[this.userFormId].container][0]\n  }\n\n  /**\n   * @description To get the selected controls to be dropped\n   * @function selectedSelect\n   */\n  get selectedSelect () {\n    if (this.grouphandler === 'groupdrag') {\n      const selectedSelect = []\n      for (let k = 0; k < this.selectedGroup.length; k++) {\n        if (this.selectedGroup[k].startsWith('group')) {\n          for (const i in this.userformData[this.userFormId]) {\n            if (!i.startsWith('ID_USERFORM')) {\n              const userdata = this.userformData[this.userFormId]\n              if (userdata[i].properties.GroupID === this.selectedGroup[k]) {\n                selectedSelect.push(i)\n              }\n            }\n          }\n        } else {\n          selectedSelect.push(this.selectedGroup[k])\n        }\n      }\n      return selectedSelect\n    } else {\n      return this.selectedControls[this.userFormId].selected\n    }\n  }\n\n  /**\n   * @description To get the controls to be removed from the  selected container\n   * @function fromContainerControls\n   */\n  get fromContainerControls () {\n    const fromContainerControls = [...this.userformData[this.userFormId][this.selectedContainer].controls]\n    for (let i = 0; i < this.selectedSelect.length; i++) {\n      let tragetId: undefined | string = this.selectedSelect[i]\n      let targetIndex = fromContainerControls.findIndex((id) => id === tragetId)\n      if (targetIndex !== -1) {\n        fromContainerControls.splice(targetIndex, 1)\n      }\n    }\n    return fromContainerControls\n  }\n\n  /**\n   * @description To remove chilControls of selected Container\n   * @function removeChildControl\n   * @param selectedSelect  - control array to be deleted\n   */\n  removeChildControl (id: string, controls: string[]) {\n    const userData = this.userformData[this.userFormId]\n    const beforeControls = userData[id].controls\n    const deleteControls = beforeControls.filter(x => !controls.includes(x))\n    for (const key of deleteControls) {\n      this.deleteZIndex(key)\n      this.deleteTabIndex(key)\n    }\n\n    this.setChildControls({\n      userFormId: this.userFormId,\n      containerId: id,\n      targetControls: controls\n    })\n  }\n\n  /**\n   * @description To add chilControls of selected Container\n   * @function addChildControl\n   * @param selectedSelect  - control array to be added\n   */\n  addChildControl (selectedSelect: string[]) {\n    const userData = this.userformData[this.userFormId]\n    for (const control of selectedSelect) {\n      if (!userData[this.containerId].controls.includes(control)) {\n        this.addChildControls({\n          userFormId: this.userFormId,\n          containerId: this.containerId,\n          targetControls: selectedSelect\n        })\n      }\n    }\n\n    for (const id of selectedSelect) {\n      this.updateTabIndexValue(id)\n      this.updateZIndexValue(id)\n    }\n  }\n\n  /**\n   * @description To update Properties of Control\n   * @function updateControlProp\n   * @param id  - selcted controlId\n   * @param propName  -  selected control property Name\n   * @param propName  -  selected control property Value\n   */\n  updateControlProp (id: string, propName: keyof controlProperties, propValue: number| string) {\n    this.updateControl({\n      userFormId: this.userFormId,\n      controlId: id,\n      propertyName: propName,\n      value: propValue\n    })\n  }\n\n  /**\n   * @description To update the selectedControls in main data\n   * @function updatedSelect\n   * @param updatedSelect  - selcted ContainerId\n   * @param selArry  - selcted controlList\n   */\n  updatedSelect (conatiner: string[], selArry: string[]) {\n    this.selectControl({\n      userFormId: this.userFormId,\n      select: {\n        container: conatiner,\n        selected: selArry\n      }\n    })\n  }\n\n  /**\n   * @description If control inside the group is selected dropped into other container\n   * @function updateGroupControl\n   * @param mainSelectGroup  - selected group\n   */\n  updateGroupControl (mainSelectGroup: string) {\n    const presenetControl: string[] = []\n    if (mainSelectGroup && mainSelectGroup !== '') {\n      for (let control in this.userformData[this.userFormId]) {\n        const controlGroupId = this.userformData[this.userFormId][control].properties.GroupID!\n        if (controlGroupId && controlGroupId === mainSelectGroup) {\n          presenetControl.push(control)\n        }\n      }\n    }\n    if (presenetControl.length === 1) {\n      const groupArray: string[] = [...this.groupedControls[this.userFormId]!.groupArray!]\n      const index = groupArray.findIndex((val) => val === mainSelectGroup)\n      groupArray.splice(index, 1)\n      this.updateGroup({\n        userFormId: this.userFormId,\n        groupArray: groupArray\n      })\n      this.updateControlProp(presenetControl[0], 'GroupID', '')\n    }\n  }\n  /**\n   * @description to drag and drop the control and group into respective container\n   * @function onMouseUp\n   * @param event  - it is of type MouseEvent\n   * @event mouseup\n   */\n  onMouseUp (event: MouseEvent) {\n    if (document.onmousemove && document.onmouseup && (this.handler === 'drag' || this.handler === 'frameDrag' || this.grouphandler === 'groupdrag')) {\n      const userData = this.userformData[this.userFormId]\n      const containerType = userData[this.containerId].type === 'Page' && userData[this.getContainerList(this.containerId)[0]].properties.Value === -1\n      if (!containerType) {\n        let moveValueX: number = 0\n        let moveValueY: number = 0\n        let mainSelect: string = ''\n        let parentConatiner = ''\n        let count = 0\n        let tempEvent = {}\n        this.selectedGroup = this.selectedControls[this.userFormId].selected\n        if (this.grouphandler === 'groupdrag') {\n          EventBus.$emit(\n            'getGroupMoveValue',\n            (offsetX: number, offsetY: number, id: string, tempEventObj: MouseEvent) => {\n              console.log(tempEventObj)\n              moveValueX = offsetX\n              moveValueY = offsetY\n              tempEvent = Object.keys(tempEventObj).length === 0 ? tempEvent : tempEventObj\n            }\n          )\n          mainSelect = this.getSelectedControlsDatas![0]\n        } else if (this.handler === 'drag') {\n          EventBus.$emit(\n            'getMoveValue',\n            (offsetX: number, offsetY: number, id: string) => {\n              moveValueX = offsetX\n              moveValueY = offsetY\n              mainSelect = id\n            }\n          )\n        } else if (this.handler === 'frameDrag') {\n          EventBus.$emit(\n            'getMoveValue',\n            (offsetX: number, offsetY: number, id: string, parentControl: string) => {\n              moveValueX = offsetX\n              moveValueY = offsetY\n              mainSelect = id\n              parentConatiner = parentControl\n            }\n          )\n        }\n        if (mainSelect && !this.getSelectedControlsDatas!.includes(this.containerId)) {\n          count = count + 1\n          let frameCondition: boolean = false\n          if (this.handler === 'frameDrag') {\n            const isChild = this.getChildControl(mainSelect).includes(this.containerId) || this.containerId === mainSelect\n            frameCondition = (isChild === false && parentConatiner === this.containerId) ||\n          (isChild === false && this.selectedControls[this.userFormId].selected.includes(mainSelect)) ||\n          (isChild === false && count === 1)\n          }\n          if ((this.handler === 'frameDrag' && frameCondition) || this.handler === 'drag' || this.grouphandler === 'groupdrag') {\n            const currentControlsData = this.userformData[this.userFormId]\n            const mainSelectData = currentControlsData[mainSelect]\n            const mainSelectX = mainSelectData.properties.Left\n            const mainSelectY = mainSelectData.properties.Top\n            const containerX = event.clientX - this.$el.getClientRects()[0].x\n            const containerY = event.clientY - this.$el.getClientRects()[0].y\n            const mainSelectGroup: string = mainSelectData.properties.GroupID!\n            const selectedSelect = this.handler === 'frameDrag' ? (this.selectedSelect.includes(mainSelect) ? this.selectedSelect : [mainSelect]) : this.selectedSelect\n            if (typeof mainSelectX === 'number' && typeof mainSelectY === 'number') {\n              if ((this.handler === 'frameDrag' || this.handler === 'drag')) {\n                selectedSelect.forEach((id) => {\n                  const targetData = currentControlsData[id].properties\n                  const targetLeft = targetData.Left\n                  const targetTop = targetData.Top\n                  if (typeof targetTop === 'number' && typeof targetLeft === 'number') {\n                    this.updateControlProp(id, 'Left', containerX + targetLeft - mainSelectX - moveValueX)\n                    this.updateControlProp(id, 'Top', containerY + targetTop - mainSelectY - moveValueY)\n                    if (this.handler === 'drag') {\n                      if (mainSelectGroup !== '' && this.selectedContainer !== this.containerId) {\n                        this.updateControlProp(id, 'GroupID', '')\n                        this.updateGroupControl(mainSelectGroup)\n                      }\n                    }\n                  }\n                })\n              } else if (this.grouphandler === 'groupdrag' && this.selectedContainer === this.containerId) {\n                EventBus.$emit('getClientValue', 'same')\n              }\n            }\n            if (this.handler === 'frameDrag' && this.userformData[this.userFormId][this.containerId].controls.includes(mainSelect)) {\n              event.stopPropagation()\n              document.onmouseup(event)\n            } else {\n              if (this.selectedContainer !== this.containerId) {\n                const mainSelContainer = this.getContainerList(mainSelect)[0]\n                if (this.selectedControls[this.userFormId].selected.includes(mainSelect) || this.grouphandler === 'groupdrag') {\n                  this.removeChildControl(this.selectedContainer, this.fromContainerControls)\n                  this.addChildControl(selectedSelect)\n                } else {\n                  const controls = this.userformData[this.userFormId][mainSelContainer].controls\n                  const removeControl = controls.filter(e => e !== mainSelect)\n                  this.removeChildControl(mainSelContainer, removeControl)\n                  this.addChildControl([mainSelect])\n                }\n                if (this.grouphandler === 'groupdrag') {\n                  for (let k = 0; k < this.selectedGroup.length; k++) {\n                    if (this.selectedGroup[k].startsWith('group')) {\n                      this.createGroup(this.selectedGroup[k])\n                    }\n                  }\n                }\n\n                if (this.grouphandler === 'groupdrag') {\n                  if (this.grouphandler === 'groupdrag' && this.selectedContainer !== this.containerId) {\n                    EventBus.$emit('getClientValue', 'different', containerX, containerY, event, this.containerId, tempEvent)\n                  }\n                  const selected = this.selectedControls[this.userFormId].selected\n                  this.updatedSelect(this.getContainerList(selected[0]), selected)\n                } else {\n                  this.updatedSelect(this.getContainerList(this.selectedSelect[0]), this.selectedControls[this.userFormId].selected)\n                }\n              }\n              event.stopPropagation()\n              document.onmouseup(event)\n            }\n          }\n        }\n      } else {\n        event.stopPropagation()\n        document.onmouseup(event)\n      }\n    }\n  }\n\n  @Emit('closeMenu')\n  closeMenu () {\n    return 0\n  }\n\n  /**\n   * @description style object to dynamically changing the styles of  the contextMenu component based on propControlData\n   * @function styleObject\n   *\n   */\n  get contextMenuStyle () {\n    return {\n      top: this.top,\n      left: this.left,\n      display: this.viewMenu ? 'block' : 'none'\n    }\n  }\n  get filterSelected () {\n    const result =\n      this.currentSelectedGroup === ''\n        ? this.selectedControls[this.userFormId].selected.filter((Id) => {\n          if (typeof Id === 'string') {\n            return Id.startsWith('group')\n          }\n        })\n        : [this.currentSelectedGroup]\n    return result\n  }\n  createGroup (groupId: string) {\n    this.groupRef.groupStyle(groupId)\n  }\n  muldragControl (val: IDragResizeGroup) {\n    this.groupRef.handleMouseDown(val.event, val.handler)\n  }\n  dragControl (event: MouseEvent) {\n    this.groupRef.handleMouseDown(event, 'drag')\n  }\n  /**\n   * @description style object to dynamically changing the styles of  the darg-selctor component based on propControlData\n   * @function dragSelectorStyle\n   *\n   */\n  get dragSelectorStyle () {\n    const type = this.propControlData.type\n    const ph = type && type === 'Page' ? this.height! : this.propControlData.properties.Height!\n    const pw = type && type === 'Page' ? this.width! : this.propControlData.properties.Width!\n    const sh = this.propControlData.properties.ScrollHeight!\n    const sw = this.propControlData.properties.ScrollWidth!\n    return {\n      height: type === 'Frame' ? (ph > sh ? `${ph - 50}px` : `${sh! - 27}px`) : ph > sh ? `${ph - 50}px` : `${sh! - 50}px`,\n      width: pw > sw ? `${pw - 20}px` : `${sw! - 20}px`,\n      cursor: type && type === 'Page' ? 'default !important'\n        : this.propControlData.properties.MousePointer !== 0 ||\n        this.propControlData.properties.MouseIcon !== ''\n          ? `${this.mouseCursorData} !important`\n          : 'default !important'\n    }\n  }\n\n  /**\n   * @description propControlData is abstract class providing implementation in FDContainer by passing\n   * userFormId and controlId which is taken as props from parent Component\n   * @function propControlData\n   *\n   */\n  get propControlData (): controlData {\n    return this.userformData[this.userFormId][this.controlId]\n  }\n\n  /**\n   * @description To display contextmenu of control\n   * @function openContextMenu\n   * @param e it is type of mouseEvent\n   * @param parentID is the UserFormId in which the control resides\n   * @param controlId is the selected control of which context has to be displayed\n   */\n  openContextMenu (e: MouseEvent, parentID: string, controlID: string, type: string, mode: boolean) {\n    this.$emit('openMenu', e, parentID, controlID, type, mode)\n  }\n  created () {\n    EventBus.$on('handleName', (handler: string) => {\n      this.handler = handler\n    })\n    EventBus.$on('groupDrag', (handler: string) => {\n      this.grouphandler = handler\n    })\n  }\n  // destroyed () {\n  //   EventBus.$off('handleName')\n  //   EventBus.$off('groupDrag')\n  // }\n  @Watch('selectedControls', { deep: true })\n  updateGroupStyle () {\n    if (this.selectedContainer === this.containerId) {\n      this.groupStyleArray = [...this.groupRef.divStyleArray]\n    }\n  }\n}\n</script>\n\n<style scoped>\n#right-click-menu {\n  background: #fafafa;\n  border: 1px solid #bdbdbd;\n  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.2),\n    0 1px 5px 0 rgba(0, 0, 0, 0.12);\n  display: block;\n  list-style: none;\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  width: 100px;\n  z-index: 999999;\n}\n\n#right-click-menu li {\n  border-bottom: 1px solid #e0e0e0;\n  margin: 0;\n  padding: 5px 5px;\n}\n\n#right-click-menu li:last-child {\n  border-bottom: none;\n}\n\n#right-click-menu li:hover {\n  background: #1e88e5;\n  color: #fafafa;\n}\n:focus {\n  outline: none;\n}\n.dragSelector {\n  visibility: hidden;\n}\n.dragSelector > .resize {\n  visibility: visible;\n}\n.dragSelector > .group {\n  visibility: visible;\n}\n</style>\n"]}]}