{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/FDComboBox/index.vue?vue&type=style&index=0&id=7d9d363d&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/FDComboBox/index.vue","mtime":1610544258550},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmN1c3RvbS1zZWxlY3QgewogIHBvc2l0aW9uOiByZWxhdGl2ZTsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIG91dGxpbmU6IG5vbmU7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKfQouc2VsZWN0aW9uU3BhbiB7CiAgd2lkdGg6IDVweDsKfQouc2VsZWN0aW9uRGl2IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogNXB4IGF1dG87Cn0KLnNlbGVjdGVkIHsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMjM4LCAyMzgsIDIzOCk7CiAgYm9yZGVyOiAxcHggc29saWQgIzg1ODU4NjsKICBib3JkZXItbGVmdDogMHB4OwogIGNvbG9yOiBibGFjazsKICBiYWNrZ3JvdW5kLXNpemU6IDQwJTsKICBiYWNrZ3JvdW5kLXBvc2l0aW9uOiBjZW50ZXI7CiAgYmFja2dyb3VuZC1yZXBlYXQ6IG5vLXJlcGVhdDsKICBjdXJzb3I6IHBvaW50ZXI7CiAgd2lkdGg6IDIwcHg7CiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSAycHgpOwp9CgouaXRlbXMgewogIGNvbG9yOiBibGFjazsKICBiYWNrZ3JvdW5kLWNvbG9yOiB3aGl0ZTsKICBvdmVyZmxvdzogaGlkZGVuOwogIGxlZnQ6IDA7CiAgcmlnaHQ6IDA7CiAgd2lkdGg6IGNhbGMoMTAwJSArIDIwcHgpOwogIGN1cnNvcjogY29udGV4dC1tZW51Owp9Ci5pdGVtIHsKICBjb2xvcjogYmxhY2s7CiAgY3Vyc29yOiBwb2ludGVyOwogIGJvcmRlci1sZWZ0OiAxcHggc29saWQgYmxhY2s7CiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgYmxhY2s7Cn0KLml0ZW06aG92ZXIgewogIGJhY2tncm91bmQtY29sb3I6ICMwMzgwZmM7CiAgY29sb3I6IHdoaXRlOwogIGJvcmRlcjogMXB4IGRvdHRlZCBibGFjazsKfQouc2VsZWN0SGlkZSB7CiAgZGlzcGxheTogbm9uZTsKfQouY29tYm9ib3ggewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiBhdXRvIDIwcHg7Cn0KLmNvbHVtbkhlYWRzIHsKICBoZWlnaHQ6IDE5LjJweDsKICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICBib3JkZXItdG9wOiAwcHg7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7Cn0KLmxpc3RTdHlsZSB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiAxMDAlOwogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsKICBib3JkZXI6IDFweCBzb2xpZCBncmF5OwogIG92ZXJmbG93OiBhdXRvOwp9Ci5saXN0LW91dGVyIHsKICBib3JkZXI6IDAuMXB4IHNvbGlkIGxpZ2h0Z3JheTsKICB3aWR0aDogMTY0cHg7CiAgaGVpZ2h0OiAxMzBweDsKICBvdmVyZmxvdy15OiBhdXRvOwogIGJveC1zaGFkb3c6IC0xcHggLTFweCBncmV5Owp9Ci50ciB7CiAgb3V0bGluZTogbm9uZTsKICBkaXNwbGF5OiBmbGV4Owp9Ci50cjpob3Zlcjpub3QoW2Rpc2FibGVkXSkgewogIGJhY2tncm91bmQtY29sb3I6IHJnYig1OSwgMTIyLCAyMzEpOwp9Ci51bCB7CiAgZGlzcGxheTogZ3JpZDsKICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDEwMCU7CiAgbGlzdC1zdHlsZS10eXBlOiBub25lOwogIG1hcmdpbi1ibG9jay1zdGFydDogMGVtOwogIG1hcmdpbi1ibG9jay1lbmQ6IDBlbTsKICBtYXJnaW4taW5saW5lLXN0YXJ0OiAwcHg7CiAgbWFyZ2luLWlubGluZS1lbmQ6IDBweDsKICBwYWRkaW5nLWlubGluZS1zdGFydDogMHB4Owp9Ci5saSB7CiAgbWFyZ2luOiAxcHg7CiAgdGV4dC1hbGlnbjogbGVmdDsKICBmb250LXNpemU6IDE0cHg7CiAgaGVpZ2h0OiAxNnB4OwogIGJvcmRlcjogMC41cHggc29saWQgd2hpdGU7CiAgY3Vyc29yOiBwb2ludGVyOwp9Ci5saTpob3ZlciB7CiAgbWFyZ2luOiAxcHg7CiAgYm9yZGVyLWNvbG9yOiByZ2IoNTIsIDUyLCAyNTUpOwogIGJvcmRlci1yYWRpdXM6IDJweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoNTksIDEyMiwgMjMxKTsKfQouZmEgewogIG1hcmdpbi1sZWZ0OiA0cHg7CiAgbWFyZ2luLXRvcDogM3B4Owp9Ci5zcGFuIHsKICBtYXJnaW4tbGVmdDogN3B4OwogIG1hcmdpbi10b3A6IDBweDsKICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKfQoubGFiZWxTdHlsZSB7CiAgd2hpdGUtc3BhY2U6IG5vd3JhcDsKfQouZGl2IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyOwp9Ci5saXN0Ym94IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwJTsKICBoZWlnaHQ6IDEwMHB4OwogIHdpZHRoOiAzMDBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7CiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTsKfQouY29sdW1uSGVhZHMgewogIGhlaWdodDogMTkuMnB4OwogIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOwp9Ci5vcHRpb25zSXRlbXMgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOwp9Ci50ZXh0LWJveC1kZXNpZ24gewogIHJlc2l6ZTogbm9uZTsKICBvdmVyZmxvdzogaGlkZGVuOwogIGJvcmRlcjogbm9uZTsKICBmb250LWZhbWlseTogbW9ub3NwYWNlOwp9Ci50ZXh0LWJveC1kZXNpZ246Zm9jdXMgewogIG91dGxpbmU6IG5vbmU7Cn0KLnRleHQtYm94LWRlc2lnbjo6c2VsZWN0aW9uIHsKICBiYWNrZ3JvdW5kOiBsaWdodGJsdWU7Cn0KLnRhYmxlLXN0eWxlIHsKICB3aWR0aDogY2FsYygxMDAlIC0gMnB4KTsKfQoudGhDbGFzcyB7CiAgcG9zaXRpb246IHN0aWNreTsKICB0b3A6IDA7CiAgb3ZlcmZsb3c6IGhpZGRlbjsKICB0ZXh0LWRlY29yYXRpb246IHVuZGVybGluZTsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwp9Ci50ZENsYXNzIHsKICB3aWR0aDogMTVweDsKICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZDsKfQoudGRDbGFzc0luIHsKICB3aWR0aDogMTBweDsKfQouaW5wdXRDbGFzcyB7CiAgbWFyZ2luOiAwOwp9Ci5oclN0eWxlIHsKICBtYXJnaW46IDBweDsKfQouZm9yUGxhaW4gewogIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7Cn0KLnRIZWFkU3R5bGUgewogIHBvc2l0aW9uOiBzdGlja3k7CiAgdG9wOiAwcHg7Cn0KLmNvbHVtbi1pdGVtIHsKICBkaXNwbGF5OiBmbGV4Owp9Ci5jb2xIZWFkc0NsYXNzIHsKICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsgfile":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDComboBox","sourcesContent":["<template>\n  <div\n    class=\"custom-select\"\n    :tabindex=\"tabindex\"\n    :style=\"customSelectObj\"\n    :title=\"properties.ControlTipText\"\n    @click=\"selectedItem\"\n    @keydown.enter=\"setContentEditable($event, true)\"\n    @keydown.esc=\"releaseEditMode\"\n    v-on=\"eventStoppers()\"\n  >\n    <div\n      class=\"combobox\"\n      :style=\"boxStyleObj\"\n      @mousedown=\"controlEditMode\"\n      tabindex=\"1\"\n      @click=\"toFocus\"\n    >\n      <div\n        :class=\"properties.SelectionMargin ? 'selectionDiv' : ''\"\n        :style=\"selectionStyle\"\n      >\n        <span\n          v-if=\"properties.SelectionMargin\"\n          class=\"selectionSpan\"\n          :style=\"selectionSpanObj\"\n          @click=\"setSelection\"\n        ></span>\n        <textarea\n          data-gramm=\"false\"\n          ref=\"textareaRef\"\n          :style=\"cssStyleProperty\"\n          wrap=\"off\"\n          :tabindex=\"properties.TabIndex\"\n          :readonly=\"getDisableValue || properties.Style === 1\"\n          :maxlength=\"properties.MaxLength !== 0 ? properties.MaxLength : ''\"\n          @blur=\"handleBlur($event, textareaRef, hideSelectionDiv)\"\n          @click=\"handleClick($event, textareaRef, hideSelectionDiv)\"\n          @input=\"handleTextInput($event)\"\n          class=\"text-box-design\"\n          :value=\"properties.Value\"\n          @dragstart=\"dragBehavior\"\n          @keydown.enter.prevent\n        />\n        <div\n          ref=\"hideSelectionDiv\"\n          @click=\"divHide($event, textareaRef)\"\n          :style=\"divcssStyleProperty\"\n          :title=\"properties.ControlTipText\"\n          class=\"text-box-design\"\n        >\n          {{ properties.Value }}\n        </div>\n        <label\n          ref=\"autoSizeTextarea\"\n          class=\"labelStyle\"\n          :class=\"labelStyleObj\"\n        ></label>\n      </div>\n      <div\n        class=\"selected\"\n        @click=\"enabledCheck($event)\"\n        :style=\"selectedStyleObj\"\n      >\n        <div v-if=\"properties.DropButtonStyle === 1\">\n          <svg\n            version=\"1.0\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            height=\"10\"\n            width=\"10\"\n            viewBox=\"0 0 810.000000 460.000000\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g\n              :fill=\"\n                properties.Enabled\n                  ? '#000000'\n                  : open\n                  ? '#000000'\n                  : 'rgb(190,190,190)'\n              \"\n              transform=\"translate(0.000000,460.000000) scale(0.100000,-0.100000)\"\n              stroke=\"none\"\n            >\n              <path\n                d=\"M74 4585 c-4 -8 0 -23 7 -32 8 -9 897 -1036 1977 -2282 1612 -1862\n          1967 -2266 1987 -2266 20 0 378 408 2005 2280 1089 1254 1979 2287 1977 2295\n          -2 13 -453 15 -3975 18 -3540 2 -3973 0 -3978 -13z\"\n              />\n            </g>\n          </svg>\n        </div>\n        <div v-else-if=\"properties.DropButtonStyle === 2\">\n          <svg\n            version=\"1.0\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"12\"\n            height=\"12\"\n            viewBox=\"0 0 1280.000000 1024.000000\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g\n              transform=\"translate(0.000000,1024.000000) scale(0.100000,-0.100000)\"\n              :fill=\"\n                properties.Enabled\n                  ? '#000000'\n                  : open\n                  ? '#000000'\n                  : 'rgb(180,180,180)'\n              \"\n              stroke=\"none\"\n            >\n              <path\n                d=\"M3105 4084 c-295 -66 -529 -300 -590 -592 -19 -86 -19 -238 0 -324\n32 -153 97 -270 217 -390 73 -73 101 -94 190 -137 58 -29 134 -58 173 -66 103\n-22 275 -19 368 5 218 55 400 204 497 405 59 123 80 212 80 348 0 347 -231\n651 -565 742 -87 24 -283 29 -370 9z\"\n              />\n              <path\n                d=\"M6236 4083 c-151 -32 -275 -101 -386 -213 -151 -153 -219 -324 -220\n-546 0 -160 45 -304 138 -441 40 -58 130 -150 188 -190 59 -42 175 -94 251\n-113 104 -27 281 -27 386 -1 259 67 466 267 549 531 20 65 23 95 23 225 -1\n137 -3 157 -28 230 -78 223 -238 396 -444 480 -132 53 -316 69 -457 38z\"\n              />\n              <path\n                d=\"M9370 4085 c-364 -81 -610 -385 -610 -752 0 -136 21 -225 80 -348 97\n-201 279 -350 497 -405 93 -24 265 -27 368 -5 39 8 115 37 173 66 89 43 117\n64 190 137 121 121 185 237 219 395 18 89 13 275 -11 362 -71 255 -285 469\n-541 540 -84 23 -282 29 -365 10z\"\n              />\n            </g>\n          </svg>\n        </div>\n        <div v-else-if=\"properties.DropButtonStyle === 3\">\n          <svg\n            version=\"1.0\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"12\"\n            height=\"12\"\n            viewBox=\"0 0 1200.000000 1200.000000\"\n            preserveAspectRatio=\"xMidYMid meet\"\n          >\n            <g\n              transform=\"translate(0.000000,1200.000000) scale(0.100000,-0.100000)\"\n              :fill=\"\n                properties.Enabled\n                  ? '#000000'\n                  : open\n                  ? '#000000'\n                  : 'rgb(180,180,180)'\n              \"\n              stroke=\"none\"\n            >\n              <path\n                d=\"M0 6000 l0 -460 6000 0 6000 0 0 460 0 460 -6000 0 -6000 0 0 -460z\"\n              />\n            </g>\n          </svg>\n        </div>\n      </div>\n      <div class=\"items\" :class=\"{ selectHide: !open }\" :style=\"itemsStyleObj\">\n        <div\n          class=\"listStyle\"\n          :title=\"properties.ControlTipText\"\n          :style=\"listStyleObj\"\n          @mousedown=\"scrollingOnListItems\"\n        >\n          <div\n            :style=\"tableStyleObj\"\n            class=\"table-style\"\n            @click=\"tableClick\"\n            ref=\"comboRef\"\n            tabindex=\"1\"\n          >\n            <div class=\"tHeadStyle\" v-if=\"properties.ColumnHeads === true\">\n              <div class=\"thClass\" :style=\"colHeadsStyle\">\n                <template\n                  :style=\"tdStyleObj\"\n                  v-if=\"properties.ListStyle === 1\"\n                  class=\"tdClass\"\n                ></template>\n                <template\n                  v-for=\"(a, columnIndex) in extraDatas.ColumnHeadsValues\"\n                >\n                  <div\n                    v-if=\"\n                      (properties.RowSource !== '' &&\n                        columnIndex < properties.ColumnCount) ||\n                      properties.ColumnCount === -1\n                    \"\n                    :key=\"columnIndex\"\n                    :style=\"updateColHeads(columnIndex)\"\n                    class=\"colHeadsClass\"\n                  >\n                    {{ a }}\n                  </div>\n                </template>\n                <div\n                  v-if=\"properties.RowSource === ''\"\n                  :style=\"emptyColHeads\"\n                ></div>\n                <hr v-if=\"properties.ColumnHeads\" class=\"hrStyle\" />\n              </div>\n            </div>\n            <div v-else></div>\n            <div\n              class=\"tBodyStyle\"\n              @click=\"properties.Enabled ? (open = false) : (open = true)\"\n              v-if=\"properties.RowSource !== ''\"\n            >\n              <div\n                :tabindex=\"index\"\n                class=\"tr\"\n                :disabled=\"!properties.Enabled\"\n                v-for=\"(item, index) of tempArray\"\n                :key=\"index\"\n                @mouseenter=\"handleDrag\"\n                @keydown=\"handleExtendArrowKeySelect\"\n                @blur=\"clearMatchEntry\"\n                @mousedown=\"\n                  isRunMode || isEditMode\n                    ? properties.Enabled\n                      ? handleMultiSelect($event)\n                      : makeOpen()\n                    : ''\n                \"\n              >\n                <div\n                  :style=\"tdStyleObj\"\n                  class=\"tdClassIn\"\n                  v-if=\"\n                    (properties.ListStyle === 1 &&\n                      properties.ColumnCount > 0) ||\n                    (properties.ListStyle === 1 &&\n                      properties.ColumnCount === -1)\n                  \"\n                >\n                  <input name=\"radio\" type=\"radio\" class=\"inputClass\" />\n                </div>\n                <div\n                  class=\"column-item\"\n                  v-for=\"(i, index) in item\"\n                  :key=\"index\"\n                  :style=\"updateColumnValue(index)\"\n                >\n                  <template\n                    v-if=\"\n                      index < properties.ColumnCount ||\n                      properties.ColumnCount === -1\n                    \"\n                    >{{ i }}</template\n                  >\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  Component,\n  Vue,\n  Prop,\n  Mixins,\n  Watch,\n  Ref\n} from 'vue-property-decorator'\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\nimport { Mutation, Action, Getter } from 'vuex-class'\n@Component({\n  name: 'FDComboBox'\n})\nexport default class FDComboBox extends Mixins(FdControlVue) {\n  $el!: HTMLDivElement;\n  @Ref('textareaRef') textareaRef: HTMLTextAreaElement;\n  @Ref('autoSizeTextarea') readonly autoSizeTextarea!: HTMLLabelElement;\n  @Ref('hideSelectionDiv') readonly hideSelectionDiv!: HTMLDivElement;\n  @Ref('comboRef') comboRef!: HTMLDivElement;\n\n  private options = ['hello'];\n  private tabindex = 0;\n  eTargetValue: string = '';\n  tempArray: Array<Array<string>> = [];\n  open: boolean = false;\n  multiselect = [];\n  selectionStart: number = 0;\n  selectionEnd: number = 0;\n  tempInputValue: string = '';\n  tempWidth: string = '0px';\n  isScrolling: boolean = false;\n  tempHeight: number;\n  inBlur: boolean = false;\n  makeOpen () {\n    this.open = true\n  }\n  get getDisableValue () {\n    if (this.isRunMode || this.isEditMode) {\n      return this.properties.Enabled === false || this.properties.Locked\n    } else {\n      return true\n    }\n  }\n\n  get emptyColHeads () {\n    return {\n      height: '15px'\n    }\n  }\n  updateColumnValue (index: number) {\n    return this.updateColumnWidths(index, this.tempHeight)\n  }\n\n  get selectionStyle () {\n    const controlProp = this.properties\n    return {\n      borderLeft:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 2\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 3\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 4\n                ? '0.5px solid gray'\n                : '',\n      borderTop:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 2\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 3\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 4\n                ? '0.5px solid gray'\n                : ''\n    }\n  }\n  @Watch('open')\n  updateTd () {\n    if (!this.open && this.comboRef) {\n      this.tempHeight = this.comboRef.children[1].children[0].clientHeight\n    }\n  }\n\n  toFocus () {\n    if (this.isEditMode) {\n      this.isVisible = true\n    } else {\n      this.isVisible = false\n    }\n  }\n  tableClick (e: Event) {\n    this.tempListBoxComboBoxEvent = e\n  }\n\n  @Watch('properties.Font.FontSize', { deep: true })\n  autoSizeValidateOnFontChange () {\n    if (this.properties.AutoSize) {\n      this.updateAutoSize()\n    }\n  }\n\n  @Watch('properties.RowSource')\n  rowSourceValidate () {\n    if (this.properties.RowSource !== '') {\n      const initialRowSourceData = this.extraDatas.RowSourceData!\n      if (initialRowSourceData) {\n        this.tempArray = initialRowSourceData\n      }\n      this.updateDataModel({ propertyName: 'ControlSource', value: '' })\n      if (initialRowSourceData && initialRowSourceData.length === 0) {\n        this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\n      } else {\n        this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\n      }\n    }\n  }\n\n  handleTextInput (e: Event) {\n    if (this.properties.AutoSize) {\n      this.updateAutoSize()\n    }\n    if (e.target instanceof HTMLTextAreaElement) {\n      const tempEvent = e.target\n      this.eTargetValue = e.target.value\n      this.updateDataModel({ propertyName: 'Value', value: this.eTargetValue })\n      this.updateDataModel({ propertyName: 'Text', value: this.eTargetValue })\n      if (this.properties.RowSource !== '') {\n        if (this.properties.MatchEntry !== 0) {\n          this.textareaRef.focus()\n        }\n        if (this.properties.MatchEntry === 0) {\n          for (let i = 0; i < this.tempArray.length; i++) {\n            if (this.tempArray[i][0][0] === this.textareaRef.value[0]) {\n              this.textareaRef.value = this.tempArray[i][0]\n              this.updateDataModel({\n                propertyName: 'Text',\n                value: this.tempArray[i][0]\n              })\n              break\n            }\n          }\n          this.textareaRef.setSelectionRange(\n            0,\n            this.textareaRef.value.length,\n            'forward'\n          )\n        }\n      } else {\n        this.tempArray = []\n      }\n    } else {\n      throw new Error('target is not instance of div element')\n    }\n  }\n\n  setSelection () {\n    const setSelectionRef = this.textareaRef\n    setSelectionRef.focus()\n    setSelectionRef.select()\n  }\n  clearMatchEntry () {\n    this.updateDataModelExtraData({ propertyName: 'MatchData', value: '' })\n  }\n\n  protected get selectionSpanObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      backgroundColor: controlProp.BackStyle\n        ? controlProp.BackColor\n        : 'transparent'\n    }\n  }\n\n  protected get colHeadsStyle (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      backgroundColor: controlProp.BackColor,\n      width: '100%'\n    }\n  }\n\n  scrollingOnListItems (e: Event) {\n    this.isScrolling = true\n  }\n  /**\n   * @description  show selection when TextBox loses focus\n   * when HideSelection is false selection is show if user selects any text\n   * @function handleBlur\n   * @event blur\n   *\n   */\n  handleBlur (\n    event: TextEvent,\n    textareaRef: HTMLTextAreaElement,\n    hideSelectionDiv: HTMLDivElement\n  ) {\n    this.inBlur = false\n    if (this.isScrolling) {\n      this.open = true\n      this.textareaRef.focus()\n    } else if (this.open) {\n      this.inBlur = true\n      this.open = false\n    }\n    this.isScrolling = false\n    if (this.properties.ShowDropButtonWhen === 1) {\n      this.isVisible = false\n    }\n    if (\n      this.properties.EnterFieldBehavior === 1 &&\n      event.target instanceof HTMLTextAreaElement\n    ) {\n      const eventTarget = event.target\n      let tempField = this.tempInputValue.slice(\n        eventTarget.selectionStart - eventTarget.selectionEnd\n      )\n      this.selectionStart = eventTarget.selectionStart\n      this.selectionEnd = eventTarget.selectionEnd\n    }\n    if (\n      !this.properties.HideSelection &&\n      textareaRef &&\n      event.target instanceof HTMLTextAreaElement\n    ) {\n      const eventTarget = event.target\n\n      hideSelectionDiv.style.display = 'block'\n      hideSelectionDiv.style.height = this.properties.Height! + 'px'\n      hideSelectionDiv.style.width = this.properties.Width! + 'px'\n      textareaRef.style.display = 'none'\n      let textarea = eventTarget.value\n      let firstPart =\n        textarea.slice(0, eventTarget.selectionEnd) +\n        '</span>' +\n        textarea.slice(eventTarget.selectionEnd + Math.abs(0))\n      let text =\n        firstPart.slice(0, eventTarget.selectionStart) +\n        \"<span style='background-color:lightblue'>\" +\n        firstPart.slice(eventTarget.selectionStart + Math.abs(0))\n      hideSelectionDiv.innerHTML = text\n    }\n    if (this.properties.MatchRequired && textareaRef) {\n      const arrayCheck = this.extraDatas.RowSourceData!.findIndex(\n        (element) => element[0] === this.tempInputValue\n      )\n      if (arrayCheck === -1) {\n        this.textareaRef.focus()\n      } else {\n        return undefined\n      }\n    }\n  }\n  /**\n   *@description hides the div when focus comes to textarea when hideSelection\n   * properties is false\n   * @function handleClick\n   * @param event its of FocusEvent\n   * @event click\n   */\n  handleClick (\n    event: TextEvent,\n    textareaRef: HTMLTextAreaElement,\n    hideSelectionDiv: HTMLDivElement\n  ) {\n    if (!this.properties.HideSelection) {\n      hideSelectionDiv.style.display = 'none'\n    } else {\n      return undefined\n    }\n    if (this.properties.EnterFieldBehavior === 0) {\n      this.textareaRef.focus()\n      this.textareaRef.select()\n    } else if (this.properties.EnterFieldBehavior === 1) {\n    } else {\n      return undefined\n    }\n  }\n  /**\n   * @description hides div instead of textarea when hideSelection is false\n   * when hideSelection properties is true textarea is shown\n   * when hideSelection properties is false div is shown\n   * @function divHide\n   * @param event its of type MouseEvent\n   * @event click\n   */\n  divHide (event: MouseEvent, textareaRef: HTMLTextAreaElement) {\n    if (\n      event.target instanceof HTMLSpanElement ||\n      event.target instanceof HTMLDivElement\n    ) {\n      event.target.style.display = 'none'\n      textareaRef.style.display = 'block'\n      if (\n        event.target.tagName === 'SPAN' &&\n        event.target.parentNode!.nodeName === 'DIV'\n      ) {\n        (event.target.parentNode as HTMLElement).style.display = 'none'\n      }\n      textareaRef.focus()\n      textareaRef.selectionStart = textareaRef.selectionEnd\n    } else {\n      throw new Error('event.target is not an instance of Span or Div Element')\n    }\n  }\n  /**\n   * @description dragBehavior - if true when dragging\n   *  if false the cursor remains in same place\n   * @function dragBehavior\n   * @param event its of type KeyboardEvent\n   * @event dragStart\n   */\n  dragBehavior (e: Event) {\n    if (this.properties.DragBehavior) {\n      return true\n    }\n    e.preventDefault()\n  }\n\n  /**\n   * @override\n   */\n  @Watch('properties.AutoSize', { deep: true })\n  updateAutoSize () {\n    if (this.properties.AutoSize === true) {\n      this.updateDataModel({ propertyName: 'SelectionMargin', value: false })\n      this.$nextTick(() => {\n        const textareaRef: HTMLTextAreaElement = this.textareaRef\n        // replication of stype attribute to Label tag for autoSize property to work\n        let tempLabel: HTMLLabelElement = this.autoSizeTextarea\n        tempLabel.style.display = 'inline'\n        tempLabel.style.fontStyle = textareaRef.style.fontStyle\n        tempLabel.style.fontSize = parseInt(textareaRef.style.fontSize) + 'px'\n        tempLabel.style.whiteSpace = textareaRef.style.whiteSpace\n        tempLabel.style.wordBreak = textareaRef.style.wordBreak\n        tempLabel.style.fontWeight = textareaRef.style.fontWeight\n        tempLabel.style.width =\n          (this.textareaRef.value.length + 1) *\n            parseInt(textareaRef.style.fontSize) +\n          'px'\n        tempLabel.style.height = textareaRef.style.height\n        tempLabel.innerText = textareaRef.value\n        this.updateDataModel({\n          propertyName: 'Width',\n          value:\n            tempLabel.offsetWidth > 20\n              ? tempLabel.offsetWidth + 21\n              : tempLabel.offsetWidth + 25\n        })\n        this.updateDataModel({\n          propertyName: 'Height',\n          value: tempLabel.offsetHeight + 5\n        })\n        tempLabel.innerText = ''\n        tempLabel.style.display = 'none'\n        this.selectionData[0] = this.eTargetValue\n      })\n    } else {\n      return undefined\n    }\n  }\n\n  protected get listStyleObj () {\n    const controlProp = this.properties\n    if (this.properties.RowSource !== '') {\n      return {\n        height: !controlProp.ColumnHeads\n          ? controlProp.ListRows! > 0 &&\n            controlProp.ListRows! < this.extraDatas.RowSourceData!.length\n            ? controlProp.ListRows! * (controlProp.Font!.FontSize! + 9) + 'px'\n            : ''\n          : controlProp.ListRows! > 0 &&\n            controlProp.ListRows! < this.extraDatas.RowSourceData!.length\n            ? (controlProp.ListRows! + 1) * (controlProp.Font!.FontSize! + 9) +\n            'px'\n            : '',\n        backgroundColor: controlProp.BackColor\n      }\n    } else {\n      return {\n        backgroundColor: controlProp.BackColor,\n        border: '1px solid black',\n        width: 'calc(100% - 2px)',\n        height: 'calc(100% - 2px)',\n        minWidth: '100px'\n      }\n    }\n  }\n\n  protected get tableStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    const font: font = controlProp.Font\n      ? controlProp.Font\n      : {\n        FontName: 'Arial',\n        FontSize: 20,\n        FontItalic: true,\n        FontBold: true,\n        FontUnderline: true,\n        FontStrikethrough: true\n      }\n    return {\n      borderCollapse: 'collapse',\n      tableLayout: 'fixed',\n      backgroundColor: controlProp.BackStyle\n        ? controlProp.BackColor\n        : 'transparent',\n      color: controlProp.ForeColor,\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\n      fontSize: `${font.FontSize}px`,\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\n      textDecoration:\n        font.FontStrikethrough === true && font.FontUnderline === true\n          ? 'underline line-through'\n          : font.FontUnderline\n            ? 'underline'\n            : font.FontStrikethrough\n              ? 'line-through'\n              : '',\n      textUnderlinePosition: 'under',\n      fontWeight: font.FontBold\n        ? 'bold'\n        : font.FontStyle !== ''\n          ? this.tempWeight\n          : '',\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\n      width:\n        controlProp.ColumnWidths === ''\n          ? 'calc(100% - 2px)'\n          : 'calc(100% - 2px)' + parseInt(controlProp.ColumnWidths!) + 'px',\n      outline: 'none'\n    }\n  }\n\n  protected get cssStyleProperty (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    const font: font = controlProp.Font\n      ? controlProp.Font\n      : {\n        FontName: 'Arial',\n        FontSize: 20,\n        FontItalic: true,\n        FontBold: true,\n        FontUnderline: true,\n        FontStrikethrough: true\n      }\n    return {\n      left: `${controlProp.Left}px`,\n      width:\n        controlProp.ShowDropButtonWhen === 0\n          ? `${controlProp.Width! - 4}px`\n          : controlProp.ShowDropButtonWhen === 1 && this.isVisible === false\n            ? `${controlProp.Width! - 4}px`\n            : controlProp.SelectionMargin\n              ? `${controlProp.Width! - 30}px`\n              : `${controlProp.Width! - 25}px`,\n      height: `${controlProp.Height! - 5}px`,\n      top: `${controlProp.Top}px`,\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\n      fontSize: `${font.FontSize}px`,\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\n      textDecoration:\n        font.FontStrikethrough === true && font.FontUnderline === true\n          ? 'underline line-through'\n          : font.FontUnderline\n            ? 'underline'\n            : font.FontStrikethrough\n              ? 'line-through'\n              : '',\n      textUnderlinePosition: 'under',\n      fontWeight: font.FontBold\n        ? 'bold'\n        : font.FontStyle !== ''\n          ? this.tempWeight\n          : '',\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\n      backgroundColor: controlProp.BackStyle\n        ? controlProp.BackColor\n        : 'transparent',\n      color: controlProp.ForeColor,\n      textAlign:\n        controlProp.TextAlign === 0\n          ? 'left'\n          : controlProp.TextAlign === 1\n            ? 'center'\n            : 'right',\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.isEditMode || !this.isActivated\n            ? this.getMouseCursorData\n            : 'default'\n          : 'default'\n    }\n  }\n  /**\n   * @description style object is passed to :style attribute in div tag\n   * dynamically changing the styles of the component based on cssStyleProperty of\n   * textarea\n   * @function divcssStyleProperty\n   *\n   */\n  get divcssStyleProperty () {\n    const styleObject = this.cssStyleProperty\n    return {\n      ...styleObject,\n      display: 'none',\n      whiteSpace: 'break-spaces',\n      width: `${this.properties.Width! - 10}px`,\n      height: `${this.properties.Height!}px`\n    }\n  }\n\n  protected get customSelectObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    let display = ''\n    if (this.isRunMode) {\n      display = controlProp.Visible ? 'inline-block' : 'none'\n    } else {\n      display = 'inline-block'\n    }\n    return {\n      display: display\n      // overflow: 'hidden'\n    }\n  }\n  protected get tdStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      textAlign:\n        controlProp.TextAlign === 0\n          ? 'left'\n          : controlProp.TextAlign === 2\n            ? 'right'\n            : 'center',\n      display: 'inline-block',\n      marginRight: controlProp.ListStyle === 1 ? '5px' : ''\n    }\n  }\n  setWidth () {\n    this.tempWidth = `${this.properties.Width! + 20}px`\n    return this.tempWidth\n  }\n  @Watch('properties.Value', { deep: true })\n  textAndValueUpdateProp (newVal: string, oldVal: string) {\n    if (this.properties.RowSource !== '') {\n      if (\n        this.properties.BoundColumn! > 0 &&\n        this.properties.BoundColumn! < this.extraDatas.RowSourceData!.length\n      ) {\n        let tempData = [...this.extraDatas.RowSourceData!]\n        if (tempData![0][this.properties.BoundColumn! - 1] === newVal) {\n          this.updateDataModel({ propertyName: 'Value', value: newVal })\n        } else {\n          if (newVal !== '' && this.properties.Value) {\n            this.updateDataModel({ propertyName: 'Text', value: newVal })\n          }\n        }\n      }\n      if (newVal !== '' && this.properties.Value) {\n        this.selectionData[0] = newVal\n        this.updateDataModel({ propertyName: 'Text', value: newVal })\n      }\n    } else {\n      if (newVal !== '') {\n        this.updateDataModel({ propertyName: 'Text', value: newVal })\n      }\n    }\n  }\n\n  @Watch('properties.SelectionMargin', { deep: true })\n  checkSelectionMargin (newVal: boolean, oldVal: boolean) {\n    this.selectionData[0] = this.eTargetValue\n  }\n  releaseEditMode (event: KeyboardEvent) {\n    this.$el.focus()\n    this.setContentEditable(event, false)\n  }\n\n  mounted () {\n    this.$el.focus()\n    if (this.properties.RowSource !== '') {\n      const initialRowSourceData = this.extraDatas.RowSourceData!\n      if (initialRowSourceData) {\n        this.tempArray = initialRowSourceData\n      }\n      this.updateDataModel({ propertyName: 'ControlSource', value: '' })\n      if (initialRowSourceData && initialRowSourceData.length === 0) {\n        this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\n      } else {\n        this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\n      }\n    }\n  }\n\n  @Watch('properties.ControlSource', { deep: true })\n  updateControlSourceValue (newVal: string, oldVal: string) {\n    const propData: controlData = this.data\n    if (propData.properties.ControlSource !== '') {\n      const controlSourceValue = propData.extraDatas!.ControlSourceValue\n      this.updateDataModel({\n        propertyName: 'Value',\n        value: controlSourceValue\n      })\n      this.updateDataModel({ propertyName: 'Text', value: controlSourceValue })\n    } else {\n      this.updateDataModel({\n        propertyName: 'Value',\n        value: ''\n      })\n      this.updateDataModel({ propertyName: 'Text', value: '' })\n    }\n  }\n  expandWidth () {\n    if (this.properties.ShowDropButtonWhen === 0) {\n      return 'hidden'\n    } else if (this.properties.ShowDropButtonWhen === 1) {\n      if (this.isVisible) {\n        return 'visible'\n      } else {\n        return 'hidden'\n      }\n    }\n  }\n\n  protected get labelStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    const font: font = controlProp.Font\n      ? controlProp.Font\n      : {\n        FontName: 'Arial',\n        FontSize: 20,\n        FontItalic: true,\n        FontBold: true,\n        FontUnderline: true,\n        FontStrikethrough: true\n      }\n    return {\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\n      fontSize: `${font.FontSize}px`,\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\n      textDecoration:\n        font.FontStrikethrough === true && font.FontUnderline === true\n          ? 'underline line-through'\n          : font.FontUnderline\n            ? 'underline'\n            : font.FontStrikethrough\n              ? 'line-through'\n              : '',\n      fontWeight: font.FontBold\n        ? 'bold'\n        : font.FontStyle !== ''\n          ? this.tempWeight\n          : '',\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : ''\n    }\n  }\n\n  protected get boxStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\n      // borderLeft: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : '',\n      borderRight:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 1\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 4\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 3\n                ? '0.5px solid gray'\n                : '',\n      // borderTop: controlProp.BorderStyle === 1 ? '1px solid ' + controlProp.BorderColor : controlProp.SpecialEffect === 2 ? '2px solid gray' : controlProp.SpecialEffect === 3 ? '1.5px solid gray' : controlProp.SpecialEffect === 4 ? '0.5px solid gray' : '',\n      borderBottom:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 1\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 4\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 3\n                ? '0.5px solid gray'\n                : '',\n      display: 'grid',\n      gridTemplateColumns: `${controlProp.Width! - 20}px` + ' 21px',\n      gridTemplateRows: `${controlProp.Height!}px`,\n      outline: 'none'\n    }\n  }\n\n  protected get itemsStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      width:\n        parseInt(controlProp.ListWidth!) > 0\n          ? parseInt(controlProp.ListWidth!) + 'px'\n          : this.setdropDownWidth,\n      height:\n        controlProp.RowSource !== ''\n          ? ''\n          : controlProp.ColumnHeads\n            ? '30px'\n            : '15px',\n      border: controlProp.RowSource !== '' ? '1px solid black' : 'none',\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.isEditMode || !this.isActivated\n            ? this.getMouseCursorData\n            : 'default'\n          : 'default'\n    }\n  }\n\n  get setdropDownWidth () {\n    if (this.properties.Width! < 100) {\n      return '100px'\n    } else {\n      return `${this.properties.Width!}px`\n    }\n  }\n\n  protected get selectedStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      visibility:\n        controlProp.ShowDropButtonWhen === 2 ? 'visible' : this.expandWidth(),\n      backgroundPosition:\n        controlProp.DropButtonStyle === 1 ? 'center' : 'bottom',\n      backgroundSize:\n        controlProp.DropButtonStyle === 1\n          ? '12px 12px'\n          : controlProp.DropButtonStyle === 2\n            ? '8px 8px'\n            : controlProp.DropButtonStyle === 3\n              ? '9px 14px'\n              : '',\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.isEditMode || !this.isActivated\n            ? this.getMouseCursorData\n            : 'default'\n          : 'default',\n      display: 'flex',\n      justifyContent: 'center',\n      alignItems: controlProp.DropButtonStyle === 1 ? 'center' : 'flex-end'\n    }\n  }\n  enabledCheck (e: MouseEvent) {\n    if (this.isRunMode || this.isActivated || this.isEditMode) {\n      if (this.open) {\n        this.textareaRef.focus()\n        this.open = false\n      } else if (this.inBlur) {\n        this.open = false\n      } else {\n        this.open = true\n        this.textareaRef.focus()\n      }\n    }\n    this.inBlur = false\n  }\n\n  eventStoppers () {\n    const eventStop = (event: Event) => event.stopPropagation()\n    return this.isEditMode === false\n      ? null\n      : {\n        keydown: eventStop\n      }\n  }\n}\n</script>\n\n<style scoped>\n.custom-select {\n  position: relative;\n  text-align: left;\n  outline: none;\n  box-sizing: border-box;\n}\n.selectionSpan {\n  width: 5px;\n}\n.selectionDiv {\n  display: grid;\n  grid-template-columns: 5px auto;\n}\n.selected {\n  background-color: rgb(238, 238, 238);\n  border: 1px solid #858586;\n  border-left: 0px;\n  color: black;\n  background-size: 40%;\n  background-position: center;\n  background-repeat: no-repeat;\n  cursor: pointer;\n  width: 20px;\n  height: calc(100% - 2px);\n}\n\n.items {\n  color: black;\n  background-color: white;\n  overflow: hidden;\n  left: 0;\n  right: 0;\n  width: calc(100% + 20px);\n  cursor: context-menu;\n}\n.item {\n  color: black;\n  cursor: pointer;\n  border-left: 1px solid black;\n  border-right: 1px solid black;\n}\n.item:hover {\n  background-color: #0380fc;\n  color: white;\n  border: 1px dotted black;\n}\n.selectHide {\n  display: none;\n}\n.combobox {\n  display: grid;\n  grid-template-columns: auto 20px;\n}\n.columnHeads {\n  height: 19.2px;\n  border: 1px solid black;\n  border-top: 0px;\n  display: grid;\n  grid-template-columns: 100%;\n}\n.listStyle {\n  width: 100%;\n  height: 100%;\n  background-color: lightgray;\n  border: 1px solid gray;\n  overflow: auto;\n}\n.list-outer {\n  border: 0.1px solid lightgray;\n  width: 164px;\n  height: 130px;\n  overflow-y: auto;\n  box-shadow: -1px -1px grey;\n}\n.tr {\n  outline: none;\n  display: flex;\n}\n.tr:hover:not([disabled]) {\n  background-color: rgb(59, 122, 231);\n}\n.ul {\n  display: grid;\n  grid-template-columns: 100%;\n  list-style-type: none;\n  margin-block-start: 0em;\n  margin-block-end: 0em;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  padding-inline-start: 0px;\n}\n.li {\n  margin: 1px;\n  text-align: left;\n  font-size: 14px;\n  height: 16px;\n  border: 0.5px solid white;\n  cursor: pointer;\n}\n.li:hover {\n  margin: 1px;\n  border-color: rgb(52, 52, 255);\n  border-radius: 2px;\n  background-color: rgb(59, 122, 231);\n}\n.fa {\n  margin-left: 4px;\n  margin-top: 3px;\n}\n.span {\n  margin-left: 7px;\n  margin-top: 0px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n.labelStyle {\n  white-space: nowrap;\n}\n.div {\n  display: grid;\n  grid-template-columns: 1fr;\n}\n.listbox {\n  display: grid;\n  grid-template-columns: 100%;\n  height: 100px;\n  width: 300px;\n  background-color: lightgray;\n  border: 1px solid gray;\n}\n.columnHeads {\n  height: 19.2px;\n  border: 1px solid black;\n  display: grid;\n  grid-template-columns: 100%;\n}\n.optionsItems {\n  display: grid;\n  grid-template-columns: 100%;\n}\n.text-box-design {\n  resize: none;\n  overflow: hidden;\n  border: none;\n  font-family: monospace;\n}\n.text-box-design:focus {\n  outline: none;\n}\n.text-box-design::selection {\n  background: lightblue;\n}\n.table-style {\n  width: calc(100% - 2px);\n}\n.thClass {\n  position: sticky;\n  top: 0;\n  overflow: hidden;\n  text-decoration: underline;\n  white-space: nowrap;\n}\n.tdClass {\n  width: 15px;\n  border-right: 1px solid;\n}\n.tdClassIn {\n  width: 10px;\n}\n.inputClass {\n  margin: 0;\n}\n.hrStyle {\n  margin: 0px;\n}\n.forPlain {\n  background-image: none;\n}\n.tHeadStyle {\n  position: sticky;\n  top: 0px;\n}\n.column-item {\n  display: flex;\n}\n.colHeadsClass {\n  display: inline-block;\n}\n</style>\n"]}]}