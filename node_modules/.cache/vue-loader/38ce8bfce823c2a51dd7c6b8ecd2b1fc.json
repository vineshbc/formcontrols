{"remainingRequest":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/hancom/formcontrols/src/FormDesigner/components/atoms/FDFrame/index.vue?vue&type=style&index=0&id=10f3d463&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/hancom/formcontrols/src/FormDesigner/components/atoms/FDFrame/index.vue","mtime":1610544258554},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/hancom/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmZpZWxkc2V0IHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIG1hcmdpbjogMHB4OwogIHVzZXItc2VsZWN0OiBub25lOwp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiUA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDFrame","sourcesContent":["<template>\n<div :style=\"outerDivStyle\" class=\"outerDivClass\">\n  <fieldset\n    class=\"fieldset\"\n    :style=\"cssStyleProperty\"\n    :title=\"properties.ControlTipText\"\n    :tabindex=\"properties.TabIndex\"\n    @keydown.ctrl.exact.stop=\"selectMultipleCtrl($event,true)\"\n    @keydown.ctrl.stop=\"handleKeyDown\"\n    @keydown.shift.exact.stop=\"selectMultipleCtrl($event,true)\"\n    @keydown.delete.stop.exact=\"deleteFrame\"\n    @keydown.enter.exact=\"setContentEditable($event, true)\"\n    @click.stop=\"!isEditMode ? selectedItem : addControlObj($event)\"\n    @contextmenu.stop=\"showContextMenu($event, userFormId, controlId, 'container', isEditMode)\"\n    @mousedown=\"frameMouseDown\"\n    @mouseup=\"dragSelectorControl($event)\"\n    @keyup.stop=\"selectMultipleCtrl($event, false)\"\n  >\n    <legend :style=\"legendCssStyleProperty\">{{ properties.Caption }}</legend>\n    <div :style=\"scrollSize\" ref=\"frame\" @scroll=\"updateScrollingLeftTop\">\n    <Container\n      :contextMenuType=\"contextMenuType\"\n      :viewMenu=\"viewMenu\"\n      :userFormId=\"userFormId\"\n      :controlId=\"controlId\"\n      :containerId=\"controlId\"\n      :isEditMode=\"isEditMode\"\n      :left=\"left\"\n      :top=\"top\"\n      ref=\"containerRef\"\n      @closeMenu=\"closeMenu\"\n      @openMenu=\"(e, parentID, controlID, type, mode) => showContextMenu(e, parentID, controlID, type, mode)\"\n    />\n  </div>\n  </fieldset>\n</div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Emit, Prop, Ref, Watch } from 'vue-property-decorator'\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\nimport { Action } from 'vuex-class'\nimport Vue from 'vue'\nimport FdContainerVue from '@/api/abstract/FormDesigner/FdContainerVue'\nimport Container from '@/FormDesigner/components/organisms/FDContainer/index.vue'\nimport { controlProperties } from '@/FormDesigner/controls-properties'\nimport { EventBus } from '@/FormDesigner/event-bus'\n@Component({\n  name: 'FDFrame',\n  components: {\n    Container: () =>\n      import('@/FormDesigner/components/organisms/FDContainer/index.vue')\n  }\n})\nexport default class FDFrame extends FdContainerVue {\n  @Ref('containerRef') readonly containerRef!: Container;\n  @Ref('frame') readonly frame!: HTMLDivElement;\n  @Prop({ required: true, type: Boolean }) public readonly isEditMode: boolean;\n  mode: boolean = false;\n\n  /**\n   * @description Returns string value for CSS background style\n   * @function createBackgroundString\n   */\n  protected get createBackgroundString () {\n    return `url(${this.properties.Picture})`\n  }\n  /**\n   * @description Returns string value for CSS background style for dotted patten\n   * @function getSampleDotPattern\n   */\n  protected get getSampleDotPattern () {\n    const dotSize = 1\n    const dotSpace = 10\n    return {\n      backgroundPosition: `7px 7px`,\n      backgroundImage: `radial-gradient(${this.properties.ForeColor} 11%, transparent 10%)`,\n      backgroundSize: `${dotSpace}px ${dotSpace}px`\n    }\n  }\n\n  mounted () {\n    this.scrollLeftTop(this.data)\n  }\n\n  @Watch('properties.ScrollLeft')\n  updateScrollLeft () {\n    this.scrollLeftTop(this.data)\n  }\n\n  @Watch('properties.ScrollTop')\n  updateScrollTop () {\n    this.scrollLeftTop(this.data)\n  }\n\n  @Watch('properties.Visible')\n  updateViisible () {\n    this.updateEditMode(false)\n  }\n\n  @Emit('updateEditMode')\n  updateEditMode (val: boolean) {\n    return val\n  }\n\n  /**\n   * @description sets scrollbar left and top position\n   * @function scrollLeftTop\n   * @param controlData propControlData passed as input\n   */\n  scrollLeftTop (controlData: controlData) {\n    const scrollLeft: number = this.properties.ScrollLeft!\n    const scrollTop: number = this.properties.ScrollTop!\n    if (scrollLeft > 0) {\n      (this.frame as IScrollRef).scrollLeft = scrollLeft\n    }\n    if (scrollTop > 0) {\n      (this.frame as IScrollRef).scrollTop = scrollTop\n    }\n  }\n\n  /**\n   * @description style object is passed to :style attribute in div tag\n   * dynamically changing the styles of the component based on propControlData\n   * @function outerDivStyle\n   *\n   */\n  protected get outerDivStyle (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.data.properties\n    return {\n      backgroundColor: controlProp.BackColor,\n      width: `${controlProp.Width}px`,\n      height: `${controlProp.Height}px`,\n      boxShadow: controlProp.SpecialEffect ? this.getSpecialEffectData : 'none',\n      borderLeft: controlProp.BorderStyle\n        ? `0.3px solid ${controlProp.BorderColor}`\n        : '0.3px solid gray',\n      borderRight: controlProp.BorderStyle\n        ? `0.3px solid ${controlProp.BorderColor}`\n        : '0.3px solid gray',\n      borderBottom: controlProp.BorderStyle\n        ? `0.3px solid ${controlProp.BorderColor}`\n        : '0.3px solid gray',\n      overflow: 'hidden'\n    }\n  }\n\n  /**\n   * @description style object is passed to :style attribute in fieldset tag\n   * dynamically changing the styles of the component based on propControlData\n   * @function cssStyleProperty\n   *\n   */\n  protected get cssStyleProperty (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.data.properties\n    const font: font = this.properties.Font\n      ? this.properties.Font\n      : {\n        FontName: 'Arial',\n        FontSize: 10,\n        FontItalic: true,\n        FontBold: true,\n        FontUnderline: true,\n        FontStrikethrough: true,\n        FontStyle: 'Arial'\n      }\n    let display = ''\n    if (this.isRunMode) {\n      display = controlProp.Visible ? 'block' : 'none'\n    } else {\n      display = 'block'\n    }\n    return {\n      position: 'relative',\n      width: `${controlProp.Width! - 3}px`,\n      height: `${controlProp.Height}px`,\n      marginLeft: '2px',\n      padding: '0px',\n      outline: 'none',\n      cursor: controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n        ? `${this.getMouseCursorData} !important`\n        : 'default !important',\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\n      fontSize: `${font.FontSize}px`,\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\n      textDecoration: font.FontStrikethrough === true && font.FontUnderline === true\n        ? 'underline line-through'\n        : font.FontUnderline\n          ? 'underline'\n          : font.FontStrikethrough\n            ? 'line-through'\n            : '',\n      fontWeight: font.FontBold ? 'bold'\n        : font.FontStyle !== ''\n          ? this.tempWeight\n          : '',\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\n      borderTop: controlProp.BorderStyle\n        ? `1px solid ${controlProp.BorderColor}`\n        : '1px solid gray',\n      borderLeft: 'none',\n      borderRight: 'none',\n      borderBottom: 'none',\n      backgroundImage: controlProp.Picture === ''\n        ? this.getSampleDotPattern.backgroundImage\n        : this.createBackgroundString,\n      backgroundSize: controlProp.Picture === ''\n        ? this.getSampleDotPattern.backgroundSize\n        : this.getSizeMode,\n      backgroundColor: controlProp.Picture !== '' ? '' : controlProp.BackColor,\n      backgroundRepeat: this.getRepeatData,\n      backgroundPosition: controlProp.Picture !== ''\n        ? this.getPosition\n        : this.getSampleDotPattern.backgroundPosition,\n      display: display,\n      zoom: `${controlProp.Zoom}%`,\n      whiteSpace: 'nowrap',\n      textOverflow: 'ellipsis',\n      maxWidth: `${controlProp.Width!}px`\n    }\n  }\n  /**\n   * @description style object is passed to :style attribute in legend tag\n   * dynamically changing the styles of the component based on propControlData\n   * @function legendCssStyleProperty\n   *\n   */\n  protected get legendCssStyleProperty (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.data.properties\n    return {\n      position: 'sticky',\n      top: '0px',\n      color:\n        controlProp.Enabled === true ? controlProp.ForeColor : this.getEnabled,\n      background: controlProp.BackColor,\n      whiteSpace: 'pre',\n      wordBreak: 'normal',\n      overflow: 'hidden',\n      maxWidth: `${controlProp.Width! - 20}px`\n    }\n  }\n  get scrollSize (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.data.properties!\n    return {\n      width: `${controlProp.Width! - 3}px`,\n      height: `${controlProp.Height! - 10}px`,\n      overflowX: this.getScrollBarX,\n      overflowY: this.getScrollBarY\n    }\n  }\n\n  showContextMenu (e: MouseEvent, parentID: string, controlID: string, type: string, mode: boolean) {\n    this.openMenu(e, parentID, controlID, type, mode)\n    Vue.nextTick(() => this.containerRef.contextmenu.focus())\n  }\n  closeMenu () {\n    this.viewMenu = false\n  }\n\n  dragSelectorControl (event: MouseEvent) {\n    this.selectedControlArray = []\n    this.selectedAreaStyle = this.containerRef.dragSelector.selectAreaStyle\n    this.calSelectedAreaStyle(event, this.data)\n  }\n\n  frameMouseDown (e: MouseEvent) {\n    EventBus.$emit('isEditMode', this.isEditMode)\n    this.selectedItem(e)\n    const selContainer = this.selectedControls[this.userFormId].container[0]\n    if (selContainer === this.controlId) {\n      this.deActiveControl()\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * @description To perform ContextMenu actions(for example: selectAll, paste etc.) on UserForm  and Control\n   * @function handleKeyDown\n   * @param event  - it is of type MouseEvent\n   * @event keydown\n   */\n  handleKeyDown (event: KeyboardEvent) {\n    this.containerRef.refContextMenu.updateAction(event)\n  }\n\n  deleteFrame (event: KeyboardEvent) {\n    if (this.controlId === this.selectedControls[this.userFormId].selected[0]) {\n      this.deleteItem(event)\n    } else {\n      this.handleKeyDown(event)\n    }\n  }\n  updateScrollingLeftTop (e: MouseEvent) {\n    const refName = this.frame\n    this.updateControl({\n      userFormId: this.userFormId,\n      controlId: this.controlId,\n      propertyName: 'ScrollLeft',\n      value: refName.scrollLeft\n    })\n    this.updateControl({\n      userFormId: this.userFormId,\n      controlId: this.controlId,\n      propertyName: 'ScrollTop',\n      value: refName.scrollTop\n    })\n  }\n  selectMultipleCtrl (event: KeyboardEvent, val: boolean) {\n    if (event.key === 'Control' && event.keyCode === 17) {\n      this.selMultipleCtrl = val\n      EventBus.$emit('selectMultipleCtrl', val)\n    } else if (event.key === 'Shift' && event.keyCode === 16) {\n      this.activateCtrl = val\n      EventBus.$emit('actMultipleCtrl', val)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.fieldset {\n  box-sizing: border-box;\n  margin: 0px;\n  user-select: none;\n}\n</style>\n"]}]}