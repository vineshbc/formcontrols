{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDTable/index.vue?vue&type=style&index=0&id=897fe53a&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/organisms/FDTable/index.vue","mtime":1610544258558},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoubm9kZSB7CiAgdGV4dC1hbGlnbjogbGVmdDsKfQp0YWJsZSB7CiAgbWFyZ2luLXJpZ2h0OiAwJTsKICB3aWR0aDogMTAwJTsKICBib3JkZXI6IDFweCBzb2xpZCBibGFjazsKICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlOwogIGNvbG9yOiBibGFjazsKfQp0aCwKdGQgewogIHRleHQtYWxpZ246IGxlZnQ7CiAgZm9udC1zaXplOiAxMXB4OwogIG1hcmdpbi1yaWdodDogMCU7CiAgd2lkdGg6IGZpdC1jb250ZW50OwogIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7CiAgY29sb3I6IGJsYWNrOwp9CnRoIHsKICB3aWR0aDogMTIwJTsKICBmb250LXNpemU6IDEycHg7Cn0KLmZvcm0tY29udHJvbCB7CiAgZmxvYXQ6IGxlZnQ7CiAgd2lkdGg6IDI4MHB4OwogIGN1cnNvcjogcG9pbnRlcjsKICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2IoMTkwLCAxODUsIDE4NSk7Cn0KbGFiZWwgewogIGZsb2F0OiBsZWZ0Owp9CnNlbGVjdCB7CiAgd2lkdGg6IDEwMCU7CiAgcGFkZGluZzogMXB4IDJweDsKfQppbnB1dCB7CiAgd2lkdGg6IDEwMCU7Cn0KLmJ0bi1ncm91cCAuYnV0dG9uIHsKICBib3JkZXI6IG5vbmU7CiAgY29sb3I6IGJsYWNrOwogIHRleHQtYWxpZ246IGNlbnRlcjsKICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIGZvbnQtc2l6ZTogMTJweDsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLmxlZnR0ZCB7CiAgd2lkdGg6IDEyMHB4Owp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappingsolBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/organisms/FDTable","sourcesContent":["<template>\n  <div>\n    <div class=\"btn-group\">\n      <button class=\"button\" default>Alphabetic</button>\n      <button class=\"button\">Categorized</button>\n    </div>\n    <div\n      style=\"\n        position: absolute;\n        height: calc(100% - 59px);\n        overflow-y: auto;\n        overflow-x: hidden;\n        width: 100%;\n      \"\n    >\n      <FDTableItems\n        v-for=\"(value, propertyName, index) in tableData\"\n        :key=\"index\"\n        :controlPropertyData=\"value\"\n        :propertyName=\"propertyName\"\n        @updateAppearance=\"updateAppearance\"\n        @emitFont=\"emitFont\"\n        @colorPaletteProp=\"colorPaletteProp\"\n      />\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { Component, Prop, Vue, Emit } from 'vue-property-decorator'\nimport { State, Action } from 'vuex-class'\nimport FDTableItems from '../../molecules/FDTableItems/index.vue'\nimport { IselectControl, IsetChildControls, IupdateControl, IupdateControlExtraData, IupdatedSelectedControl } from '@/storeModules/fd/actions'\nimport { EventBus } from '@/FormDesigner/event-bus'\nimport { checkPropertyValue } from '@/storeModules/fd/checkValidation'\n\ninterface IPropControl {\n  propertyName: keyof controlProperties\n  value : any\n}\n\n@Component({\n  name: 'FDTable',\n  components: {\n    FDTableItems\n  }\n})\nexport default class FDTable extends Vue {\n  @Prop({ type: Object, required: true }) tableData!: tableDatas;\n  @State((state) => state.fd.userformData) userformData!: userformData;\n  @Prop({ required: true, type: String }) public readonly userFormId! : string\n  @Prop({ required: true }) public readonly getSelectedControlsDatas: any\n  @Action('fd/updateControl') updateControl!: (payload: IupdateControl) => void;\n  @Action('fd/updateControlExtraData') updateControlExtraData!: (\n    payload: IupdateControlExtraData\n  ) => void;\n  @Action('fd/setChildControls') setChildControls!: (\n    payload: IsetChildControls\n  ) => void;\n  @State((state) => state.fd.selectedControls) selectedControls!: fdState['selectedControls'];\n\n  emitUpdateProperty (\n    propertyName: keyof controlProperties,\n    value: any\n  ) {\n    this.updateProperty({ propertyName: propertyName, value: value })\n  }\n\n  emitUpdateExtraProperty (\n    propertyName: keyof controlProperties,\n    value: any\n  ) {\n    this.updateProperty({ propertyName: propertyName, value: value })\n  }\n  updatePageIndex (propValue: number) {\n    const userData = this.userformData[this.userFormId]\n    const selected = this.selectedControls[this.userFormId].selected[0]\n    const swapTabIndex = userData[selected].properties.Index!\n    const container = this.selectedControls[this.userFormId].container[0]\n\n    if (propValue < userData[container].controls.length) {\n      const index = userData[container].controls.findIndex(val => userData[val].properties.Index === propValue)\n      this.updatePropValue(userData[container].controls[index], 'Index', swapTabIndex)\n      this.updatePropValue(selected, 'Index', propValue)\n      const controls = userData[container].controls\n      controls.sort((a, b) => {\n        return userData[a].properties.Index! - userData[b].properties.Index!\n      })\n      this.setChildControls({\n        userFormId: this.userFormId,\n        containerId: container,\n        targetControls: controls\n      })\n      return true\n    } else {\n      return false\n    }\n  }\n  getLowestIndex (tempControls: string[], controlLength: number, propertyType: boolean) {\n    let lastControlId = controlLength\n    const userData = this.userformData[this.userFormId]\n    for (let i = 0; i < tempControls.length; i++) {\n      const propetyName = propertyType ? userData[tempControls[i]].extraDatas!.zIndex! : userData[tempControls[i]].extraDatas!.TabIndex!\n      if (propetyName !== -1) {\n        const IdNum = propetyName\n        if (!isNaN(IdNum) && lastControlId > IdNum) {\n          lastControlId = IdNum\n        }\n      }\n    }\n    return lastControlId\n  }\n  swapTabIndex (tempZIndex: number) {\n    const userData = this.userformData[this.userFormId]\n    const container = this.selectedControls[this.userFormId].container[0]\n    const selected = this.selectedControls[this.userFormId].selected[0]\n    const swapTabIndex = userData[selected].properties!.TabIndex!\n    if (tempZIndex <= userData[container].controls.length - 1 && tempZIndex > -1) {\n      const index = userData[container].controls.findIndex(\n        (val) => userData[val].properties!.TabIndex === tempZIndex\n      )\n      this.updatePropValue(userData[container].controls[index], 'TabIndex', swapTabIndex)\n      this.updatePropValue(selected, 'TabIndex', tempZIndex)\n    }\n  }\n  updateTabIndexValue (val: number) {\n    const userData = this.userformData[this.userFormId]\n    const container = this.selectedControls[this.userFormId].container[0]\n    const selected = this.selectedControls[this.userFormId].selected[0]\n    const containerControls = this.userformData[this.userFormId][container].controls\n    const controlType = userData[selected].type\n    if (controlType !== 'FDImage') {\n      const tempControls = []\n      for (const index in containerControls) {\n        const cntrlData = this.userformData[this.userFormId][containerControls[index]]\n        if (cntrlData.type === 'FDImage') {\n          tempControls.push(containerControls[index])\n        }\n      }\n      const lastControlId = tempControls.length > 0 ? this.getLowestIndex(tempControls, userData[container].controls.length - 1, false)\n        : this.userformData[this.userFormId][container].controls.length - 1\n      if (val <= lastControlId) {\n        this.swapTabIndex(val)\n        return true\n      } else {\n        return false\n      }\n    }\n  }\n\n  updateExtraProperty (arg: IupdateControlExtraData) {\n    const selected = this.getSelectedControlsDatas!\n    for (let i = 0; i < selected.length; i++) {\n      this.updateControlExtraData({\n        userFormId: this.userFormId,\n        controlId: selected[i],\n        propertyName: arg.propertyName,\n        value: arg.value\n      })\n    }\n  }\n  updateProperty (arg: IPropControl) {\n    const selected = this.getSelectedControlsDatas!\n    for (let i = 0; i < selected.length; i++) {\n      if (arg.propertyName === 'TabIndex') {\n        return this.updateTabIndexValue(parseInt(arg.value))\n      } else if (arg.propertyName === 'Index') {\n        return this.updatePageIndex(parseInt(arg.value))\n      } else if (arg.propertyName === 'Name') {\n        return this.updateName(selected[i], arg.value)\n      } else if (arg.propertyName === 'Value' && (this.userformData[this.userFormId][selected[i]].type === 'SpinButton' || this.userformData[this.userFormId][selected[i]].type === 'ScrollBar')) {\n        return this.updateSpinButtonScrollBarValueProp(selected[i], arg.value)\n      } else if (arg.propertyName === 'Min' || arg.propertyName === 'Max') {\n        this.updatePropValue(selected[i], arg.propertyName, arg.value)\n        this.validateValueProperty(selected[i], arg.value)\n      } else if (arg.propertyName === 'Cancel' || arg.propertyName === 'Default') {\n        this.validateCancelDefaultProp(selected[i], arg.propertyName, arg.value)\n      } else {\n        this.updatePropValue(selected[i], arg.propertyName, arg.value)\n      }\n    }\n  }\n  updatePropValue (id: string, propName: keyof controlProperties, propValue: any) {\n    this.updateControl({\n      userFormId: this.userFormId,\n      controlId: id,\n      propertyName: propName,\n      value: propValue\n    })\n  }\n  validateValueProperty (id: string, value: number) {\n    let actualValue = this.userformData[this.userFormId][id].properties.Value! as number\n    if (!this.checkValueRangeMinMax(id, actualValue)) {\n      this.updatePropValue(id, 'Value', value)\n    }\n  }\n  updateSpinButtonScrollBarValueProp (id: string, value: number) {\n    if (this.checkValueRangeMinMax(id, value)) {\n      this.updatePropValue(id, 'Value', value)\n      return true\n    }\n    return false\n  }\n  validateCancelDefaultProp (id: string, propName: keyof controlProperties, value: boolean) {\n    const userFormControls = Object.keys(this.userformData[this.userFormId])\n    for (let controlId of userFormControls) {\n      if (this.userformData[this.userFormId][controlId].type === 'CommandButton') {\n        if (controlId === id) {\n          this.updatePropValue(id, propName, value)\n        } else {\n          this.updatePropValue(controlId, propName, false)\n        }\n      }\n    }\n  }\n  checkValueRangeMinMax (id: string, value: number) {\n    let maxValue = this.userformData[this.userFormId][id].properties.Max!\n    let minValue = this.userformData[this.userFormId][id].properties.Min!\n    let min = Math.min(minValue, maxValue)\n    let max = Math.max(minValue, maxValue)\n    if (value >= min && value <= max) {\n      return true\n    } else {\n      return false\n    }\n  }\n  updateName (id: string, value: string) {\n    let userData\n    let isUnique\n    if (this.userformData[this.userFormId][id].type === 'Userform') {\n      userData = Object.keys(this.userformData)\n      isUnique = userData.findIndex(val => this.userformData[val][val].properties.Name === value && val !== id)\n    } else {\n      userData = Object.keys(this.userformData[this.userFormId])\n      isUnique = userData.findIndex(val => this.userformData[this.userFormId][val].properties.Name === value && val !== id)\n    }\n    if (isUnique === -1 && value !== '') {\n      this.updatePropValue(id, 'Name', value)\n      return true\n    } else {\n      return false\n    }\n  }\n  validateValuePropertyChboxOpbtnTglbtn (propertyName : keyof controlProperties, propertyValue : string) : string {\n    let resultValue = ''\n    if (!isNaN(parseInt(propertyValue))) {\n      if (parseInt(propertyValue) === 0) {\n        this.emitUpdateProperty(propertyName, 'False')\n        resultValue = 'False'\n      } else {\n        this.emitUpdateProperty(propertyName, 'True')\n        resultValue = 'True'\n      }\n    } else if (propertyValue.toLowerCase() === 'true') {\n      this.emitUpdateProperty(propertyName, 'True')\n      resultValue = 'True'\n    } else if (propertyValue.toLowerCase() === 'false') {\n      this.emitUpdateProperty(propertyName, 'False')\n      resultValue = 'False'\n    } else {\n      this.emitUpdateProperty(propertyName, '')\n      resultValue = ''\n    }\n    return resultValue\n  }\n  validateControlSourceProperty (propertyValue : string) {\n    // should validate the propertyValue\n    return true\n  }\n  validateRowSourceProperty (propertyValue : string) {\n    // should validate the propertyValue\n    return true\n  }\n  updateAppearance (e: Event) {\n    const propertyName: keyof controlProperties = (e.target as HTMLInputElement).name as keyof controlProperties\n    const inputType = this.tableData[propertyName]!.type\n    let propertyValue = (e.target as HTMLInputElement).value\n    if (inputType === 'file') {\n      if (propertyName === 'MouseIcon' || propertyName === 'Picture') {\n        this.handleConvertionImageToBase64(e)\n      }\n    } else if (inputType === 'String') {\n      if (propertyName === 'Accelerator' || propertyName === 'PasswordChar') {\n        this.emitUpdateProperty(\n          propertyName,\n          propertyValue !== '' ? propertyValue[0] : propertyValue\n        );\n        (e.target as HTMLInputElement).value = propertyValue && propertyValue[0]\n      } else if (propertyName === 'Name') {\n        if (checkPropertyValue(propertyName, propertyValue)) {\n          const isSuccess = this.updateProperty({ propertyName: propertyName, value: propertyValue })\n          if (!isSuccess) {\n            (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n            EventBus.$emit('showErrorPopup', true, 'invalid', 'Could not set the Name property. Ambiguous name.')\n          }\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Not a legal object name: '${propertyValue}'`)\n        }\n      } else if (propertyName === 'Value') {\n        const controlType = this.userformData[this.userFormId][this.getSelectedControlsDatas[0]].type\n        if (controlType === 'CheckBox' || controlType === 'OptionButton' || controlType === 'ToggleButton') {\n          const resultValue = this.validateValuePropertyChboxOpbtnTglbtn(propertyName, propertyValue);\n          (e.target as HTMLInputElement).value = resultValue\n        } else {\n          this.emitUpdateProperty(propertyName, propertyValue)\n        }\n      } else if (propertyName === 'ControlSource') {\n        const isValid = this.validateControlSourceProperty(propertyValue)\n        if (isValid) {\n          this.emitUpdateProperty(propertyName, propertyValue)\n        } else {\n          EventBus.$emit('showErrorPopup', true, 'invalid', 'Invalid property value.')\n        }\n      } else if (propertyName === 'RowSource') {\n        const isValid = this.validateRowSourceProperty(propertyValue)\n        if (isValid) {\n          this.emitUpdateProperty(propertyName, propertyValue)\n        } else {\n          EventBus.$emit('showErrorPopup', true, 'invalid', 'Invalid property value.')\n        }\n      } else {\n        this.emitUpdateProperty(propertyName, propertyValue)\n      }\n    } else if (inputType === 'number' || inputType === 'float') {\n      const value = propertyValue.includes('.') ? parseFloat(propertyValue) : parseInt(propertyValue)\n      if (propertyName === 'Height' || propertyName === 'Width') {\n        if (checkPropertyValue(propertyName, value)) {\n          if ((this.userformData[this.userFormId][this.getSelectedControlsDatas[0]].type === 'Userform')) {\n            if (propertyName === 'Width') {\n              if (value >= 0 && value < 103) {\n                this.emitUpdateProperty(propertyName, 103);\n                (e.target as HTMLInputElement).value = '103'\n              } else {\n                this.emitUpdateProperty(propertyName, value)\n              }\n            } else if (propertyName === 'Height') {\n              if (value >= 0 && value < 30) {\n                this.emitUpdateProperty(propertyName, 30);\n                (e.target as HTMLInputElement).value = '30'\n              } else {\n                this.emitUpdateProperty(propertyName, value)\n              }\n            }\n          } else {\n            this.emitUpdateProperty(propertyName, value)\n          }\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          if (value > 32767) {\n            EventBus.$emit('showErrorPopup', true, 'overflow', 'Overflow')\n          } else {\n            EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and 32768`)\n          }\n        }\n      } else if (propertyName === 'Top' || propertyName === 'Left') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value.`)\n        }\n      } else if (propertyName === 'MaxLength') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and  2147483647`)\n        }\n      } else if (propertyName === 'BoundColumn') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and 65536`)\n        }\n      } else if (propertyName === 'ColumnCount') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between -1 and 2147483647`)\n        }\n      } else if (propertyName === 'ListRows') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and 2147483647`)\n        }\n      } else if (propertyName === 'TextColumn') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between -1 and 32768`)\n        }\n      } else if (propertyName === 'Value') {\n        const controlData = this.userformData[this.userFormId][this.getSelectedControlsDatas[0]]\n        const controlType = controlData.type\n        if (controlType === 'TabStrip') {\n          if (value < -1 || value >= controlData.extraDatas!.Tabs!.length!) {\n            (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n            EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value.`)\n          } else {\n            this.emitUpdateProperty(propertyName, value)\n          }\n        } else if (controlType === 'MultiPage') {\n          if (value < -1 || value >= controlData.controls.length) {\n            (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n            EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value.`)\n          } else {\n            this.emitUpdateProperty(propertyName, value)\n          }\n        } else if (controlType === 'SpinButton' || controlType === 'ScrollBar') {\n          if (this.isDecimalNumber(propertyValue)) {\n            (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          } else {\n            const isSuccess = this.updateProperty({ propertyName: propertyName, value: value })\n            if (!isSuccess) {\n              (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n              EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value.`)\n            }\n          }\n        } else {\n          this.emitUpdateProperty(propertyName, propertyValue)\n        }\n      } else if (propertyName === 'Min' || propertyName === 'Max' || propertyName === 'SmallChange') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (checkPropertyValue(propertyName, value)) {\n          if (propertyName === 'Min' || propertyName === 'Max') {\n            this.updateProperty({ propertyName: propertyName, value: value })\n          } else {\n            this.emitUpdateProperty(propertyName, value)\n          }\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Invalid property value.`)\n        }\n      } else if (propertyName === 'TabFixedHeight' || propertyName === 'TabFixedWidth') {\n        if (checkPropertyValue(propertyName, value)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and 7200`)\n        }\n      } else if (propertyName === 'TabIndex') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (checkPropertyValue(propertyName, value)) {\n          const isSuccess = this.updateProperty({ propertyName: propertyName, value: value })\n          if (!isSuccess) {\n            (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          }\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value greater than or equal to zero.`)\n        }\n      } else if (propertyName === 'Index') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (value < 0) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and 32767`)\n        } else {\n          const isSuccess = this.updateProperty({ propertyName: propertyName, value: propertyValue })\n          if (!isSuccess) {\n            (e.target as HTMLInputElement).value = this.tableData!.Index!.value! as string\n            EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value.`)\n          }\n        }\n      } else if (propertyName === 'Delay') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (checkPropertyValue(propertyName, propertyValue)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else if (value < 0) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value greater than or equal to zero.`)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Invalid property value.`)\n        }\n      } else if (propertyName === 'Zoom') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (checkPropertyValue(propertyName, propertyValue)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 10 and 400.`)\n        }\n      } else if (propertyName === 'DrawBuffer') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (checkPropertyValue(propertyName, propertyValue)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 16000 and 1048576.`)\n        }\n      } else if (propertyName === 'TransitionPeriod') {\n        if (this.isDecimalNumber(propertyValue)) {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n        } else if (checkPropertyValue(propertyName, propertyValue)) {\n          this.emitUpdateProperty(propertyName, value)\n        } else {\n          (e.target as HTMLInputElement).value = this.tableData![propertyName]!.value! as string\n          EventBus.$emit('showErrorPopup', true, 'invalid', `Could not set the ${propertyName} property. Invalid property value. Enter a value between 0 and 10000.`)\n        }\n      } else {\n        this.emitUpdateProperty(propertyName, value)\n      }\n    } else if (inputType === 'Boolean') {\n      if ((propertyName === 'Cancel' || propertyName === 'Default') && ((e.target as HTMLInputElement).value) === 'true') {\n        this.updateProperty({ propertyName: propertyName, value: true })\n      } else {\n        this.emitUpdateProperty(\n          propertyName,\n          (e.target as HTMLInputElement).value === 'true'\n        )\n      }\n    } else if (inputType === 'array') {\n      if ((e.target as HTMLInputElement).value !== '') {\n        if (propertyName === 'BorderStyle' && propertyValue === '1') {\n          this.emitUpdateProperty(\n            propertyName,\n            parseInt((e.target as HTMLInputElement).value)\n          )\n          this.emitUpdateProperty(\n            'SpecialEffect',\n            0\n          )\n        } else if (propertyName === 'SpecialEffect' && parseInt(propertyValue) > 0) {\n          this.emitUpdateProperty(\n            propertyName,\n            parseInt((e.target as HTMLInputElement).value)\n          )\n          this.emitUpdateProperty(\n            'BorderStyle',\n            0\n          )\n        } else {\n          this.emitUpdateProperty(\n            propertyName,\n            parseInt((e.target as HTMLInputElement).value)\n          )\n        }\n      }\n    }\n  }\n\n  isDecimalNumber (propValue : string) {\n    if (propValue.indexOf('.') > -1) {\n      EventBus.$emit('showErrorPopup', true, 'invalid', `Invalid property value.`)\n      return true\n    }\n    return false\n  }\n  handleConvertionImageToBase64 (e: Event) {\n    let that = this\n    const reader = new FileReader()\n    const fileInput = (e.target as HTMLInputElement)\n    const filePath = fileInput.value\n    let allowedExtensions\n    // Allowed file type\n    if (fileInput.name === 'Picture') {\n      allowedExtensions = /(\\.jpg|\\.jpeg|\\.bmp|\\.ico|\\.gif)$/i\n    } else {\n      allowedExtensions = /(\\.bmp|\\.ico|\\.gif)$/i\n    }\n    if (!allowedExtensions.exec(filePath)) {\n      fileInput.value = ''\n      EventBus.$emit('showErrorPopup', true, 'invalid', 'Invalid Picture')\n      return false\n    } else {\n      if (fileInput.files && fileInput.files[0]) {\n        reader.onload = function (e) {\n          that.emitUpdateProperty(fileInput.name as keyof controlProperties, reader.result)\n        }\n        reader.readAsDataURL(fileInput.files[0])\n      }\n    }\n  }\n\n  emitFont (tempVal: font) {\n    this.emitUpdateProperty('Font', tempVal)\n  }\n  colorPaletteProp (selectedValue: ISelectedColoPaletteValue) {\n    this.emitUpdateProperty(selectedValue.propertyName as keyof controlProperties, selectedValue.propertyValue)\n  }\n}\n</script>\n\n<style scoped>\n.node {\n  text-align: left;\n}\ntable {\n  margin-right: 0%;\n  width: 100%;\n  border: 1px solid black;\n  border-collapse: collapse;\n  color: black;\n}\nth,\ntd {\n  text-align: left;\n  font-size: 11px;\n  margin-right: 0%;\n  width: fit-content;\n  border: 1px solid black;\n  border-collapse: collapse;\n  color: black;\n}\nth {\n  width: 120%;\n  font-size: 12px;\n}\n.form-control {\n  float: left;\n  width: 280px;\n  cursor: pointer;\n  background-color: rgb(190, 185, 185);\n}\nlabel {\n  float: left;\n}\nselect {\n  width: 100%;\n  padding: 1px 2px;\n}\ninput {\n  width: 100%;\n}\n.btn-group .button {\n  border: none;\n  color: black;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 12px;\n  cursor: pointer;\n}\n.lefttd {\n  width: 120px;\n}\n</style>\n"]}]}