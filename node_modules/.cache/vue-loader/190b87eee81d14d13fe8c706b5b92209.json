{"remainingRequest":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/FDListBox/index.vue?vue&type=style&index=0&id=68d2befa&scoped=true&lang=css&","dependencies":[{"path":"/home/mobiotics/Projects/formcontrols/src/FormDesigner/components/atoms/FDListBox/index.vue","mtime":1610544258554},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/mobiotics/Projects/formcontrols/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5saXN0U3R5bGUgewogIHdpZHRoOiAyMDBweDsKICBoZWlnaHQ6IDIwMHB4OwogIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTsKICBib3JkZXI6IDFweCBzb2xpZCBncmF5OwogIG92ZXJmbG93OiBhdXRvOwogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgLyogYm94LXNoYWRvdzogLTFweCAtMXB4IGxpZ2h0Z3JheTsgKi8KfQoubGlzdC1vdXRlciB7CiAgYm9yZGVyOiAwLjFweCBzb2xpZCBsaWdodGdyYXk7CiAgd2lkdGg6IDE2NHB4OwogIGhlaWdodDogMTMwcHg7CiAgb3ZlcmZsb3cteTogYXV0bzsKICBib3gtc2hhZG93OiAtMXB4IC0xcHggZ3JleTsKfQoudHIgewogIG91dGxpbmU6IG5vbmU7CiAgZGlzcGxheTogZmxleDsKfQoudWwgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOwogIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTsKICBtYXJnaW4tYmxvY2stc3RhcnQ6IDBlbTsKICBtYXJnaW4tYmxvY2stZW5kOiAwZW07CiAgbWFyZ2luLWlubGluZS1zdGFydDogMHB4OwogIG1hcmdpbi1pbmxpbmUtZW5kOiAwcHg7CiAgcGFkZGluZy1pbmxpbmUtc3RhcnQ6IDBweDsKfQoubGkgewogIC8qIHBhZGRpbmc6IDNweDsgKi8KICBtYXJnaW46IDFweDsKICB0ZXh0LWFsaWduOiBsZWZ0OwogIGZvbnQtc2l6ZTogMTRweDsKICBoZWlnaHQ6IDE2cHg7CiAgYm9yZGVyOiAwLjVweCBzb2xpZCB3aGl0ZTsKICBjdXJzb3I6IHBvaW50ZXI7Cn0KLmxpOmhvdmVyIHsKICBtYXJnaW46IDFweDsKICBib3JkZXItY29sb3I6IHJnYig1MiwgNTIsIDI1NSk7CiAgYm9yZGVyLXJhZGl1czogMnB4OwogIGJhY2tncm91bmQtY29sb3I6IHJnYig1OSwgMTIyLCAyMzEpOwp9Ci5mYSB7CiAgbWFyZ2luLWxlZnQ6IDRweDsKICBtYXJnaW4tdG9wOiAzcHg7Cn0KLnNwYW4gewogIC8qIG1hcmdpbjogNHB4OyAgKi8KICBtYXJnaW4tbGVmdDogN3B4OwogIG1hcmdpbi10b3A6IDBweDsKICBmb250LWZhbWlseTogQXJpYWwsIEhlbHZldGljYSwgc2Fucy1zZXJpZjsKfQouZGl2IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMWZyOwp9Ci5saXN0Ym94IHsKICBkaXNwbGF5OiBncmlkOwogIGdyaWQtdGVtcGxhdGUtY29sdW1uczogMTAwJTsKICBoZWlnaHQ6IDEwMHB4OwogIHdpZHRoOiAzMDBweDsKICBiYWNrZ3JvdW5kLWNvbG9yOiBsaWdodGdyYXk7CiAgYm9yZGVyOiAxcHggc29saWQgZ3JheTsKfQouY29sdW1uSGVhZHMgewogIGhlaWdodDogMTkuMnB4OwogIGJvcmRlcjogMXB4IHNvbGlkIGJsYWNrOwogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOwp9Ci5vcHRpb25zSXRlbXMgewogIGRpc3BsYXk6IGdyaWQ7CiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxMDAlOwp9Ci50YWJsZS1zdHlsZSB7CiAgd2lkdGg6IDEwMCU7Cn0KLnRoZWFkQ2xhc3MgewogIGJvcmRlci1ib3R0b206IDFweCBzb2xpZDsKICB3aGl0ZS1zcGFjZTogbm93cmFwOwp9Ci50ZENsYXNzIHsKICB3aWR0aDogMTVweDsKICBib3JkZXItcmlnaHQ6IDFweCBzb2xpZDsKfQoudGRDbGFzc0luIHsKICB3aWR0aDogNDBweDsKfQouaW5wdXRDbGFzcyB7CiAgbWFyZ2luOiAwOwp9Ci50aGVhZCB7CiAgZGlzcGxheTogZmxleDsKfQo="},{"version":3,"sources":["index.vue"],"names":[],"mappingsyiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/FormDesigner/components/atoms/FDListBox","sourcesContent":["<template>\n  <div\n    class=\"listStyle\"\n    :style=\"listStyleObj\"\n    :title=\"properties.ControlTipText\"\n    @click.stop=\"listBoxClick\"\n    @mousedown=\"controlEditMode\"\n    :tabindex=\"properties.TabIndex\"\n    @keydown=\"forMatchEntry\"\n    v-on=\"eventStoppers()\"\n    @keydown.esc=\"setContentEditable($event, false)\"\n  >\n    <div class=\"table-style\" :style=\"tableStyleObj\" ref=\"listBoxTableRef\" v-if=\"properties.RowSource !== ''\">\n      <div v-if=\"properties.ColumnHeads === true\" class=\"theadClass\">\n        <div class=\"thead\">\n          <div\n            :style=\"tdStyleObj\"\n            v-if=\"properties.ListStyle === 1\"\n            class=\"tdClass\"\n          ></div>\n          <template v-for=\"(a, columnIndex) in extraDatas.ColumnHeadsValues\">\n            <div\n              v-if=\"\n                columnIndex < properties.ColumnCount ||\n                properties.ColumnCount === -1\n              \"\n              :key=\"columnIndex\"\n              :style=\"updateColHeads(columnIndex)\"\n            >\n              {{ a }}\n            </div>\n          </template>\n        </div>\n      </div>\n      <!-- <div v-else></div> -->\n      <div class=\"table-body\">\n        <div\n          :tabindex=\"index\"\n          class=\"tr\"\n          ref=\"listStyleRef\"\n          v-for=\"(item, index) of extraDatas.RowSourceData\"\n          :key=\"index\"\n          @mouseenter.stop=\"handleDrag\"\n          @keydown.esc=\"releaseEditMode\"\n          @blur.stop=\"clearMatchEntry\"\n          @keydown.stop=\"handleExtendArrowKeySelect\"\n          @mousedown.stop=\"\n            isRunMode || isEditMode ? handleMousedown($event) : ''\n          \"\n        >\n          <div\n            :style=\"tdStyleObj\"\n            class=\"tdClassIn\"\n            v-if=\"\n              (properties.ListStyle === 1 && properties.ColumnCount > 0) ||\n              (properties.ListStyle === 1 && properties.ColumnCount === -1)\n            \"\n          >\n            <input\n              :name=\"properties.MultiSelect === 2 ? 'checkbox' : 'radio'\"\n              :type=\"\n                properties.MultiSelect === 1 || properties.MultiSelect === 2\n                  ? 'checkbox'\n                  : 'radio'\n              \"\n              @click.prevent.stop\n              class=\"inputClass\"\n            />\n          </div>\n          <div\n            class=\"column-item\"\n            v-for=\"(i, index) in item\"\n            :key=\"index\"\n            :style=\"[updateColumnWidths(index),styleColumnObj]\"\n          >\n            <template\n              v-if=\"\n                index < properties.ColumnCount || properties.ColumnCount === -1\n              \"\n              >{{ i }}</template\n            >\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  Component,\n  Prop,\n  Model,\n  Emit,\n  Mixins,\n  Watch,\n  Ref\n} from 'vue-property-decorator'\nimport FdControlVue from '@/api/abstract/FormDesigner/FdControlVue'\nimport { EventBus } from '@/FormDesigner/event-bus'\n\n@Component({\n  name: 'FDListBox'\n})\nexport default class FDListBox extends Mixins(FdControlVue) {\n  @Ref('listStyleRef') listStyleRef: HTMLDivElement[];\n  @Ref('listBoxTableRef') listBoxTableRef!: HTMLDivElement;\n  @Prop() isActivated: boolean;\n  checkedvalue: boolean;\n  $el: HTMLDivElement;\n  handleMousedown (e: MouseEvent) {\n    if (this.properties.RowSource !== '') {\n      if (\n        e.target instanceof HTMLDivElement ||\n      e.target instanceof HTMLTableRowElement ||\n      e.target instanceof HTMLInputElement\n      ) {\n        this.tempListBoxComboBoxEvent = e\n        const targetElement = e.target\n        const tempData = targetElement!.parentElement!\n          .children[0] as HTMLDivElement\n        const tempDataOption = targetElement.parentElement!\n          .children[1] as HTMLDivElement\n        const tempPath = e.composedPath()\n        targetElement.focus()\n        let data = targetElement.innerText\n        let splitData = data.replace(/\\t/g, ' ').split(' ')\n\n        targetElement.focus()\n        if (this.properties.Enabled && this.properties.Locked === false) {\n          if (this.properties.MultiSelect === 0) {\n            this.clearOptionBGColorAndChecked(e)\n            this.setOptionBGColorAndChecked(e)\n          } else if (this.properties.MultiSelect === 1) {\n            this.setOptionBGColorAndChecked(e)\n          } else if (this.properties.MultiSelect === 2) {\n            if (e.ctrlKey === true) {\n              if (targetElement.tagName === 'INPUT') {\n                this.setOptionBGColorAndChecked(e)\n              } else {\n                this.setOptionBGColorAndChecked(e)\n              }\n            } else if (e.shiftKey === true && this.properties.Value !== '') {\n              let startPoint = 0\n              let endPoint = 0\n              for (let i = 0; i < tempPath.length; i++) {\n                const ele = tempPath[i] as HTMLDivElement\n                if (ele.className === 'table-body') {\n                // extend points start and end\n                  for (let j = 0; j < ele.childNodes.length; j++) {\n                    const cd = ele.childNodes[j] as HTMLDivElement\n                    if (cd.innerText === this.properties.Value) {\n                      startPoint = j + 1\n                    }\n                    if (cd.innerText === targetElement.innerText) {\n                      endPoint = j\n                    }\n                  }\n                  // upward selection start and end swap\n                  if (startPoint > endPoint) {\n                    let temp = startPoint\n                    startPoint = endPoint\n                    endPoint = temp\n                  }\n                  // setting selection\n                  for (let k = startPoint; k <= endPoint; k++) {\n                    const node = ele.childNodes[k] as HTMLDivElement\n                    const tempNode = node.childNodes[0]\n                      .childNodes[0] as HTMLInputElement\n                    node.style.backgroundColor = 'rgb(59, 122, 231)'\n                    if (this.properties.ListStyle === 1 && !tempNode.checked) {\n                    // tempNode.checked = !tempNode.checked\n                      tempNode.checked = true\n                    }\n                  }\n                  break\n                }\n              }\n            }\n\n            if (this.properties.ControlSource !== '') {\n              this.updateDataModel({\n                propertyName: 'Text',\n                value: this.selectionData[0]\n              })\n              this.updateDataModel({\n                propertyName: 'Value',\n                value: this.selectionData[0]\n              })\n            }\n            this.clearOptionBGColorAndChecked(e)\n            this.setOptionBGColorAndChecked(e)\n          }\n        }\n        if (this.properties.MultiSelect === 0) {\n          for (let i = 0; i < this.extraDatas.RowSourceData!.length; i++) {\n            if (this.listStyleRef[i].style.backgroundColor !== '') {\n              const text = this.extraDatas.RowSourceData![i][0]\n              this.updateDataModel({ propertyName: 'Text', value: text })\n              const x = this.extraDatas.RowSourceData![i][this.properties.BoundColumn! - 1]\n              this.updateDataModel({ propertyName: 'Value', value: x })\n            }\n          }\n        } else {\n          this.updateDataModel({ propertyName: 'Text', value: '' })\n          this.updateDataModel({ propertyName: 'Value', value: '' })\n        }\n        this.getSelectedStyle()\n      }\n    }\n  }\n  clearMatchEntry () {\n    this.updateDataModelExtraData({ propertyName: 'MatchData', value: '' })\n  }\n\n  getSelectedStyle () {\n    if (this.listStyleRef) {\n      for (let i = 0; i < this.listStyleRef.length; i++) {\n        if (this.listStyleRef[i].style.backgroundColor === 'rgb(59, 122, 231)') {\n          for (let j = 0; j < this.listStyleRef[i].children.length; j++) {\n            const a = this.listStyleRef[i].children[j] as HTMLDivElement\n            a.style.backgroundColor = 'rgb(59, 122, 231)'\n          }\n        } else if (this.listStyleRef[i].style.backgroundColor === '') {\n          for (let j = 0; j < this.listStyleRef[i].children.length; j++) {\n            const a = this.listStyleRef[i].children[j] as HTMLDivElement\n            a.style.backgroundColor = ''\n          }\n        }\n      }\n    }\n  }\n  /**\n   * @description style object is passed to :style attribute in div tag\n   * dynamically changing the styles of the component based on properties\n   * @function listStyleObj\n   */\n  protected get listStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    let display = ''\n    if (this.isRunMode) {\n      display = controlProp.Visible ? 'inline-block' : 'none'\n    } else {\n      display = 'inline-block'\n    }\n    return {\n      backgroundColor: controlProp.BackColor,\n      borderColor: controlProp.BorderStyle === 1 ? controlProp.BorderColor : '',\n      cursor:\n        controlProp.MousePointer !== 0 || controlProp.MouseIcon !== ''\n          ? this.getMouseCursorData\n          : 'default',\n      borderLeft:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 2\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 3\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 4\n                ? '0.5px solid gray'\n                : '',\n      borderRight:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 1\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 4\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 3\n                ? '0.5px solid gray'\n                : '',\n      borderTop:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 2\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 3\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 4\n                ? '0.5px solid gray'\n                : '',\n      borderBottom:\n        controlProp.BorderStyle === 1\n          ? '1px solid ' + controlProp.BorderColor\n          : controlProp.SpecialEffect === 1\n            ? '2px solid gray'\n            : controlProp.SpecialEffect === 4\n              ? '1.5px solid gray'\n              : controlProp.SpecialEffect === 3\n                ? '0.5px solid gray'\n                : '',\n      left: `${controlProp.Left}px`,\n      width: `${controlProp.Width}px`,\n      height: `${controlProp.Height}px`,\n      top: `${controlProp.Top}px`,\n      display: display\n    }\n  }\n\n  get styleColumnObj () {\n    const controlProp = this.properties\n    const font: font = controlProp.Font\n      ? controlProp.Font\n      : {\n        FontName: 'Arial',\n        FontSize: 10,\n        FontItalic: true,\n        FontBold: true,\n        FontUnderline: true,\n        FontStrikethrough: true\n      }\n    return {\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\n      fontSize: `${font.FontSize}px`,\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\n      textDecoration:\n        font.FontStrikethrough === true && font.FontUnderline === true\n          ? 'underline line-through'\n          : font.FontUnderline\n            ? 'underline'\n            : font.FontStrikethrough\n              ? 'line-through'\n              : '',\n      textUnderlinePosition: 'under',\n      fontWeight: font.FontBold\n        ? 'bold'\n        : font.FontStyle !== ''\n          ? this.tempWeight\n          : '',\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : ''\n\n    }\n  }\n  /**\n   * @description style object is passed to :style attribute in table tag\n   * dynamically changing the styles of the component based on properties\n   * @function tableStyleObj\n   */\n  protected get tableStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    const font: font = controlProp.Font\n      ? controlProp.Font\n      : {\n        FontName: 'Arial',\n        FontSize: 10,\n        FontItalic: true,\n        FontBold: true,\n        FontUnderline: true,\n        FontStrikethrough: true\n      }\n    return {\n      borderCollapse: 'collapse',\n      tableLayout: 'fixed',\n      color: controlProp.ForeColor,\n      fontFamily: font.FontStyle! !== '' ? this.setFontStyle : font.FontName!,\n      fontSize: `${font.FontSize}px`,\n      fontStyle: font.FontItalic || this.isItalic ? 'italic' : '',\n      textDecoration:\n        font.FontStrikethrough === true && font.FontUnderline === true\n          ? 'underline line-through'\n          : font.FontUnderline\n            ? 'underline'\n            : font.FontStrikethrough\n              ? 'line-through'\n              : '',\n      textUnderlinePosition: 'under',\n      fontWeight: font.FontBold\n        ? 'bold'\n        : font.FontStyle !== ''\n          ? this.tempWeight\n          : '',\n      fontStretch: font.FontStyle !== '' ? this.tempStretch : '',\n      width:\n        controlProp.ColumnWidths === ''\n          ? '100%'\n          : `${controlProp.Width}px` +\n            parseInt(controlProp.ColumnWidths!) +\n            'px',\n      display: this.properties.ColumnCount === 0 ? 'none' : ''\n    }\n  }\n\n  /**\n   * @description style object is passed to :style attribute in td tag\n   * dynamically changing the styles of the component based on properties\n   * @function tdStyleObj\n   */\n  protected get tdStyleObj (): Partial<CSSStyleDeclaration> {\n    const controlProp = this.properties\n    return {\n      textAlign:\n        controlProp.TextAlign === 0\n          ? 'left'\n          : controlProp.TextAlign === 2\n            ? 'right'\n            : 'center'\n    }\n  }\n\n  /**\n   * @description watches changes in properties for Value\n   * @function ValueData\n   * @param oldVal previous properties data\n   * @param newVal  new/changed properties data\n   */\n  @Watch('properties.Value', { deep: true })\n  ValueData (newVal: string, oldVal: string) {\n    if (this.properties.RowSource !== '') {\n      if (newVal !== '' && this.properties.MultiSelect === 0) {\n        if (\n        this.properties.BoundColumn! > 0 &&\n        this.properties.BoundColumn! < this.extraDatas.RowSourceData!.length\n        ) {\n          let tempData = [...this.extraDatas.RowSourceData!]\n          let tempBoundColumn = this.properties.BoundColumn! - 1\n          for (let i = 0; i < this.extraDatas.RowSourceData!.length; i++) {\n            if (tempData[i][tempBoundColumn] === newVal) {\n              this.clearOptionBGColorAndChecked(this.tempListBoxComboBoxEvent)\n              this.listStyleRef[i].style.backgroundColor = 'rgb(59, 122, 231)'\n              this.setOptionBGColorAndChecked(\n              this.tempListBoxComboBoxEvent as MouseEvent\n              )\n            }\n          }\n          if (tempData![0][this.properties.BoundColumn! - 1] === newVal) {\n            this.updateDataModel({ propertyName: 'Value', value: newVal })\n          }\n        } else {\n          return undefined\n        }\n      } else {\n        this.updateDataModel({ propertyName: 'Value', value: '' })\n      }\n    } else {\n      this.updateDataModel({ propertyName: 'Value', value: '' })\n    }\n  }\n\n  /**\n   * @description mounted initializes the values which are required for the component\n   */\n  mounted () {\n    this.$el.focus()\n    var event = new MouseEvent('mousedown.stop')\n    if (this.properties.RowSource !== '') {\n      const initialRowSourceData = this.extraDatas.RowSourceData!\n      this.updateDataModel({ propertyName: 'ControlSource', value: '' })\n      if (initialRowSourceData && initialRowSourceData.length === 0) {\n        this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\n      } else {\n        this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\n      }\n    }\n  }\n\n  /**\n   * @description watches changes in properties for MultiSelect\n   * @function multiSelectCheck\n   * @param oldVal previous properties data\n   * @param newVal  new/changed properties data\n   */\n  @Watch('properties.MultiSelect', { deep: true })\n  multiSelectCheck (newVal: number, oldVal: number) {\n    if (newVal === 1 || newVal === 2) {\n      this.updateDataModel({ propertyName: 'Value', value: '' })\n      this.updateDataModel({ propertyName: 'Text', value: '' })\n    }\n    if (this.tempListBoxComboBoxEvent) {\n      this.clearOptionBGColorAndChecked(this.tempListBoxComboBoxEvent)\n    }\n  }\n\n  /**\n   * @description watches changes in properties for ListStyle\n   * @function listCheck\n   * @param oldVal previous properties data\n   * @param newVal  new/changed properties data\n   */\n  @Watch('properties.ListStyle', { deep: true })\n  listCheck (newVal: number, oldVal: number) {\n    this.clearOptionBGColorAndChecked(this.tempListBoxComboBoxEvent)\n  }\n\n  @Watch('isEditMode', { deep: true })\n  isEditCheck (newVal: boolean, oldVal: boolean) {\n    if (this.isEditMode) {\n      this.$el.click()\n    }\n  }\n\n  forMatchEntry (event: KeyboardEvent) {\n    if (event.key === 'Enter' && event.keyCode === 13) {\n      this.setContentEditable(event, true)\n    }\n    if (this.isEditMode) {\n      this.listStyleRef[0].click()\n    }\n    if (event.key === 'Escape' && event.keyCode === 27) {\n      this.releaseEditMode(event)\n    }\n    if (event.key === 'Delete') {\n      this.deleteItem(event)\n    }\n  }\n\n  @Watch('properties.RowSource')\n  rowSourceValidate () {\n    const initialRowSourceData = this.extraDatas.RowSourceData!\n    this.updateDataModel({ propertyName: 'ControlSource', value: '' })\n    if (initialRowSourceData && initialRowSourceData.length === 0) {\n      this.updateDataModel({ propertyName: 'TopIndex', value: -1 })\n    } else {\n      this.updateDataModel({ propertyName: 'TopIndex', value: 0 })\n    }\n  }\n\n  @Watch('properties.ControlSource')\n  controlSourceUpdate () {\n    if (this.properties.ControlSource !== '') {\n      for (let i = 0; i < this.extraDatas.RowSourceData!.length; i++) {\n        this.listStyleRef[i].style.backgroundColor = ''\n        if (\n          this.extraDatas.RowSourceData![i][this.properties.BoundColumn! - 1] === this.extraDatas.ControlSourceValue!\n        ) {\n          const listRow = this.listStyleRef[i]\n          listRow.style.backgroundColor = 'rgb(59, 122, 231)'\n        }\n      }\n    }\n  }\n  releaseEditMode (event: KeyboardEvent) {\n    this.$el.focus()\n    this.setContentEditable(event, false)\n  }\n  eventStoppers () {\n    const eventStop = (event: Event) => event.stopPropagation()\n    return this.isEditMode === false\n      ? null\n      : {\n        keydown: eventStop\n      }\n  }\n  listBoxClick (e: MouseEvent) {\n    this.selectedItem(e)\n    if (!this.isActivated) {\n      EventBus.$emit('focusUserForm')\n    }\n  }\n}\n</script>\n\n<style scoped>\n.listStyle {\n  width: 200px;\n  height: 200px;\n  background-color: lightgray;\n  border: 1px solid gray;\n  overflow: auto;\n  box-sizing: border-box;\n  /* box-shadow: -1px -1px lightgray; */\n}\n.list-outer {\n  border: 0.1px solid lightgray;\n  width: 164px;\n  height: 130px;\n  overflow-y: auto;\n  box-shadow: -1px -1px grey;\n}\n.tr {\n  outline: none;\n  display: flex;\n}\n.ul {\n  display: grid;\n  grid-template-columns: 100%;\n  list-style-type: none;\n  margin-block-start: 0em;\n  margin-block-end: 0em;\n  margin-inline-start: 0px;\n  margin-inline-end: 0px;\n  padding-inline-start: 0px;\n}\n.li {\n  /* padding: 3px; */\n  margin: 1px;\n  text-align: left;\n  font-size: 14px;\n  height: 16px;\n  border: 0.5px solid white;\n  cursor: pointer;\n}\n.li:hover {\n  margin: 1px;\n  border-color: rgb(52, 52, 255);\n  border-radius: 2px;\n  background-color: rgb(59, 122, 231);\n}\n.fa {\n  margin-left: 4px;\n  margin-top: 3px;\n}\n.span {\n  /* margin: 4px;  */\n  margin-left: 7px;\n  margin-top: 0px;\n  font-family: Arial, Helvetica, sans-serif;\n}\n.div {\n  display: grid;\n  grid-template-columns: 1fr;\n}\n.listbox {\n  display: grid;\n  grid-template-columns: 100%;\n  height: 100px;\n  width: 300px;\n  background-color: lightgray;\n  border: 1px solid gray;\n}\n.columnHeads {\n  height: 19.2px;\n  border: 1px solid black;\n  display: grid;\n  grid-template-columns: 100%;\n}\n.optionsItems {\n  display: grid;\n  grid-template-columns: 100%;\n}\n.table-style {\n  width: 100%;\n}\n.theadClass {\n  border-bottom: 1px solid;\n  white-space: nowrap;\n}\n.tdClass {\n  width: 15px;\n  border-right: 1px solid;\n}\n.tdClassIn {\n  width: 40px;\n}\n.inputClass {\n  margin: 0;\n}\n.thead {\n  display: flex;\n}\n</style>\n"]}]}